var path = require("path");

/**
 * GET /login/login.htm;jsessionid=69C1B054FE222DF6D4657F037DB1CFFF?fromURI=/oauth2/v1/authorize/redirect?okta_key=8bvEcTRtJDuDx8zG1deaIePbIDNBauZFGX5jz5Xl7UE
 *
 * host: rain.okta1.com:1802
 * connection: keep-alive
 * user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0
 * accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,* / *;q=0.8
 * accept-encoding: gzip
 * accept-language: en-US
 * cookie: t=default; DT=DI09dwIAl6ESbSY9ZSYutykqA; JSESSIONID=69C1B054FE222DF6D4657F037DB1CFFF
 * cache-control: no-cache, no-store
 * pragma: no-cache
 */

module.exports = function (req, res) {
  res.statusCode = 200;

  res.setHeader("server", "Apache-Coyote/1.1");
  res.setHeader("x-okta-request-id", "reqPf8Y1fRCSxyEpl1zaNDBfQ");
  res.setHeader("p3p", "CP=\"HONK\"");
  res.setHeader("set-cookie", ["sid=\"\"; Expires=Thu, 01-Jan-1970 00:00:10 GMT; Path=/","t=default; Path=/","sid=\"\"; Expires=Thu, 01-Jan-1970 00:00:10 GMT; Path=/","JSESSIONID=69C1B054FE222DF6D4657F037DB1CFFF; Path=/"]);
  res.setHeader("x-rate-limit-limit", "850");
  res.setHeader("x-rate-limit-remaining", "849");
  res.setHeader("x-rate-limit-reset", "1502406948");
  res.setHeader("x-okta-backend", "albatross");
  res.setHeader("cache-control", "no-cache, no-store");
  res.setHeader("pragma", "no-cache");
  res.setHeader("expires", "0");
  res.setHeader("x-frame-options", "SAMEORIGIN");
  res.setHeader("x-ua-compatible", "IE=edge");
  res.setHeader("content-type", "text/html;charset=utf-8");
  res.setHeader("content-language", "en");
  res.setHeader("transfer-encoding", "chunked");
  res.setHeader("date", "Thu, 10 Aug 2017 23:14:48 GMT");

  res.setHeader("x-yakbak-tape", path.basename(__filename, ".js"));

  res.write(new Buffer("", "base64"));
  res.write(new Buffer("Y3RVcmkgPSBiYXNlVXJsICsgZnJvbVVyaTsKICB9CiAgCgogIHZhciBjdXN0b21CdXR0b25zOwogIAoKICB2YXIgY3VzdG9tTGlua3MgPSBbXTsKICAKCiAgdmFyIGxpbmtQYXJhbXM7CiAgCgogIHZhciBsb2dpblBhZ2VDb25maWcgPSB7CiAgICBmcm9tVXJpOiBmcm9tVXJpLAogICAgcmVwb3N0OiByZXBvc3QsCiAgICByZWRpcmVjdFVyaTogcmVkaXJlY3RVcmksCiAgICBpc01vYmlsZUNsaWVudExvZ2luOiBmYWxzZSwKICAgIGlzTW9iaWxlU1NPOiBmYWxzZSwKICAgIGxpbmtQYXJhbXM6IGxpbmtQYXJhbXMsCiAgICBoYXNDaHJvbWVPU0ZlYXR1cmU6IGZhbHNlLAogICAgc2hvd0xpbmtUb0FwcFN0b3JlOiBmYWxzZSwKICAgIHB1Ymxpc2hUb0FjY291bnRDaG9vc2VyOiBwdWJsaXNoVG9BY2NvdW50Q2hvb3NlciwKICAgIGFjY291bnRDaG9vc2VyRGlzY292ZXJ5VXJsOiBhY2NvdW50Q2hvb3NlckRpc2NvdmVyeVVybCwKICAgIGF2b2lkRG91YmxlUmVxdWVzdE1TSW9zQXBwOiBhdm9pZERvdWJsZVJlcXVlc3RNU0lvc0FwcCwKICAgIHByZXZlbnRCcm93c2VyRnJvbVNhdmluZ09rdGFQYXNzd29yZDogcHJldmVudEJyb3dzZXJGcm9tU2F2aW5nT2t0YVBhc3N3b3JkLAogICAgZW5hYmxlVXJsRml4Rm9yRW1iZWRkZWRCcm93c2VyczogZW5hYmxlVXJsRml4Rm9yRW1iZWRkZWRCcm93c2VycywKICAgIGxvZ2luUGFnZVVybFJlZGlyZWN0Og==", "base64"));
  res.write(new Buffer("IGxvZ2luUGFnZVVybFJlZGlyZWN0LAogICAgc2lnbkluOiB7CiAgICAgIGVsOiAnI3NpZ25pbi1jb250YWluZXInLAogICAgICBiYXNlVXJsOiBiYXNlVXJsLAogICAgICBsb2dvOiAnaHR0cDovL3JhaW4ub2t0YTEuY29tOjE4MDIvYXNzZXRzL2ltZy9sb2dvcy9va3RhLWxvZ28uMDBiMjhlNTUyNTczODk5ZTE1ZmE2ZTc3Mjc4NzU5ZDUucG5nJywKICAgICAgbG9nb1RleHQ6ICdSYWluXHgyRENsb3VkNTknLAogICAgICBoZWxwU3VwcG9ydE51bWJlcjogb3JnU3VwcG9ydFBob25lTnVtYmVyLAogICAgICBzdGF0ZVRva2VuOiBzdGF0ZVRva2VuLAogICAgICB1c2VybmFtZTogdXNlcm5hbWUsCiAgICAgIHNpZ25PdXRMaW5rOiBzaWduT3V0VXJsLAoKICAgICAgZmVhdHVyZXM6IHsKICAgICAgICByb3V0ZXI6IHRydWUsCiAgICAgICAgc2VjdXJpdHlJbWFnZTogc2VjdXJpdHlJbWFnZSwKICAgICAgICByZW1lbWJlck1lOiByZW1lbWJlck1lLAogICAgICAgIGF1dG9QdXNoOiBhdXRvUHVzaCwKICAgICAgICBzbXNSZWNvdmVyeTogc21zUmVjb3ZlcnksCiAgICAgICAgY2FsbFJlY292ZXJ5OiBjYWxsUmVjb3ZlcnksCiAgICAgICAgd2luZG93c1ZlcmlmeTogd2luZG93c1ZlcmlmeSwKICAgICAgICBzZWxmU2VydmljZVVubG9jazogc2VsZlNlcnZpY2VVbmxvY2ssCiAgICAgICAgbXVsdGlPcHRpb25hbEZhY3RvckVucm9sbDogdHJ1ZSwKICAgICAgICBkZXZpY2VGaW5nZXJwcmludGluZzogZmFsc2UsCiAgICAgICAgaGlkZVNpZ25PdXRMaW5rSW5NRkE6IGhpZGVTaWduT3V0Rm9yTUZBLAogICAgICAgIGN1c3RvbUV4cGlyZWRQYXNzd29yZDogY3VzdG9tRXhwaXJlZFBhc3N3b3JkCiAgICAgIH0sCgogICAgICBhc3NldHM6IHsKICAgICAgICBiYXNlVXJsOiBva3RhLmNkblVybEhvc3RuYW1lICsgJy9hc3NldHMvanMvbXZjL2xvZ2lucGFnZS9pMThuJwogICAgICB9LAoKICAgICAgbGFuZ3VhZ2U6IG9rdGEubG9jYWxlLAogICAgICBpMThuOiB7fSwKCiAgICAgIGN1c3RvbUJ1dHRvbnM6IGN1c3RvbUJ1dHRvbnMsCgogICAgICBoZWxwTGlua3M6IHsKICAgICAgICBoZWxwOiAnJywKICAgICAgICBmb3Jnb3RQYXNzd29yZDogJycsCiAgICAgICAgdW5sb2NrOiAnJywKICAgICAgICBjdXN0b206IGN1c3RvbUxpbmtzCiAgICAgIH0KICAgIH0KICB9OwoKICBsb2dpblBhZ2VDb25maWcuc2lnbkluLmkxOG5bb2t0YS5sb2NhbGVdID0gewogICAgJ3ByaW1hcnlhdXRoLnVzZXJuYW1lLnBsYWNlaG9sZGVyJzogdXNlcm5hbWVMYWJlbCwKICAgICdwcmltYXJ5YXV0aC51c2VybmFtZS50b29sdGlwJzogdXNlcm5hbWVJbmxpbmVMYWJlbCwKICAgICdwcmltYXJ5YXV0aC5wYXNzd29yZC5wbGFjZWhvbGRlcic6IHBhc3N3b3JkTGFiZWwsCiAgICAncHJpbWFyeWF1dGgucGFzc3dvcmQudG9vbHRpcCc6IHBhc3N3b3JkSW5saW5lTGFiZWwsCiAgICAncHJpbWFyeWF1dGgudGl0bGUnOiBzaWduaW5MYWJlbCwKICAgICdmb3Jnb3RwYXNzd29yZCc6IGZvcmdvdHBhc3N3b3JkTGFiZWwsCiAgICAndW5sb2NrYWNjb3VudCc6IHVubG9ja2FjY291bnRMYWJlbCwKICAgICdoZWxwJzogaGVscExhYmVsLAogICAgJ25lZWRoZWxwJzogZm9vdGVySGVscFRpdGxlLAogICAgJ3Bhc3N3b3JkLmZvcmdvdC5lbWFpbC5vci51c2VybmFtZS5wbGFjZWhvbGRlcic6IHJlY292ZXJ5Rmxvd1BsYWNlaG9sZGVyLAogICAgJ3Bhc3N3b3JkLmZvcmdvdC5lbWFpbC5vci51c2VybmFtZS50b29sdGlwJzogcmVjb3ZlcnlGbG93UGxhY2Vob2xkZXIsCiAgICAnYWNjb3VudC51bmxvY2suZW1haWwub3IudXNlcm5hbWUucGxhY2Vob2xkZXInOiByZWNvdmVyeUZsb3dQbGFjZWhvbGRlciwKICAgICdhY2NvdW50LnVubG9jay5lbWFpbC5vci51c2VybmFtZS50b29sdGlwJzogcmVjb3ZlcnlGbG93UGxhY2Vob2xkZXIKICB9OwoKICBmdW5jdGlvbiBpc09sZFdlYkJyb3dzZXJDb250cm9sKCkgewogICAgLy8gV2Ugbm8gbG9uZ2VyIHN1cHBvcnQgSUU3LiBJZiB3ZSBzZWUgdGhlIE1TSUUgNy4wIGJyb3dzZXIgbW9kZSwgaXQncyBhIGdvb2Qgc2lnbmFsCiAgICAvLyB0aGF0IHdlJ3JlIGluIGEgd2luZG93cyBlbWJlZGRlZCBicm93c2VyLgogICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTVNJRSA3LjAnKSA9PT0gLTEpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIC8vIEJlY2F1c2UgdGhlIHVzZXJBZ2VudCBpcyB0aGUgc2FtZSBhY3Jvc3MgZW1iZWRkZWQgYnJvd3NlcnMsIHdlIHVzZSBmZWF0dXJlCiAgICAvLyBkZXRlY3Rpb24gdG8gc2VlIGlmIHdlJ3JlIHJ1bm5pbmcgb24gb2xkZXIgdmVyc2lvbnMgdGhhdCBkbyBub3Qgc3VwcG9ydCB1cGRhdGluZwogICAgLy8gdGhlIGRvY3VtZW50TW9kZSB2aWEgeC11YS1jb21wYXRpYmxlLgogICAgcmV0dXJuIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2I7CiAgfQoKICBmdW5jdGlvbiBpc0Fic29sdXRlVXJpKHVyaSkgewogICAgdmFyIHBhdCA9IC9eaHR0cHM/OlwvXC8vaTsKICAgIHJldHVybiBwYXQudGVzdCh1cmkpOwogIH0KCiAgdmFyIHVuc3VwcG9ydGVkQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29rdGEtc2lnbi1pbicpOwoKICAvLyBPbGQgdmVyc2lvbnMgb2YgV2ViQnJvd3NlciBDb250cm9scyAoc3BlY2lmaWNhbGx5LCBPbmVEcml2ZSkgcmVuZGVyIGluIElFNyBicm93c2VyCiAgLy8gbW9kZSwgd2l0aCBubyB3YXkgdG8gb3ZlcnJpZGUgdGhlIGRvY3VtZW50TW9kZS4gSW4gdGhpcyBjYXNlLCBpbmZvcm0gdGhlIHVzZXIgdGhleSBuZWVkCiAgLy8gdG8gdXBncmFkZS4KICBpZiAoaXNPbGRXZWJCcm93c2VyQ29udHJvbCgpKSB7CiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndW5zdXBwb3J0ZWQtb25lZHJpdmUnKS5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7CiAgICB1bnN1cHBvcnRlZENvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7CiAgfQogIGVsc2UgaWYgKCFuYXZpZ2F0b3IuY29va2llRW5hYmxlZCkgewogICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Vuc3VwcG9ydGVkLWNvb2tpZScpLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTsKICAgIHVuc3VwcG9ydGVkQ29udGFpbmVyLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTsKICB9CiAgZWxzZSB7CiAgICB1bnN1cHBvcnRlZENvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHVuc3VwcG9ydGVkQ29udGFpbmVyKTsKICAgIHJ1bkxvZ2luUGFnZShmdW5jdGlvbiAoKSB7CiAgICAgIGluaXRMb2dpblBhZ2UobG9naW5QYWdlQ29uZmlnKTsKICAgIH0pOwogIH0KCn0oKSk7Cjwvc2NyaXB0PgoKPC9ib2R5Pgo8L2h0bWw+Cg==", "base64"));
  res.end();

  return __filename;
};
