var path = require("path");

/**
 * GET /assets/js/mvc/loginpage/main-loginpage.pack.c671060fbf5f48a63eb447b6598635cc.js
 *
 * host: rain.okta1.com:1802
 * connection: keep-alive
 * user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.10; rv:48.0) Gecko/20100101 Firefox/48.0
 * accept: * / *
 * accept-encoding: gzip
 * accept-language: en-US
 * cookie: DT=DI09dwIAl6ESbSY9ZSYutykqA; t=default; JSESSIONID=69C1B054FE222DF6D4657F037DB1CFFF
 * cache-control: no-cache, no-store
 * pragma: no-cache
 */

module.exports = function (req, res) {
  res.statusCode = 200;

  res.setHeader("server", "Apache-Coyote/1.1");
  res.setHeader("accept-ranges", "bytes");
  res.setHeader("etag", "W/\"1782172-1502281784000\"");
  res.setHeader("last-modified", "Wed, 09 Aug 2017 12:29:44 GMT");
  res.setHeader("content-type", "text/javascript");
  res.setHeader("content-length", "1782172");
  res.setHeader("date", "Thu, 10 Aug 2017 23:14:48 GMT");

  res.setHeader("x-yakbak-tape", path.basename(__filename, ".js"));

  res.write(new Buffer("var initLoginPage =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/* eslint max-params: [2, 6], max-statements: [2, 30] */
	/* global google, module */

	var OktaSignIn = __webpack_require__(1),
	    Util = __webpack_require__(3),
	    AccountChooser = __webpack_require__(12),
	    initMobileSSO = __webpack_require__(13),
	    $ = __webpack_require__(4),
	    _ = __webpack_require__(8);

	__webpack_require__(14);

	module.exports = function (config) {

	  var username;
	  var isChromeOs = false;
	  var chromeOsAdd = $.Deferred();
	  var chromeOsComplete = $.Deferred();
	  var waitForChromeOsCallback = false;

	  function successFunc(res) {
	    // Mobile app extension
	    if (config.isMobileClientLogin) {
	      window.webkit.messageHandlers.loginMessage.postMessage({
	        token: res.session.token
	      });
	      return;
	    }

	    // SAML SP-init: Repost is necessary because sometimes the post params make
	    // the redirectUri too long (browsers accept around 2000 chars).
	    // This will no longer be necessary once we start caching the saml params.
	    if (config.repost) {
	      Util.postToUrl(config.signIn.baseUrl + '/login/sessionCookieRedirect?checkAccountSetupComplete=true&repost=true' + '&token=' + encodeURIComponent(res.session.token) +
	      // fromUri (relative url) is used rather than redirectUrl (absolute url) because
	      // currently only relative urls are reposted properly (using forward)
	      '&redirectUrl=' + encodeURIComponent(config.fromUri), $('body'));
	      return;
	    }

	    // OKTA-102217 HACK to fix new release of Microsoft apps for iOS 10, which trigger double request to this URL
	    //if (Util.userAgentIsIos10(navigator.userAgent)) {
	    if (config.avoidDoubleRequestMSIosApp && Util.userAgentIsIos10(navigator.userAgent)) {
	      hackRedirectWithPortAddedOrRemoved(res);
	      return;
	    }

	    // Normal flow: Navigate to the sessionCookieRedirect endpoint
	    res.session.setCookieAndRedirect(config.redirectUri);
	  }

	  function hackRedirectWithPortAddedOrRemoved(res) {
	    // Hack here is to append :80 or :443 to baseUrl (or remove it) and redirect to that base URL.
	    // For some reason, this prevents the double request caused by Microsoft apps for iOS 10 which invalidates the OTT
	    var hackHostnameUrl = Util.baseUrlWithPortAddedOrRemoved(config.signIn.baseUrl);

	    // URL construction logic courtesy of setCookieAndRedirect()'s impl
	    // Appending 'modifiedBaseUrl=true' for tracking purposes
	    var queryParams = Util.toQueryParams({
	      'checkAccountSetupComplete': true,
	      'token': res.session.token,
	      'redirectUrl': config.redirectUri,
	      'modifiedBaseUrl': true });
	    var hackRedirectUrl = hackHostnameUrl + '/login/sessionCookieRedirect' + queryParams;

	    window.location = hackRedirectUrl;
	  }

	  function notifyAccountChooser(res, accountChooser) {
	    var success = _.partial(successFunc, res);
	    if (accountChooser) {
	      accountChooser.login(res.user.profile, success);
	    } else {
	      // ENG_ACCOUNT_CHOOSER_PUBLISH feature is not enabled - perform success
	      // actions immediately.
	      success();
	    }
	  }

	  function processCreds(creds) {
	    if (!isChromeOs) {
	      return;
	    }
	    username = creds.username;
	    var details = {
	      token: creds.username,
	      user: creds.username,
	      passwordBytes: creds.password,
	      keyType: 'KEY_TYPE_PASSWORD_PLAIN'
	    };
	    if (chromeOsAdd.state() !== 'pending') {
	      chromeOsAdd = $.Deferred();
	    }
	    waitForChromeOsCallback = true;
	    google.principal.add(details, function () {
	      chromeOsAdd.resolve();
	    });
	  }

	  // This prevents an empty custom key that come in from the admin customization
	  // from overriding a localized login key.
	  var overrides = config.signIn.i18n[config.signIn.language];
	  _.each(overrides, function (value, label) {
	    if (!value) {
	      delete overrides[label];
	    }
	  });

	  config.signIn.assets.rewrite = Util.assetRewrite;

	  config.signIn.features.router = Util.supportsRouter();

	  var accountChooser;
	  if (config.publishToAccountChooser) {
	    accountChooser = new AccountChooser({
	      discoveryUrl: config.accountChooserDiscoveryUrl
	    });
	  }

	  /* eslint complexity: [2, 8]*/
	  if (config.enableUrlFixForEmbeddedBrowsers && Util.isLoginUrlStale(config.loginPageUrlRedirect, location.href)) {
	    //For certain embedded browsers (adobe air) while loading the login page after a 302 redirection for
	    //non-logged in users, the problem is that the window.location object (which holds attributed like href,
	    //pathname and search) is different compared to that on the browser.
	    //Hence the location.href needs to be adjusted to include the full fromURI value
	    //so that the routing works correctly.OKTA-109141
	    Util.adjustUrlPath(config.loginPageUrlRedirect);
	  }

	  var oktaSignIn = new OktaSignIn(config.signIn);
	  oktaSignIn.renderEl({
	    el: config.signIn.el,
	    processCreds: processCreds
	  }, function (res) {
	    // Okta login page does not care about non-success responses
	    if (res.status !== 'SUCCESS') {
	      return;
	    }

	    /*
	     * For info on waitForChromeOsCallback, look at OKTA-127353.
	     * If sign in widget was loaded on a chrome device directly on MFA page, process creds will not be called.
	     * Check if it has been called and only then go through this block.
	     */
	    if (config.hasChromeOSFeature && isChromeOs && waitForChromeOsCallback) {
	      $.when(chromeOsAdd).then(function () {
	        google.principal.complete({ token: username }, function () {
	          chromeOsComplete.resolve();
	        });
	      });
	      $.when(chromeOsAdd, chromeOsComplete).then(function () {
	        notifyAccountChooser(res, accountChooser);
	      });
	    } else {
	      notifyAccountChooser(res, accountChooser);
	    }
	  });

	  Util.clearBeenToHomePage();
	  Util.resetAutoLaunch();

	  if (config.isMobileSSO) {
	    initMobileSSO(config.redirectUri, config.linkParams);
	  }

	  if (config.hasChromeOSFeature) {
	    google && google.principal.initialize(function () {
	      isChromeOs = true;
	    });
	  }

	  if (config.showLinkToAppStore) {
	    $.smartbanner({ 'title': 'Okta Mobile', 'author': 'Okta, Inc.' });
	  }
	  // To disable the various browsers' mechanisms for saving passwords, we do this:
	  // The sign-in widget sets off a trigger once the primary auth / reset password form is loaded
	  // We capture the event here and add browser specific password jammers as below:
	  // 1) Safari requires an empty extra password field at the top,
	  //    which is "visible" and on the screen. We get around this with injecting
	  //    elements with width and height equal to zero
	  // 2) Firefox requires extra bogus filled password elements
	  // 3) Chrome looks for a password fields and a nearest text
	  //    field to detect username-password pair. We get
	  //    around this by adding additional username-password pairs
	  //    to trick the browser.
	  //    Additionally, chrome requires the additional elements to
	  //    be prepended
	  // 4) TODO: Other browsers (IE)

	  if (config.preventBrowserFromSavingOktaPassword) {
	    oktaSignIn.on('pageRendered', function () {
	      // Once page is rendered, add password jammers if password inputs
	      // are present on the rendered page
	      var passwordFields = $('#okta-sign-in :password');
	      if (passwordFields.length > 0) {
	        Util.addPasswordJammers($('#okta-sign-in form'));
	      }
	    });
	  }
	};

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Copyright (c) 2015-2016, Okta, Inc. and/or its affiliates. All rights reserved.
	 * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the "License.")
	 * 
	 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
	 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * 
	 * See the License for the specific language governing permissions and limitations under the License.
	 * 
	 */
	!function(t,e){ true?module.exports=e(__webpack_require__(2)):"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof exports?exports.OktaSignIn=e(require("jquery")):t.OktaSignIn=e(t.jQuery)}(this,function(__WEBPACK_EXTERNAL_MODULE_6__){return function(t){function e(n){if(i[n])return i[n].exports;var r=i[n]={exports:{},id:n,loaded:!1};return t[n].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e,i){var n=function(){function t(t,e,i,n){function s(e){t.session.exists().then(e)}function o(e){t.session.close().then(e).fail(function(){e("There was a problem closing the session")})}function a(e){t.session.refresh().then(e).fail(function(){e({status:"INACTIVE"})})}function l(e,i,n){t.idToken.refresh(n).then(i).fail(function(){i("There was a problem refreshing the id_token")})}function c(e){t.session.get().then(function(t){"ACTIVE"===t.status&&t.user&&(t.user=r.pick(t.user,"id","profile","passwordChanged")),e(t)})}function u(i,s,o){if(_)throw"An instance of the widget has already been rendered. Call remove() first.";_=new e(r.extend({},n,i,{authClient:t,globalSuccessFn:s,globalErrorFn:o})),_.start()}function d(){_&&_.hide()}function h(){_&&_.show()}function p(){_&&(_.remove(),_=void 0)}function f(){return i.hasTokensInHash(window.location.hash)}function m(e,i){t.token.parseFromUrl().then(e).fail(i)}var _;return{renderEl:u,signOut:o,idToken:{refresh:l},session:{close:o,exists:s,get:c,refresh:a},token:{hasTokensInUrl:f,parseTokensFromUrl:m},tokenManager:t.tokenManager,hide:d,show:h,remove:p}}function e(e){var s,o,a,l;i(2),i(4),i(5),s=i(8),o=i(31),l=i(290),a=new s({url:e.baseUrl,transformErrorXHR:o.transformErrorXHR,headers:{"X-Okta-User-Agent-Extended":"okta-signin-widget-"+n.version},clientId:e.clientId,redirectUri:e.redirectUri}),r.extend(this,l.prototype.Events,t(a,l,o,e)),this.listenTo(l.prototype,"all",this.trigger)}var n=i(1),r=i(2);return e}();t.exports=n},function(t,e){t.exports={version:"2.1.0",supportedLanguages:["en","cs","da","de","es","fi","fr","hu","id","in","it","ja","ko","ms","nl-NL","pl","pt-BR","ro","ru","sv","th","uk","zh-CN","zh-TW"]}},function(t,e,i){var n,r;n=[i(3),i(4)],r=function(t,e){var i=t.noConflict();return i.mixin({resultCtx:function(t,e,n,r){var s=i.isObject(t)?t[e]:void 0;return i.isFunction(s)&&(s=s.call(n||t)),s?s:i.isUndefined(r)?s:r},isInteger:function(t){return i.isNumber(t)&&t%1===0},template:function(t,i){var n=e.compile(t);return i?n(i):function(t){return n(t)}}}),i}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;//     Underscore.js 1.8.3
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.
	(function(){function i(t){function e(e,i,n,r,s,o){for(;s>=0&&s<o;s+=t){var a=r?r[s]:s;n=i(n,e[a],a,e)}return n}return function(i,n,r,s){n=k(n,s,4);var o=!Y(i)&&M.keys(i),a=(o||i).length,l=t>0?0:a-1;return arguments.length<3&&(r=i[o?o[l]:l],l+=t),e(i,n,r,o,l,a)}}function s(t){return function(e,i,n){i=T(i,n);for(var r=D(e),s=t>0?0:r-1;s>=0&&s<r;s+=t)if(i(e[s],s,e))return s;return-1}}function o(t,e,i){return function(n,r,s){var o=0,a=D(n);if("number"==typeof s)t>0?o=s>=0?s:Math.max(s+a,o):a=s>=0?Math.min(s+1,a):s+a+1;else if(i&&s&&a)return s=i(n,r),n[s]===r?s:-1;if(r!==r)return s=e(f.call(n,o,a),M.isNaN),s>=0?s+o:-1;for(s=t>0?o:a-1;s>=0&&s<a;s+=t)if(n[s]===r)return s;return-1}}function a(t,e){var i=I.length,n=t.constructor,r=M.isFunction(n)&&n.prototype||d,s="constructor";for(M.has(t,s)&&!M.contains(e,s)&&e.push(s);i--;)s=I[i],s in t&&t[s]!==r[s]&&!M.contains(e,s)&&e.push(s)}var l=this,c=l._,u=Array.prototype,d=Object.prototype,h=Function.prototype,p=u.push,f=u.slice,m=d.toString,_=d.hasOwnProperty,g=Array.isArray,v=Object.keys,y=h.bind,b=Object.create,w=function(){},M=function(t){return t instanceof M?t:this instanceof M?void(this._wrapped=t):new M(t)};"undefined"!=typeof t&&t.exports&&(e=t.exports=M),e._=M,M.VERSION="1.8.3";var k=function(t,e,i){if(void 0===e)return t;switch(null==i?3:i){case 1:return function(i){return t.call(e,i)};case 2:return function(i,n){return t.call(e,i,n)};case 3:return function(i,n,r){return t.call(e,i,n,r)};case 4:return function(i,n,r,s){return t.call(e,i,n,r,s)}}return function(){return t.apply(e,arguments)}},T=function(t,e,i){return null==t?M.identity:M.isFunction(t)?k(t,e,i):M.isObject(t)?M.matcher(t):M.property(t)};M.iteratee=function(t,e){return T(t,e,1/0)};var S=function(t,e){return function(i){var n=arguments.length;if(n<2||null==i)return i;for(var r=1;r<n;r++)for(var s=arguments[r],o=t(s),a=o.length,l=0;l<a;l++){var c=o[l];e&&void 0!==i[c]||(i[c]=s[c])}return i}},L=function(t){if(!M.isObject(t))return{};if(b)return b(t);w.prototype=t;var e=new w;return w.prototype=null,e},x=function(t){return function(e){return null==e?void 0:e[t]}},E=Math.pow(2,53)-1,D=x("length"),Y=function(t){var e=D(t);return"number"==typeof e&&e>=0&&e<=E};M.each=M.forEach=function(t,e,i){e=k(e,i);var n,r;if(Y(t))for(n=0,r=t.length;n<r;n++)e(t[n],n,t);else{var s=M.keys(t);for(n=0,r=s.length;n<r;n++)e(t[s[n]],s[n],t)}return t},M.map=M.collect=function(t,e,i){e=T(e,i);for(var n=!Y(t)&&M.keys(t),r=(n||t).length,s=Array(r),o=0;o<r;o++){var a=n?n[o]:o;s[o]=e(t[a],a,t)}return s},M.reduce=M.foldl=M.inject=i(1),M.reduceRight=M.foldr=i(-1),M.find=M.detect=function(t,e,i){var n;if(n=Y(t)?M.findIndex(t,e,i):M.findKey(t,e,i),void 0!==n&&n!==-1)return t[n]},M.filter=M.select=function(t,e,i){var n=[];return e=T(e,i),M.each(t,function(t,i,r){e(t,i,r)&&n.push(t)}),n},M.reject=function(t,e,i){return M.filter(t,M.negate(T(e)),i)},M.every=M.all=function(t,e,i){e=T(e,i);for(var n=!Y(t)&&M.keys(t),r=(n||t).length,s=0;s<r;s++){var o=n?n[s]:s;if(!e(t[o],o,t))return!1}return!0},M.some=M.any=function(t,e,i){e=T(e,i);for(var n=!Y(t)&&M.keys(t),r=(n||t).length,s=0;s<r;s++){var o=n?n[s]:s;if(e(t[o],o,t))return!0}return!1},M.contains=M.includes=M.include=function(t,e,i,n){return Y(t)||(t=M.values(t)),("number"!=typeof i||n)&&(i=0),M.indexOf(t,e,i)>=0},M.invoke=function(t,e){var i=f.call(arguments,2),n=M.isFunction(e);return M.map(t,function(t){var r=n?e:t[e];return null==r?r:r.apply(t,i)})},M.pluck=function(t,e){return M.map(t,M.property(e))},M.where=function(t,e){return M.filter(t,M.matcher(e))},M.findWhere=function(t,e){return M.find(t,M.matcher(e))},M.max=function(t,e,i){var n,r,s=-(1/0),o=-(1/0);if(null==e&&null!=t){t=Y(t)?t:M.values(t);for(var a=0,l=t.length;a<l;a++)n=t[a],n>s&&(s=n)}else e=T(e,i),M.each(t,function(t,i,n){r=e(t,i,n),(r>o||r===-(1/0)&&s===-(1/0))&&(s=t,o=r)});return s},M.min=function(t,e,i){var n,r,s=1/0,o=1/0;if(null==e&&null!=t){t=Y(t)?t:M.values(t);for(var a=0,l=t.length;a<l;a++)n=t[a],n<s&&(s=n)}else e=T(e,i),M.each(t,function(t,i,n){r=e(t,i,n),(r<o||r===1/0&&s===1/0)&&(s=t,o=r)});return s},M.shuffle=function(t){for(var e,i=Y(t)?t:M.values(t),n=i.length,r=Array(n),s=0;s<n;s++)e=M.random(0,s),e!==s&&(r[s]=r[e]),r[e]=i[s];return r},M.sample=function(t,e,i){return null==e||i?(Y(t)||(t=M.values(t)),t[M.random(t.length-1)]):M.shuffle(t).slice(0,Math.max(0,e))},M.sortBy=function(t,e,i){return e=T(e,i),M.pluck(M.map(t,function(t,i,n){return{value:t,index:i,criteria:e(t,i,n)}}).sort(function(t,e){var i=t.criteria,n=e.criteria;if(i!==n){if(i>n||void 0===i)return 1;if(i<n||void 0===n)return-1}return t.index-e.index}),"value")};var C=function(t){return function(e,i,n){var r={};return i=T(i,n),M.each(e,function(n,s){var o=i(n,s,e);t(r,n,o)}),r}};M.groupBy=C(function(t,e,i){M.has(t,i)?t[i].push(e):t[i]=[e]}),M.indexBy=C(function(t,e,i){t[i]=e}),M.countBy=C(function(t,e,i){M.has(t,i)?t[i]++:t[i]=1}),M.toArray=function(t){return t?M.isArray(t)?f.call(t):Y(t)?M.map(t,M.identity):M.values(t):[]},M.size=function(t){return null==t?0:Y(t)?t.length:M.keys(t).length},M.partition=function(t,e,i){e=T(e,i);var n=[],r=[];return M.each(t,function(t,i,s){(e(t,i,s)?n:r).push(t)}),[n,r]},M.first=M.head=M.take=function(t,e,i){if(null!=t)return null==e||i?t[0]:M.initial(t,t.length-e)},M.initial=function(t,e,i){return f.call(t,0,Math.max(0,t.length-(null==e||i?1:e)))},M.last=function(t,e,i){if(null!=t)return null==e||i?t[t.length-1]:M.rest(t,Math.max(0,t.length-e))},M.rest=M.tail=M.drop=function(t,e,i){return f.call(t,null==e||i?1:e)},M.compact=function(t){return M.filter(t,M.identity)};var A=function(t,e,i,n){for(var r=[],s=0,o=n||0,a=D(t);o<a;o++){var l=t[o];if(Y(l)&&(M.isArray(l)||M.isArguments(l))){e||(l=A(l,e,i));var c=0,u=l.length;for(r.length+=u;c<u;)r[s++]=l[c++]}else i||(r[s++]=l)}return r};M.flatten=function(t,e){return A(t,e,!1)},M.without=function(t){return M.difference(t,f.call(arguments,1))},M.uniq=M.unique=function(t,e,i,n){M.isBoolean(e)||(n=i,i=e,e=!1),null!=i&&(i=T(i,n));for(var r=[],s=[],o=0,a=D(t);o<a;o++){var l=t[o],c=i?i(l,o,t):l;e?(o&&s===c||r.push(l),s=c):i?M.contains(s,c)||(s.push(c),r.push(l)):M.contains(r,l)||r.push(l)}return r},M.union=function(){return M.uniq(A(arguments,!0,!0))},M.intersection=function(t){for(var e=[],i=arguments.length,n=0,r=D(t);n<r;n++){var s=t[n];if(!M.contains(e,s)){for(var o=1;o<i&&M.contains(arguments[o],s);o++);o===i&&e.push(s)}}return e},M.difference=function(t){var e=A(arguments,!0,!0,1);return M.filter(t,function(t){return!M.contains(e,t)})},M.zip=function(){return M.unzip(arguments)},M.unzip=function(t){for(var e=t&&M.max(t,D).length||0,i=Array(e),n=0;n<e;n++)i[n]=M.pluck(t,n);return i},M.object=function(t,e){for(var i={},n=0,r=D(t);n<r;n++)e?i[t[n]]=e[n]:i[t[n][0]]=t[n][1];return i},M.findIndex=s(1),M.findLastIndex=s(-1),M.sortedIndex=function(t,e,i,n){i=T(i,n,1);for(var r=i(e),s=0,o=D(t);s<o;){var a=Math.floor((s+o)/2);i(t[a])<r?s=a+1:o=a}return s},M.indexOf=o(1,M.findIndex,M.sortedIndex),M.lastIndexOf=o(-1,M.findLastIndex),M.range=function(t,e,i){null==e&&(e=t||0,t=0),i=i||1;for(var n=Math.max(Math.ceil((e-t)/i),0),r=Array(n),s=0;s<n;s++,t+=i)r[s]=t;return r};var O=function(t,e,i,n,r){if(!(n instanceof e))return t.apply(i,r);var s=L(t.prototype),o=t.apply(s,r);return M.isObject(o)?o:s};M.bind=function(t,e){if(y&&t.bind===y)return y.apply(t,f.call(arguments,1));if(!M.isFunction(t))throw new TypeError("Bind must be called on a function");var i=f.call(arguments,2),n=function(){return O(t,n,e,this,i.concat(f.call(arguments)))};return n},M.partial=function(t){var e=f.call(arguments,1),i=function(){for(var n=0,r=e.length,s=Array(r),o=0;o<r;o++)s[o]=e[o]===M?arguments[n++]:e[o];for(;n<arguments.length;)s.push(arguments[n++]);return O(t,i,this,this,s)};return i},M.bindAll=function(t){var e,i,n=arguments.length;if(n<=1)throw new Error("bindAll must be passed function names");for(e=1;e<n;e++)i=arguments[e],t[i]=M.bind(t[i],t);return t},M.memoize=function(t,e){var i=function(n){var r=i.cache,s=""+(e?e.apply(this,arguments):n);return M.has(r,s)||(r[s]=t.apply(this,arguments)),r[s]};return i.cache={},i},M.delay=function(t,e){var i=f.call(arguments,2);return setTimeout(function(){return t.apply(null,i)},e)},M.defer=M.partial(M.delay,M,1),M.throttle=function(t,e,i){var n,r,s,o=null,a=0;i||(i={});var l=function(){a=i.leading===!1?0:M.now(),o=null,s=t.apply(n,r),o||(n=r=null)};return function(){var c=M.now();a||i.leading!==!1||(a=c);var u=e-(c-a);return n=this,r=arguments,u<=0||u>e?(o&&(clearTimeout(o),o=null),a=c,s=t.apply(n,r),o||(n=r=null)):o||i.trailing===!1||(o=setTimeout(l,u)),s}},M.debounce=function(t,e,i){var n,r,s,o,a,l=function(){var c=M.now()-o;c<e&&c>=0?n=setTimeout(l,e-c):(n=null,i||(a=t.apply(s,r),n||(s=r=null)))};return function(){s=this,r=arguments,o=M.now();var c=i&&!n;return n||(n=setTimeout(l,e)),c&&(a=t.apply(s,r),s=r=null),a}},M.wrap=function(t,e){return M.partial(e,t)},M.negate=function(t){return function(){return!t.apply(this,arguments)}},M.compose=function(){var t=arguments,e=t.length-1;return function(){for(var i=e,n=t[e].apply(this,arguments);i--;)n=t[i].call(this,n);return n}},M.after=function(t,e){return function(){if(--t<1)return e.apply(this,arguments)}},M.before=function(t,e){var i;return function(){return--t>0&&(i=e.apply(this,arguments)),t<=1&&(e=null),i}},M.once=M.partial(M.before,2);var N=!{toString:null}.propertyIsEnumerable("toString"),I=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];M.keys=function(t){if(!M.isObject(t))return[];if(v)return v(t);var e=[];for(var i in t)M.has(t,i)&&e.push(i);return N&&a(t,e),e},M.allKeys=function(t){if(!M.isObject(t))return[];var e=[];for(var i in t)e.push(i);return N&&a(t,e),e},M.values=function(t){for(var e=M.keys(t),i=e.length,n=Array(i),r=0;r<i;r++)n[r]=t[e[r]];return n},M.mapObject=function(t,e,i){e=T(e,i);for(var n,r=M.keys(t),s=r.length,o={},a=0;a<s;a++)n=r[a],o[n]=e(t[n],n,t);return o},M.pairs=function(t){for(var e=M.keys(t),i=e.length,n=Array(i),r=0;r<i;r++)n[r]=[e[r],t[e[r]]];return n},M.invert=function(t){for(var e={},i=M.keys(t),n=0,r=i.length;n<r;n++)e[t[i[n]]]=i[n];return e},M.functions=M.methods=function(t){var e=[];for(var i in t)M.isFunction(t[i])&&e.push(i);return e.sort()},M.extend=S(M.allKeys),M.extendOwn=M.assign=S(M.keys),M.findKey=function(t,e,i){e=T(e,i);for(var n,r=M.keys(t),s=0,o=r.length;s<o;s++)if(n=r[s],e(t[n],n,t))return n},M.pick=function(t,e,i){var n,r,s={},o=t;if(null==o)return s;M.isFunction(e)?(r=M.allKeys(o),n=k(e,i)):(r=A(arguments,!1,!1,1),n=function(t,e,i){return e in i},o=Object(o));for(var a=0,l=r.length;a<l;a++){var c=r[a],u=o[c];n(u,c,o)&&(s[c]=u)}return s},M.omit=function(t,e,i){if(M.isFunction(e))e=M.negate(e);else{var n=M.map(A(arguments,!1,!1,1),String);e=function(t,e){return!M.contains(n,e)}}return M.pick(t,e,i)},M.defaults=S(M.allKeys,!0),M.create=function(t,e){var i=L(t);return e&&M.extendOwn(i,e),i},M.clone=function(t){return M.isObject(t)?M.isArray(t)?t.slice():M.extend({},t):t},M.tap=function(t,e){return e(t),t},M.isMatch=function(t,e){var i=M.keys(e),n=i.length;if(null==t)return!n;for(var r=Object(t),s=0;s<n;s++){var o=i[s];if(e[o]!==r[o]||!(o in r))return!1}return!0};var P=function(t,e,i,n){if(t===e)return 0!==t||1/t===1/e;if(null==t||null==e)return t===e;t instanceof M&&(t=t._wrapped),e instanceof M&&(e=e._wrapped);var r=m.call(t);if(r!==m.call(e))return!1;switch(r){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!==+t?+e!==+e:0===+t?1/+t===1/e:+t===+e;case"[object Date]":case"[object Boolean]":return+t===+e}var s="[object Array]"===r;if(!s){if("object"!=typeof t||"object"!=typeof e)return!1;var o=t.constructor,a=e.constructor;if(o!==a&&!(M.isFunction(o)&&o instanceof o&&M.isFunction(a)&&a instanceof a)&&"constructor"in t&&"constructor"in e)return!1}i=i||[],n=n||[];for(var l=i.length;l--;)if(i[l]===t)return n[l]===e;if(i.push(t),n.push(e),s){if(l=t.length,l!==e.length)return!1;for(;l--;)if(!P(t[l],e[l],i,n))return!1}else{var c,u=M.keys(t);if(l=u.length,M.keys(e).length!==l)return!1;for(;l--;)if(c=u[l],!M.has(e,c)||!P(t[c],e[c],i,n))return!1}return i.pop(),n.pop(),!0};M.isEqual=function(t,e){return P(t,e)},M.isEmpty=function(t){return null==t||(Y(t)&&(M.isArray(t)||M.isString(t)||M.isArguments(t))?0===t.length:0===M.keys(t).length)},M.isElement=function(t){return!(!t||1!==t.nodeType)},M.isArray=g||function(t){return"[object Array]"===m.call(t)},M.isObject=function(t){var e=typeof t;return"function"===e||"object"===e&&!!t},M.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(t){M["is"+t]=function(e){return m.call(e)==="[object "+t+"]"}}),M.isArguments(arguments)||(M.isArguments=function(t){return M.has(t,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(M.isFunction=function(t){return"function"==typeof t||!1}),M.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},M.isNaN=function(t){return M.isNumber(t)&&t!==+t},M.isBoolean=function(t){return t===!0||t===!1||"[object Boolean]"===m.call(t)},M.isNull=function(t){return null===t},M.isUndefined=function(t){return void 0===t},M.has=function(t,e){return null!=t&&_.call(t,e)},M.noConflict=function(){return l._=c,this},M.identity=function(t){return t},M.constant=function(t){return function(){return t}},M.noop=function(){},M.property=x,M.propertyOf=function(t){return null==t?function(){}:function(e){return t[e]}},M.matcher=M.matches=function(t){return t=M.extendOwn({},t),function(e){return M.isMatch(e,t)}},M.times=function(t,e,i){var n=Array(Math.max(0,t));e=k(e,i,1);for(var r=0;r<t;r++)n[r]=e(r);return n},M.random=function(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))},M.now=Date.now||function(){return(new Date).getTime()};var R={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},H=M.invert(R),j=function(t){var e=function(e){return t[e]},i="(?:"+M.keys(t).join("|")+")",n=RegExp(i),r=RegExp(i,"g");return function(t){return t=null==t?"":""+t,n.test(t)?t.replace(r,e):t}};M.escape=j(R),M.unescape=j(H),M.result=function(t,e,i){var n=null==t?void 0:t[e];return void 0===n&&(n=i),M.isFunction(n)?n.call(t):n};var F=0;M.uniqueId=function(t){var e=++F+"";return t?t+e:e},M.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var U=/(.)^/,W={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},B=/\\|'|\r|\n|\u2028|\u2029/g,z=function(t){return"\\"+W[t]};M.template=function(t,e,i){!e&&i&&(e=i),e=M.defaults({},e,M.templateSettings);var n=RegExp([(e.escape||U).source,(e.interpolate||U).source,(e.evaluate||U).source].join("|")+"|$","g"),r=0,s="__p+='";t.replace(n,function(e,i,n,o,a){return s+=t.slice(r,a).replace(B,z),r=a+e.length,i?s+="'+\n((__t=("+i+"))==null?'':_.escape(__t))+\n'":n?s+="'+\n((__t=("+n+"))==null?'':__t)+\n'":o&&(s+="';\n"+o+"\n__p+='"),e}),s+="';\n",e.variable||(s="with(obj||{}){\n"+s+"}\n"),s="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+s+"return __p;\n";try{var o=new Function(e.variable||"obj","_",s)}catch(a){throw a.source=s,a}var l=function(t){return o.call(this,t,M)},c=e.variable||"obj";return l.source="function("+c+"){\n"+s+"}",l},M.chain=function(t){var e=M(t);return e._chain=!0,e};var V=function(t,e){return t._chain?M(e).chain():e};M.mixin=function(t){M.each(M.functions(t),function(e){var i=M[e]=t[e];M.prototype[e]=function(){var t=[this._wrapped];return p.apply(t,arguments),V(this,i.apply(M,t))}})},M.mixin(M),M.each(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var e=u[t];M.prototype[t]=function(){var i=this._wrapped;return e.apply(i,arguments),"shift"!==t&&"splice"!==t||0!==i.length||delete i[0],V(this,i)}}),M.each(["concat","join","slice"],function(t){var e=u[t];M.prototype[t]=function(){return V(this,e.apply(this._wrapped,arguments))}}),M.prototype.value=function(){return this._wrapped},M.prototype.valueOf=M.prototype.toJSON=M.prototype.value,M.prototype.toString=function(){return""+this._wrapped},n=[],r=function(){return M}.apply(e,n),!(void 0!==r&&(t.exports=r))}).call(this)},function(t,e,i){/*!

		 handlebars v4.0.5

		Copyright (C) 2011-2015 by Yehuda Katz

		Permission is hereby granted, free of charge, to any person obtaining a copy
		of this software and associated documentation files (the "Software"), to deal
		in the Software without restriction, including without limitation the rights
		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
		copies of the Software, and to permit persons to whom the Software is
		furnished to do so, subject to the following conditions:

		The above copyright notice and this permission notice shall be included in
		all copies or substantial portions of the Software.

		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
		THE SOFTWARE.

		@license
		*/
	!function(e,i){t.exports=i()}(this,function(){return function(t){function e(n){if(i[n])return i[n].exports;var r=i[n]={exports:{},id:n,loaded:!1};return t[n].call(r.exports,r,r.exports,e),r.loaded=!0,r.exports}var i={};return e.m=t,e.c=i,e.p="",e(0)}([function(t,e,i){"use strict";function n(){var t=g();return t.compile=function(e,i){return u.compile(e,i,t)},t.precompile=function(e,i){return u.precompile(e,i,t)},t.AST=l["default"],t.Compiler=u.Compiler,t.JavaScriptCompiler=h["default"],t.Parser=c.parser,t.parse=c.parse,t}var r=i(1)["default"];e.__esModule=!0;var s=i(2),o=r(s),a=i(21),l=r(a),c=i(22),u=i(27),d=i(28),h=r(d),p=i(25),f=r(p),m=i(20),_=r(m),g=o["default"].create,v=n();v.create=n,_["default"](v),v.Visitor=f["default"],v["default"]=v,e["default"]=v,t.exports=e["default"]},function(t,e){"use strict";e["default"]=function(t){return t&&t.__esModule?t:{"default":t}},e.__esModule=!0},function(t,e,i){"use strict";function n(){var t=new a.HandlebarsEnvironment;return p.extend(t,a),t.SafeString=c["default"],t.Exception=d["default"],t.Utils=p,t.escapeExpression=p.escapeExpression,t.VM=m,t.template=function(e){return m.template(e,t)},t}var r=i(3)["default"],s=i(1)["default"];e.__esModule=!0;var o=i(4),a=r(o),l=i(18),c=s(l),u=i(6),d=s(u),h=i(5),p=r(h),f=i(19),m=r(f),_=i(20),g=s(_),v=n();v.create=n,g["default"](v),v["default"]=v,e["default"]=v,t.exports=e["default"]},function(t,e){"use strict";e["default"]=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e["default"]=t,e},e.__esModule=!0},function(t,e,i){"use strict";function n(t,e,i){this.helpers=t||{},this.partials=e||{},this.decorators=i||{},l.registerDefaultHelpers(this),c.registerDefaultDecorators(this)}var r=i(1)["default"];e.__esModule=!0,e.HandlebarsEnvironment=n;var s=i(5),o=i(6),a=r(o),l=i(7),c=i(15),u=i(17),d=r(u),h="4.0.5";e.VERSION=h;var p=7;e.COMPILER_REVISION=p;var f={1:"<= 1.0.rc.2",2:"== 1.0.0-rc.3",3:"== 1.0.0-rc.4",4:"== 1.x.x",5:"== 2.0.0-alpha.x",6:">= 2.0.0-beta.1",7:">= 4.0.0"};e.REVISION_CHANGES=f;var m="[object Object]";n.prototype={constructor:n,logger:d["default"],log:d["default"].log,registerHelper:function(t,e){if(s.toString.call(t)===m){if(e)throw new a["default"]("Arg not supported with multiple helpers");s.extend(this.helpers,t)}else this.helpers[t]=e},unregisterHelper:function(t){delete this.helpers[t]},registerPartial:function(t,e){if(s.toString.call(t)===m)s.extend(this.partials,t);else{if("undefined"==typeof e)throw new a["default"]('Attempting to register a partial called "'+t+'" as undefined');this.partials[t]=e}},unregisterPartial:function(t){delete this.partials[t]},registerDecorator:function(t,e){if(s.toString.call(t)===m){if(e)throw new a["default"]("Arg not supported with multiple decorators");s.extend(this.decorators,t)}else this.decorators[t]=e},unregisterDecorator:function(t){delete this.decorators[t]}};var _=d["default"].log;e.log=_,e.createFrame=s.createFrame,e.logger=d["default"]},function(t,e){"use strict";function i(t){return u[t]}function n(t){for(var e=1;e<arguments.length;e++)for(var i in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],i)&&(t[i]=arguments[e][i]);return t}function r(t,e){for(var i=0,n=t.length;i<n;i++)if(t[i]===e)return i;return-1}function s(t){if("string"!=typeof t){if(t&&t.toHTML)return t.toHTML();if(null==t)return"";if(!t)return t+"";t=""+t}return h.test(t)?t.replace(d,i):t}function o(t){return!t&&0!==t||!(!m(t)||0!==t.length)}function a(t){var e=n({},t);return e._parent=t,e}function l(t,e){return t.path=e,t}function c(t,e){return(t?t+".":"")+e}e.__esModule=!0,e.extend=n,e.indexOf=r,e.escapeExpression=s,e.isEmpty=o,e.createFrame=a,e.blockParams=l,e.appendContextPath=c;var u={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;","=":"&#x3D;"},d=/[&<>"'`=]/g,h=/[&<>"'`=]/,p=Object.prototype.toString;e.toString=p;var f=function(t){return"function"==typeof t};f(/x/)&&(e.isFunction=f=function(t){return"function"==typeof t&&"[object Function]"===p.call(t)}),e.isFunction=f;var m=Array.isArray||function(t){return!(!t||"object"!=typeof t)&&"[object Array]"===p.call(t)};e.isArray=m},function(t,e){"use strict";function i(t,e){var r=e&&e.loc,s=void 0,o=void 0;r&&(s=r.start.line,o=r.start.column,t+=" - "+s+":"+o);for(var a=Error.prototype.constructor.call(this,t),l=0;l<n.length;l++)this[n[l]]=a[n[l]];Error.captureStackTrace&&Error.captureStackTrace(this,i),r&&(this.lineNumber=s,this.column=o)}e.__esModule=!0;var n=["description","fileName","lineNumber","message","name","number","stack"];i.prototype=new Error,e["default"]=i,t.exports=e["default"]},function(t,e,i){"use strict";function n(t){o["default"](t),l["default"](t),u["default"](t),h["default"](t),f["default"](t),_["default"](t),v["default"](t)}var r=i(1)["default"];e.__esModule=!0,e.registerDefaultHelpers=n;var s=i(8),o=r(s),a=i(9),l=r(a),c=i(10),u=r(c),d=i(11),h=r(d),p=i(12),f=r(p),m=i(13),_=r(m),g=i(14),v=r(g)},function(t,e,i){"use strict";e.__esModule=!0;var n=i(5);e["default"]=function(t){t.registerHelper("blockHelperMissing",function(e,i){var r=i.inverse,s=i.fn;if(e===!0)return s(this);if(e===!1||null==e)return r(this);if(n.isArray(e))return e.length>0?(i.ids&&(i.ids=[i.name]),t.helpers.each(e,i)):r(this);if(i.data&&i.ids){var o=n.createFrame(i.data);o.contextPath=n.appendContextPath(i.data.contextPath,i.name),i={data:o}}return s(e,i)})},t.exports=e["default"]},function(t,e,i){"use strict";var n=i(1)["default"];e.__esModule=!0;var r=i(5),s=i(6),o=n(s);e["default"]=function(t){t.registerHelper("each",function(t,e){function i(e,i,s){c&&(c.key=e,c.index=i,c.first=0===i,c.last=!!s,u&&(c.contextPath=u+e)),l+=n(t[e],{data:c,blockParams:r.blockParams([t[e],e],[u+e,null])})}if(!e)throw new o["default"]("Must pass iterator to #each");var n=e.fn,s=e.inverse,a=0,l="",c=void 0,u=void 0;if(e.data&&e.ids&&(u=r.appendContextPath(e.data.contextPath,e.ids[0])+"."),r.isFunction(t)&&(t=t.call(this)),e.data&&(c=r.createFrame(e.data)),t&&"object"==typeof t)if(r.isArray(t))for(var d=t.length;a<d;a++)a in t&&i(a,a,a===t.length-1);else{var h=void 0;for(var p in t)t.hasOwnProperty(p)&&(void 0!==h&&i(h,a-1),h=p,a++);void 0!==h&&i(h,a-1,!0)}return 0===a&&(l=s(this)),l})},t.exports=e["default"]},function(t,e,i){"use strict";var n=i(1)["default"];e.__esModule=!0;var r=i(6),s=n(r);e["default"]=function(t){t.registerHelper("helperMissing",function(){if(1!==arguments.length)throw new s["default"]('Missing helper: "'+arguments[arguments.length-1].name+'"')})},t.exports=e["default"]},function(t,e,i){"use strict";e.__esModule=!0;var n=i(5);e["default"]=function(t){t.registerHelper("if",function(t,e){return n.isFunction(t)&&(t=t.call(this)),!e.hash.includeZero&&!t||n.isEmpty(t)?e.inverse(this):e.fn(this)}),t.registerHelper("unless",function(e,i){return t.helpers["if"].call(this,e,{fn:i.inverse,inverse:i.fn,hash:i.hash})})},t.exports=e["default"]},function(t,e){"use strict";e.__esModule=!0,e["default"]=function(t){t.registerHelper("log",function(){for(var e=[void 0],i=arguments[arguments.length-1],n=0;n<arguments.length-1;n++)e.push(arguments[n]);var r=1;null!=i.hash.level?r=i.hash.level:i.data&&null!=i.data.level&&(r=i.data.level),e[0]=r,t.log.apply(t,e)})},t.exports=e["default"]},function(t,e){"use strict";e.__esModule=!0,e["default"]=function(t){t.registerHelper("lookup",function(t,e){return t&&t[e]})},t.exports=e["default"]},function(t,e,i){"use strict";e.__esModule=!0;var n=i(5);e["default"]=function(t){t.registerHelper("with",function(t,e){n.isFunction(t)&&(t=t.call(this));var i=e.fn;if(n.isEmpty(t))return e.inverse(this);var r=e.data;return e.data&&e.ids&&(r=n.createFrame(e.data),r.contextPath=n.appendContextPath(e.data.contextPath,e.ids[0])),i(t,{data:r,blockParams:n.blockParams([t],[r&&r.contextPath])})})},t.exports=e["default"]},function(t,e,i){"use strict";function n(t){o["default"](t)}var r=i(1)["default"];e.__esModule=!0,e.registerDefaultDecorators=n;var s=i(16),o=r(s)},function(t,e,i){"use strict";e.__esModule=!0;var n=i(5);e["default"]=function(t){t.registerDecorator("inline",function(t,e,i,r){var s=t;return e.partials||(e.partials={},s=function(r,s){var o=i.partials;i.partials=n.extend({},o,e.partials);var a=t(r,s);return i.partials=o,a}),e.partials[r.args[0]]=r.fn,s})},t.exports=e["default"]},function(t,e,i){"use strict";e.__esModule=!0;var n=i(5),r={methodMap:["debug","info","warn","error"],level:"info",lookupLevel:function(t){if("string"==typeof t){var e=n.indexOf(r.methodMap,t.toLowerCase());t=e>=0?e:parseInt(t,10)}return t},log:function(t){if(t=r.lookupLevel(t),"undefined"!=typeof console&&r.lookupLevel(r.level)<=t){var e=r.methodMap[t];console[e]||(e="log");for(var i=arguments.length,n=Array(i>1?i-1:0),s=1;s<i;s++)n[s-1]=arguments[s];console[e].apply(console,n)}}};e["default"]=r,t.exports=e["default"]},function(t,e){"use strict";function i(t){this.string=t}e.__esModule=!0,i.prototype.toString=i.prototype.toHTML=function(){return""+this.string},e["default"]=i,t.exports=e["default"]},function(t,e,i){"use strict";function n(t){var e=t&&t[0]||1,i=g.COMPILER_REVISION;if(e!==i){if(e<i){var n=g.REVISION_CHANGES[i],r=g.REVISION_CHANGES[e];throw new _["default"]("Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version ("+n+") or downgrade your runtime to an older version ("+r+").")}throw new _["default"]("Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version ("+t[1]+").")}}function r(t,e){function i(i,n,r){r.hash&&(n=f.extend({},n,r.hash),r.ids&&(r.ids[0]=!0)),i=e.VM.resolvePartial.call(this,i,n,r);var s=e.VM.invokePartial.call(this,i,n,r);if(null==s&&e.compile&&(r.partials[r.name]=e.compile(i,t.compilerOptions,e),s=r.partials[r.name](n,r)),null!=s){if(r.indent){for(var o=s.split("\n"),a=0,l=o.length;a<l&&(o[a]||a+1!==l);a++)o[a]=r.indent+o[a];s=o.join("\n")}return s}throw new _["default"]("The partial "+r.name+" could not be compiled when running in runtime-only mode")}function n(e){function i(e){return""+t.main(r,e,r.helpers,r.partials,o,l,a)}var s=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=s.data;n._setup(s),!s.partial&&t.useData&&(o=c(e,o));var a=void 0,l=t.useBlockParams?[]:void 0;return t.useDepths&&(a=s.depths?e!==s.depths[0]?[e].concat(s.depths):s.depths:[e]),(i=u(t.main,i,r,s.depths||[],o,l))(e,s)}if(!e)throw new _["default"]("No environment passed to template");if(!t||!t.main)throw new _["default"]("Unknown template object: "+typeof t);t.main.decorator=t.main_d,e.VM.checkRevision(t.compiler);var r={strict:function(t,e){if(!(e in t))throw new _["default"]('"'+e+'" not defined in '+t);return t[e]},lookup:function(t,e){for(var i=t.length,n=0;n<i;n++)if(t[n]&&null!=t[n][e])return t[n][e]},lambda:function(t,e){return"function"==typeof t?t.call(e):t},escapeExpression:f.escapeExpression,invokePartial:i,fn:function(e){var i=t[e];return i.decorator=t[e+"_d"],i},programs:[],program:function(t,e,i,n,r){var o=this.programs[t],a=this.fn(t);return e||r||n||i?o=s(this,t,a,e,i,n,r):o||(o=this.programs[t]=s(this,t,a)),o},data:function(t,e){for(;t&&e--;)t=t._parent;return t},merge:function(t,e){var i=t||e;return t&&e&&t!==e&&(i=f.extend({},e,t)),i},noop:e.VM.noop,compilerInfo:t.compiler};return n.isTop=!0,n._setup=function(i){i.partial?(r.helpers=i.helpers,r.partials=i.partials,r.decorators=i.decorators):(r.helpers=r.merge(i.helpers,e.helpers),t.usePartial&&(r.partials=r.merge(i.partials,e.partials)),(t.usePartial||t.useDecorators)&&(r.decorators=r.merge(i.decorators,e.decorators)))},n._child=function(e,i,n,o){if(t.useBlockParams&&!n)throw new _["default"]("must pass block params");if(t.useDepths&&!o)throw new _["default"]("must pass parent depths");return s(r,e,t[e],i,0,n,o)},n}function s(t,e,i,n,r,s,o){function a(e){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],a=o;return o&&e!==o[0]&&(a=[e].concat(o)),i(t,e,t.helpers,t.partials,r.data||n,s&&[r.blockParams].concat(s),a)}return a=u(i,a,t,o,n,s),a.program=e,a.depth=o?o.length:0,a.blockParams=r||0,a}function o(t,e,i){return t?t.call||i.name||(i.name=t,t=i.partials[t]):t="@partial-block"===i.name?i.data["partial-block"]:i.partials[i.name],t}function a(t,e,i){i.partial=!0,i.ids&&(i.data.contextPath=i.ids[0]||i.data.contextPath);var n=void 0;if(i.fn&&i.fn!==l&&(i.data=g.createFrame(i.data),n=i.data["partial-block"]=i.fn,n.partials&&(i.partials=f.extend({},i.partials,n.partials))),void 0===t&&n&&(t=n),void 0===t)throw new _["default"]("The partial "+i.name+" could not be found");if(t instanceof Function)return t(e,i)}function l(){return""}function c(t,e){return e&&"root"in e||(e=e?g.createFrame(e):{},e.root=t),e}function u(t,e,i,n,r,s){if(t.decorator){var o={};e=t.decorator(e,o,i,n&&n[0],r,s,n),f.extend(e,o)}return e}var d=i(3)["default"],h=i(1)["default"];e.__esModule=!0,e.checkRevision=n,e.template=r,e.wrapProgram=s,e.resolvePartial=o,e.invokePartial=a,e.noop=l;var p=i(5),f=d(p),m=i(6),_=h(m),g=i(4)},function(t,e){(function(i){"use strict";e.__esModule=!0,e["default"]=function(t){var e="undefined"!=typeof i?i:window,n=e.Handlebars;t.noConflict=function(){return e.Handlebars===t&&(e.Handlebars=n),t}},t.exports=e["default"]}).call(e,function(){return this}())},function(t,e){"use strict";e.__esModule=!0;var i={helpers:{helperExpression:function(t){return"SubExpression"===t.type||("MustacheStatement"===t.type||"BlockStatement"===t.type)&&!!(t.params&&t.params.length||t.hash)},scopedId:function(t){return/^\.|this\b/.test(t.original)},simpleId:function(t){return 1===t.parts.length&&!i.helpers.scopedId(t)&&!t.depth}}};e["default"]=i,t.exports=e["default"]},function(t,e,i){"use strict";function n(t,e){if("Program"===t.type)return t;a["default"].yy=p,p.locInfo=function(t){return new p.SourceLocation(e&&e.srcName,t)};var i=new c["default"](e);return i.accept(a["default"].parse(t))}var r=i(1)["default"],s=i(3)["default"];e.__esModule=!0,e.parse=n;var o=i(23),a=r(o),l=i(24),c=r(l),u=i(26),d=s(u),h=i(5);e.parser=a["default"];var p={};h.extend(p,d)},function(t,e){"use strict";var i=function(){function t(){this.yy={}}var e={trace:function(){},yy:{},symbols_:{error:2,root:3,program:4,EOF:5,program_repetition0:6,statement:7,mustache:8,block:9,rawBlock:10,partial:11,partialBlock:12,content:13,COMMENT:14,CONTENT:15,openRawBlock:16,rawBlock_repetition_plus0:17,END_RAW_BLOCK:18,OPEN_RAW_BLOCK:19,helperName:20,openRawBlock_repetition0:21,openRawBlock_option0:22,CLOSE_RAW_BLOCK:23,openBlock:24,block_option0:25,closeBlock:26,openInverse:27,block_option1:28,OPEN_BLOCK:29,openBlock_repetition0:30,openBlock_option0:31,openBlock_option1:32,CLOSE:33,OPEN_INVERSE:34,openInverse_repetition0:35,openInverse_option0:36,openInverse_option1:37,openInverseChain:38,OPEN_INVERSE_CHAIN:39,openInverseChain_repetition0:40,openInverseChain_option0:41,openInverseChain_option1:42,inverseAndProgram:43,INVERSE:44,inverseChain:45,inverseChain_option0:46,OPEN_ENDBLOCK:47,OPEN:48,mustache_repetition0:49,mustache_option0:50,OPEN_UNESCAPED:51,mustache_repetition1:52,mustache_option1:53,CLOSE_UNESCAPED:54,OPEN_PARTIAL:55,partialName:56,partial_repetition0:57,partial_option0:58,openPartialBlock:59,OPEN_PARTIAL_BLOCK:60,openPartialBlock_repetition0:61,openPartialBlock_option0:62,param:63,sexpr:64,OPEN_SEXPR:65,sexpr_repetition0:66,sexpr_option0:67,CLOSE_SEXPR:68,hash:69,hash_repetition_plus0:70,hashSegment:71,ID:72,EQUALS:73,blockParams:74,OPEN_BLOCK_PARAMS:75,blockParams_repetition_plus0:76,CLOSE_BLOCK_PARAMS:77,path:78,dataName:79,STRING:80,NUMBER:81,BOOLEAN:82,UNDEFINED:83,NULL:84,DATA:85,pathSegments:86,SEP:87,$accept:0,$end:1},terminals_:{2:"error",5:"EOF",14:"COMMENT",15:"CONTENT",18:"END_RAW_BLOCK",19:"OPEN_RAW_BLOCK",23:"CLOSE_RAW_BLOCK",29:"OPEN_BLOCK",33:"CLOSE",34:"OPEN_INVERSE",39:"OPEN_INVERSE_CHAIN",44:"INVERSE",47:"OPEN_ENDBLOCK",48:"OPEN",51:"OPEN_UNESCAPED",54:"CLOSE_UNESCAPED",55:"OPEN_PARTIAL",60:"OPEN_PARTIAL_BLOCK",65:"OPEN_SEXPR",68:"CLOSE_SEXPR",72:"ID",73:"EQUALS",75:"OPEN_BLOCK_PARAMS",77:"CLOSE_BLOCK_PARAMS",80:"STRING",81:"NUMBER",82:"BOOLEAN",83:"UNDEFINED",84:"NULL",85:"DATA",87:"SEP"},productions_:[0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,1],[10,3],[16,5],[9,4],[9,4],[24,6],[27,6],[38,6],[43,2],[45,3],[45,1],[26,3],[8,5],[8,5],[11,5],[12,3],[59,5],[63,1],[63,1],[64,5],[69,1],[71,3],[74,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[56,1],[56,1],[79,2],[78,1],[86,3],[86,1],[6,0],[6,2],[17,1],[17,2],[21,0],[21,2],[22,0],[22,1],[25,0],[25,1],[28,0],[28,1],[30,0],[30,2],[31,0],[31,1],[32,0],[32,1],[35,0],[35,2],[36,0],[36,1],[37,0],[37,1],[40,0],[40,2],[41,0],[41,1],[42,0],[42,1],[46,0],[46,1],[49,0],[49,2],[50,0],[50,1],[52,0],[52,2],[53,0],[53,1],[57,0],[57,2],[58,0],[58,1],[61,0],[61,2],[62,0],[62,1],[66,0],[66,2],[67,0],[67,1],[70,1],[70,2],[76,1],[76,2]],performAction:function(t,e,i,n,r,s,o){var a=s.length-1;switch(r){case 1:return s[a-1];case 2:this.$=n.prepareProgram(s[a]);break;case 3:this.$=s[a];break;case 4:this.$=s[a];break;case 5:this.$=s[a];break;case 6:this.$=s[a];break;case 7:this.$=s[a];break;case 8:this.$=s[a];break;case 9:this.$={type:"CommentStatement",value:n.stripComment(s[a]),strip:n.stripFlags(s[a],s[a]),loc:n.locInfo(this._$)};break;case 10:this.$={type:"ContentStatement",original:s[a],value:s[a],loc:n.locInfo(this._$)};break;case 11:this.$=n.prepareRawBlock(s[a-2],s[a-1],s[a],this._$);break;case 12:this.$={path:s[a-3],params:s[a-2],hash:s[a-1]};break;case 13:this.$=n.prepareBlock(s[a-3],s[a-2],s[a-1],s[a],!1,this._$);break;case 14:this.$=n.prepareBlock(s[a-3],s[a-2],s[a-1],s[a],!0,this._$);break;case 15:this.$={open:s[a-5],path:s[a-4],params:s[a-3],hash:s[a-2],blockParams:s[a-1],strip:n.stripFlags(s[a-5],s[a])};break;case 16:this.$={path:s[a-4],params:s[a-3],hash:s[a-2],blockParams:s[a-1],strip:n.stripFlags(s[a-5],s[a])};break;case 17:this.$={path:s[a-4],params:s[a-3],hash:s[a-2],blockParams:s[a-1],strip:n.stripFlags(s[a-5],s[a])};break;case 18:this.$={strip:n.stripFlags(s[a-1],s[a-1]),program:s[a]};break;case 19:var l=n.prepareBlock(s[a-2],s[a-1],s[a],s[a],!1,this._$),c=n.prepareProgram([l],s[a-1].loc);c.chained=!0,this.$={strip:s[a-2].strip,program:c,chain:!0};break;case 20:this.$=s[a];break;case 21:this.$={path:s[a-1],strip:n.stripFlags(s[a-2],s[a])};break;case 22:this.$=n.prepareMustache(s[a-3],s[a-2],s[a-1],s[a-4],n.stripFlags(s[a-4],s[a]),this._$);break;case 23:this.$=n.prepareMustache(s[a-3],s[a-2],s[a-1],s[a-4],n.stripFlags(s[a-4],s[a]),this._$);break;case 24:this.$={type:"PartialStatement",name:s[a-3],params:s[a-2],hash:s[a-1],indent:"",strip:n.stripFlags(s[a-4],s[a]),loc:n.locInfo(this._$)};break;case 25:this.$=n.preparePartialBlock(s[a-2],s[a-1],s[a],this._$);break;case 26:this.$={path:s[a-3],params:s[a-2],hash:s[a-1],strip:n.stripFlags(s[a-4],s[a])};break;case 27:this.$=s[a];break;case 28:this.$=s[a];break;case 29:this.$={type:"SubExpression",path:s[a-3],params:s[a-2],hash:s[a-1],loc:n.locInfo(this._$)};break;case 30:this.$={type:"Hash",pairs:s[a],loc:n.locInfo(this._$)};break;case 31:this.$={type:"HashPair",key:n.id(s[a-2]),value:s[a],loc:n.locInfo(this._$)};break;case 32:this.$=n.id(s[a-1]);break;case 33:this.$=s[a];break;case 34:this.$=s[a];break;case 35:this.$={type:"StringLiteral",value:s[a],original:s[a],loc:n.locInfo(this._$)};break;case 36:this.$={type:"NumberLiteral",value:Number(s[a]),original:Number(s[a]),loc:n.locInfo(this._$)};break;case 37:this.$={type:"BooleanLiteral",value:"true"===s[a],original:"true"===s[a],loc:n.locInfo(this._$)};break;case 38:this.$={type:"UndefinedLiteral",original:void 0,value:void 0,loc:n.locInfo(this._$)};break;case 39:this.$={type:"NullLiteral",original:null,value:null,loc:n.locInfo(this._$)};break;case 40:this.$=s[a];break;case 41:this.$=s[a];break;case 42:this.$=n.preparePath(!0,s[a],this._$);break;case 43:this.$=n.preparePath(!1,s[a],this._$);break;case 44:s[a-2].push({part:n.id(s[a]),original:s[a],separator:s[a-1]}),this.$=s[a-2];break;case 45:this.$=[{part:n.id(s[a]),original:s[a]}];break;case 46:this.$=[];break;case 47:s[a-1].push(s[a]);break;case 48:this.$=[s[a]];break;case 49:s[a-1].push(s[a]);break;case 50:this.$=[];break;case 51:s[a-1].push(s[a]);break;case 58:this.$=[];break;case 59:s[a-1].push(s[a]);break;case 64:this.$=[];break;case 65:s[a-1].push(s[a]);break;case 70:this.$=[];break;case 71:s[a-1].push(s[a]);break;case 78:this.$=[];break;case 79:s[a-1].push(s[a]);break;case 82:this.$=[];break;case 83:s[a-1].push(s[a]);break;case 86:this.$=[];break;case 87:s[a-1].push(s[a]);break;case 90:this.$=[];break;case 91:s[a-1].push(s[a]);break;case 94:this.$=[];break;case 95:s[a-1].push(s[a]);break;case 98:this.$=[s[a]];break;case 99:s[a-1].push(s[a]);break;case 100:this.$=[s[a]];break;case 101:s[a-1].push(s[a])}},table:[{3:1,4:2,5:[2,46],6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:[1,12],15:[1,20],16:17,19:[1,23],24:15,27:16,29:[1,21],34:[1,22],39:[2,2],44:[2,2],47:[2,2],48:[1,13],51:[1,14],55:[1,18],59:19,60:[1,24]},{1:[2,1]},{5:[2,47],14:[2,47],15:[2,47],19:[2,47],29:[2,47],34:[2,47],39:[2,47],44:[2,47],47:[2,47],48:[2,47],51:[2,47],55:[2,47],60:[2,47]},{5:[2,3],14:[2,3],15:[2,3],19:[2,3],29:[2,3],34:[2,3],39:[2,3],44:[2,3],47:[2,3],48:[2,3],51:[2,3],55:[2,3],60:[2,3]},{5:[2,4],14:[2,4],15:[2,4],19:[2,4],29:[2,4],34:[2,4],39:[2,4],44:[2,4],47:[2,4],48:[2,4],51:[2,4],55:[2,4],60:[2,4]},{5:[2,5],14:[2,5],15:[2,5],19:[2,5],29:[2,5],34:[2,5],39:[2,5],44:[2,5],47:[2,5],48:[2,5],51:[2,5],55:[2,5],60:[2,5]},{5:[2,6],14:[2,6],15:[2,6],19:[2,6],29:[2,6],34:[2,6],39:[2,6],44:[2,6],47:[2,6],48:[2,6],51:[2,6],55:[2,6],60:[2,6]},{5:[2,7],14:[2,7],15:[2,7],19:[2,7],29:[2,7],34:[2,7],39:[2,7],44:[2,7],47:[2,7],48:[2,7],51:[2,7],55:[2,7],60:[2,7]},{5:[2,8],14:[2,8],15:[2,8],19:[2,8],29:[2,8],34:[2,8],39:[2,8],44:[2,8],47:[2,8],48:[2,8],51:[2,8],55:[2,8],60:[2,8]},{5:[2,9],14:[2,9],15:[2,9],19:[2,9],29:[2,9],34:[2,9],39:[2,9],44:[2,9],47:[2,9],48:[2,9],51:[2,9],55:[2,9],60:[2,9]},{20:25,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:36,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:37,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{4:38,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{13:40,15:[1,20],17:39},{20:42,56:41,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:45,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{5:[2,10],14:[2,10],15:[2,10],18:[2,10],19:[2,10],29:[2,10],34:[2,10],39:[2,10],44:[2,10],47:[2,10],48:[2,10],51:[2,10],55:[2,10],60:[2,10]},{20:46,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:47,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:48,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:42,56:49,64:43,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[2,78],49:50,65:[2,78],72:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78]},{23:[2,33],33:[2,33],54:[2,33],65:[2,33],68:[2,33],72:[2,33],75:[2,33],80:[2,33],81:[2,33],82:[2,33],83:[2,33],84:[2,33],85:[2,33]},{23:[2,34],33:[2,34],54:[2,34],65:[2,34],68:[2,34],72:[2,34],75:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34]},{23:[2,35],33:[2,35],54:[2,35],65:[2,35],68:[2,35],72:[2,35],75:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35]},{23:[2,36],33:[2,36],54:[2,36],65:[2,36],68:[2,36],72:[2,36],75:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36]},{23:[2,37],33:[2,37],54:[2,37],65:[2,37],68:[2,37],72:[2,37],75:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37]},{23:[2,38],33:[2,38],54:[2,38],65:[2,38],68:[2,38],72:[2,38],75:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38]},{23:[2,39],33:[2,39],54:[2,39],65:[2,39],68:[2,39],72:[2,39],75:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39]},{23:[2,43],33:[2,43],54:[2,43],65:[2,43],68:[2,43],72:[2,43],75:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],87:[1,51]},{72:[1,35],86:52},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{52:53,54:[2,82],65:[2,82],72:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82]},{25:54,38:56,39:[1,58],43:57,44:[1,59],45:55,47:[2,54]},{28:60,43:61,44:[1,59],47:[2,56]},{13:63,15:[1,20],18:[1,62]},{15:[2,48],18:[2,48]},{33:[2,86],57:64,65:[2,86],72:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86]},{33:[2,40],65:[2,40],72:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40]},{33:[2,41],65:[2,41],72:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41]},{20:65,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:66,47:[1,67]},{30:68,33:[2,58],65:[2,58],72:[2,58],75:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58]},{33:[2,64],35:69,65:[2,64],72:[2,64],75:[2,64],80:[2,64],81:[2,64],82:[2,64],83:[2,64],84:[2,64],85:[2,64]},{21:70,23:[2,50],65:[2,50],72:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50]},{33:[2,90],61:71,65:[2,90],72:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90]},{20:75,33:[2,80],50:72,63:73,64:76,65:[1,44],69:74,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{72:[1,80]},{23:[2,42],33:[2,42],54:[2,42],65:[2,42],68:[2,42],72:[2,42],75:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],87:[1,51]},{20:75,53:81,54:[2,84],63:82,64:76,65:[1,44],69:83,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:84,47:[1,67]},{47:[2,55]},{4:85,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{47:[2,20]},{20:86,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:87,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{26:88,47:[1,67]},{47:[2,57]},{5:[2,11],14:[2,11],15:[2,11],19:[2,11],29:[2,11],34:[2,11],39:[2,11],44:[2,11],47:[2,11],48:[2,11],51:[2,11],55:[2,11],60:[2,11]},{15:[2,49],18:[2,49]},{20:75,33:[2,88],58:89,63:90,64:76,65:[1,44],69:91,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{65:[2,94],66:92,68:[2,94],72:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94]},{5:[2,25],14:[2,25],15:[2,25],19:[2,25],29:[2,25],34:[2,25],39:[2,25],44:[2,25],47:[2,25],48:[2,25],51:[2,25],55:[2,25],60:[2,25]},{20:93,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,31:94,33:[2,60],63:95,64:76,65:[1,44],69:96,70:77,71:78,72:[1,79],75:[2,60],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,66],36:97,63:98,64:76,65:[1,44],69:99,70:77,71:78,72:[1,79],75:[2,66],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,22:100,23:[2,52],63:101,64:76,65:[1,44],69:102,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:75,33:[2,92],62:103,63:104,64:76,65:[1,44],69:105,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,106]},{33:[2,79],65:[2,79],72:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79]},{33:[2,81]},{23:[2,27],33:[2,27],54:[2,27],65:[2,27],68:[2,27],72:[2,27],75:[2,27],80:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27],85:[2,27]},{23:[2,28],33:[2,28],54:[2,28],65:[2,28],68:[2,28],72:[2,28],75:[2,28],80:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28],85:[2,28]},{23:[2,30],33:[2,30],54:[2,30],68:[2,30],71:107,72:[1,108],75:[2,30]},{23:[2,98],33:[2,98],54:[2,98],68:[2,98],72:[2,98],75:[2,98]},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],73:[1,109],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{23:[2,44],33:[2,44],54:[2,44],65:[2,44],68:[2,44],72:[2,44],75:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],87:[2,44]},{54:[1,110]},{54:[2,83],65:[2,83],72:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83]},{54:[2,85]},{5:[2,13],14:[2,13],15:[2,13],19:[2,13],29:[2,13],34:[2,13],39:[2,13],44:[2,13],47:[2,13],48:[2,13],51:[2,13],55:[2,13],60:[2,13]},{38:56,39:[1,58],43:57,44:[1,59],45:112,46:111,47:[2,76]},{33:[2,70],40:113,65:[2,70],72:[2,70],75:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70]},{47:[2,18]},{5:[2,14],14:[2,14],15:[2,14],19:[2,14],29:[2,14],34:[2,14],39:[2,14],44:[2,14],47:[2,14],48:[2,14],51:[2,14],55:[2,14],60:[2,14]},{33:[1,114]},{33:[2,87],65:[2,87],72:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87]},{33:[2,89]},{20:75,63:116,64:76,65:[1,44],67:115,68:[2,96],69:117,70:77,71:78,72:[1,79],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,118]},{32:119,33:[2,62],74:120,75:[1,121]},{33:[2,59],65:[2,59],72:[2,59],75:[2,59],80:[2,59],81:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59]},{33:[2,61],75:[2,61]},{33:[2,68],37:122,74:123,75:[1,121]},{33:[2,65],65:[2,65],72:[2,65],75:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65]},{33:[2,67],75:[2,67]},{23:[1,124]},{23:[2,51],65:[2,51],72:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51]},{23:[2,53]},{33:[1,125]},{33:[2,91],65:[2,91],72:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91]},{33:[2,93]},{5:[2,22],14:[2,22],15:[2,22],19:[2,22],29:[2,22],34:[2,22],39:[2,22],44:[2,22],47:[2,22],48:[2,22],51:[2,22],55:[2,22],60:[2,22]},{23:[2,99],33:[2,99],54:[2,99],68:[2,99],72:[2,99],75:[2,99]},{73:[1,109]},{20:75,63:126,64:76,65:[1,44],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,23],14:[2,23],15:[2,23],19:[2,23],29:[2,23],34:[2,23],39:[2,23],44:[2,23],47:[2,23],48:[2,23],51:[2,23],55:[2,23],60:[2,23]},{47:[2,19]},{47:[2,77]},{20:75,33:[2,72],41:127,63:128,64:76,65:[1,44],69:129,70:77,71:78,72:[1,79],75:[2,72],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,24],14:[2,24],15:[2,24],19:[2,24],29:[2,24],34:[2,24],39:[2,24],44:[2,24],47:[2,24],48:[2,24],51:[2,24],55:[2,24],60:[2,24]},{68:[1,130]},{65:[2,95],68:[2,95],72:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95]},{68:[2,97]},{5:[2,21],14:[2,21],15:[2,21],19:[2,21],29:[2,21],34:[2,21],39:[2,21],44:[2,21],47:[2,21],48:[2,21],51:[2,21],55:[2,21],60:[2,21]},{33:[1,131]},{33:[2,63]},{72:[1,133],76:132},{33:[1,134]},{33:[2,69]},{15:[2,12]},{14:[2,26],15:[2,26],19:[2,26],29:[2,26],34:[2,26],47:[2,26],48:[2,26],51:[2,26],55:[2,26],60:[2,26]},{23:[2,31],33:[2,31],54:[2,31],68:[2,31],72:[2,31],75:[2,31]},{33:[2,74],42:135,74:136,75:[1,121]},{33:[2,71],65:[2,71],72:[2,71],75:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71]},{33:[2,73],75:[2,73]},{23:[2,29],33:[2,29],54:[2,29],65:[2,29],68:[2,29],72:[2,29],75:[2,29],80:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29],85:[2,29]},{14:[2,15],15:[2,15],19:[2,15],29:[2,15],34:[2,15],39:[2,15],44:[2,15],47:[2,15],48:[2,15],51:[2,15],55:[2,15],60:[2,15]},{72:[1,138],77:[1,137]},{72:[2,100],77:[2,100]},{14:[2,16],15:[2,16],19:[2,16],29:[2,16],34:[2,16],44:[2,16],47:[2,16],48:[2,16],51:[2,16],55:[2,16],60:[2,16]},{33:[1,139]},{33:[2,75]},{33:[2,32]},{72:[2,101],77:[2,101]},{14:[2,17],15:[2,17],19:[2,17],29:[2,17],34:[2,17],39:[2,17],44:[2,17],
	47:[2,17],48:[2,17],51:[2,17],55:[2,17],60:[2,17]}],defaultActions:{4:[2,1],55:[2,55],57:[2,20],61:[2,57],74:[2,81],83:[2,85],87:[2,18],91:[2,89],102:[2,53],105:[2,93],111:[2,19],112:[2,77],117:[2,97],120:[2,63],123:[2,69],124:[2,12],136:[2,75],137:[2,32]},parseError:function(t,e){throw new Error(t)},parse:function(t){function e(){var t;return t=i.lexer.lex()||1,"number"!=typeof t&&(t=i.symbols_[t]||t),t}var i=this,n=[0],r=[null],s=[],o=this.table,a="",l=0,c=0,u=0;this.lexer.setInput(t),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,"undefined"==typeof this.lexer.yylloc&&(this.lexer.yylloc={});var d=this.lexer.yylloc;s.push(d);var h=this.lexer.options&&this.lexer.options.ranges;"function"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var p,f,m,_,g,v,y,b,w,M={};;){if(m=n[n.length-1],this.defaultActions[m]?_=this.defaultActions[m]:(null!==p&&"undefined"!=typeof p||(p=e()),_=o[m]&&o[m][p]),"undefined"==typeof _||!_.length||!_[0]){var k="";if(!u){w=[];for(v in o[m])this.terminals_[v]&&v>2&&w.push("'"+this.terminals_[v]+"'");k=this.lexer.showPosition?"Parse error on line "+(l+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+w.join(", ")+", got '"+(this.terminals_[p]||p)+"'":"Parse error on line "+(l+1)+": Unexpected "+(1==p?"end of input":"'"+(this.terminals_[p]||p)+"'"),this.parseError(k,{text:this.lexer.match,token:this.terminals_[p]||p,line:this.lexer.yylineno,loc:d,expected:w})}}if(_[0]instanceof Array&&_.length>1)throw new Error("Parse Error: multiple actions possible at state: "+m+", token: "+p);switch(_[0]){case 1:n.push(p),r.push(this.lexer.yytext),s.push(this.lexer.yylloc),n.push(_[1]),p=null,f?(p=f,f=null):(c=this.lexer.yyleng,a=this.lexer.yytext,l=this.lexer.yylineno,d=this.lexer.yylloc,u>0&&u--);break;case 2:if(y=this.productions_[_[1]][1],M.$=r[r.length-y],M._$={first_line:s[s.length-(y||1)].first_line,last_line:s[s.length-1].last_line,first_column:s[s.length-(y||1)].first_column,last_column:s[s.length-1].last_column},h&&(M._$.range=[s[s.length-(y||1)].range[0],s[s.length-1].range[1]]),g=this.performAction.call(M,a,c,l,this.yy,_[1],r,s),"undefined"!=typeof g)return g;y&&(n=n.slice(0,-1*y*2),r=r.slice(0,-1*y),s=s.slice(0,-1*y)),n.push(this.productions_[_[1]][0]),r.push(M.$),s.push(M._$),b=o[n[n.length-2]][n[n.length-1]],n.push(b);break;case 3:return!0}}return!0}},i=function(){var t={EOF:1,parseError:function(t,e){if(!this.yy.parser)throw new Error(t);this.yy.parser.parseError(t,e)},setInput:function(t){return this._input=t,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match="",this.conditionStack=["INITIAL"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var t=this._input[0];this.yytext+=t,this.yyleng++,this.offset++,this.match+=t,this.matched+=t;var e=t.match(/(?:\r\n?|\n).*/g);return e?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),t},unput:function(t){var e=t.length,i=t.split(/(?:\r\n?|\n)/g);this._input=t+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-e-1),this.offset-=e;var n=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),i.length-1&&(this.yylineno-=i.length-1);var r=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:i?(i.length===n.length?this.yylloc.first_column:0)+n[n.length-i.length].length-i[0].length:this.yylloc.first_column-e},this.options.ranges&&(this.yylloc.range=[r[0],r[0]+this.yyleng-e]),this},more:function(){return this._more=!0", "base64"));
  res.write(new Buffer(",this},less:function(t){this.unput(this.match.slice(t))},pastInput:function(){var t=this.matched.substr(0,this.matched.length-this.match.length);return(t.length>20?"...":"")+t.substr(-20).replace(/\n/g,"")},upcomingInput:function(){var t=this.match;return t.length<20&&(t+=this._input.substr(0,20-t.length)),(t.substr(0,20)+(t.length>20?"...":"")).replace(/\n/g,"")},showPosition:function(){var t=this.pastInput(),e=new Array(t.length+1).join("-");return t+this.upcomingInput()+"\n"+e+"^"},next:function(){if(this.done)return this.EOF;this._input||(this.done=!0);var t,e,i,n,r;this._more||(this.yytext="",this.match="");for(var s=this._currentRules(),o=0;o<s.length&&(i=this._input.match(this.rules[s[o]]),!i||e&&!(i[0].length>e[0].length)||(e=i,n=o,this.options.flex));o++);return e?(r=e[0].match(/(?:\r\n?|\n).*/g),r&&(this.yylineno+=r.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:r?r[r.length-1].length-r[r.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+e[0].length},this.yytext+=e[0],this.match+=e[0],this.matches=e,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(e[0].length),this.matched+=e[0],t=this.performAction.call(this,this.yy,this,s[n],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),t?t:void 0):""===this._input?this.EOF:this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})},lex:function(){var t=this.next();return"undefined"!=typeof t?t:this.lex()},begin:function(t){this.conditionStack.push(t)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(t){this.begin(t)}};return t.options={},t.performAction=function(t,e,i,n){function r(t,i){return e.yytext=e.yytext.substr(t,e.yyleng-i)}switch(i){case 0:if("\\\\"===e.yytext.slice(-2)?(r(0,1),this.begin("mu")):"\\"===e.yytext.slice(-1)?(r(0,1),this.begin("emu")):this.begin("mu"),e.yytext)return 15;break;case 1:return 15;case 2:return this.popState(),15;case 3:return this.begin("raw"),15;case 4:return this.popState(),"raw"===this.conditionStack[this.conditionStack.length-1]?15:(e.yytext=e.yytext.substr(5,e.yyleng-9),"END_RAW_BLOCK");case 5:return 15;case 6:return this.popState(),14;case 7:return 65;case 8:return 68;case 9:return 19;case 10:return this.popState(),this.begin("raw"),23;case 11:return 55;case 12:return 60;case 13:return 29;case 14:return 47;case 15:return this.popState(),44;case 16:return this.popState(),44;case 17:return 34;case 18:return 39;case 19:return 51;case 20:return 48;case 21:this.unput(e.yytext),this.popState(),this.begin("com");break;case 22:return this.popState(),14;case 23:return 48;case 24:return 73;case 25:return 72;case 26:return 72;case 27:return 87;case 28:break;case 29:return this.popState(),54;case 30:return this.popState(),33;case 31:return e.yytext=r(1,2).replace(/\\"/g,'"'),80;case 32:return e.yytext=r(1,2).replace(/\\'/g,"'"),80;case 33:return 85;case 34:return 82;case 35:return 82;case 36:return 83;case 37:return 84;case 38:return 81;case 39:return 75;case 40:return 77;case 41:return 72;case 42:return e.yytext=e.yytext.replace(/\\([\\\]])/g,"$1"),72;case 43:return"INVALID";case 44:return 5}},t.rules=[/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/,/^(?:\{\{\{\{(?=[^\/]))/,/^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/,/^(?:[^\x00]*?(?=(\{\{\{\{)))/,/^(?:[\s\S]*?--(~)?\}\})/,/^(?:\()/,/^(?:\))/,/^(?:\{\{\{\{)/,/^(?:\}\}\}\})/,/^(?:\{\{(~)?>)/,/^(?:\{\{(~)?#>)/,/^(?:\{\{(~)?#\*?)/,/^(?:\{\{(~)?\/)/,/^(?:\{\{(~)?\^\s*(~)?\}\})/,/^(?:\{\{(~)?\s*else\s*(~)?\}\})/,/^(?:\{\{(~)?\^)/,/^(?:\{\{(~)?\s*else\b)/,/^(?:\{\{(~)?\{)/,/^(?:\{\{(~)?&)/,/^(?:\{\{(~)?!--)/,/^(?:\{\{(~)?![\s\S]*?\}\})/,/^(?:\{\{(~)?\*?)/,/^(?:=)/,/^(?:\.\.)/,/^(?:\.(?=([=~}\s\/.)|])))/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}(~)?\}\})/,/^(?:(~)?\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\s)])))/,/^(?:false(?=([~}\s)])))/,/^(?:undefined(?=([~}\s)])))/,/^(?:null(?=([~}\s)])))/,/^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/,/^(?:as\s+\|)/,/^(?:\|)/,/^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/,/^(?:\[(\\\]|[^\]])*\])/,/^(?:.)/,/^(?:$)/],t.conditions={mu:{rules:[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[6],inclusive:!1},raw:{rules:[3,4,5],inclusive:!1},INITIAL:{rules:[0,1,44],inclusive:!0}},t}();return e.lexer=i,t.prototype=e,e.Parser=t,new t}();e.__esModule=!0,e["default"]=i},function(t,e,i){"use strict";function n(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=t}function r(t,e,i){void 0===e&&(e=t.length);var n=t[e-1],r=t[e-2];return n?"ContentStatement"===n.type?(r||!i?/\r?\n\s*?$/:/(^|\r?\n)\s*?$/).test(n.original):void 0:i}function s(t,e,i){void 0===e&&(e=-1);var n=t[e+1],r=t[e+2];return n?"ContentStatement"===n.type?(r||!i?/^\s*?\r?\n/:/^\s*?(\r?\n|$)/).test(n.original):void 0:i}function o(t,e,i){var n=t[null==e?0:e+1];if(n&&"ContentStatement"===n.type&&(i||!n.rightStripped)){var r=n.value;n.value=n.value.replace(i?/^\s+/:/^[ \t]*\r?\n?/,""),n.rightStripped=n.value!==r}}function a(t,e,i){var n=t[null==e?t.length-1:e-1];if(n&&"ContentStatement"===n.type&&(i||!n.leftStripped)){var r=n.value;return n.value=n.value.replace(i?/\s+$/:/[ \t]+$/,""),n.leftStripped=n.value!==r,n.leftStripped}}var l=i(1)["default"];e.__esModule=!0;var c=i(25),u=l(c);n.prototype=new u["default"],n.prototype.Program=function(t){var e=!this.options.ignoreStandalone,i=!this.isRootSeen;this.isRootSeen=!0;for(var n=t.body,l=0,c=n.length;l<c;l++){var u=n[l],d=this.accept(u);if(d){var h=r(n,l,i),p=s(n,l,i),f=d.openStandalone&&h,m=d.closeStandalone&&p,_=d.inlineStandalone&&h&&p;d.close&&o(n,l,!0),d.open&&a(n,l,!0),e&&_&&(o(n,l),a(n,l)&&"PartialStatement"===u.type&&(u.indent=/([ \t]+$)/.exec(n[l-1].original)[1])),e&&f&&(o((u.program||u.inverse).body),a(n,l)),e&&m&&(o(n,l),a((u.inverse||u.program).body))}}return t},n.prototype.BlockStatement=n.prototype.DecoratorBlock=n.prototype.PartialBlockStatement=function(t){this.accept(t.program),this.accept(t.inverse);var e=t.program||t.inverse,i=t.program&&t.inverse,n=i,l=i;if(i&&i.chained)for(n=i.body[0].program;l.chained;)l=l.body[l.body.length-1].program;var c={open:t.openStrip.open,close:t.closeStrip.close,openStandalone:s(e.body),closeStandalone:r((n||e).body)};if(t.openStrip.close&&o(e.body,null,!0),i){var u=t.inverseStrip;u.open&&a(e.body,null,!0),u.close&&o(n.body,null,!0),t.closeStrip.open&&a(l.body,null,!0),!this.options.ignoreStandalone&&r(e.body)&&s(n.body)&&(a(e.body),o(n.body))}else t.closeStrip.open&&a(e.body,null,!0);return c},n.prototype.Decorator=n.prototype.MustacheStatement=function(t){return t.strip},n.prototype.PartialStatement=n.prototype.CommentStatement=function(t){var e=t.strip||{};return{inlineStandalone:!0,open:e.open,close:e.close}},e["default"]=n,t.exports=e["default"]},function(t,e,i){"use strict";function n(){this.parents=[]}function r(t){this.acceptRequired(t,"path"),this.acceptArray(t.params),this.acceptKey(t,"hash")}function s(t){r.call(this,t),this.acceptKey(t,"program"),this.acceptKey(t,"inverse")}function o(t){this.acceptRequired(t,"name"),this.acceptArray(t.params),this.acceptKey(t,"hash")}var a=i(1)["default"];e.__esModule=!0;var l=i(6),c=a(l);n.prototype={constructor:n,mutating:!1,acceptKey:function(t,e){var i=this.accept(t[e]);if(this.mutating){if(i&&!n.prototype[i.type])throw new c["default"]('Unexpected node type "'+i.type+'" found when accepting '+e+" on "+t.type);t[e]=i}},acceptRequired:function(t,e){if(this.acceptKey(t,e),!t[e])throw new c["default"](t.type+" requires "+e)},acceptArray:function(t){for(var e=0,i=t.length;e<i;e++)this.acceptKey(t,e),t[e]||(t.splice(e,1),e--,i--)},accept:function(t){if(t){if(!this[t.type])throw new c["default"]("Unknown type: "+t.type,t);this.current&&this.parents.unshift(this.current),this.current=t;var e=this[t.type](t);return this.current=this.parents.shift(),!this.mutating||e?e:e!==!1?t:void 0}},Program:function(t){this.acceptArray(t.body)},MustacheStatement:r,Decorator:r,BlockStatement:s,DecoratorBlock:s,PartialStatement:o,PartialBlockStatement:function(t){o.call(this,t),this.acceptKey(t,"program")},ContentStatement:function(){},CommentStatement:function(){},SubExpression:r,PathExpression:function(){},StringLiteral:function(){},NumberLiteral:function(){},BooleanLiteral:function(){},UndefinedLiteral:function(){},NullLiteral:function(){},Hash:function(t){this.acceptArray(t.pairs)},HashPair:function(t){this.acceptRequired(t,"value")}},e["default"]=n,t.exports=e["default"]},function(t,e,i){"use strict";function n(t,e){if(e=e.path?e.path.original:e,t.path.original!==e){var i={loc:t.path.loc};throw new _["default"](t.path.original+" doesn't match "+e,i)}}function r(t,e){this.source=t,this.start={line:e.first_line,column:e.first_column},this.end={line:e.last_line,column:e.last_column}}function s(t){return/^\[.*\]$/.test(t)?t.substr(1,t.length-2):t}function o(t,e){return{open:"~"===t.charAt(2),close:"~"===e.charAt(e.length-3)}}function a(t){return t.replace(/^\{\{~?\!-?-?/,"").replace(/-?-?~?\}\}$/,"")}function l(t,e,i){i=this.locInfo(i);for(var n=t?"@":"",r=[],s=0,o="",a=0,l=e.length;a<l;a++){var c=e[a].part,u=e[a].original!==c;if(n+=(e[a].separator||"")+c,u||".."!==c&&"."!==c&&"this"!==c)r.push(c);else{if(r.length>0)throw new _["default"]("Invalid path: "+n,{loc:i});".."===c&&(s++,o+="../")}}return{type:"PathExpression",data:t,depth:s,parts:r,original:n,loc:i}}function c(t,e,i,n,r,s){var o=n.charAt(3)||n.charAt(2),a="{"!==o&&"&"!==o,l=/\*/.test(n);return{type:l?"Decorator":"MustacheStatement",path:t,params:e,hash:i,escaped:a,strip:r,loc:this.locInfo(s)}}function u(t,e,i,r){n(t,i),r=this.locInfo(r);var s={type:"Program",body:e,strip:{},loc:r};return{type:"BlockStatement",path:t.path,params:t.params,hash:t.hash,program:s,openStrip:{},inverseStrip:{},closeStrip:{},loc:r}}function d(t,e,i,r,s,o){r&&r.path&&n(t,r);var a=/\*/.test(t.open);e.blockParams=t.blockParams;var l=void 0,c=void 0;if(i){if(a)throw new _["default"]("Unexpected inverse block on decorator",i);i.chain&&(i.program.body[0].closeStrip=r.strip),c=i.strip,l=i.program}return s&&(s=l,l=e,e=s),{type:a?"DecoratorBlock":"BlockStatement",path:t.path,params:t.params,hash:t.hash,program:e,inverse:l,openStrip:t.strip,inverseStrip:c,closeStrip:r&&r.strip,loc:this.locInfo(o)}}function h(t,e){if(!e&&t.length){var i=t[0].loc,n=t[t.length-1].loc;i&&n&&(e={source:i.source,start:{line:i.start.line,column:i.start.column},end:{line:n.end.line,column:n.end.column}})}return{type:"Program",body:t,strip:{},loc:e}}function p(t,e,i,r){return n(t,i),{type:"PartialBlockStatement",name:t.path,params:t.params,hash:t.hash,program:e,openStrip:t.strip,closeStrip:i&&i.strip,loc:this.locInfo(r)}}var f=i(1)["default"];e.__esModule=!0,e.SourceLocation=r,e.id=s,e.stripFlags=o,e.stripComment=a,e.preparePath=l,e.prepareMustache=c,e.prepareRawBlock=u,e.prepareBlock=d,e.prepareProgram=h,e.preparePartialBlock=p;var m=i(6),_=f(m)},function(t,e,i){"use strict";function n(){}function r(t,e,i){if(null==t||"string"!=typeof t&&"Program"!==t.type)throw new u["default"]("You must pass a string or Handlebars AST to Handlebars.precompile. You passed "+t);e=e||{},"data"in e||(e.data=!0),e.compat&&(e.useDepths=!0);var n=i.parse(t,e),r=(new i.Compiler).compile(n,e);return(new i.JavaScriptCompiler).compile(r,e)}function s(t,e,i){function n(){var n=i.parse(t,e),r=(new i.Compiler).compile(n,e),s=(new i.JavaScriptCompiler).compile(r,e,void 0,!0);return i.template(s)}function r(t,e){return s||(s=n()),s.call(this,t,e)}if(void 0===e&&(e={}),null==t||"string"!=typeof t&&"Program"!==t.type)throw new u["default"]("You must pass a string or Handlebars AST to Handlebars.compile. You passed "+t);"data"in e||(e.data=!0),e.compat&&(e.useDepths=!0);var s=void 0;return r._setup=function(t){return s||(s=n()),s._setup(t)},r._child=function(t,e,i,r){return s||(s=n()),s._child(t,e,i,r)},r}function o(t,e){if(t===e)return!0;if(d.isArray(t)&&d.isArray(e)&&t.length===e.length){for(var i=0;i<t.length;i++)if(!o(t[i],e[i]))return!1;return!0}}function a(t){if(!t.path.parts){var e=t.path;t.path={type:"PathExpression",data:!1,depth:0,parts:[e.original+""],original:e.original+"",loc:e.loc}}}var l=i(1)["default"];e.__esModule=!0,e.Compiler=n,e.precompile=r,e.compile=s;var c=i(6),u=l(c),d=i(5),h=i(21),p=l(h),f=[].slice;n.prototype={compiler:n,equals:function(t){var e=this.opcodes.length;if(t.opcodes.length!==e)return!1;for(var i=0;i<e;i++){var n=this.opcodes[i],r=t.opcodes[i];if(n.opcode!==r.opcode||!o(n.args,r.args))return!1}e=this.children.length;for(var i=0;i<e;i++)if(!this.children[i].equals(t.children[i]))return!1;return!0},guid:0,compile:function(t,e){this.sourceNode=[],this.opcodes=[],this.children=[],this.options=e,this.stringParams=e.stringParams,this.trackIds=e.trackIds,e.blockParams=e.blockParams||[];var i=e.knownHelpers;if(e.knownHelpers={helperMissing:!0,blockHelperMissing:!0,each:!0,"if":!0,unless:!0,"with":!0,log:!0,lookup:!0},i)for(var n in i)n in i&&(e.knownHelpers[n]=i[n]);return this.accept(t)},compileProgram:function(t){var e=new this.compiler,i=e.compile(t,this.options),n=this.guid++;return this.usePartial=this.usePartial||i.usePartial,this.children[n]=i,this.useDepths=this.useDepths||i.useDepths,n},accept:function(t){if(!this[t.type])throw new u["default"]("Unknown type: "+t.type,t);this.sourceNode.unshift(t);var e=this[t.type](t);return this.sourceNode.shift(),e},Program:function(t){this.options.blockParams.unshift(t.blockParams);for(var e=t.body,i=e.length,n=0;n<i;n++)this.accept(e[n]);return this.options.blockParams.shift(),this.isSimple=1===i,this.blockParams=t.blockParams?t.blockParams.length:0,this},BlockStatement:function(t){a(t);var e=t.program,i=t.inverse;e=e&&this.compileProgram(e),i=i&&this.compileProgram(i);var n=this.classifySexpr(t);"helper"===n?this.helperSexpr(t,e,i):"simple"===n?(this.simpleSexpr(t),this.opcode("pushProgram",e),this.opcode("pushProgram",i),this.opcode("emptyHash"),this.opcode("blockValue",t.path.original)):(this.ambiguousSexpr(t,e,i),this.opcode("pushProgram",e),this.opcode("pushProgram",i),this.opcode("emptyHash"),this.opcode("ambiguousBlockValue")),this.opcode("append")},DecoratorBlock:function(t){var e=t.program&&this.compileProgram(t.program),i=this.setupFullMustacheParams(t,e,void 0),n=t.path;this.useDecorators=!0,this.opcode("registerDecorator",i.length,n.original)},PartialStatement:function(t){this.usePartial=!0;var e=t.program;e&&(e=this.compileProgram(t.program));var i=t.params;if(i.length>1)throw new u["default"]("Unsupported number of partial arguments: "+i.length,t);i.length||(this.options.explicitPartialContext?this.opcode("pushLiteral","undefined"):i.push({type:"PathExpression",parts:[],depth:0}));var n=t.name.original,r="SubExpression"===t.name.type;r&&this.accept(t.name),this.setupFullMustacheParams(t,e,void 0,!0);var s=t.indent||"";this.options.preventIndent&&s&&(this.opcode("appendContent",s),s=""),this.opcode("invokePartial",r,n,s),this.opcode("append")},PartialBlockStatement:function(t){this.PartialStatement(t)},MustacheStatement:function(t){this.SubExpression(t),t.escaped&&!this.options.noEscape?this.opcode("appendEscaped"):this.opcode("append")},Decorator:function(t){this.DecoratorBlock(t)},ContentStatement:function(t){t.value&&this.opcode("appendContent",t.value)},CommentStatement:function(){},SubExpression:function(t){a(t);var e=this.classifySexpr(t);"simple"===e?this.simpleSexpr(t):"helper"===e?this.helperSexpr(t):this.ambiguousSexpr(t)},ambiguousSexpr:function(t,e,i){var n=t.path,r=n.parts[0],s=null!=e||null!=i;this.opcode("getContext",n.depth),this.opcode("pushProgram",e),this.opcode("pushProgram",i),n.strict=!0,this.accept(n),this.opcode("invokeAmbiguous",r,s)},simpleSexpr:function(t){var e=t.path;e.strict=!0,this.accept(e),this.opcode("resolvePossibleLambda")},helperSexpr:function(t,e,i){var n=this.setupFullMustacheParams(t,e,i),r=t.path,s=r.parts[0];if(this.options.knownHelpers[s])this.opcode("invokeKnownHelper",n.length,s);else{if(this.options.knownHelpersOnly)throw new u["default"]("You specified knownHelpersOnly, but used the unknown helper "+s,t);r.strict=!0,r.falsy=!0,this.accept(r),this.opcode("invokeHelper",n.length,r.original,p["default"].helpers.simpleId(r))}},PathExpression:function(t){this.addDepth(t.depth),this.opcode("getContext",t.depth);var e=t.parts[0],i=p["default"].helpers.scopedId(t),n=!t.depth&&!i&&this.blockParamIndex(e);n?this.opcode("lookupBlockParam",n,t.parts):e?t.data?(this.options.data=!0,this.opcode("lookupData",t.depth,t.parts,t.strict)):this.opcode("lookupOnContext",t.parts,t.falsy,t.strict,i):this.opcode("pushContext")},StringLiteral:function(t){this.opcode("pushString",t.value)},NumberLiteral:function(t){this.opcode("pushLiteral",t.value)},BooleanLiteral:function(t){this.opcode("pushLiteral",t.value)},UndefinedLiteral:function(){this.opcode("pushLiteral","undefined")},NullLiteral:function(){this.opcode("pushLiteral","null")},Hash:function(t){var e=t.pairs,i=0,n=e.length;for(this.opcode("pushHash");i<n;i++)this.pushParam(e[i].value);for(;i--;)this.opcode("assignToHash",e[i].key);this.opcode("popHash")},opcode:function(t){this.opcodes.push({opcode:t,args:f.call(arguments,1),loc:this.sourceNode[0].loc})},addDepth:function(t){t&&(this.useDepths=!0)},classifySexpr:function(t){var e=p["default"].helpers.simpleId(t.path),i=e&&!!this.blockParamIndex(t.path.parts[0]),n=!i&&p["default"].helpers.helperExpression(t),r=!i&&(n||e);if(r&&!n){var s=t.path.parts[0],o=this.options;o.knownHelpers[s]?n=!0:o.knownHelpersOnly&&(r=!1)}return n?"helper":r?"ambiguous":"simple"},pushParams:function(t){for(var e=0,i=t.length;e<i;e++)this.pushParam(t[e])},pushParam:function(t){var e=null!=t.value?t.value:t.original||"";if(this.stringParams)e.replace&&(e=e.replace(/^(\.?\.\/)*/g,"").replace(/\//g,".")),t.depth&&this.addDepth(t.depth),this.opcode("getContext",t.depth||0),this.opcode("pushStringParam",e,t.type),"SubExpression"===t.type&&this.accept(t);else{if(this.trackIds){var i=void 0;if(!t.parts||p["default"].helpers.scopedId(t)||t.depth||(i=this.blockParamIndex(t.parts[0])),i){var n=t.parts.slice(1).join(".");this.opcode("pushId","BlockParam",i,n)}else e=t.original||e,e.replace&&(e=e.replace(/^this(?:\.|$)/,"").replace(/^\.\//,"").replace(/^\.$/,"")),this.opcode("pushId",t.type,e)}this.accept(t)}},setupFullMustacheParams:function(t,e,i,n){var r=t.params;return this.pushParams(r),this.opcode("pushProgram",e),this.opcode("pushProgram",i),t.hash?this.accept(t.hash):this.opcode("emptyHash",n),r},blockParamIndex:function(t){for(var e=0,i=this.options.blockParams.length;e<i;e++){var n=this.options.blockParams[e],r=n&&d.indexOf(n,t);if(n&&r>=0)return[e,r]}}}},function(t,e,i){"use strict";function n(t){this.value=t}function r(){}function s(t,e,i,n){var r=e.popStack(),s=0,o=i.length;for(t&&o--;s<o;s++)r=e.nameLookup(r,i[s],n);return t?[e.aliasable("container.strict"),"(",r,", ",e.quotedString(i[s]),")"]:r}var o=i(1)["default"];e.__esModule=!0;var a=i(4),l=i(6),c=o(l),u=i(5),d=i(29),h=o(d);r.prototype={nameLookup:function(t,e){return r.isValidJavaScriptVariableName(e)?[t,".",e]:[t,"[",JSON.stringify(e),"]"]},depthedLookup:function(t){return[this.aliasable("container.lookup"),'(depths, "',t,'")']},compilerInfo:function(){var t=a.COMPILER_REVISION,e=a.REVISION_CHANGES[t];return[t,e]},appendToBuffer:function(t,e,i){return u.isArray(t)||(t=[t]),t=this.source.wrap(t,e),this.environment.isSimple?["return ",t,";"]:i?["buffer += ",t,";"]:(t.appendToBuffer=!0,t)},initializeBuffer:function(){return this.quotedString("")},compile:function(t,e,i,n){this.environment=t,this.options=e,this.stringParams=this.options.stringParams,this.trackIds=this.options.trackIds,this.precompile=!n,this.name=this.environment.name,this.isChild=!!i,this.context=i||{decorators:[],programs:[],environments:[]},this.preamble(),this.stackSlot=0,this.stackVars=[],this.aliases={},this.registers={list:[]},this.hashes=[],this.compileStack=[],this.inlineStack=[],this.blockParams=[],this.compileChildren(t,e),this.useDepths=this.useDepths||t.useDepths||t.useDecorators||this.options.compat,this.useBlockParams=this.useBlockParams||t.useBlockParams;var r=t.opcodes,s=void 0,o=void 0,a=void 0,l=void 0;for(a=0,l=r.length;a<l;a++)s=r[a],this.source.currentLocation=s.loc,o=o||s.loc,this[s.opcode].apply(this,s.args);if(this.source.currentLocation=o,this.pushSource(""),this.stackSlot||this.inlineStack.length||this.compileStack.length)throw new c["default"]("Compile completed with content left on stack");this.decorators.isEmpty()?this.decorators=void 0:(this.useDecorators=!0,this.decorators.prepend("var decorators = container.decorators;\n"),this.decorators.push("return fn;"),n?this.decorators=Function.apply(this,["fn","props","container","depth0","data","blockParams","depths",this.decorators.merge()]):(this.decorators.prepend("function(fn, props, container, depth0, data, blockParams, depths) {\n"),this.decorators.push("}\n"),this.decorators=this.decorators.merge()));var u=this.createFunctionContext(n);if(this.isChild)return u;var d={compiler:this.compilerInfo(),main:u};this.decorators&&(d.main_d=this.decorators,d.useDecorators=!0);var h=this.context,p=h.programs,f=h.decorators;for(a=0,l=p.length;a<l;a++)p[a]&&(d[a]=p[a],f[a]&&(d[a+"_d"]=f[a],d.useDecorators=!0));return this.environment.usePartial&&(d.usePartial=!0),this.options.data&&(d.useData=!0),this.useDepths&&(d.useDepths=!0),this.useBlockParams&&(d.useBlockParams=!0),this.options.compat&&(d.compat=!0),n?d.compilerOptions=this.options:(d.compiler=JSON.stringify(d.compiler),this.source.currentLocation={start:{line:1,column:0}},d=this.objectLiteral(d),e.srcName?(d=d.toStringWithSourceMap({file:e.destName}),d.map=d.map&&d.map.toString()):d=d.toString()),d},preamble:function(){this.lastContext=0,this.source=new h["default"](this.options.srcName),this.decorators=new h["default"](this.options.srcName)},createFunctionContext:function(t){var e="",i=this.stackVars.concat(this.registers.list);i.length>0&&(e+=", "+i.join(", "));var n=0;for(var r in this.aliases){var s=this.aliases[r];this.aliases.hasOwnProperty(r)&&s.children&&s.referenceCount>1&&(e+=", alias"+ ++n+"="+r,s.children[0]="alias"+n)}var o=["container","depth0","helpers","partials","data"];(this.useBlockParams||this.useDepths)&&o.push("blockParams"),this.useDepths&&o.push("depths");var a=this.mergeSource(e);return t?(o.push(a),Function.apply(this,o)):this.source.wrap(["function(",o.join(","),") {\n  ",a,"}"])},mergeSource:function(t){var e=this.environment.isSimple,i=!this.forceBuffer,n=void 0,r=void 0,s=void 0,o=void 0;return this.source.each(function(t){t.appendToBuffer?(s?t.prepend("  + "):s=t,o=t):(s&&(r?s.prepend("buffer += "):n=!0,o.add(";"),s=o=void 0),r=!0,e||(i=!1))}),i?s?(s.prepend("return "),o.add(";")):r||this.source.push('return "";'):(t+=", buffer = "+(n?"":this.initializeBuffer()),s?(s.prepend("return buffer + "),o.add(";")):this.source.push("return buffer;")),t&&this.source.prepend("var "+t.substring(2)+(n?"":";\n")),this.source.merge()},blockValue:function(t){var e=this.aliasable("helpers.blockHelperMissing"),i=[this.contextName(0)];this.setupHelperArgs(t,0,i);var n=this.popStack();i.splice(1,0,n),this.push(this.source.functionCall(e,"call",i))},ambiguousBlockValue:function(){var t=this.aliasable("helpers.blockHelperMissing"),e=[this.contextName(0)];this.setupHelperArgs("",0,e,!0),this.flushInline();var i=this.topStack();e.splice(1,0,i),this.pushSource(["if (!",this.lastHelper,") { ",i," = ",this.source.functionCall(t,"call",e),"}"])},appendContent:function(t){this.pendingContent?t=this.pendingContent+t:this.pendingLocation=this.source.currentLocation,this.pendingContent=t},append:function(){if(this.isInline())this.replaceStack(function(t){return[" != null ? ",t,' : ""']}),this.pushSource(this.appendToBuffer(this.popStack()));else{var t=this.popStack();this.pushSource(["if (",t," != null) { ",this.appendToBuffer(t,void 0,!0)," }"]),this.environment.isSimple&&this.pushSource(["else { ",this.appendToBuffer("''",void 0,!0)," }"])}},appendEscaped:function(){this.pushSource(this.appendToBuffer([this.aliasable("container.escapeExpression"),"(",this.popStack(),")"]))},getContext:function(t){this.lastContext=t},pushContext:function(){this.pushStackLiteral(this.contextName(this.lastContext))},lookupOnContext:function(t,e,i,n){var r=0;n||!this.options.compat||this.lastContext?this.pushContext():this.push(this.depthedLookup(t[r++])),this.resolvePath("context",t,r,e,i)},lookupBlockParam:function(t,e){this.useBlockParams=!0,this.push(["blockParams[",t[0],"][",t[1],"]"]),this.resolvePath("context",e,1)},lookupData:function(t,e,i){t?this.pushStackLiteral("container.data(data, "+t+")"):this.pushStackLiteral("data"),this.resolvePath("data",e,0,!0,i)},resolvePath:function(t,e,i,n,r){var o=this;if(this.options.strict||this.options.assumeObjects)return void this.push(s(this.options.strict&&r,this,e,t));for(var a=e.length;i<a;i++)this.replaceStack(function(r){var s=o.nameLookup(r,e[i],t);return n?[" && ",s]:[" != null ? ",s," : ",r]})},resolvePossibleLambda:function(){this.push([this.aliasable("container.lambda"),"(",this.popStack(),", ",this.contextName(0),")"])},pushStringParam:function(t,e){this.pushContext(),this.pushString(e),"SubExpression"!==e&&("string"==typeof t?this.pushString(t):this.pushStackLiteral(t))},emptyHash:function(t){this.trackIds&&this.push("{}"),this.stringParams&&(this.push("{}"),this.push("{}")),this.pushStackLiteral(t?"undefined":"{}")},pushHash:function(){this.hash&&this.hashes.push(this.hash),this.hash={values:[],types:[],contexts:[],ids:[]}},popHash:function(){var t=this.hash;this.hash=this.hashes.pop(),this.trackIds&&this.push(this.objectLiteral(t.ids)),this.stringParams&&(this.push(this.objectLiteral(t.contexts)),this.push(this.objectLiteral(t.types))),this.push(this.objectLiteral(t.values))},pushString:function(t){this.pushStackLiteral(this.quotedString(t))},pushLiteral:function(t){this.pushStackLiteral(t)},pushProgram:function(t){null!=t?this.pushStackLiteral(this.programExpression(t)):this.pushStackLiteral(null)},registerDecorator:function(t,e){var i=this.nameLookup("decorators",e,"decorator"),n=this.setupHelperArgs(e,t);this.decorators.push(["fn = ",this.decorators.functionCall(i,"",["fn","props","container",n])," || fn;"])},invokeHelper:function(t,e,i){var n=this.popStack(),r=this.setupHelper(t,e),s=i?[r.name," || "]:"",o=["("].concat(s,n);this.options.strict||o.push(" || ",this.aliasable("helpers.helperMissing")),o.push(")"),this.push(this.source.functionCall(o,"call",r.callParams))},invokeKnownHelper:function(t,e){var i=this.setupHelper(t,e);this.push(this.source.functionCall(i.name,"call",i.callParams))},invokeAmbiguous:function(t,e){this.useRegister("helper");var i=this.popStack();this.emptyHash();var n=this.setupHelper(0,t,e),r=this.lastHelper=this.nameLookup("helpers",t,"helper"),s=["(","(helper = ",r," || ",i,")"];this.options.strict||(s[0]="(helper = ",s.push(" != null ? helper : ",this.aliasable("helpers.helperMissing"))),this.push(["(",s,n.paramsInit?["),(",n.paramsInit]:[],"),","(typeof helper === ",this.aliasable('"function"')," ? ",this.source.functionCall("helper","call",n.callParams)," : helper))"])},invokePartial:function(t,e,i){var n=[],r=this.setupParams(e,1,n);t&&(e=this.popStack(),delete r.name),i&&(r.indent=JSON.stringify(i)),r.helpers="helpers",r.partials="partials",r.decorators="container.decorators",t?n.unshift(e):n.unshift(this.nameLookup("partials",e,"partial")),this.options.compat&&(r.depths="depths"),r=this.objectLiteral(r),n.push(r),this.push(this.source.functionCall("container.invokePartial","",n))},assignToHash:function(t){var e=this.popStack(),i=void 0,n=void 0,r=void 0;this.trackIds&&(r=this.popStack()),
	this.stringParams&&(n=this.popStack(),i=this.popStack());var s=this.hash;i&&(s.contexts[t]=i),n&&(s.types[t]=n),r&&(s.ids[t]=r),s.values[t]=e},pushId:function(t,e,i){"BlockParam"===t?this.pushStackLiteral("blockParams["+e[0]+"].path["+e[1]+"]"+(i?" + "+JSON.stringify("."+i):"")):"PathExpression"===t?this.pushString(e):"SubExpression"===t?this.pushStackLiteral("true"):this.pushStackLiteral("null")},compiler:r,compileChildren:function(t,e){for(var i=t.children,n=void 0,r=void 0,s=0,o=i.length;s<o;s++){n=i[s],r=new this.compiler;var a=this.matchExistingProgram(n);null==a?(this.context.programs.push(""),a=this.context.programs.length,n.index=a,n.name="program"+a,this.context.programs[a]=r.compile(n,e,this.context,!this.precompile),this.context.decorators[a]=r.decorators,this.context.environments[a]=n,this.useDepths=this.useDepths||r.useDepths,this.useBlockParams=this.useBlockParams||r.useBlockParams):(n.index=a,n.name="program"+a,this.useDepths=this.useDepths||n.useDepths,this.useBlockParams=this.useBlockParams||n.useBlockParams)}},matchExistingProgram:function(t){for(var e=0,i=this.context.environments.length;e<i;e++){var n=this.context.environments[e];if(n&&n.equals(t))return e}},programExpression:function(t){var e=this.environment.children[t],i=[e.index,"data",e.blockParams];return(this.useBlockParams||this.useDepths)&&i.push("blockParams"),this.useDepths&&i.push("depths"),"container.program("+i.join(", ")+")"},useRegister:function(t){this.registers[t]||(this.registers[t]=!0,this.registers.list.push(t))},push:function(t){return t instanceof n||(t=this.source.wrap(t)),this.inlineStack.push(t),t},pushStackLiteral:function(t){this.push(new n(t))},pushSource:function(t){this.pendingContent&&(this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent),this.pendingLocation)),this.pendingContent=void 0),t&&this.source.push(t)},replaceStack:function(t){var e=["("],i=void 0,r=void 0,s=void 0;if(!this.isInline())throw new c["default"]("replaceStack on non-inline");var o=this.popStack(!0);if(o instanceof n)i=[o.value],e=["(",i],s=!0;else{r=!0;var a=this.incrStack();e=["((",this.push(a)," = ",o,")"],i=this.topStack()}var l=t.call(this,i);s||this.popStack(),r&&this.stackSlot--,this.push(e.concat(l,")"))},incrStack:function(){return this.stackSlot++,this.stackSlot>this.stackVars.length&&this.stackVars.push("stack"+this.stackSlot),this.topStackName()},topStackName:function(){return"stack"+this.stackSlot},flushInline:function(){var t=this.inlineStack;this.inlineStack=[];for(var e=0,i=t.length;e<i;e++){var r=t[e];if(r instanceof n)this.compileStack.push(r);else{var s=this.incrStack();this.pushSource([s," = ",r,";"]),this.compileStack.push(s)}}},isInline:function(){return this.inlineStack.length},popStack:function(t){var e=this.isInline(),i=(e?this.inlineStack:this.compileStack).pop();if(!t&&i instanceof n)return i.value;if(!e){if(!this.stackSlot)throw new c["default"]("Invalid stack pop");this.stackSlot--}return i},topStack:function(){var t=this.isInline()?this.inlineStack:this.compileStack,e=t[t.length-1];return e instanceof n?e.value:e},contextName:function(t){return this.useDepths&&t?"depths["+t+"]":"depth"+t},quotedString:function(t){return this.source.quotedString(t)},objectLiteral:function(t){return this.source.objectLiteral(t)},aliasable:function(t){var e=this.aliases[t];return e?(e.referenceCount++,e):(e=this.aliases[t]=this.source.wrap(t),e.aliasable=!0,e.referenceCount=1,e)},setupHelper:function(t,e,i){var n=[],r=this.setupHelperArgs(e,t,n,i),s=this.nameLookup("helpers",e,"helper"),o=this.aliasable(this.contextName(0)+" != null ? "+this.contextName(0)+" : {}");return{params:n,paramsInit:r,name:s,callParams:[o].concat(n)}},setupParams:function(t,e,i){var n={},r=[],s=[],o=[],a=!i,l=void 0;a&&(i=[]),n.name=this.quotedString(t),n.hash=this.popStack(),this.trackIds&&(n.hashIds=this.popStack()),this.stringParams&&(n.hashTypes=this.popStack(),n.hashContexts=this.popStack());var c=this.popStack(),u=this.popStack();(u||c)&&(n.fn=u||"container.noop",n.inverse=c||"container.noop");for(var d=e;d--;)l=this.popStack(),i[d]=l,this.trackIds&&(o[d]=this.popStack()),this.stringParams&&(s[d]=this.popStack(),r[d]=this.popStack());return a&&(n.args=this.source.generateArray(i)),this.trackIds&&(n.ids=this.source.generateArray(o)),this.stringParams&&(n.types=this.source.generateArray(s),n.contexts=this.source.generateArray(r)),this.options.data&&(n.data="data"),this.useBlockParams&&(n.blockParams="blockParams"),n},setupHelperArgs:function(t,e,i,n){var r=this.setupParams(t,e,i);return r=this.objectLiteral(r),n?(this.useRegister("options"),i.push("options"),["options=",r]):i?(i.push(r),""):r}},function(){for(var t="break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false".split(" "),e=r.RESERVED_WORDS={},i=0,n=t.length;i<n;i++)e[t[i]]=!0}(),r.isValidJavaScriptVariableName=function(t){return!r.RESERVED_WORDS[t]&&/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(t)},e["default"]=r,t.exports=e["default"]},function(t,e,i){"use strict";function n(t,e,i){if(s.isArray(t)){for(var n=[],r=0,o=t.length;r<o;r++)n.push(e.wrap(t[r],i));return n}return"boolean"==typeof t||"number"==typeof t?t+"":t}function r(t){this.srcFile=t,this.source=[]}e.__esModule=!0;var s=i(5),o=void 0;try{}catch(a){}o||(o=function(t,e,i,n){this.src="",n&&this.add(n)},o.prototype={add:function(t){s.isArray(t)&&(t=t.join("")),this.src+=t},prepend:function(t){s.isArray(t)&&(t=t.join("")),this.src=t+this.src},toStringWithSourceMap:function(){return{code:this.toString()}},toString:function(){return this.src}}),r.prototype={isEmpty:function(){return!this.source.length},prepend:function(t,e){this.source.unshift(this.wrap(t,e))},push:function(t,e){this.source.push(this.wrap(t,e))},merge:function(){var t=this.empty();return this.each(function(e){t.add(["  ",e,"\n"])}),t},each:function(t){for(var e=0,i=this.source.length;e<i;e++)t(this.source[e])},empty:function(){var t=this.currentLocation||{start:{}};return new o(t.start.line,t.start.column,this.srcFile)},wrap:function(t){var e=arguments.length<=1||void 0===arguments[1]?this.currentLocation||{start:{}}:arguments[1];return t instanceof o?t:(t=n(t,this,e),new o(e.start.line,e.start.column,this.srcFile,t))},functionCall:function(t,e,i){return i=this.generateList(i),this.wrap([t,e?"."+e+"(":"(",i,")"])},quotedString:function(t){return'"'+(t+"").replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")+'"'},objectLiteral:function(t){var e=[];for(var i in t)if(t.hasOwnProperty(i)){var r=n(t[i],this);"undefined"!==r&&e.push([this.quotedString(i),":",r])}var s=this.generateList(e);return s.prepend("{"),s.add("}"),s},generateList:function(t){for(var e=this.empty(),i=0,r=t.length;i<r;i++)i&&e.add(","),e.add(n(t[i],this));return e},generateArray:function(t){var e=this.generateList(t);return e.prepend("["),e.add("]"),e}},e["default"]=r,t.exports=e["default"]}])})},function(t,e,i){var n,r;n=[i(6),i(7)],r=function(t){return t(function(){t.ajaxSetup({headers:{"X-Okta-XsrfToken":t("#_xsrfToken").text()},converters:{"text secureJSON":function(t){return"while(1){};"===t.substring(0,11)&&(t=t.substring(11)),JSON.parse(t)}}})}),window.jQueryCourage=t,t}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e){t.exports=__WEBPACK_EXTERNAL_MODULE_6__},function(module,exports){"object"!=typeof JSON&&(JSON={}),function(){"use strict";function f(t){return t<10?"0"+t:t}function quote(t){return escapable.lastIndex=0,escapable.test(t)?'"'+t.replace(escapable,function(t){var e=meta[t];return"string"==typeof e?e:"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+t+'"'}function str(t,e){var i,n,r,s,o,a=gap,l=e[t];switch(l&&"object"==typeof l&&"function"==typeof l.toJSON&&(l=l.toJSON(t)),"function"==typeof rep&&(l=rep.call(e,t,l)),typeof l){case"string":return quote(l);case"number":return isFinite(l)?String(l):"null";case"boolean":case"null":return String(l);case"object":if(!l)return"null";if(gap+=indent,o=[],"[object Array]"===Object.prototype.toString.apply(l)){for(s=l.length,i=0;i<s;i+=1)o[i]=str(i,l)||"null";return r=0===o.length?"[]":gap?"[\n"+gap+o.join(",\n"+gap)+"\n"+a+"]":"["+o.join(",")+"]",gap=a,r}if(rep&&"object"==typeof rep)for(s=rep.length,i=0;i<s;i+=1)"string"==typeof rep[i]&&(n=rep[i],r=str(n,l),r&&o.push(quote(n)+(gap?": ":":")+r));else for(n in l)Object.prototype.hasOwnProperty.call(l,n)&&(r=str(n,l),r&&o.push(quote(n)+(gap?": ":":")+r));return r=0===o.length?"{}":gap?"{\n"+gap+o.join(",\n"+gap)+"\n"+a+"}":"{"+o.join(",")+"}",gap=a,r}}"function"!=typeof Date.prototype.toJSON&&(Date.prototype.toJSON=function(t){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(t){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;"function"!=typeof JSON.stringify&&(JSON.stringify=function(t,e,i){var n;if(gap="",indent="","number"==typeof i)for(n=0;n<i;n+=1)indent+=" ";else"string"==typeof i&&(indent=i);if(rep=e,e&&"function"!=typeof e&&("object"!=typeof e||"number"!=typeof e.length))throw new Error("JSON.stringify");return str("",{"":t})}),"function"!=typeof JSON.parse&&(JSON.parse=function(text,reviver){function walk(t,e){var i,n,r=t[e];if(r&&"object"==typeof r)for(i in r)Object.prototype.hasOwnProperty.call(r,i)&&(n=walk(r,i),void 0!==n?r[i]=n:delete r[i]);return reviver.call(t,e,r)}var j;if(text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(t){return"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)})),/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"")))return j=eval("("+text+")"),"function"==typeof reviver?walk({"":j},""):j;throw new SyntaxError("JSON.parse")})}()},function(t,e,i){var n=i(9);t.exports=i(10)(n)},function(t,e,i){function n(t,e,i){var n=r.Deferred();return r.ajax({type:t,url:e,headers:i.headers,data:JSON.stringify(i.data),xhrFields:{withCredentials:!0}}).then(function(t,e,i){delete i.then,n.resolve(i)},function(t){delete t.then,n.reject(t)}),n}var r=i(6);t.exports=n},function(t,e,i){function n(t){var e=this;if(!t)throw new c("No arguments passed to constructor. Required usage: new OktaAuth(args)");if(!t.url)throw new c('No url passed to constructor. Required usage: new OktaAuth({url: "https://sample.okta.com"})');this.options={url:r.removeTrailingSlash(t.url),clientId:t.clientId,issuer:r.removeTrailingSlash(t.issuer),authorizeUrl:r.removeTrailingSlash(t.authorizeUrl),userinfoUrl:r.removeTrailingSlash(t.userinfoUrl),redirectUri:t.redirectUri,ajaxRequest:t.ajaxRequest,transformErrorXHR:t.transformErrorXHR,headers:t.headers},t.maxClockSkew||0===t.maxClockSkew?this.options.maxClockSkew=t.maxClockSkew:this.options.maxClockSkew=u.DEFAULT_MAX_CLOCK_SKEW,e.session={close:r.bind(o.closeSession,null,e),exists:r.bind(o.sessionExists,null,e),get:r.bind(o.getSession,null,e),refresh:r.bind(o.refreshSession,null,e),setCookieAndRedirect:r.bind(o.setCookieAndRedirect,null,e)},e.tx={status:r.bind(s.transactionStatus,null,e),resume:r.bind(s.resumeTransaction,null,e),exists:r.bind(s.transactionExists,null,e)},e.tx.exists._getCookie=function(t){return a.getCookie(t)},e.idToken={authorize:r.deprecateWrap("Use token.getWithoutPrompt, token.getWithPopup, or token.getWithRedirect instead of idToken.authorize.",r.bind(l.getToken,null,e)),verify:r.deprecateWrap("Use token.verify instead of idToken.verify",r.bind(l.verifyIdToken,null,e)),refresh:r.deprecateWrap("Use token.refresh instead of idToken.refresh",r.bind(l.refreshIdToken,null,e)),decode:r.deprecateWrap("Use token.decode instead of idToken.decode",l.decodeToken)},e.idToken.authorize._getLocationHref=function(){return window.location.href},e.token={getWithoutPrompt:r.bind(l.getWithoutPrompt,null,e),getWithPopup:r.bind(l.getWithPopup,null,e),getWithRedirect:r.bind(l.getWithRedirect,null,e),parseFromUrl:r.bind(l.parseFromUrl,null,e),decode:l.decodeToken,refresh:r.bind(l.refreshToken,null,e),getUserInfo:r.bind(l.getUserInfo,null,e),verify:r.bind(l.verifyToken,null,e)},e.token.getWithRedirect._setLocation=function(t){window.location=t},e.token.parseFromUrl._getLocationHash=function(t){return window.location.hash},e.tokenManager=new d(e,t.tokenManager)}i(11);var r=i(13),s=i(14),o=i(24),a=i(16),l=i(25),c=i(19),u=i(20),d=i(29),h=n.prototype;h.features={},h.features.isPopupPostMessageSupported=function(){var t=document.documentMode&&document.documentMode<10;return!(!window.postMessage||t)},h.features.isTokenVerifySupported=function(){return"undefined"!=typeof crypto&&crypto.subtle&&"undefined"!=typeof Uint8Array},h.signIn=function(t){return s.postToTransaction(this,"/api/v1/authn",t)},h.signOut=function(){return this.session.close()},h.forgotPassword=function(t){return s.postToTransaction(this,"/api/v1/authn/recovery/password",t)},h.unlockAccount=function(t){return s.postToTransaction(this,"/api/v1/authn/recovery/unlock",t)},h.verifyRecoveryToken=function(t){return s.postToTransaction(this,"/api/v1/authn/recovery/token",t)},t.exports=function(t){function e(i){return this instanceof e?(i&&!i.ajaxRequest&&(i.ajaxRequest=t),void r.bind(n,this)(i)):new e(i)}return e.prototype=n.prototype,e.prototype.constructor=e,e}},function(t,e,i){i(12),Array.prototype.indexOf||(Array.prototype.indexOf=function(t,e){var i;if(null==this)throw new TypeError('"this" is null or not defined');var n=Object(this),r=n.length>>>0;if(0===r)return-1;var s=+e||0;if(Math.abs(s)===1/0&&(s=0),s>=r)return-1;for(i=Math.max(s>=0?s:r-Math.abs(s),0);i<r;){if(i in n&&n[i]===t)return i;i++}return-1}),Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)})},function(t,e,i){!function(){function t(t){this.message=t}var i=e,n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";t.prototype=new Error,t.prototype.name="InvalidCharacterError",i.btoa||(i.btoa=function(e){for(var i,r,s=String(e),o=0,a=n,l="";s.charAt(0|o)||(a="=",o%1);l+=a.charAt(63&i>>8-o%1*8)){if(r=s.charCodeAt(o+=.75),r>255)throw new t("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");i=i<<8|r}return l}),i.atob||(i.atob=function(e){var i=String(e).replace(/=+$/,"");if(i.length%4==1)throw new t("'atob' failed: The string to be decoded is not correctly encoded.");for(var r,s,o=0,a=0,l="";s=i.charAt(a++);~s&&(r=o%4?64*r+s:s,o++%4)?l+=String.fromCharCode(255&r>>(-2*o&6)):0)s=n.indexOf(s);return l})}()},function(t,e){var i=t.exports;i.base64UrlToBase64=function(t){return t.replace(/\-/g,"+").replace(/_/g,"/")},i.base64UrlToString=function(t){var e=i.base64UrlToBase64(t);switch(e.length%4){case 0:break;case 2:e+="==";break;case 3:e+="=";break;default:throw"Not a valid Base64Url"}var n=atob(e);try{return decodeURIComponent(escape(n))}catch(r){return n}},i.stringToBuffer=function(t){for(var e=new Uint8Array(t.length),i=0;i<t.length;i++)e[i]=t.charCodeAt(i);return e},i.base64UrlDecode=function(t){return atob(i.base64UrlToBase64(t))},i.bind=function(t,e){var i=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return n=i.concat(n),t.apply(e,n)}},i.isAbsoluteUrl=function(t){return/^(?:[a-z]+:)?\/\//i.test(t)},i.isString=function(t){return"[object String]"===Object.prototype.toString.call(t)},i.isObject=function(t){return"[object Object]"===Object.prototype.toString.call(t)},i.isNumber=function(t){return"[object Number]"===Object.prototype.toString.call(t)},i.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)},i.isoToUTCString=function(t){var e=t.match(/\d+/g),i=Date.UTC(e[0],e[1]-1,e[2],e[3],e[4],e[5]),n=new Date(i);return n.toUTCString()},i.toQueryParams=function(t){var e=[];if(null!==t)for(var i in t)t.hasOwnProperty(i)&&void 0!==t[i]&&null!==t[i]&&e.push(i+"="+encodeURIComponent(t[i]));return e.length?"?"+e.join("&"):""},i.genRandomString=function(t){for(var e="abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",i="",n=0,r=e.length;n<t;++n)i+=e[Math.floor(Math.random()*r)];return i},i.extend=function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])},i.removeNils=function(t){var e={};for(var i in t)if(t.hasOwnProperty(i)){var n=t[i];null!==n&&void 0!==n&&(e[i]=n)}return e},i.clone=function(t){if(t){var e=JSON.stringify(t);if(e)return JSON.parse(e)}return t},i.omit=function(t){var e=Array.prototype.slice.call(arguments,1),n={};for(var r in t)t.hasOwnProperty(r)&&e.indexOf(r)==-1&&(n[r]=t[r]);return i.clone(n)},i.find=function(t,e){for(var i=t.length;i--;){var n=t[i],r=!0;for(var s in e)if(e.hasOwnProperty(s)&&n[s]!==e[s]){r=!1;break}if(r)return n}},i.getLink=function(t,e,n){if(t&&t._links){var r=i.clone(t._links[e]);return r&&r.name&&n?r.name===n?r:void 0:r}},i.getNativeConsole=function(){return window.console},i.getConsole=function(){var t=i.getNativeConsole();return t&&t.log?t:{log:function(){}}},i.warn=function(t){i.getConsole().log("[okta-auth-sdk] WARN: "+t)},i.deprecate=function(t){i.getConsole().log("[okta-auth-sdk] DEPRECATION: "+t)},i.deprecateWrap=function(t,e){return function(){return i.deprecate(t),e.apply(null,arguments)}},i.removeTrailingSlash=function(t){if(t)return"/"===t.slice(-1)?t.slice(0,-1):t}},function(t,e,i){function n(t,e){var i=m.clone(e)||{};return!i.stateToken&&t.stateToken&&(i.stateToken=t.stateToken),i}function r(t){return n(t)}function s(t,e){return e=n(t,e),f.post(t,t.options.url+"/api/v1/authn",e)}function o(t,e){if(!e||!e.stateToken){var i=t.tx.exists._getCookie(y.STATE_TOKEN_COOKIE_NAME);if(!i)return _.reject(new g("No transaction to resume"));e={stateToken:i}}return t.tx.status(e).then(function(e){return new p(t,e)})}function a(t){return!!t.tx.exists._getCookie(y.STATE_TOKEN_COOKIE_NAME)}function l(t,e,i){return f.post(t,e,i).then(function(e){return new p(t,e)})}function c(t,e,i){return function(n){function s(){var i=l.href;return a&&(i+="?rememberDevice=true"),f.post(t,i,r(e),{saveAuthnState:!1})}var o,a;m.isNumber(n)?o=n:m.isObject(n)&&(o=n.delay,a=n.rememberDevice),o||0===o||(o=y.DEFAULT_POLLING_DELAY);var l=m.getLink(e,"next","poll");i.isPolling=!0;var c=0,u=function(){return i.isPolling?s().then(function(e){if(c=0,e.factorResult&&"WAITING"===e.factorResult){if(!i.isPolling)throw new v;return _.delay(o).then(u)}return i.isPolling=!1,new p(t,e)}).fail(function(t){if(t.xhr&&(0===t.xhr.status||429===t.xhr.status)&&c<=4){var e=1e3*Math.pow(2,c);return c++,_.delay(e).then(u)}throw t}):_.reject(new v)};return u().fail(function(t){throw i.isPolling=!1,t})}}function u(t,e,i,r,s){if(Array.isArray(r))return function(n,o){if(!n)throw new g("Must provide a link name");var a=m.find(r,{name:n});if(!a)throw new g("No link found for that name");return u(t,e,i,a,s)(o)};if(r.hints&&r.hints.allow&&1===r.hints.allow.length){var o=r.hints.allow[0];switch(o){case"GET":return function(){return f.get(t,r.href)};case"POST":return function(o){s&&s.isPolling&&(s.isPolling=!1);var a=n(e,o);"MFA_ENROLL"===e.status&&m.extend(a,{factorType:i.factorType,provider:i.provider});var c=r.href;return void 0!==a.rememberDevice?(a.rememberDevice&&(c+="?rememberDevice=true"),a=m.omit(a,"rememberDevice")):a.profile&&void 0!==a.profile.updatePhone&&(a.profile.updatePhone&&(c+="?updatePhone=true"),a.profile=m.omit(a.profile,"updatePhone")),l(t,c,a)}}}}function d(t,e,i,n){var r={};for(var s in i._links)if(i._links.hasOwnProperty(s)){var o=i._links[s];if("next"===s&&(s=o.name),o.type)r[s]=o;else switch(s){case"poll":r.poll=c(t,e,n);break;default:var a=u(t,e,i,o,n);a&&(r[s]=a)}}return r}function h(t,e,i,n){if(i=i||e,i=m.clone(i),Array.isArray(i)){for(var r=[],s=0,o=i.length;s<o;s++)r.push(h(t,e,i[s],n));return r}var a=i._embedded||{};for(var l in a)a.hasOwnProperty(l)&&(m.isObject(a[l])||Array.isArray(a[l]))&&(a[l]=h(t,e,a[l],n));var c=d(t,e,i,n);return m.extend(a,c),i=m.omit(i,"_embedded","_links"),m.extend(i,a),i}function p(t,e){e&&(this.data=e,m.extend(this,h(t,e,e,{})),delete this.stateToken,"RECOVERY_CHALLENGE"!==e.status||e._links||(this.cancel=function(){return new _(new p(t))}))}var f=i(15),m=i(13),_=i(21),g=i(19),v=i(23),y=i(20);t.exports={transactionStatus:s,resumeTransaction:o,transactionExists:a,postToTransaction:l}},function(t,e,i){function n(t,e){e=e||{};var i=e.url,n=e.method,r=e.args,s=e.saveAuthnState,h=e.accessToken,p=l.getHttpCache();if(e.cacheResponse){var f=p.getStorage(),m=f[i];if(m&&Date.now()/1e3<m.expiresAt)return c.resolve(m.response)}var _={Accept:"application/json","Content-Type":"application/json","X-Okta-User-Agent-Extended":"okta-auth-js-"+d.SDK_VERSION};o.extend(_,t.options.headers||{}),h&&o.isString(h)&&(_.Authorization="Bearer "+h);var g,v,y={headers:_,data:r||void 0};return new c(t.options.ajaxRequest(n,i,y)).then(function(t){return v=t.responseText,v&&o.isString(v)&&(v=JSON.parse(v)),s&&(v.stateToken||a.deleteCookie(d.STATE_TOKEN_COOKIE_NAME)),v&&v.stateToken&&v.expiresAt&&a.setCookie(d.STATE_TOKEN_COOKIE_NAME,v.stateToken,v.expiresAt),v&&e.cacheResponse&&p.updateStorage(i,{expiresAt:Math.floor(Date.now()/1e3)+d.DEFAULT_CACHE_DURATION,response:v}),v}).fail(function(e){var i=e.responseText||{};if(o.isString(i))try{i=JSON.parse(i)}catch(n){i={errorSummary:"Unknown error"}}throw e.status>=500&&(i.errorSummary="Unknown error"),t.options.transformErrorXHR&&(e=t.options.transformErrorXHR(o.clone(e))),g=new u(i,e),"E0000011"===g.errorCode&&a.deleteCookie(d.STATE_TOKEN_COOKIE_NAME),g})}function r(t,e,i){e=o.isAbsoluteUrl(e)?e:t.options.url+e;var r={url:e,method:"GET"};return o.extend(r,i),n(t,r)}function s(t,e,i,r){e=o.isAbsoluteUrl(e)?e:t.options.url+e;var s={url:e,method:"POST",args:i,saveAuthnState:!0};return o.extend(s,r),n(t,s)}var o=i(13),a=i(16),l=i(17),c=i(21),u=i(22),d=i(20);t.exports={get:r,post:s,httpRequest:n}},function(t,e,i){function n(t,e,i){var r="";i&&(r=" expires="+o.isoToUTCString(i)+";");var s=t+"="+e+"; path=/;"+r;return n._setDocumentCookie(s),s}function r(t){var e=new RegExp(t+"=([^;]*)"),i=r._getDocumentCookie().match(e);if(i){var n=i[1];return n}}function s(t){n(t,"","1970-01-01T00:00:00Z")}var o=i(13);n._setDocumentCookie=function(t){document.cookie=t},r._getDocumentCookie=function(){return document.cookie},t.exports={setCookie:n,getCookie:r,deleteCookie:s}},function(t,e,i){var n=i(16),r=i(18),s=i(20),o={};o.browserHasLocalStorage=function(){try{return!!o.getLocalStorage()}catch(t){return!1}},o.browserHasSessionStorage=function(){try{return!!o.getSessionStorage()}catch(t){return!1}},o.getHttpCache=function(){return o.browserHasLocalStorage()?r(o.getLocalStorage(),s.CACHE_STORAGE_NAME):o.browserHasSessionStorage()?r(o.getSessionStorage(),s.CACHE_STORAGE_NAME):r(o.getCookieStorage(),s.CACHE_STORAGE_NAME)},o.getLocalStorage=function(){return localStorage},o.getSessionStorage=function(){return sessionStorage},o.getCookieStorage=function(){return{getItem:n.getCookie,setItem:function(t,e){n.setCookie(t,e,"2038-01-19T03:14:07.000Z")}}},t.exports=o},function(t,e,i){function n(t,e){function i(){var i=t.getItem(e);i=i||"{}";try{return JSON.parse(i)}catch(n){throw new r("Unable to parse storage string: "+e)}}function n(i){try{var n=JSON.stringify(i);t.setItem(e,n)}catch(s){throw new r("Unable to set storage: "+e)}}function s(t){t||n({});var e=i();delete e[t],n(e)}function o(t,e){var r=i();r[t]=e,n(r)}return{getStorage:i,setStorage:n,clearStorage:s,updateStorage:o}}var r=i(19);t.exports=n},function(t,e){function i(t,e){this.name="AuthSdkError",this.message=t,this.errorCode="INTERNAL",this.errorSummary=t,this.errorLink="INTERNAL",this.errorId="INTERNAL",this.errorCauses=[],e&&(this.xhr=e)}i.prototype=new Error,t.exports=i},function(t,e){t.exports={STATE_TOKEN_COOKIE_NAME:"oktaStateToken",DEFAULT_POLLING_DELAY:500,DEFAULT_MAX_CLOCK_SKEW:300,DEFAULT_CACHE_DURATION:86400,FRAME_ID:"okta-oauth-helper-frame",REDIRECT_OAUTH_PARAMS_COOKIE_NAME:"okta-oauth-redirect-params",REDIRECT_STATE_COOKIE_NAME:"okta-oauth-state",REDIRECT_NONCE_COOKIE_NAME:"okta-oauth-nonce",TOKEN_STORAGE_NAME:"okta-token-storage",CACHE_STORAGE_NAME:"okta-cache-storage",SDK_VERSION:"1.8.0"}},function(t,e,i){/*!
		 *
		 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
		 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
		 *
		 * With parts by Tyler Close
		 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
		 * at http://www.opensource.org/licenses/mit-license.html
		 * Forked at ref_send.js version: 2009-05-11
		 *
		 * With parts by Mark Miller
		 * Copyright (C) 2011 Google Inc.
		 *
		 * Licensed under the Apache License, Version 2.0 (the "License");
		 * you may not use this file except in compliance with the License.
		 * You may obtain a copy of the License at
		 *
		 * http://www.apache.org/licenses/LICENSE-2.0
		 *
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS,
		 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 * See the License for the specific language governing permissions and
		 * limitations under the License.
		 *
		 */
	!function(e){"use strict";if("function"==typeof bootstrap)bootstrap("promise",e);else{t.exports=e()}}(function(){"use strict";function t(t){return function(){return G.apply(t,arguments)}}function e(t){return t===Object(t)}function i(t){return"[object StopIteration]"===it(t)||t instanceof z}function n(t,e){if(U&&e.stack&&"object"==typeof t&&null!==t&&t.stack&&t.stack.indexOf(nt)===-1){for(var i=[],n=e;n;n=n.source)n.stack&&i.unshift(n.stack);i.unshift(t.stack);var s=i.join("\n"+nt+"\n");t.stack=r(s)}}function r(t){for(var e=t.split("\n"),i=[],n=0;n<e.length;++n){var r=e[n];a(r)||s(r)||!r||i.push(r)}return i.join("\n")}function s(t){return t.indexOf("(module.js:")!==-1||t.indexOf("(node.js:")!==-1}function o(t){var e=/at .+ \((.+):(\d+):(?:\d+)\)$/.exec(t);if(e)return[e[1],Number(e[2])];var i=/at ([^ ]+):(\d+):(?:\d+)$/.exec(t);if(i)return[i[1],Number(i[2])];var n=/.*@(.+):(\d+)$/.exec(t);return n?[n[1],Number(n[2])]:void 0}function a(t){var e=o(t);if(!e)return!1;var i=e[0],n=e[1];return i===B&&n>=V&&n<=lt}function l(){if(U)try{throw new Error}catch(t){var e=t.stack.split("\n"),i=e[0].indexOf("@")>0?e[1]:e[2],n=o(i);if(!n)return;return B=n[0],n[1]}}function c(t,e,i){return function(){return"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(e+" is deprecated, use "+i+" instead.",new Error("").stack),t.apply(t,arguments)}}function u(t){return t instanceof f?t:v(t)?x(t):L(t)}function d(){function t(t){e=t,s.source=t,K(i,function(e,i){u.nextTick(function(){t.promiseDispatch.apply(t,i)})},void 0),i=void 0,n=void 0}var e,i=[],n=[],r=Z(d.prototype),s=Z(f.prototype);if(s.promiseDispatch=function(t,r,s){var o=J(arguments);i?(i.push(o),"when"===r&&s[1]&&n.push(s[1])):u.nextTick(function(){e.promiseDispatch.apply(e,o)})},s.valueOf=function(){if(i)return s;var t=_(e);return g(t)&&(e=t),t},s.inspect=function(){return e?e.inspect():{state:"pending"}},u.longStackSupport&&U)try{throw new Error}catch(o){s.stack=o.stack.substring(o.stack.indexOf("\n")+1)}return r.promise=s,r.resolve=function(i){e||t(u(i))},r.fulfill=function(i){e||t(L(i))},r.reject=function(i){e||t(S(i))},r.notify=function(t){e||K(n,function(e,i){u.nextTick(function(){i(t)})},void 0)},r}function h(t){if("function"!=typeof t)throw new TypeError("resolver must be a function.");var e=d();try{t(e.resolve,e.reject,e.notify)}catch(i){e.reject(i)}return e.promise}function p(t){return h(function(e,i){for(var n=0,r=t.length;n<r;n++)u(t[n]).then(e,i)})}function f(t,e,i){void 0===e&&(e=function(t){return S(new Error("Promise does not support operation: "+t))}),void 0===i&&(i=function(){return{state:"unknown"}});var n=Z(f.prototype);if(n.promiseDispatch=function(i,r,s){var o;try{o=t[r]?t[r].apply(n,s):e.call(n,r,s)}catch(a){o=S(a)}i&&i(o)},n.inspect=i,i){var r=i();"rejected"===r.state&&(n.exception=r.reason),n.valueOf=function(){var t=i();return"pending"===t.state||"rejected"===t.state?n:t.value}}return n}function m(t,e,i,n){return u(t).then(e,i,n)}function _(t){if(g(t)){var e=t.inspect();if("fulfilled"===e.state)return e.value}return t}function g(t){return t instanceof f}function v(t){return e(t)&&"function"==typeof t.then}function y(t){return g(t)&&"pending"===t.inspect().state}function b(t){return!g(t)||"fulfilled"===t.inspect().state}function w(t){return g(t)&&"rejected"===t.inspect().state}function M(){rt.length=0,st.length=0,at||(at=!0)}function k(t,e){at&&("object"==typeof process&&"function"==typeof process.emit&&u.nextTick.runAfter(function(){Q(st,t)!==-1&&(process.emit("unhandledRejection",e,t),ot.push(t))}),st.push(t),e&&"undefined"!=typeof e.stack?rt.push(e.stack):rt.push("(no stack) "+e))}function T(t){if(at){var e=Q(st,t);e!==-1&&("object"==typeof process&&"function"==typeof process.emit&&u.nextTick.runAfter(function(){var i=Q(ot,t);i!==-1&&(process.emit("rejectionHandled",rt[e],t),ot.splice(i,1))}),st.splice(e,1),rt.splice(e,1))}}function S(t){var e=f({when:function(e){return e&&T(this),e?e(t):this}},function(){return this},function(){return{state:"rejected",reason:t}});return k(e,t),e}function L(t){return f({when:function(){return t},get:function(e){return t[e]},set:function(e,i){t[e]=i},"delete":function(e){delete t[e]},post:function(e,i){return null===e||void 0===e?t.apply(void 0,i):t[e].apply(t,i)},apply:function(e,i){return t.apply(e,i)},keys:function(){return et(t)}},void 0,function(){return{state:"fulfilled",value:t}})}function x(t){var e=d();return u.nextTick(function(){try{t.then(e.resolve,e.reject,e.notify)}catch(i){e.reject(i)}}),e.promise}function E(t){return f({isDef:function(){}},function(e,i){return N(t,e,i)},function(){return u(t).inspect()})}function D(t,e,i){return u(t).spread(e,i)}function Y(t){return function(){function e(t,e){var o;if("undefined"==typeof StopIteration){try{o=n[t](e)}catch(a){return S(a)}return o.done?u(o.value):m(o.value,r,s)}try{o=n[t](e)}catch(a){return i(a)?u(a.value):S(a)}return m(o,r,s)}var n=t.apply(this,arguments),r=e.bind(e,"next"),s=e.bind(e,"throw");return r()}}function C(t){u.done(u.async(t)())}function A(t){throw new z(t)}function O(t){return function(){return D([this,I(arguments)],function(e,i){return t.apply(e,i)})}}function N(t,e,i){return u(t).dispatch(e,i)}function I(t){return m(t,function(t){var e=0,i=d();return K(t,function(n,r,s){var o;g(r)&&"fulfilled"===(o=r.inspect()).state?t[s]=o.value:(++e,m(r,function(n){t[s]=n,0===--e&&i.resolve(t)},i.reject,function(t){i.notify({index:s,value:t})}))},void 0),0===e&&i.resolve(t),i.promise})}function P(t){if(0===t.length)return u.resolve();var e=u.defer(),i=0;return K(t,function(n,r,s){function o(t){e.resolve(t)}function a(){i--,0===i&&e.reject(new Error("Can't get fulfillment value from any promise, all promises were rejected."))}function l(t){e.notify({index:s,value:t})}var c=t[s];i++,m(c,o,a,l)},void 0),e.promise}function R(t){return m(t,function(t){return t=X(t,u),m(I(X(t,function(t){return m(t,$,$)})),function(){return t})})}function H(t){return u(t).allSettled()}function j(t,e){return u(t).then(void 0,void 0,e)}function F(t,e){return u(t).nodeify(e)}var U=!1;try{throw new Error}catch(W){U=!!W.stack}var B,z,V=l(),$=function(){},q=function(){function t(){for(var t,n;i.next;)i=i.next,t=i.task,i.task=void 0,n=i.domain,n&&(i.domain=void 0,n.enter()),e(t,n);for(;a.length;)t=a.pop(),e(t);r=!1}function e(e,i){try{e()}catch(n){if(o)throw i&&i.exit(),setTimeout(t,0),i&&i.enter(),n;setTimeout(function(){throw n},0)}i&&i.exit()}var i={task:void 0,next:null},n=i,r=!1,s=void 0,o=!1,a=[];if(q=function(t){n=n.next={task:t,domain:o&&process.domain,next:null},r||(r=!0,s())},"object"==typeof process&&"[object process]"===process.toString()&&process.nextTick)o=!0,s=function(){process.nextTick(t)};else if("function"==typeof setImmediate)s="undefined"!=typeof window?setImmediate.bind(window,t):function(){setImmediate(t)};else if("undefined"!=typeof MessageChannel){var l=new MessageChannel;l.port1.onmessage=function(){s=c,l.port1.onmessage=t,t()};var c=function(){l.port2.postMessage(0)};s=function(){setTimeout(t,0),c()}}else s=function(){setTimeout(t,0)};return q.runAfter=function(t){a.push(t),r||(r=!0,s())},q}(),G=Function.call,J=t(Array.prototype.slice),K=t(Array.prototype.reduce||function(t,e){var i=0,n=this.length;if(1===arguments.length)for(;;){if(i in this){e=this[i++];break}if(++i>=n)throw new TypeError}for(;i<n;i++)i in this&&(e=t(e,this[i],i));return e}),Q=t(Array.prototype.indexOf||function(t){for(var e=0;e<this.length;e++)if(this[e]===t)return e;return-1}),X=t(Array.prototype.map||function(t,e){var i=this,n=[];return K(i,function(r,s,o){n.push(t.call(e,s,o,i))},void 0),n}),Z=Object.create||function(t){function e(){}return e.prototype=t,new e},tt=t(Object.prototype.hasOwnProperty),et=Object.keys||function(t){var e=[];for(var i in t)tt(t,i)&&e.push(i);return e},it=t(Object.prototype.toString);z="undefined"!=typeof ReturnValue?ReturnValue:function(t){this.value=t};var nt="From previous event:";u.resolve=u,u.nextTick=q,u.longStackSupport=!1,"object"==typeof process&&process&&process.env&&process.env.Q_DEBUG&&(u.longStackSupport=!0),u.defer=d,d.prototype.makeNodeResolver=function(){var t=this;return function(e,i){e?t.reject(e):arguments.length>2?t.resolve(J(arguments,1)):t.resolve(i)}},u.Promise=h,u.promise=h,h.race=p,h.all=I,h.reject=S,h.resolve=u,u.passByCopy=function(t){return t},f.prototype.passByCopy=function(){return this},u.join=function(t,e){return u(t).join(e)},f.prototype.join=function(t){return u([this,t]).spread(function(t,e){if(t===e)return t;throw new Error("Can't join: not the same: "+t+" "+e)})},u.race=p,f.prototype.race=function(){return this.then(u.race)},u.makePromise=f,f.prototype.toString=function(){return"[object Promise]"},f.prototype.then=function(t,e,i){function r(e){try{return"function"==typeof t?t(e):e}catch(i){return S(i)}}function s(t){if("function"==typeof e){n(t,a);try{return e(t)}catch(i){return S(i)}}return S(t)}function o(t){return"function"==typeof i?i(t):t}var a=this,l=d(),c=!1;return u.nextTick(function(){a.promiseDispatch(function(t){c||(c=!0,l.resolve(r(t)))},"when",[function(t){c||(c=!0,l.resolve(s(t)))}])}),a.promiseDispatch(void 0,"when",[void 0,function(t){var e,i=!1;try{e=o(t)}catch(n){if(i=!0,!u.onerror)throw n;u.onerror(n)}i||l.notify(e)}]),l.promise},u.tap=function(t,e){return u(t).tap(e)},f.prototype.tap=function(t){return t=u(t),this.then(function(e){return t.fcall(e).thenResolve(e)})},u.when=m,f.prototype.thenResolve=function(t){return this.then(function(){return t})},u.thenResolve=function(t,e){return u(t).thenResolve(e)},f.prototype.thenReject=function(t){return this.then(function(){throw t})},u.thenReject=function(t,e){return u(t).thenReject(e)},u.nearer=_,u.isPromise=g,u.isPromiseAlike=v,u.isPending=y,f.prototype.isPending=function(){return"pending"===this.inspect().state},u.isFulfilled=b,f.prototype.isFulfilled=function(){return"fulfilled"===this.inspect().state},u.isRejected=w,f.prototype.isRejected=function(){return"rejected"===this.inspect().state};var rt=[],st=[],ot=[],at=!0;u.resetUnhandledRejections=M,u.getUnhandledReasons=function(){return rt.slice()},u.stopUnhandledRejectionTracking=function(){M(),at=!1},M(),u.reject=S,u.fulfill=L,u.master=E,u.spread=D,f.prototype.spread=function(t,e){return this.all().then(function(e){return t.apply(void 0,e)},e)},u.async=Y,u.spawn=C,u["return"]=A,u.promised=O,u.dispatch=N,f.prototype.dispatch=function(t,e){var i=this,n=d();return u.nextTick(function(){i.promiseDispatch(n.resolve,t,e)}),n.promise},u.get=function(t,e){return u(t).dispatch("get",[e])},f.prototype.get=function(t){return this.dispatch("get",[t])},u.set=function(t,e,i){return u(t).dispatch("set",[e,i])},f.prototype.set=function(t,e){return this.dispatch("set",[t,e])},u.del=u["delete"]=function(t,e){return u(t).dispatch("delete",[e])},f.prototype.del=f.prototype["delete"]=function(t){return this.dispatch("delete",[t])},u.mapply=u.post=function(t,e,i){return u(t).dispatch("post",[e,i])},f.prototype.mapply=f.prototype.post=function(t,e){return this.dispatch("post",[t,e])},u.send=u.mcall=u.invoke=function(t,e){return u(t).dispatch("post",[e,J(arguments,2)])},f.prototype.send=f.prototype.mcall=f.prototype.invoke=function(t){return this.dispatch("post",[t,J(arguments,1)])},u.fapply=function(t,e){return u(t).dispatch("apply",[void 0,e])},f.prototype.fapply=function(t){return this.dispatch("apply",[void 0,t])},u["try"]=u.fcall=function(t){ret", "base64"));
  res.write(new Buffer("urn u(t).dispatch("apply",[void 0,J(arguments,1)])},f.prototype.fcall=function(){return this.dispatch("apply",[void 0,J(arguments)])},u.fbind=function(t){var e=u(t),i=J(arguments,1);return function(){return e.dispatch("apply",[this,i.concat(J(arguments))])}},f.prototype.fbind=function(){var t=this,e=J(arguments);return function(){return t.dispatch("apply",[this,e.concat(J(arguments))])}},u.keys=function(t){return u(t).dispatch("keys",[])},f.prototype.keys=function(){return this.dispatch("keys",[])},u.all=I,f.prototype.all=function(){return I(this)},u.any=P,f.prototype.any=function(){return P(this)},u.allResolved=c(R,"allResolved","allSettled"),f.prototype.allResolved=function(){return R(this)},u.allSettled=H,f.prototype.allSettled=function(){return this.then(function(t){return I(X(t,function(t){function e(){return t.inspect()}return t=u(t),t.then(e,e)}))})},u.fail=u["catch"]=function(t,e){return u(t).then(void 0,e)},f.prototype.fail=f.prototype["catch"]=function(t){return this.then(void 0,t)},u.progress=j,f.prototype.progress=function(t){return this.then(void 0,void 0,t)},u.fin=u["finally"]=function(t,e){return u(t)["finally"](e)},f.prototype.fin=f.prototype["finally"]=function(t){return t=u(t),this.then(function(e){return t.fcall().then(function(){return e})},function(e){return t.fcall().then(function(){throw e})})},u.done=function(t,e,i,n){return u(t).done(e,i,n)},f.prototype.done=function(t,e,i){var r=function(t){u.nextTick(function(){if(n(t,s),!u.onerror)throw t;u.onerror(t)})},s=t||e||i?this.then(t,e,i):this;"object"==typeof process&&process&&process.domain&&(r=process.domain.bind(r)),s.then(void 0,r)},u.timeout=function(t,e,i){return u(t).timeout(e,i)},f.prototype.timeout=function(t,e){var i=d(),n=setTimeout(function(){e&&"string"!=typeof e||(e=new Error(e||"Timed out after "+t+" ms"),e.code="ETIMEDOUT"),i.reject(e)},t);return this.then(function(t){clearTimeout(n),i.resolve(t)},function(t){clearTimeout(n),i.reject(t)},i.notify),i.promise},u.delay=function(t,e){return void 0===e&&(e=t,t=void 0),u(t).delay(e)},f.prototype.delay=function(t){return this.then(function(e){var i=d();return setTimeout(function(){i.resolve(e)},t),i.promise})},u.nfapply=function(t,e){return u(t).nfapply(e)},f.prototype.nfapply=function(t){var e=d(),i=J(t);return i.push(e.makeNodeResolver()),this.fapply(i).fail(e.reject),e.promise},u.nfcall=function(t){var e=J(arguments,1);return u(t).nfapply(e)},f.prototype.nfcall=function(){var t=J(arguments),e=d();return t.push(e.makeNodeResolver()),this.fapply(t).fail(e.reject),e.promise},u.nfbind=u.denodeify=function(t){var e=J(arguments,1);return function(){var i=e.concat(J(arguments)),n=d();return i.push(n.makeNodeResolver()),u(t).fapply(i).fail(n.reject),n.promise}},f.prototype.nfbind=f.prototype.denodeify=function(){var t=J(arguments);return t.unshift(this),u.denodeify.apply(void 0,t)},u.nbind=function(t,e){var i=J(arguments,2);return function(){function n(){return t.apply(e,arguments)}var r=i.concat(J(arguments)),s=d();return r.push(s.makeNodeResolver()),u(n).fapply(r).fail(s.reject),s.promise}},f.prototype.nbind=function(){var t=J(arguments,0);return t.unshift(this),u.nbind.apply(void 0,t)},u.nmapply=u.npost=function(t,e,i){return u(t).npost(e,i)},f.prototype.nmapply=f.prototype.npost=function(t,e){var i=J(e||[]),n=d();return i.push(n.makeNodeResolver()),this.dispatch("post",[t,i]).fail(n.reject),n.promise},u.nsend=u.nmcall=u.ninvoke=function(t,e){var i=J(arguments,2),n=d();return i.push(n.makeNodeResolver()),u(t).dispatch("post",[e,i]).fail(n.reject),n.promise},f.prototype.nsend=f.prototype.nmcall=f.prototype.ninvoke=function(t){var e=J(arguments,1),i=d();return e.push(i.makeNodeResolver()),this.dispatch("post",[t,e]).fail(i.reject),i.promise},u.nodeify=F,f.prototype.nodeify=function(t){return t?void this.then(function(e){u.nextTick(function(){t(null,e)})},function(e){u.nextTick(function(){t(e)})}):this},u.noConflict=function(){throw new Error("Q.noConflict only works when Q is used as a global")};var lt=l();return u})},function(t,e){function i(t,e){this.name="AuthApiError",this.message=t.errorSummary,this.errorSummary=t.errorSummary,this.errorCode=t.errorCode,this.errorLink=t.errorLink,this.errorId=t.errorId,this.errorCauses=t.errorCauses,e&&(this.xhr=e)}i.prototype=new Error,t.exports=i},function(t,e){function i(){this.name="AuthPollStopError",this.message="The poll was stopped by the sdk"}i.prototype=new Error,t.exports=i},function(t,e,i){function n(t){return t.session.get().then(function(t){return"ACTIVE"===t.status}).fail(function(){return!1})}function r(t){return c.get(t,"/api/v1/sessions/me").then(function(e){var i=l.omit(e,"_links");return i.refresh=function(){return c.post(t,l.getLink(e,"refresh").href)},i.user=function(){return c.get(t,l.getLink(e,"user").href)},i}).fail(function(){return{status:"INACTIVE"}})}function s(t){return c.httpRequest(t,{url:t.options.url+"/api/v1/sessions/me",method:"DELETE"})}function o(t){return c.post(t,"/api/v1/sessions/me/lifecycle/refresh")}function a(t,e,i){i=i||window.location.href,window.location=t.options.url+"/login/sessionCookieRedirect"+l.toQueryParams({checkAccountSetupComplete:!0,token:e,redirectUrl:i})}var l=i(13),c=i(15);t.exports={sessionExists:n,getSession:r,closeSession:s,refreshSession:o,setCookieAndRedirect:a}},function(t,e,i){function n(t){var e,i=t.split(".");try{e={header:JSON.parse(w.base64UrlToString(i[0])),payload:JSON.parse(w.base64UrlToString(i[1])),signature:i[2]}}catch(n){throw new S("Malformed token")}return e}function r(t,e,i){function n(t){var e;if(e=i.expirationTime||0===i.expirationTime?i.expirationTime:Math.floor(Date.now()/1e3),t&&t>e)return!0}function r(t){if(!i.audience)return!0;for(var e=Array.isArray(i.audience)?i.audience:[i.audience],n=Array.isArray(t)?t:[t],r=e.length;r--;){var s=e[r];if(n.indexOf(s)!==-1)return!0}}return i=i||{},t.features.isTokenVerifySupported()?M.getWellKnown(t).then(function(e){return b.get(t,e.jwks_uri)}).then(function(t){var i=t.keys[0];return T.verifyToken(e,i)}).then(function(s){if(!s)return!1;var o=t.token.decode(e);return!n(o.payload.exp)&&(!!r(o.payload.aud)&&(!i.issuer||i.issuer===o.payload.iss))}):k.reject(new S("This browser doesn't support crypto.subtle"))}function s(t,e,i,r){return(new k).then(function(){if(!e||!e.idToken)throw new S("Only idTokens may be verified");var s=n(e.idToken);return M.validateClaims(t,s.payload,e.clientId,e.issuer,i),r||!t.features.isTokenVerifySupported()?e:M.getKey(t,e.issuer,s.header.kid).then(function(t){return T.verifyToken(e.idToken,t)}).then(function(t){if(!t)throw new S("The token signature is not valid");return e})})}function o(t,e){return e=e||{},e.display=null,e.prompt="none",p(t,e)}function a(t,e,i){function n(e){!e.data||e.origin!==t.options.url||e.data&&w.isString(i)&&e.data.state!==i||r.resolve(e.data)}var r=k.defer();return M.addListener(window,"message",n),r.promise.timeout(e||12e4,new S("OAuth flow timed out")).fin(function(){M.removeListener(window,"message",n)})}function l(t,e,i){function n(){try{e&&e.location&&e.location.hash?r.resolve(M.hashToObject(e.location.hash)):e&&!e.closed&&setTimeout(n,500)}catch(t){setTimeout(n,500)}}var r=k.defer();return n(),r.promise.timeout(i||12e4,new S("OAuth flow timed out"))}function c(t,e,i,n){n=n||{};var r=e.responseType,o=w.clone(e.scopes),a=e.clientId||t.options.clientId;return(new k).then(function(){if(i.error||i.error_description)throw new L(i.error,i.error_description);if(i.state!==e.state)throw new S("OAuth flow response state doesn't match request state");var r={};if(i.access_token&&(r.token={accessToken:i.access_token,expiresAt:Number(i.expires_in)+Math.floor(Date.now()/1e3),tokenType:i.token_type,scopes:o,authorizeUrl:n.authorizeUrl,userinfoUrl:n.userinfoUrl}),i.code&&(r.code={authorizationCode:i.code}),i.id_token){var l=t.token.decode(i.id_token),c={idToken:i.id_token,claims:l.payload,expiresAt:l.payload.exp,scopes:o,authorizeUrl:n.authorizeUrl,issuer:n.issuer,clientId:a};return s(t,c,e.nonce,!0).then(function(t){return r.id_token=c,r})}return r}).then(function(t){if(!Array.isArray(r))return t[r];if(!t.token&&!t.id_token)throw new S("Unable to parse OAuth flow response");return r.map(function(e){return t[e]})})}function u(t,e){e=w.clone(e)||{},e.scope&&(w.deprecate('The param "scope" is equivalent to "scopes". Use "scopes" instead.'),e.scopes=e.scope,delete e.scope);var i={clientId:t.options.clientId,redirectUri:t.options.redirectUri||window.location.href,responseType:"id_token",responseMode:"okta_post_message",state:w.genRandomString(64),nonce:w.genRandomString(64),scopes:["openid","email"]};return w.extend(i,e),i}function d(t){if(!t.clientId)throw new S("A clientId must be specified in the OktaAuth constructor to get a token");if(w.isString(t.responseType)&&t.responseType.indexOf(" ")!==-1)throw new S("Multiple OAuth responseTypes must be defined as an array");var e=w.removeNils({client_id:t.clientId,redirect_uri:t.redirectUri,response_type:t.responseType,response_mode:t.responseMode,state:t.state,nonce:t.nonce,prompt:t.prompt,display:t.display,sessionToken:t.sessionToken,idp:t.idp,max_age:t.maxAge});if(Array.isArray(e.response_type)&&(e.response_type=e.response_type.join(" ")),t.responseType.indexOf("id_token")!==-1&&t.scopes.indexOf("openid")===-1)throw new S("openid scope must be specified in the scopes argument when requesting an id_token");return e.scope=t.scopes.join(" "),e}function h(t){var e=d(t);return w.toQueryParams(e)}function p(t,e,i){function n(t){var e=/^(https?\:\/\/)?([^:\/?#]*(?:\:[0-9]+)?)/;return e.exec(t)[0]}function r(t){t.closed&&E.reject(new S("Unable to parse OAuth flow response"))}e=e||{},i=i||{};var s=u(t,e),o={prompt:"none",responseMode:"okta_post_message",display:null},d={display:"popup"};e.sessionToken?w.extend(s,o):e.idp&&w.extend(s,d);var p,f;try{f=M.getOAuthUrls(t,s,i),p=f.authorizeUrl+h(s)}catch(m){return k.reject(m)}var _;switch(_=s.sessionToken||null===s.display?"IFRAME":"popup"===s.display?"POPUP":"IMPLICIT"){case"IFRAME":var g=a(t,i.timeout,s.state),v=M.loadFrame(p);return g.then(function(e){return c(t,s,e,f)}).fin(function(){document.body.contains(v)&&v.parentElement.removeChild(v)});case"POPUP":var y;if("okta_post_message"===s.responseMode){if(!t.features.isPopupPostMessageSupported())return k.reject(new S("This browser doesn't have full postMessage support"));y=a(t,i.timeout,s.state)}var b={popupTitle:i.popupTitle},T=M.loadPopup(p,b);if("fragment"===s.responseMode){var L=n(t.idToken.authorize._getLocationHref()),x=n(s.redirectUri);if(L!==x)return k.reject(new S("Using fragment, the redirectUri origin ("+x+") must match the origin of this page ("+L+")"));y=l(t,T,i.timeout)}var E=k.defer(),D=setInterval(function(){r(T)},500);return y.then(function(t){E.resolve(t)}).fail(function(t){E.reject(t)}),E.promise.then(function(e){return c(t,s,e,f)}).fin(function(){T.closed||(clearInterval(D),T.close())});default:return k.reject(new S("The full page redirect flow is not supported"))}}function f(t,e,i){var n=w.clone(e)||{};return w.extend(n,{prompt:"none",responseMode:"okta_post_message",display:null}),p(t,n,i)}function m(t,e,i){var n=w.clone(e)||{};return w.extend(n,{display:"popup"}),p(t,n,i)}function _(t,e,i){e=w.clone(e)||{};var n=u(t,e);if(!e.responseMode){var r=n.responseType;r.indexOf("code")!==-1&&(w.isString(r)||Array.isArray(r)&&1===r.length)?w.extend(n,{responseMode:"query"}):w.extend(n,{responseMode:"fragment"})}var s=M.getOAuthUrls(t,n,i),o=s.authorizeUrl+h(n);E.setCookie(x.REDIRECT_OAUTH_PARAMS_COOKIE_NAME,JSON.stringify({responseType:n.responseType,state:n.state,nonce:n.nonce,scopes:n.scopes,urls:s})),E.setCookie(x.REDIRECT_NONCE_COOKIE_NAME,n.nonce),E.setCookie(x.REDIRECT_STATE_COOKIE_NAME,n.state),t.token.getWithRedirect._setLocation(o)}function g(t,e){if(!M.isToken(e))return k.reject(new S("Refresh must be passed a token with an array of scopes and an accessToken or idToken"));var i;return i=e.accessToken?"token":"id_token",t.token.getWithoutPrompt({responseType:i,scopes:e.scopes},{authorizeUrl:e.authorizeUrl,userinfoUrl:e.userinfoUrl,issuer:e.issuer})}function v(t,e){var i=t.token.parseFromUrl._getLocationHash();e&&(i=e.substring(e.indexOf("#")));var n=E.getCookie(x.REDIRECT_OAUTH_PARAMS_COOKIE_NAME);if(!i||!n)return k.reject(new S("Unable to parse a token from the url"));try{var r=JSON.parse(n),s=r.urls;delete r.urls,E.deleteCookie(x.REDIRECT_OAUTH_PARAMS_COOKIE_NAME)}catch(o){return k.reject(new S("Unable to parse the "+x.REDIRECT_OAUTH_PARAMS_COOKIE_NAME+" cookie: "+o.message))}return k.resolve(M.hashToObject(i)).then(function(e){return c(t,r,e,s)})}function y(t,e){return e&&(M.isToken(e)||e.accessToken||e.userinfoUrl)?b.httpRequest(t,{url:e.userinfoUrl,method:"GET",accessToken:e.accessToken}).fail(function(t){if(t.xhr&&(401===t.xhr.status||403===t.xhr.status)){var e=t.xhr.getResponseHeader("WWW-Authenticate");if(e){var i=e.match(/error="(.*?)"/)||[],n=e.match(/error_description="(.*?)"/)||[],r=i[1],s=n[1];r&&s&&(t=new L(r,s))}}throw t}):k.reject(new S("getUserInfo requires an access token object"))}var b=i(15),w=i(13),M=i(26),k=i(21),T=i(27),S=i(19),L=i(28),x=i(20),E=i(16);t.exports={getToken:p,getWithoutPrompt:f,getWithPopup:m,getWithRedirect:_,parseFromUrl:v,refreshIdToken:o,decodeToken:n,verifyIdToken:r,refreshToken:g,getUserInfo:y,verifyToken:s}},function(t,e,i){function n(t){return!(!t||!t.accessToken&&!t.idToken||!Array.isArray(t.scopes))}function r(t,e,i){t.addEventListener?t.addEventListener(e,i):t.attachEvent("on"+e,i)}function s(t,e,i){t.removeEventListener?t.removeEventListener(e,i):t.detachEvent("on"+e,i)}function o(t){var e=document.createElement("iframe");return e.style.display="none",e.src=t,document.body.appendChild(e)}function a(t,e){var i=e.popupTitle||"External Identity Provider User Authentication",n="toolbar=no, scrollbars=yes, resizable=yes, top=100, left=500, width=600, height=600";return window.open(t,i,n)}function l(t,e){return p.get(t,(e||t.options.url)+"/.well-known/openid-configuration",{cacheResponse:!0})}function c(t,e,i){return l(t,e).then(function(e){var n=e.jwks_uri,r=g.getStorage(),s=r[n];if(s&&Date.now()/1e3<s.expiresAt){var o=f.find(s.response.keys,{kid:i});if(o)return o}return g.clearStorage(n),p.get(t,n,{cacheResponse:!0}).then(function(t){var e=f.find(t.keys,{kid:i});if(e)return e;throw new _("The key id, "+i+", was not found in the server's keys")})})}function u(t,e,i,n,r){if(!e||!n||!i)throw new _("The jwt, iss, and aud arguments are all required");if(r&&e.nonce!==r)throw new _("OAuth flow response nonce doesn't match request nonce");var s=Math.floor((new Date).getTime()/1e3);if(e.iss!==n)throw new _("The issuer ["+e.iss+"] does not match ["+n+"]");if(e.aud!==i)throw new _("The audience ["+e.aud+"] does not match ["+i+"]");if(e.iat>e.exp)throw new _("The JWT expired before it was issued");if(s-t.options.maxClockSkew>e.exp)throw new _("The JWT expired and is no longer valid");if(e.iat>s+t.options.maxClockSkew)throw new _("The JWT was issued in the future")}function d(t,e,i){i=i||{};var n=f.removeTrailingSlash(i.authorizeUrl)||t.options.authorizeUrl,r=f.removeTrailingSlash(i.issuer)||t.options.issuer,s=f.removeTrailingSlash(i.userinfoUrl)||t.options.userinfoUrl;if(r&&!/^https?:/.test(r)&&(r=t.options.url+"/oauth2/"+r),!r&&n&&e.responseType.indexOf("id_token")!==-1)throw new _("Cannot request idToken with an authorizeUrl without an issuer");if(!r&&e.responseType.indexOf("token")!==-1){if(n&&!s)throw new _("Cannot request accessToken with an authorizeUrl without an issuer or userinfoUrl");if(s&&!n)throw new _("Cannot request token with an userinfoUrl without an issuer or authorizeUrl")}var o=new RegExp("^https?://.*?/oauth2/.+");return r=r||t.options.url,o.test(r)?(n=n||r+"/v1/authorize",s=s||r+"/v1/userinfo"):(n=n||r+"/oauth2/v1/authorize",s=s||r+"/oauth2/v1/userinfo"),{issuer:r,authorizeUrl:n,userinfoUrl:s}}function h(t){for(var e,i=/\+/g,n=/([^&=]+)=?([^&]*)/g,r=t.substring(1),s={};;){if(e=n.exec(r),!e)break;var o=e[1],a=e[2];"id_token"===o||"access_token"===o||"code"===o?s[o]=a:s[o]=decodeURIComponent(a.replace(i," "))}return s}var p=i(15),f=i(13),m=i(17),_=i(19),g=m.getHttpCache();t.exports={getWellKnown:l,getKey:c,validateClaims:u,getOAuthUrls:d,loadFrame:o,loadPopup:a,hashToObject:h,isToken:n,addListener:r,removeListener:s}},function(t,e,i){function n(t,e){e=r.clone(e);var i="jwk",n={name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},s=!0,o=["verify"];return delete e.use,crypto.subtle.importKey(i,e,n,s,o).then(function(e){var i=t.split("."),s=r.stringToBuffer(i[0]+"."+i[1]),o=r.base64UrlDecode(i[2]),a=r.stringToBuffer(o);return crypto.subtle.verify(n,e,a,s)})}var r=i(13);t.exports={verifyToken:n}},function(t,e){function i(t,e){this.name="OAuthError",this.message=e,this.errorCode=t,this.errorSummary=e}i.prototype=new Error,t.exports=i},function(t,e,i){function n(t,e,i){t.emitter.emit("expired",e,i)}function r(t,e){clearTimeout(t.refreshTimeouts[e]),delete t.refreshTimeouts[e]}function s(t){var e=t.refreshTimeouts;for(var i in e)e.hasOwnProperty(i)&&r(t,i);t.refreshTimeouts={}}function o(t,e,i,s,o){var a=1e3*o.expiresAt-Date.now();a<0&&(a=0);var l=setTimeout(function(){return e.autoRefresh?d(t,e,i,s):void(1e3*o.expiresAt<=Date.now()&&(u(e,i,s),n(e,s,o)))},a);r(e,s),e.refreshTimeouts[s]=l}function a(t,e,i){try{var n=i.getStorage()}catch(r){return void e.emitter.emit("error",r)}for(var s in n)if(n.hasOwnProperty(s)){var a=n[s];o(t,e,i,s,a)}}function l(t,e,i,n,r){var s=i.getStorage();if(!f.isObject(r)||!r.scopes||!r.expiresAt&&0!==r.expiresAt||!r.idToken&&!r.accessToken)throw new m("Token must be an Object with scopes, expiresAt, and an idToken or accessToken properties");s[n]=r,i.setStorage(s),o(t,e,i,n,r)}function c(t,e){var i=t.getStorage();return i[e]}function u(t,e,i){r(t,i);var n=e.getStorage();delete n[i],e.setStorage(n)}function d(t,e,i,s){try{var o=c(i,s);if(!o)throw new m("The tokenManager has no token for the key: "+s)}catch(a){return g.reject(a)}return r(e,s),t.token.refresh(o).then(function(n){return l(t,e,i,s,n),e.emitter.emit("refreshed",s,n,o),n}).fail(function(t){throw"OAuthError"===t.name&&(u(e,i,s),n(e,s,o)),t})}function h(t,e){s(t),e.clearStorage()}function p(t,e){e=e||{},e.storage=e.storage||"localStorage",e.autoRefresh||e.autoRefresh===!1||(e.autoRefresh=!0),"localStorage"!==e.storage||_.browserHasLocalStorage()||(f.warn("This browser doesn't support localStorage. Switching to sessionStorage."),e.storage="sessionStorage"),"sessionStorage"!==e.storage||_.browserHasSessionStorage()||(f.warn("This browser doesn't support sessionStorage. Switching to cookie-based storage."),e.storage="cookie");var i;switch(e.storage){case"localStorage":i=b(localStorage,y.TOKEN_STORAGE_NAME);break;case"sessionStorage":i=b(sessionStorage,y.TOKEN_STORAGE_NAME);break;case"cookie":i=b(_.getCookieStorage(),y.TOKEN_STORAGE_NAME);break;default:throw new m("Unrecognized storage option")}var n={emitter:new v,autoRefresh:e.autoRefresh,refreshTimeouts:{}};this.add=f.bind(l,this,t,n,i),this.get=f.bind(c,this,i),this.remove=f.bind(u,this,n,i),this.clear=f.bind(h,this,n,i),this.refresh=f.bind(d,this,t,n,i),this.on=f.bind(n.emitter.on,n.emitter),this.off=f.bind(n.emitter.off,n.emitter),a(t,n,i)}var f=i(13),m=i(19),_=i(17),g=i(21),v=i(30),y=i(20),b=i(18);t.exports=p},function(t,e){function i(){}i.prototype={on:function(t,e,i){var n=this.e||(this.e={});return(n[t]||(n[t]=[])).push({fn:e,ctx:i}),this},once:function(t,e,i){function n(){r.off(t,n),e.apply(i,arguments)}var r=this;return n._=e,this.on(t,n,i)},emit:function(t){var e=[].slice.call(arguments,1),i=((this.e||(this.e={}))[t]||[]).slice(),n=0,r=i.length;for(n;n<r;n++)i[n].fn.apply(i[n].ctx,e);return this},off:function(t,e){var i=this.e||(this.e={}),n=i[t],r=[];if(n&&e)for(var s=0,o=n.length;s<o;s++)n[s].fn!==e&&n[s].fn._!==e&&r.push(n[s]);return r.length?i[t]=r:delete i[t],this}},t.exports=i},function(t,e,i){var n,r;n=[i(32)],r=function(t){function e(t){for(var e=[t],i=t.split("-");i.pop()&&i.length>0;)e.push(i.join("-"));return e}var i={},n=t._;return i.hasTokensInHash=function(t){return/((id|access)_token=)/i.test(t)},i.transformErrorXHR=function(e){if(0===e.status&&n.isEmpty(e.responseJSON))return e.responseJSON={errorSummary:t.loc("error.network.connection","login")},e;if(!e.responseJSON)try{e.responseJSON=JSON.parse(e.responseText)}catch(i){return e.responseJSON={errorSummary:t.loc("oform.error.unexpected","login")},e}if(e.responseJSON&&e.responseJSON.errorCauses&&e.responseJSON.errorCauses.length&&(e.responseJSON.errorSummary=e.responseJSON.errorCauses[0].errorSummary),!n.isEmpty(e.responseJSON)){var r=t.loc("errors."+e.responseJSON.errorCode,"login");r.indexOf("L10N_ERROR[")===-1&&(e.responseJSON.errorSummary=r);
	}return e},i.toLower=function(t){return n.map(t,function(t){return t.toLowerCase()})},i.expandLanguages=function(t){return n.chain(t).map(e).flatten().uniq().value()},i.callAfterTimeout=function(t,e){return setTimeout(t,e)},i}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(5),i(2),i(4),i(36),i(136),i(138),i(33),i(139),i(140),i(143),i(191),i(139)],r=function(t,e,i,n,r,s,o,a,l,c,u){var d=l,h=c,p=u;return{$:t,_:e,moment:n,Handlebars:i,loc:h.StringUtil.localize,createButton:h.ButtonFactory.create,createCallout:p.components.Callout.create,tpl:h.TemplateUtil.tpl,Model:r,BaseModel:s,Collection:o,View:p.BaseView,ListView:p.ListView,TableView:p.TableView,Router:h.BaseRouter,TabbedRouter:h.TabbedRouter,Controller:h.BaseController,DataListController:h.DataListController,DataList:p.datalist.DeadSimpleDataList,ModalDialog:p.components.BaseModalDialog,MultiViewModalDialog:p.components.MultiViewModalDialog,Form:p.forms.BaseForm,FormDialog:p.components.BaseFormDialog,DropDown:p.components.DropDown,Wizard:a,Logger:h.Logger,Metrics:h.Metrics,internal:{framework:d,util:h,views:p}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(34)],r=function(t,e){return e.extend({secureJSON:!1,constructor:function(){t.result(this,"secureJSON")&&(this.sync=t.wrap(this.sync,function(e,i,n,r){return e.call(this,i,n,t.extend({dataType:"secureJSON"},r))})),e.apply(this,arguments)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r,s;!function(o,a){r=[i(2),i(35)],n=a,s="function"==typeof n?n.apply(e,r):n,!(void 0!==s&&(t.exports=s))}(this,function(t,e){function i(t,e){try{var i=s(e.getResponseHeader("link"));t[o].set(u,!0),t.setPagination(i.next.href)}catch(n){t[o].get(u)&&t.setPagination(null)}}function n(t){for(var e={},i=t&&t.split("?")[1],n=i&&decodeURIComponent(i.split("#")[0]).replace(/\+/g," "),r=n?n.split("&"):[],s=0;s<r.length;s++){var o=r[s].split("=");e[o.shift()]=o.join("=")}return e}function r(t){return'"'==t.charAt(0)&&'"'==t.charAt(t.length-1)?t.substring(1,t.length-1):t}function s(t){for(var e=/<[^>]*>\s*(\s*;\s*[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*")))*(,|$)/g,i=/[^\(\)<>@,;:"\/\[\]\?={} \t]+=(([^\(\)<>@,;:"\/\[\]\?={} \t]+)|("[^"]*"))/g,n=t.match(e),s={},o=0;o<n.length;o++){var a=n[o].split(">"),l=a[0].substring(1),c={};c.href=l;for(var u=a[1].match(i),d=0;d<u.length;d++){var h=u[d].split("="),p=h[0];c[p]=r(h[1])}void 0!==c.rel&&(s[c.rel]=c)}return s}var o="__STATE__",a="FETCH_DATA",l="PAGINATION_DATA",c="DEFAULT_PARAMS",u="LINK_BY_HEADER",d="XHR";return e.Collection.extend({params:{},constructor:function(i,n){var r=this[o]=new e.Model;r.set(c,t.defaults(n&&n.params||{},this.params||{})),e.Collection.apply(this,arguments)},sync:function(t,n,r){var s=this,o=r.success;return r.success=function(t,e,n){i(s,n),o.apply(null,arguments)},e.Collection.prototype.sync.call(this,t,n,r)},fetch:function(i){i||(i={});var n=this[o],r=n.get(d);return i.data=t.extend({},n.get(c),i.data||{}),i.fromFetch=!0,n.set(a,i.data),r&&r.abort&&i.abort!==!1&&r.abort(),r=e.Collection.prototype.fetch.call(this,i),n.set(d,r),r},setPagination:function(e,i){t.isString(e)&&e&&(e=n(e)),t.isObject(e)&&!t.isArray(e)&&t.size(e)?i&&i.fromFetch&&(e=t.extend({},this.getFetchData(),e)):e=null,this[o].set(l,e)},getFetchData:function(){return this[o].get(a)||{}},getPaginationData:function(){return this[o].get(l)||{}},hasMore:function(){return t.size(this.getPaginationData())>0},fetchMore:function(){if(!this.hasMore())throw new Error("Invalid Request");return this.fetch({data:this.getPaginationData(),add:!0,remove:!1,update:!0})},reset:function(t,i){return i||(i={}),i.fromFetch||this.setPagination(null),e.Collection.prototype.reset.apply(this,arguments)},where:function(e,i){return t.isEmpty(e)?i?void 0:[]:this[i?"find":"filter"](function(t){for(var i in e)if(e[i]!==t.get(i))return!1;return!0})},create:function(i,n){return n||(n={}),t.result(i,"urlRoot")||(n.url=t.result(this,"url")),e.Collection.prototype.create.call(this,i,n)}})})},function(t,e,i){var n,r;(function(s){
	//     (c) 2010-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Backbone may be freely distributed under the MIT license.
	!function(o){var a="object"==typeof self&&self.self==self&&self||"object"==typeof s&&s.global==s&&s;n=[i(3),i(6),e],r=function(t,e,i){a.Backbone=o(a,i,t,e)}.apply(e,n),!(void 0!==r&&(t.exports=r))}(function(t,e,i,n){var r=t.Backbone,s=[].slice;e.VERSION="1.2.1",e.$=n,e.noConflict=function(){return t.Backbone=r,this},e.emulateHTTP=!1,e.emulateJSON=!1;var o=function(t,e,n){switch(t){case 1:return function(){return i[e](this[n])};case 2:return function(t){return i[e](this[n],t)};case 3:return function(t,r){return i[e](this[n],t,r)};case 4:return function(t,r,s){return i[e](this[n],t,r,s)};default:return function(){var t=s.call(arguments);return t.unshift(this[n]),i[e].apply(i,t)}}},a=function(t,e,n){i.each(e,function(e,r){i[r]&&(t.prototype[r]=o(e,r,n))})},l=e.Events={},c=/\s+/,u=function(t,e,n,r,s){var o,a=0;if(n&&"object"==typeof n){void 0!==r&&"context"in s&&void 0===s.context&&(s.context=r);for(o=i.keys(n);a<o.length;a++)e=t(e,o[a],n[o[a]],s)}else if(n&&c.test(n))for(o=n.split(c);a<o.length;a++)e=t(e,o[a],r,s);else e=t(e,n,r,s);return e};l.on=function(t,e,i){return d(this,t,e,i)};var d=function(t,e,i,n,r){if(t._events=u(h,t._events||{},e,i,{context:n,ctx:t,listening:r}),r){var s=t._listeners||(t._listeners={});s[r.id]=r}return t};l.listenTo=function(t,e,n){if(!t)return this;var r=t._listenId||(t._listenId=i.uniqueId("l")),s=this._listeningTo||(this._listeningTo={}),o=s[r];if(!o){var a=this._listenId||(this._listenId=i.uniqueId("l"));o=s[r]={obj:t,objId:r,id:a,listeningTo:s,count:0}}return d(t,e,n,this,o),this};var h=function(t,e,i,n){if(i){var r=t[e]||(t[e]=[]),s=n.context,o=n.ctx,a=n.listening;a&&a.count++,r.push({callback:i,context:s,ctx:s||o,listening:a})}return t};l.off=function(t,e,i){return this._events?(this._events=u(p,this._events,t,e,{context:i,listeners:this._listeners}),this):this},l.stopListening=function(t,e,n){var r=this._listeningTo;if(!r)return this;for(var s=t?[t._listenId]:i.keys(r),o=0;o<s.length;o++){var a=r[s[o]];if(!a)break;a.obj.off(e,n,this)}return i.isEmpty(r)&&(this._listeningTo=void 0),this};var p=function(t,e,n,r){if(t){var s,o=0,a=r.context,l=r.listeners;if(e||n||a){for(var c=e?[e]:i.keys(t);o<c.length;o++){e=c[o];var u=t[e];if(!u)break;for(var d=[],h=0;h<u.length;h++){var p=u[h];n&&n!==p.callback&&n!==p.callback._callback||a&&a!==p.context?d.push(p):(s=p.listening,s&&0===--s.count&&(delete l[s.id],delete s.listeningTo[s.objId]))}d.length?t[e]=d:delete t[e]}return i.size(t)?t:void 0}for(var f=i.keys(l);o<f.length;o++)s=l[f[o]],delete l[s.id],delete s.listeningTo[s.objId]}};l.once=function(t,e,n){var r=u(f,{},t,e,i.bind(this.off,this));return this.on(r,void 0,n)},l.listenToOnce=function(t,e,n){var r=u(f,{},e,n,i.bind(this.stopListening,this,t));return this.listenTo(t,r)};var f=function(t,e,n,r){if(n){var s=t[e]=i.once(function(){r(e,s),n.apply(this,arguments)});s._callback=n}return t};l.trigger=function(t){if(!this._events)return this;for(var e=Math.max(0,arguments.length-1),i=Array(e),n=0;n<e;n++)i[n]=arguments[n+1];return u(m,this._events,t,void 0,i),this};var m=function(t,e,i,n){if(t){var r=t[e],s=t.all;r&&s&&(s=s.slice()),r&&_(r,n),s&&_(s,[e].concat(n))}return t},_=function(t,e){var i,n=-1,r=t.length,s=e[0],o=e[1],a=e[2];switch(e.length){case 0:for(;++n<r;)(i=t[n]).callback.call(i.ctx);return;case 1:for(;++n<r;)(i=t[n]).callback.call(i.ctx,s);return;case 2:for(;++n<r;)(i=t[n]).callback.call(i.ctx,s,o);return;case 3:for(;++n<r;)(i=t[n]).callback.call(i.ctx,s,o,a);return;default:for(;++n<r;)(i=t[n]).callback.apply(i.ctx,e);return}};l.bind=l.on,l.unbind=l.off,i.extend(e,l);var g=e.Model=function(t,e){var n=t||{};e||(e={}),this.cid=i.uniqueId(this.cidPrefix),this.attributes={},e.collection&&(this.collection=e.collection),e.parse&&(n=this.parse(n,e)||{}),n=i.defaults({},n,i.result(this,"defaults")),this.set(n,e),this.changed={},this.initialize.apply(this,arguments)};i.extend(g.prototype,l,{changed:null,validationError:null,idAttribute:"id",cidPrefix:"c",initialize:function(){},toJSON:function(t){return i.clone(this.attributes)},sync:function(){return e.sync.apply(this,arguments)},get:function(t){return this.attributes[t]},escape:function(t){return i.escape(this.get(t))},has:function(t){return null!=this.get(t)},matches:function(t){return!!i.iteratee(t,this)(this.attributes)},set:function(t,e,n){if(null==t)return this;var r;if("object"==typeof t?(r=t,n=e):(r={})[t]=e,n||(n={}),!this._validate(r,n))return!1;var s=n.unset,o=n.silent,a=[],l=this._changing;this._changing=!0,l||(this._previousAttributes=i.clone(this.attributes),this.changed={});var c=this.attributes,u=this.changed,d=this._previousAttributes;this.idAttribute in r&&(this.id=r[this.idAttribute]);for(var h in r)e=r[h],i.isEqual(c[h],e)||a.push(h),i.isEqual(d[h],e)?delete u[h]:u[h]=e,s?delete c[h]:c[h]=e;if(!o){a.length&&(this._pending=n);for(var p=0;p<a.length;p++)this.trigger("change:"+a[p],this,c[a[p]],n)}if(l)return this;if(!o)for(;this._pending;)n=this._pending,this._pending=!1,this.trigger("change",this,n);return this._pending=!1,this._changing=!1,this},unset:function(t,e){return this.set(t,void 0,i.extend({},e,{unset:!0}))},clear:function(t){var e={};for(var n in this.attributes)e[n]=void 0;return this.set(e,i.extend({},t,{unset:!0}))},hasChanged:function(t){return null==t?!i.isEmpty(this.changed):i.has(this.changed,t)},changedAttributes:function(t){if(!t)return!!this.hasChanged()&&i.clone(this.changed);var e=this._changing?this._previousAttributes:this.attributes,n={};for(var r in t){var s=t[r];i.isEqual(e[r],s)||(n[r]=s)}return!!i.size(n)&&n},previous:function(t){return null!=t&&this._previousAttributes?this._previousAttributes[t]:null},previousAttributes:function(){return i.clone(this._previousAttributes)},fetch:function(t){t=i.extend({parse:!0},t);var e=this,n=t.success;return t.success=function(i){var r=t.parse?e.parse(i,t):i;return!!e.set(r,t)&&(n&&n.call(t.context,e,i,t),void e.trigger("sync",e,i,t))},j(this,t),this.sync("read",this,t)},save:function(t,e,n){var r;null==t||"object"==typeof t?(r=t,n=e):(r={})[t]=e,n=i.extend({validate:!0,parse:!0},n);var s=n.wait;if(r&&!s){if(!this.set(r,n))return!1}else if(!this._validate(r,n))return!1;var o=this,a=n.success,l=this.attributes;n.success=function(t){o.attributes=l;var e=n.parse?o.parse(t,n):t;return s&&(e=i.extend({},r,e)),!(e&&!o.set(e,n))&&(a&&a.call(n.context,o,t,n),void o.trigger("sync",o,t,n))},j(this,n),r&&s&&(this.attributes=i.extend({},l,r));var c=this.isNew()?"create":n.patch?"patch":"update";"patch"!==c||n.attrs||(n.attrs=r);var u=this.sync(c,this,n);return this.attributes=l,u},destroy:function(t){t=t?i.clone(t):{};var e=this,n=t.success,r=t.wait,s=function(){e.stopListening(),e.trigger("destroy",e,e.collection,t)};t.success=function(i){r&&s(),n&&n.call(t.context,e,i,t),e.isNew()||e.trigger("sync",e,i,t)};var o=!1;return this.isNew()?i.defer(t.success):(j(this,t),o=this.sync("delete",this,t)),r||s(),o},url:function(){var t=i.result(this,"urlRoot")||i.result(this.collection,"url")||H();if(this.isNew())return t;var e=this.get(this.idAttribute);return t.replace(/[^\/]$/,"$&/")+encodeURIComponent(e)},parse:function(t,e){return t},clone:function(){return new this.constructor(this.attributes)},isNew:function(){return!this.has(this.idAttribute)},isValid:function(t){return this._validate({},i.defaults({validate:!0},t))},_validate:function(t,e){if(!e.validate||!this.validate)return!0;t=i.extend({},this.attributes,t);var n=this.validationError=this.validate(t,e)||null;return!n||(this.trigger("invalid",this,n,i.extend(e,{validationError:n})),!1)}});var v={keys:1,values:1,pairs:1,invert:1,pick:0,omit:0,chain:1,isEmpty:1};a(g,v,"attributes");var y=e.Collection=function(t,e){e||(e={}),e.model&&(this.model=e.model),void 0!==e.comparator&&(this.comparator=e.comparator),this._reset(),this.initialize.apply(this,arguments),t&&this.reset(t,i.extend({silent:!0},e))},b={add:!0,remove:!0,merge:!0},w={add:!0,remove:!1};i.extend(y.prototype,l,{model:g,initialize:function(){},toJSON:function(t){return this.map(function(e){return e.toJSON(t)})},sync:function(){return e.sync.apply(this,arguments)},add:function(t,e){return this.set(t,i.extend({merge:!1},e,w))},remove:function(t,e){e=i.extend({},e);var n=!i.isArray(t);t=n?[t]:i.clone(t);var r=this._removeModels(t,e);return!e.silent&&r&&this.trigger("update",this,e),n?r[0]:r},set:function(t,e){e=i.defaults({},e,b),e.parse&&!this._isModel(t)&&(t=this.parse(t,e));var n=!i.isArray(t);t=n?t?[t]:[]:t.slice();var r,s,o,a,l,c=e.at;null!=c&&(c=+c),c<0&&(c+=this.length+1);for(var u=this.comparator&&null==c&&e.sort!==!1,d=i.isString(this.comparator)?this.comparator:null,h=[],p=[],f={},m=e.add,_=e.merge,g=e.remove,v=!(u||!m||!g)&&[],y=!1,w=0;w<t.length;w++){if(o=t[w],a=this.get(o))g&&(f[a.cid]=!0),_&&o!==a&&(o=this._isModel(o)?o.attributes:o,e.parse&&(o=a.parse(o,e)),a.set(o,e),u&&!l&&a.hasChanged(d)&&(l=!0)),t[w]=a;else if(m){if(s=t[w]=this._prepareModel(o,e),!s)continue;h.push(s),this._addReference(s,e)}s=a||s,s&&(r=this.modelId(s.attributes),!v||!s.isNew()&&f[r]||(v.push(s),y=y||!this.models[w]||s.cid!==this.models[w].cid),f[r]=!0)}if(g){for(var w=0;w<this.length;w++)f[(s=this.models[w]).cid]||p.push(s);p.length&&this._removeModels(p,e)}if(h.length||y)if(u&&(l=!0),this.length+=h.length,null!=c)for(var w=0;w<h.length;w++)this.models.splice(c+w,0,h[w]);else{v&&(this.models.length=0);for(var M=v||h,w=0;w<M.length;w++)this.models.push(M[w])}if(l&&this.sort({silent:!0}),!e.silent){for(var k=null!=c?i.clone(e):e,w=0;w<h.length;w++)null!=c&&(k.index=c+w),(s=h[w]).trigger("add",s,this,k);(l||y)&&this.trigger("sort",this,e),(h.length||p.length)&&this.trigger("update",this,e)}return n?t[0]:t},reset:function(t,e){e=e?i.clone(e):{};for(var n=0;n<this.models.length;n++)this._removeReference(this.models[n],e);return e.previousModels=this.models,this._reset(),t=this.add(t,i.extend({silent:!0},e)),e.silent||this.trigger("reset",this,e),t},push:function(t,e){return this.add(t,i.extend({at:this.length},e))},pop:function(t){var e=this.at(this.length-1);return this.remove(e,t)},unshift:function(t,e){return this.add(t,i.extend({at:0},e))},shift:function(t){var e=this.at(0);return this.remove(e,t)},slice:function(){return s.apply(this.models,arguments)},get:function(t){if(null!=t){var e=this.modelId(this._isModel(t)?t.attributes:t);return this._byId[t]||this._byId[e]||this._byId[t.cid]}},at:function(t){return t<0&&(t+=this.length),this.models[t]},where:function(t,e){var n=i.matches(t);return this[e?"find":"filter"](function(t){return n(t.attributes)})},findWhere:function(t){return this.where(t,!0)},sort:function(t){if(!this.comparator)throw new Error("Cannot sort a set without a comparator");return t||(t={}),i.isString(this.comparator)||1===this.comparator.length?this.models=this.sortBy(this.comparator,this):this.models.sort(i.bind(this.comparator,this)),t.silent||this.trigger("sort",this,t),this},pluck:function(t){return i.invoke(this.models,"get",t)},fetch:function(t){t=i.extend({parse:!0},t);var e=t.success,n=this;return t.success=function(i){var r=t.reset?"reset":"set";n[r](i,t),e&&e.call(t.context,n,i,t),n.trigger("sync",n,i,t)},j(this,t),this.sync("read",this,t)},create:function(t,e){e=e?i.clone(e):{};var n=e.wait;if(t=this._prepareModel(t,e),!t)return!1;n||this.add(t,e);var r=this,s=e.success;return e.success=function(t,e,i){n&&r.add(t,i),s&&s.call(i.context,t,e,i)},t.save(null,e),t},parse:function(t,e){return t},clone:function(){return new this.constructor(this.models,{model:this.model,comparator:this.comparator})},modelId:function(t){return t[this.model.prototype.idAttribute||"id"]},_reset:function(){this.length=0,this.models=[],this._byId={}},_prepareModel:function(t,e){if(this._isModel(t))return t.collection||(t.collection=this),t;e=e?i.clone(e):{},e.collection=this;var n=new this.model(t,e);return n.validationError?(this.trigger("invalid",this,n.validationError,e),!1):n},_removeModels:function(t,e){for(var i=[],n=0;n<t.length;n++){var r=this.get(t[n]);if(r){var s=this.indexOf(r);this.models.splice(s,1),this.length--,e.silent||(e.index=s,r.trigger("remove",r,this,e)),i.push(r),this._removeReference(r,e)}}return!!i.length&&i},_isModel:function(t){return t instanceof g},_addReference:function(t,e){this._byId[t.cid]=t;var i=this.modelId(t.attributes);null!=i&&(this._byId[i]=t),t.on("all",this._onModelEvent,this)},_removeReference:function(t,e){delete this._byId[t.cid];var i=this.modelId(t.attributes);null!=i&&delete this._byId[i],this===t.collection&&delete t.collection,t.off("all",this._onModelEvent,this)},_onModelEvent:function(t,e,i,n){if("add"!==t&&"remove"!==t||i===this){if("destroy"===t&&this.remove(e,n),"change"===t){var r=this.modelId(e.previousAttributes()),s=this.modelId(e.attributes);r!==s&&(null!=r&&delete this._byId[r],null!=s&&(this._byId[s]=e))}this.trigger.apply(this,arguments)}}});var M={forEach:3,each:3,map:3,collect:3,reduce:4,foldl:4,inject:4,reduceRight:4,foldr:4,find:3,detect:3,filter:3,select:3,reject:3,every:3,all:3,some:3,any:3,include:2,contains:2,invoke:0,max:3,min:3,toArray:1,size:1,first:3,head:3,take:3,initial:3,rest:3,tail:3,drop:3,last:3,without:0,difference:0,indexOf:3,shuffle:1,lastIndexOf:3,isEmpty:1,chain:1,sample:3,partition:3};a(y,M,"models");var k=["groupBy","countBy","sortBy","indexBy"];i.each(k,function(t){i[t]&&(y.prototype[t]=function(e,n){var r=i.isFunction(e)?e:function(t){return t.get(e)};return i[t](this.models,r,n)})});var T=e.View=function(t){this.cid=i.uniqueId("view"),i.extend(this,i.pick(t,L)),this._ensureElement(),this.initialize.apply(this,arguments)},S=/^(\S+)\s*(.*)$/,L=["model","collection","el","id","attributes","className","tagName","events"];i.extend(T.prototype,l,{tagName:"div",$:function(t){return this.$el.find(t)},initialize:function(){},render:function(){return this},remove:function(){return this._removeElement(),this.stopListening(),this},_removeElement:function(){this.$el.remove()},setElement:function(t){return this.undelegateEvents(),this._setElement(t),this.delegateEvents(),this},_setElement:function(t){this.$el=t instanceof e.$?t:e.$(t),this.el=this.$el[0]},delegateEvents:function(t){if(t||(t=i.result(this,"events")),!t)return this;this.undelegateEvents();for(var e in t){var n=t[e];if(i.isFunction(n)||(n=this[n]),n){var r=e.match(S);this.delegate(r[1],r[2],i.bind(n,this))}}return this},delegate:function(t,e,i){return this.$el.on(t+".delegateEvents"+this.cid,e,i),this},undelegateEvents:function(){return this.$el&&this.$el.off(".delegateEvents"+this.cid),this},undelegate:function(t,e,i){return this.$el.off(t+".delegateEvents"+this.cid,e,i),this},_createElement:function(t){return document.createElement(t)},_ensureElement:function(){if(this.el)this.setElement(i.result(this,"el"));else{var t=i.extend({},i.result(this,"attributes"));this.id&&(t.id=i.result(this,"id")),this.className&&(t["class"]=i.result(this,"className")),this.setElement(this._createElement(i.result(this,"tagName"))),this._setAttributes(t)}},_setAttributes:function(t){this.$el.attr(t)}}),e.sync=function(t,n,r){var s=x[t];i.defaults(r||(r={}),{emulateHTTP:e.emulateHTTP,emulateJSON:e.emulateJSON});var o={type:s,dataType:"json"};if(r.url||(o.url=i.result(n,"url")||H()),null!=r.data||!n||"create"!==t&&"update"!==t&&"patch"!==t||(o.contentType="application/json",o.data=JSON.stringify(r.attrs||n.toJSON(r))),r.emulateJSON&&(o.contentType="application/x-www-form-urlencoded",o.data=o.data?{model:o.data}:{}),r.emulateHTTP&&("PUT"===s||"DELETE"===s||"PATCH"===s)){o.type="POST",r.emulateJSON&&(o.data._method=s);var a=r.beforeSend;r.beforeSend=function(t){if(t.setRequestHeader("X-HTTP-Method-Override",s),a)return a.apply(this,arguments)}}"GET"===o.type||r.emulateJSON||(o.processData=!1);var l=r.error;r.error=function(t,e,i){r.textStatus=e,r.errorThrown=i,l&&l.call(r.context,t,e,i)};var c=r.xhr=e.ajax(i.extend(o,r));return n.trigger("request",n,c,r),c};var x={create:"POST",update:"PUT",patch:"PATCH","delete":"DELETE",read:"GET"};e.ajax=function(){return e.$.ajax.apply(e.$,arguments)};var E=e.Router=function(t){t||(t={}),t.routes&&(this.routes=t.routes),this._bindRoutes(),this.initialize.apply(this,arguments)},D=/\((.*?)\)/g,Y=/(\(\?)?:\w+/g,C=/\*\w+/g,A=/[\-{}\[\]+?.,\\\^$|#\s]/g;i.extend(E.prototype,l,{initialize:function(){},route:function(t,n,r){i.isRegExp(t)||(t=this._routeToRegExp(t)),i.isFunction(n)&&(r=n,n=""),r||(r=this[n]);var s=this;return e.history.route(t,function(i){var o=s._extractParameters(t,i);s.execute(r,o,n)!==!1&&(s.trigger.apply(s,["route:"+n].concat(o)),s.trigger("route",n,o),e.history.trigger("route",s,n,o))}),this},execute:function(t,e,i){t&&t.apply(this,e)},navigate:function(t,i){return e.history.navigate(t,i),this},_bindRoutes:function(){if(this.routes){this.routes=i.result(this,"routes");for(var t,e=i.keys(this.routes);null!=(t=e.pop());)this.route(t,this.routes[t])}},_routeToRegExp:function(t){return t=t.replace(A,"\\$&").replace(D,"(?:$1)?").replace(Y,function(t,e){return e?t:"([^/?]+)"}).replace(C,"([^?]*?)"),new RegExp("^"+t+"(?:\\?([\\s\\S]*))?$")},_extractParameters:function(t,e){var n=t.exec(e).slice(1);return i.map(n,function(t,e){return e===n.length-1?t||null:t?decodeURIComponent(t):null})}});var O=e.History=function(){this.handlers=[],i.bindAll(this,"checkUrl"),"undefined"!=typeof window&&(this.location=window.location,this.history=window.history)},N=/^[#\/]|\s+$/g,I=/^\/+|\/+$/g,P=/#.*$/;O.started=!1,i.extend(O.prototype,l,{interval:50,atRoot:function(){var t=this.location.pathname.replace(/[^\/]$/,"$&/");return t===this.root&&!this.getSearch()},matchRoot:function(){var t=this.decodeFragment(this.location.pathname),e=t.slice(0,this.root.length-1)+"/";return e===this.root},decodeFragment:function(t){return decodeURI(t.replace(/%25/g,"%2525"))},getSearch:function(){var t=this.location.href.replace(/#.*/,"").match(/\?.+/);return t?t[0]:""},getHash:function(t){var e=(t||this).location.href.match(/#(.*)$/);return e?e[1]:""},getPath:function(){var t=this.decodeFragment(this.location.pathname+this.getSearch()).slice(this.root.length-1);return"/"===t.charAt(0)?t.slice(1):t},getFragment:function(t){return null==t&&(t=this._usePushState||!this._wantsHashChange?this.getPath():this.getHash()),t.replace(N,"")},start:function(t){if(O.started)throw new Error("Backbone.history has already been started");if(O.started=!0,this.options=i.extend({root:"/"},this.options,t),this.root=this.options.root,this._wantsHashChange=this.options.hashChange!==!1,this._hasHashChange="onhashchange"in window,this._useHashChange=this._wantsHashChange&&this._hasHashChange,this._wantsPushState=!!this.options.pushState,this._hasPushState=!(!this.history||!this.history.pushState),this._usePushState=this._wantsPushState&&this._hasPushState,this.fragment=this.getFragment(),this.root=("/"+this.root+"/").replace(I,"/"),this._wantsHashChange&&this._wantsPushState){if(!this._hasPushState&&!this.atRoot()){var e=this.root.slice(0,-1)||"/";return this.location.replace(e+"#"+this.getPath()),!0}this._hasPushState&&this.atRoot()&&this.navigate(this.getHash(),{replace:!0})}if(!this._hasHashChange&&this._wantsHashChange&&!this._usePushState){this.iframe=document.createElement("iframe"),this.iframe.src="javascript:0",this.iframe.style.display="none",this.iframe.tabIndex=-1;var n=document.body,r=n.insertBefore(this.iframe,n.firstChild).contentWindow;r.document.open(),r.document.close(),r.location.hash="#"+this.fragment}var s=window.addEventListener||function(t,e){return attachEvent("on"+t,e)};if(this._usePushState?s("popstate",this.checkUrl,!1):this._useHashChange&&!this.iframe?s("hashchange",this.checkUrl,!1):this._wantsHashChange&&(this._checkUrlInterval=setInterval(this.checkUrl,this.interval)),!this.options.silent)return this.loadUrl()},stop:function(){var t=window.removeEventListener||function(t,e){return detachEvent("on"+t,e)};this._usePushState?t("popstate",this.checkUrl,!1):this._useHashChange&&!this.iframe&&t("hashchange",this.checkUrl,!1),this.iframe&&(document.body.removeChild(this.iframe),this.iframe=null),this._checkUrlInterval&&clearInterval(this._checkUrlInterval),O.started=!1},route:function(t,e){this.handlers.unshift({route:t,callback:e})},checkUrl:function(t){var e=this.getFragment();return e===this.fragment&&this.iframe&&(e=this.getHash(this.iframe.contentWindow)),e!==this.fragment&&(this.iframe&&this.navigate(e),void this.loadUrl())},loadUrl:function(t){return!!this.matchRoot()&&(t=this.fragment=this.getFragment(t),i.any(this.handlers,function(e){if(e.route.test(t))return e.callback(t),!0}))},navigate:function(t,e){if(!O.started)return!1;e&&e!==!0||(e={trigger:!!e}),t=this.getFragment(t||"");var i=this.root;""!==t&&"?"!==t.charAt(0)||(i=i.slice(0,-1)||"/");var n=i+t;if(t=this.decodeFragment(t.replace(P,"")),this.fragment!==t){if(this.fragment=t,this._usePushState)this.history[e.replace?"replaceState":"pushState"]({},document.title,n);else{if(!this._wantsHashChange)return this.location.assign(n);if(this._updateHash(this.location,t,e.replace),this.iframe&&t!==this.getHash(this.iframe.contentWindow)){var r=this.iframe.contentWindow;e.replace||(r.document.open(),r.document.close()),this._updateHash(r.location,t,e.replace)}}return e.trigger?this.loadUrl(t):void 0}},_updateHash:function(t,e,i){if(i){var n=t.href.replace(/(javascript:|#).*$/,"");t.replace(n+"#"+e)}else t.hash="#"+e}}),e.history=new O;var R=function(t,e){var n,r=this;n=t&&i.has(t,"constructor")?t.constructor:function(){return r.apply(this,arguments)},i.extend(n,r,e);var s=function(){this.constructor=n};return s.prototype=r.prototype,n.prototype=new s,t&&i.extend(n.prototype,t),n.__super__=r.prototype,n};g.extend=y.extend=E.extend=T.extend=O.extend=R;var H=function(){throw new Error('A "url" property or function must be specified')},j=function(t,e){var i=e.error;e.error=function(n){i&&i.call(e.context,t,n,e),t.trigger("error",t,n,e)}};return e})}).call(e,function(){return this}())},function(t,e,i){(function(t){!function(e,i){t.exports=i()}(this,function(){"use strict";function e(){return Zi.apply(null,arguments)}function n(t){Zi=t}function r(t){return t instanceof Array||"[object Array]"===Object.prototype.toString.call(t)}function s(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}function o(t,e){var i,n=[];for(i=0;i<t.length;++i)n.push(e(t[i],i));return n}function a(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function l(t,e){for(var i in e)a(e,i)&&(t[i]=e[i]);return a(e,"toString")&&(t.toString=e.toString),a(e,"valueOf")&&(t.valueOf=e.valueOf),t}function c(t,e,i,n){return Pt(t,e,i,n,!0).utc()}function u(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1}}function d(t){return null==t._pf&&(t._pf=u()),t._pf}function h(t){if(null==t._isValid){var e=d(t);t._isValid=!(isNaN(t._d.getTime())||!(e.overflow<0)||e.empty||e.invalidMonth||e.invalidWeekday||e.nullInput||e.invalidFormat||e.userInvalidated),t._strict&&(t._isValid=t._isValid&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour)}return t._isValid}function p(t){var e=c(NaN);return null!=t?l(d(e),t):d(e).userInvalidated=!0,e}function f(t){return void 0===t}function m(t,e){var i,n,r;if(f(e._isAMomentObject)||(t._isAMomentObject=e._isAMomentObject),f(e._i)||(t._i=e._i),f(e._f)||(t._f=e._f),f(e._l)||(t._l=e._l),f(e._strict)||(t._strict=e._strict),f(e._tzm)||(t._tzm=e._tzm),f(e._isUTC)||(t._isUTC=e._isUTC),f(e._offset)||(t._offset=e._offset),f(e._pf)||(t._pf=d(e)),f(e._locale)||(t._locale=e._locale),tn.length>0)for(i in tn)n=tn[i],r=e[n],f(r)||(t[n]=r);return t}function _(t){m(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),en===!1&&(en=!0,e.updateOffset(this),en=!1)}function g(t){return t instanceof _||null!=t&&null!=t._isAMomentObject}function v(t){return t<0?Math.ceil(t):Math.floor(t)}function y(t){var e=+t,i=0;return 0!==e&&isFinite(e)&&(i=v(e)),i}function b(t,e,i){var n,r=Math.min(t.length,e.length),s=Math.abs(t.length-e.length),o=0;for(n=0;n<r;n++)(i&&t[n]!==e[n]||!i&&y(t[n])!==y(e[n]))&&o++;return o+s}function w(t){e.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function M(t,e){var i=!0;return l(function(){return i&&(w(t+"\nArguments: "+Array.prototype.slice.call(arguments).join(", ")+"\n"+(new Error).stack),i=!1),e.apply(this,arguments)},e)}function k(t,e){nn[t]||(w(e),nn[t]=!0)}function T(t){return t instanceof Function||"[object Function]"===Object.prototype.toString.call(t)}function S(t){return"[object Object]"===Object.prototype.toString.call(t)}function L(t){var e,i;for(i in t)e=t[i],T(e)?this[i]=e:this["_"+i]=e;this._config=t,this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function x(t,e){var i,n=l({},t);for(i in e)a(e,i)&&(S(t[i])&&S(e[i])?(n[i]={},l(n[i],t[i]),l(n[i],e[i])):null!=e[i]?n[i]=e[i]:delete n[i]);return n}function E(t){null!=t&&this.set(t)}function D(t){return t?t.toLowerCase().replace("_","-"):t}function Y(t){for(var e,i,n,r,s=0;s<t.length;){for(r=D(t[s]).split("-"),e=r.length,i=D(t[s+1]),i=i?i.split("-"):null;e>0;){if(n=C(r.slice(0,e).join("-")))return n;if(i&&i.length>=e&&b(r,i,!0)>=e-1)break;e--}s++}return null}function C(e){var n=null;if(!sn[e]&&"undefined"!=typeof t&&t&&t.exports)try{n=rn._abbr,i(38)("./"+e),A(n)}catch(r){}return sn[e]}function A(t,e){var i;return t&&(i=f(e)?I(t):O(t,e),i&&(rn=i)),rn._abbr}function O(t,e){return null!==e?(e.abbr=t,null!=sn[t]?(k("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale"),e=x(sn[t]._config,e)):null!=e.parentLocale&&(null!=sn[e.parentLocale]?e=x(sn[e.parentLocale]._config,e):k("parentLocaleUndefined","specified parentLocale is not defined yet")),sn[t]=new E(e),A(t),sn[t]):(delete sn[t],null)}function N(t,e){if(null!=e){var i;null!=sn[t]&&(e=x(sn[t]._config,e)),i=new E(e),i.parentLocale=sn[t],sn[t]=i,A(t)}else null!=sn[t]&&(null!=sn[t].parentLocale?sn[t]=sn[t].parentLocale:null!=sn[t]&&delete sn[t]);return sn[t]}function I(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return rn;if(!r(t)){if(e=C(t))return e;t=[t]}return Y(t)}function P(){return Object.keys(sn)}function R(t,e){var i=t.toLowerCase();on[i]=on[i+"s"]=on[e]=t}function H(t){return"string"==typeof t?on[t]||on[t.toLowerCase()]:void 0}function j(t){var e,i,n={};for(i in t)a(t,i)&&(e=H(i),e&&(n[e]=t[i]));return n}function F(t,i){return function(n){return null!=n?(W(this,t,n),e.updateOffset(this,i),this):U(this,t)}}function U(t,e){return t.isValid()?t._d["get"+(t._isUTC?"UTC":"")+e]():NaN}function W(t,e,i){t.isValid()&&t._d["set"+(t._isUTC?"UTC":"")+e](i)}function B(t,e){var i;if("object"==typeof t)for(i in t)this.set(i,t[i]);else if(t=H(t),T(this[t]))return this[t](e);return this}function z(t,e,i){var n=""+Math.abs(t),r=e-n.length,s=t>=0;return(s?i?"+":"":"-")+Math.pow(10,Math.max(0,r)).toString().substr(1)+n}function V(t,e,i,n){var r=n;"string"==typeof n&&(r=function(){return this[n]()}),t&&(un[t]=r),e&&(un[e[0]]=function(){return z(r.apply(this,arguments),e[1],e[2])}),i&&(un[i]=function(){return this.localeData().ordinal(r.apply(this,arguments),t)})}function $(t){return t.match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function q(t){var e,i,n=t.match(an);for(e=0,i=n.length;e<i;e++)un[n[e]]?n[e]=un[n[e]]:n[e]=$(n[e]);return function(r){var s="";for(e=0;e<i;e++)s+=n[e]instanceof Function?n[e].call(r,t):n[e];return s}}function G(t,e){return t.isValid()?(e=J(e,t.localeData()),cn[e]=cn[e]||q(e),cn[e](t)):t.localeData().invalidDate()}function J(t,e){function i(t){return e.longDateFormat(t)||t}var n=5;for(ln.lastIndex=0;n>=0&&ln.test(t);)t=t.replace(ln,i),ln.lastIndex=0,n-=1;return t}function K(t,e,i){En[t]=T(e)?e:function(t,n){return t&&i?i:e}}function Q(t,e){return a(En,t)?En[t](e._strict,e._locale):new RegExp(X(t))}function X(t){return Z(t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,i,n,r){return e||i||n||r}))}function Z(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function tt(t,e){var i,n=e;for("string"==typeof t&&(t=[t]),"number"==typeof e&&(n=function(t,i){i[e]=y(t)}),i=0;i<t.length;i++)Dn[t[i]]=n}function et(t,e){tt(t,function(t,i,n,r){n._w=n._w||{},e(t,n._w,n,r)})}function it(t,e,i){null!=e&&a(Dn,t)&&Dn[t](e,i._a,i,t)}function nt(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function rt(t,e){return r(this._months)?this._months[t.month()]:this._months[jn.test(e)?"format":"standalone"][t.month()]}function st(t,e){return r(this._monthsShort)?this._monthsShort[t.month()]:this._monthsShort[jn.test(e)?"format":"standalone"][t.month()]}function ot(t,e,i){var n,r,s;for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),n=0;n<12;n++){if(r=c([2e3,n]),i&&!this._longMonthsParse[n]&&(this._longMonthsParse[n]=new RegExp("^"+this.months(r,"").replace(".","")+"$","i"),this._shortMonthsParse[n]=new RegExp("^"+this.monthsShort(r,"").replace(".","")+"$","i")),i||this._monthsParse[n]||(s="^"+this.months(r,"")+"|^"+this.monthsShort(r,""),this._monthsParse[n]=new RegExp(s.replace(".",""),"i")),i&&"MMMM"===e&&this._longMonthsParse[n].test(t))return n;if(i&&"MMM"===e&&this._shortMonthsParse[n].test(t))return n;if(!i&&this._monthsParse[n].test(t))return n}}function at(t,e){var i;if(!t.isValid())return t;if("string"==typeof e)if(/^\d+$/.test(e))e=y(e);else if(e=t.localeData().monthsParse(e),"number"!=typeof e)return t;return i=Math.min(t.date(),nt(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,i),t}function lt(t){return null!=t?(at(this,t),e.updateOffset(this,!0),this):U(this,"Month")}function ct(){return nt(this.year(),this.month())}function ut(t){return this._monthsParseExact?(a(this,"_monthsRegex")||ht.call(this),t?this._monthsShortStrictRegex:this._monthsShortRegex):this._monthsShortStrictRegex&&t?this._monthsShortStrictRegex:this._monthsShortRegex}function dt(t){return this._monthsParseExact?(a(this,"_monthsRegex")||ht.call(this),t?this._monthsStrictRegex:this._monthsRegex):this._monthsStrictRegex&&t?this._monthsStrictRegex:this._monthsRegex}function ht(){function t(t,e){return e.length-t.length}var e,i,n=[],r=[],s=[];for(e=0;e<12;e++)i=c([2e3,e]),n.push(this.monthsShort(i,"")),r.push(this.months(i,"")),s.push(this.months(i,"")),s.push(this.monthsShort(i,""));for(n.sort(t),r.sort(t),s.sort(t),e=0;e<12;e++)n[e]=Z(n[e]),r[e]=Z(r[e]),s[e]=Z(s[e]);this._monthsRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+r.join("|")+")$","i"),this._monthsShortStrictRegex=new RegExp("^("+n.join("|")+")$","i")}function pt(t){var e,i=t._a;return i&&d(t).overflow===-2&&(e=i[Cn]<0||i[Cn]>11?Cn:i[An]<1||i[An]>nt(i[Yn],i[Cn])?An:i[On]<0||i[On]>24||24===i[On]&&(0!==i[Nn]||0!==i[In]||0!==i[Pn])?On:i[Nn]<0||i[Nn]>59?Nn:i[In]<0||i[In]>59?In:i[Pn]<0||i[Pn]>999?Pn:-1,d(t)._overflowDayOfYear&&(e<Yn||e>An)&&(e=An),d(t)._overflowWeeks&&e===-1&&(e=Rn),d(t)._overflowWeekday&&e===-1&&(e=Hn),d(t).overflow=e),t}function ft(t){var e,i,n,r,s,o,a=t._i,l=zn.exec(a)||Vn.exec(a);if(l){for(d(t).iso=!0,e=0,i=qn.length;e<i;e++)if(qn[e][1].exec(l[1])){r=qn[e][0],n=qn[e][2]!==!1;break}if(null==r)return void(t._isValid=!1);if(l[3]){for(e=0,i=Gn.length;e<i;e++)if(Gn[e][1].exec(l[3])){s=(l[2]||" ")+Gn[e][0];break}if(null==s)return void(t._isValid=!1)}if(!n&&null!=s)return void(t._isValid=!1);if(l[4]){if(!$n.exec(l[4]))return void(t._isValid=!1);o="Z"}t._f=r+(s||"")+(o||""),Dt(t)}else t._isValid=!1}function mt(t){var i=Jn.exec(t._i);return null!==i?void(t._d=new Date((+i[1]))):(ft(t),void(t._isValid===!1&&(delete t._isValid,e.createFromInputFallback(t))))}function _t(t,e,i,n,r,s,o){var a=new Date(t,e,i,n,r,s,o);return t<100&&t>=0&&isFinite(a.getFullYear())&&a.setFullYear(t),a}function gt(t){var e=new Date(Date.UTC.apply(null,arguments));return t<100&&t>=0&&isFinite(e.getUTCFullYear())&&e.setUTCFullYear(t),e}function vt(t){return yt(t)?366:365}function yt(t){
	return t%4===0&&t%100!==0||t%400===0}function bt(){return yt(this.year())}function wt(t,e,i){var n=7+e-i,r=(7+gt(t,0,n).getUTCDay()-e)%7;return-r+n-1}function Mt(t,e,i,n,r){var s,o,a=(7+i-n)%7,l=wt(t,n,r),c=1+7*(e-1)+a+l;return c<=0?(s=t-1,o=vt(s)+c):c>vt(t)?(s=t+1,o=c-vt(t)):(s=t,o=c),{year:s,dayOfYear:o}}function kt(t,e,i){var n,r,s=wt(t.year(),e,i),o=Math.floor((t.dayOfYear()-s-1)/7)+1;return o<1?(r=t.year()-1,n=o+Tt(r,e,i)):o>Tt(t.year(),e,i)?(n=o-Tt(t.year(),e,i),r=t.year()+1):(r=t.year(),n=o),{week:n,year:r}}function Tt(t,e,i){var n=wt(t,e,i),r=wt(t+1,e,i);return(vt(t)-n+r)/7}function St(t,e,i){return null!=t?t:null!=e?e:i}function Lt(t){var i=new Date(e.now());return t._useUTC?[i.getUTCFullYear(),i.getUTCMonth(),i.getUTCDate()]:[i.getFullYear(),i.getMonth(),i.getDate()]}function xt(t){var e,i,n,r,s=[];if(!t._d){for(n=Lt(t),t._w&&null==t._a[An]&&null==t._a[Cn]&&Et(t),t._dayOfYear&&(r=St(t._a[Yn],n[Yn]),t._dayOfYear>vt(r)&&(d(t)._overflowDayOfYear=!0),i=gt(r,0,t._dayOfYear),t._a[Cn]=i.getUTCMonth(),t._a[An]=i.getUTCDate()),e=0;e<3&&null==t._a[e];++e)t._a[e]=s[e]=n[e];for(;e<7;e++)t._a[e]=s[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[On]&&0===t._a[Nn]&&0===t._a[In]&&0===t._a[Pn]&&(t._nextDay=!0,t._a[On]=0),t._d=(t._useUTC?gt:_t).apply(null,s),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[On]=24)}}function Et(t){var e,i,n,r,s,o,a,l;e=t._w,null!=e.GG||null!=e.W||null!=e.E?(s=1,o=4,i=St(e.GG,t._a[Yn],kt(Rt(),1,4).year),n=St(e.W,1),r=St(e.E,1),(r<1||r>7)&&(l=!0)):(s=t._locale._week.dow,o=t._locale._week.doy,i=St(e.gg,t._a[Yn],kt(Rt(),s,o).year),n=St(e.w,1),null!=e.d?(r=e.d,(r<0||r>6)&&(l=!0)):null!=e.e?(r=e.e+s,(e.e<0||e.e>6)&&(l=!0)):r=s),n<1||n>Tt(i,s,o)?d(t)._overflowWeeks=!0:null!=l?d(t)._overflowWeekday=!0:(a=Mt(i,n,r,s,o),t._a[Yn]=a.year,t._dayOfYear=a.dayOfYear)}function Dt(t){if(t._f===e.ISO_8601)return void ft(t);t._a=[],d(t).empty=!0;var i,n,r,s,o,a=""+t._i,l=a.length,c=0;for(r=J(t._f,t._locale).match(an)||[],i=0;i<r.length;i++)s=r[i],n=(a.match(Q(s,t))||[])[0],n&&(o=a.substr(0,a.indexOf(n)),o.length>0&&d(t).unusedInput.push(o),a=a.slice(a.indexOf(n)+n.length),c+=n.length),un[s]?(n?d(t).empty=!1:d(t).unusedTokens.push(s),it(s,n,t)):t._strict&&!n&&d(t).unusedTokens.push(s);d(t).charsLeftOver=l-c,a.length>0&&d(t).unusedInput.push(a),d(t).bigHour===!0&&t._a[On]<=12&&t._a[On]>0&&(d(t).bigHour=void 0),t._a[On]=Yt(t._locale,t._a[On],t._meridiem),xt(t),pt(t)}function Yt(t,e,i){var n;return null==i?e:null!=t.meridiemHour?t.meridiemHour(e,i):null!=t.isPM?(n=t.isPM(i),n&&e<12&&(e+=12),n||12!==e||(e=0),e):e}function Ct(t){var e,i,n,r,s;if(0===t._f.length)return d(t).invalidFormat=!0,void(t._d=new Date(NaN));for(r=0;r<t._f.length;r++)s=0,e=m({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[r],Dt(e),h(e)&&(s+=d(e).charsLeftOver,s+=10*d(e).unusedTokens.length,d(e).score=s,(null==n||s<n)&&(n=s,i=e));l(t,i||e)}function At(t){if(!t._d){var e=j(t._i);t._a=o([e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],function(t){return t&&parseInt(t,10)}),xt(t)}}function Ot(t){var e=new _(pt(Nt(t)));return e._nextDay&&(e.add(1,"d"),e._nextDay=void 0),e}function Nt(t){var e=t._i,i=t._f;return t._locale=t._locale||I(t._l),null===e||void 0===i&&""===e?p({nullInput:!0}):("string"==typeof e&&(t._i=e=t._locale.preparse(e)),g(e)?new _(pt(e)):(r(i)?Ct(t):i?Dt(t):s(e)?t._d=e:It(t),h(t)||(t._d=null),t))}function It(t){var i=t._i;void 0===i?t._d=new Date(e.now()):s(i)?t._d=new Date((+i)):"string"==typeof i?mt(t):r(i)?(t._a=o(i.slice(0),function(t){return parseInt(t,10)}),xt(t)):"object"==typeof i?At(t):"number"==typeof i?t._d=new Date(i):e.createFromInputFallback(t)}function Pt(t,e,i,n,r){var s={};return"boolean"==typeof i&&(n=i,i=void 0),s._isAMomentObject=!0,s._useUTC=s._isUTC=r,s._l=i,s._i=t,s._f=e,s._strict=n,Ot(s)}function Rt(t,e,i,n){return Pt(t,e,i,n,!1)}function Ht(t,e){var i,n;if(1===e.length&&r(e[0])&&(e=e[0]),!e.length)return Rt();for(i=e[0],n=1;n<e.length;++n)e[n].isValid()&&!e[n][t](i)||(i=e[n]);return i}function jt(){var t=[].slice.call(arguments,0);return Ht("isBefore",t)}function Ft(){var t=[].slice.call(arguments,0);return Ht("isAfter",t)}function Ut(t){var e=j(t),i=e.year||0,n=e.quarter||0,r=e.month||0,s=e.week||0,o=e.day||0,a=e.hour||0,l=e.minute||0,c=e.second||0,u=e.millisecond||0;this._milliseconds=+u+1e3*c+6e4*l+36e5*a,this._days=+o+7*s,this._months=+r+3*n+12*i,this._data={},this._locale=I(),this._bubble()}function Wt(t){return t instanceof Ut}function Bt(t,e){V(t,0,0,function(){var t=this.utcOffset(),i="+";return t<0&&(t=-t,i="-"),i+z(~~(t/60),2)+e+z(~~t%60,2)})}function zt(t,e){var i=(e||"").match(t)||[],n=i[i.length-1]||[],r=(n+"").match(tr)||["-",0,0],s=+(60*r[1])+y(r[2]);return"+"===r[0]?s:-s}function Vt(t,i){var n,r;return i._isUTC?(n=i.clone(),r=(g(t)||s(t)?+t:+Rt(t))-+n,n._d.setTime(+n._d+r),e.updateOffset(n,!1),n):Rt(t).local()}function $t(t){return 15*-Math.round(t._d.getTimezoneOffset()/15)}function qt(t,i){var n,r=this._offset||0;return this.isValid()?null!=t?("string"==typeof t?t=zt(Sn,t):Math.abs(t)<16&&(t=60*t),!this._isUTC&&i&&(n=$t(this)),this._offset=t,this._isUTC=!0,null!=n&&this.add(n,"m"),r!==t&&(!i||this._changeInProgress?ue(this,re(t-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,e.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?r:$t(this):null!=t?this:NaN}function Gt(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()}function Jt(t){return this.utcOffset(0,t)}function Kt(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract($t(this),"m")),this}function Qt(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(zt(Tn,this._i)),this}function Xt(t){return!!this.isValid()&&(t=t?Rt(t).utcOffset():0,(this.utcOffset()-t)%60===0)}function Zt(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function te(){if(!f(this._isDSTShifted))return this._isDSTShifted;var t={};if(m(t,this),t=Nt(t),t._a){var e=t._isUTC?c(t._a):Rt(t._a);this._isDSTShifted=this.isValid()&&b(t._a,e.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function ee(){return!!this.isValid()&&!this._isUTC}function ie(){return!!this.isValid()&&this._isUTC}function ne(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}function re(t,e){var i,n,r,s=t,o=null;return Wt(t)?s={ms:t._milliseconds,d:t._days,M:t._months}:"number"==typeof t?(s={},e?s[e]=t:s.milliseconds=t):(o=er.exec(t))?(i="-"===o[1]?-1:1,s={y:0,d:y(o[An])*i,h:y(o[On])*i,m:y(o[Nn])*i,s:y(o[In])*i,ms:y(o[Pn])*i}):(o=ir.exec(t))?(i="-"===o[1]?-1:1,s={y:se(o[2],i),M:se(o[3],i),w:se(o[4],i),d:se(o[5],i),h:se(o[6],i),m:se(o[7],i),s:se(o[8],i)}):null==s?s={}:"object"==typeof s&&("from"in s||"to"in s)&&(r=ae(Rt(s.from),Rt(s.to)),s={},s.ms=r.milliseconds,s.M=r.months),n=new Ut(s),Wt(t)&&a(t,"_locale")&&(n._locale=t._locale),n}function se(t,e){var i=t&&parseFloat(t.replace(",","."));return(isNaN(i)?0:i)*e}function oe(t,e){var i={milliseconds:0,months:0};return i.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(i.months,"M").isAfter(e)&&--i.months,i.milliseconds=+e-+t.clone().add(i.months,"M"),i}function ae(t,e){var i;return t.isValid()&&e.isValid()?(e=Vt(e,t),t.isBefore(e)?i=oe(t,e):(i=oe(e,t),i.milliseconds=-i.milliseconds,i.months=-i.months),i):{milliseconds:0,months:0}}function le(t){return t<0?Math.round(-1*t)*-1:Math.round(t)}function ce(t,e){return function(i,n){var r,s;return null===n||isNaN(+n)||(k(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period)."),s=i,i=n,n=s),i="string"==typeof i?+i:i,r=re(i,n),ue(this,r,t),this}}function ue(t,i,n,r){var s=i._milliseconds,o=le(i._days),a=le(i._months);t.isValid()&&(r=null==r||r,s&&t._d.setTime(+t._d+s*n),o&&W(t,"Date",U(t,"Date")+o*n),a&&at(t,U(t,"Month")+a*n),r&&e.updateOffset(t,o||a))}function de(t,e){var i=t||Rt(),n=Vt(i,this).startOf("day"),r=this.diff(n,"days",!0),s=r<-6?"sameElse":r<-1?"lastWeek":r<0?"lastDay":r<1?"sameDay":r<2?"nextDay":r<7?"nextWeek":"sameElse",o=e&&(T(e[s])?e[s]():e[s]);return this.format(o||this.localeData().calendar(s,this,Rt(i)))}function he(){return new _(this)}function pe(t,e){var i=g(t)?t:Rt(t);return!(!this.isValid()||!i.isValid())&&(e=H(f(e)?"millisecond":e),"millisecond"===e?+this>+i:+i<+this.clone().startOf(e))}function fe(t,e){var i=g(t)?t:Rt(t);return!(!this.isValid()||!i.isValid())&&(e=H(f(e)?"millisecond":e),"millisecond"===e?+this<+i:+this.clone().endOf(e)<+i)}function me(t,e,i){return this.isAfter(t,i)&&this.isBefore(", "base64"));
  res.write(new Buffer("e,i)}function _e(t,e){var i,n=g(t)?t:Rt(t);return!(!this.isValid()||!n.isValid())&&(e=H(e||"millisecond"),"millisecond"===e?+this===+n:(i=+n,+this.clone().startOf(e)<=i&&i<=+this.clone().endOf(e)))}function ge(t,e){return this.isSame(t,e)||this.isAfter(t,e)}function ve(t,e){return this.isSame(t,e)||this.isBefore(t,e)}function ye(t,e,i){var n,r,s,o;return this.isValid()?(n=Vt(t,this),n.isValid()?(r=6e4*(n.utcOffset()-this.utcOffset()),e=H(e),"year"===e||"month"===e||"quarter"===e?(o=be(this,n),"quarter"===e?o/=3:"year"===e&&(o/=12)):(s=this-n,o="second"===e?s/1e3:"minute"===e?s/6e4:"hour"===e?s/36e5:"day"===e?(s-r)/864e5:"week"===e?(s-r)/6048e5:s),i?o:v(o)):NaN):NaN}function be(t,e){var i,n,r=12*(e.year()-t.year())+(e.month()-t.month()),s=t.clone().add(r,"months");return e-s<0?(i=t.clone().add(r-1,"months"),n=(e-s)/(s-i)):(i=t.clone().add(r+1,"months"),n=(e-s)/(i-s)),-(r+n)}function we(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function Me(){var t=this.clone().utc();return 0<t.year()&&t.year()<=9999?T(Date.prototype.toISOString)?this.toDate().toISOString():G(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):G(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function ke(t){var i=G(this,t||e.defaultFormat);return this.localeData().postformat(i)}function Te(t,e){return this.isValid()&&(g(t)&&t.isValid()||Rt(t).isValid())?re({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()}function Se(t){return this.from(Rt(),t)}function Le(t,e){return this.isValid()&&(g(t)&&t.isValid()||Rt(t).isValid())?re({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()}function xe(t){return this.to(Rt(),t)}function Ee(t){var e;return void 0===t?this._locale._abbr:(e=I(t),null!=e&&(this._locale=e),this)}function De(){return this._locale}function Ye(t){switch(t=H(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t&&this.weekday(0),"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this}function Ce(t){return t=H(t),void 0===t||"millisecond"===t?this:this.startOf(t).add(1,"isoWeek"===t?"week":t).subtract(1,"ms")}function Ae(){return+this._d-6e4*(this._offset||0)}function Oe(){return Math.floor(+this/1e3)}function Ne(){return this._offset?new Date((+this)):this._d}function Ie(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]}function Pe(){var t=this;return{years:t.year(),months:t.month(),date:t.date(),hours:t.hours(),minutes:t.minutes(),seconds:t.seconds(),milliseconds:t.milliseconds()}}function Re(){return this.isValid()?this.toISOString():null}function He(){return h(this)}function je(){return l({},d(this))}function Fe(){return d(this).overflow}function Ue(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function We(t,e){V(0,[t,t.length],0,e)}function Be(t){return qe.call(this,t,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function ze(t){return qe.call(this,t,this.isoWeek(),this.isoWeekday(),1,4)}function Ve(){return Tt(this.year(),1,4)}function $e(){var t=this.localeData()._week;return Tt(this.year(),t.dow,t.doy)}function qe(t,e,i,n,r){var s;return null==t?kt(this,n,r).year:(s=Tt(t,n,r),e>s&&(e=s),Ge.call(this,t,e,i,n,r))}function Ge(t,e,i,n,r){var s=Mt(t,e,i,n,r),o=gt(s.year,0,s.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}function Je(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)}function Ke(t){return kt(t,this._week.dow,this._week.doy).week}function Qe(){return this._week.dow}function Xe(){return this._week.doy}function Ze(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")}function ti(t){var e=kt(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")}function ei(t,e){return"string"!=typeof t?t:isNaN(t)?(t=e.weekdaysParse(t),"number"==typeof t?t:null):parseInt(t,10)}function ii(t,e){return r(this._weekdays)?this._weekdays[t.day()]:this._weekdays[this._weekdays.isFormat.test(e)?"format":"standalone"][t.day()]}function ni(t){return this._weekdaysShort[t.day()]}function ri(t){return this._weekdaysMin[t.day()]}function si(t,e,i){var n,r,s;for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),n=0;n<7;n++){if(r=Rt([2e3,1]).day(n),i&&!this._fullWeekdaysParse[n]&&(this._fullWeekdaysParse[n]=new RegExp("^"+this.weekdays(r,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[n]=new RegExp("^"+this.weekdaysShort(r,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[n]=new RegExp("^"+this.weekdaysMin(r,"").replace(".",".?")+"$","i")),this._weekdaysParse[n]||(s="^"+this.weekdays(r,"")+"|^"+this.weekdaysShort(r,"")+"|^"+this.weekdaysMin(r,""),this._weekdaysParse[n]=new RegExp(s.replace(".",""),"i")),i&&"dddd"===e&&this._fullWeekdaysParse[n].test(t))return n;if(i&&"ddd"===e&&this._shortWeekdaysParse[n].test(t))return n;if(i&&"dd"===e&&this._minWeekdaysParse[n].test(t))return n;if(!i&&this._weekdaysParse[n].test(t))return n}}function oi(t){if(!this.isValid())return null!=t?this:NaN;var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=ei(t,this.localeData()),this.add(t-e,"d")):e}function ai(t){if(!this.isValid())return null!=t?this:NaN;var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")}function li(t){return this.isValid()?null==t?this.day()||7:this.day(this.day()%7?t:t-7):null!=t?this:NaN}function ci(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")}function ui(){return this.hours()%12||12}function di(t,e){V(t,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)})}function hi(t,e){return e._meridiemParse}function pi(t){return"p"===(t+"").toLowerCase().charAt(0)}function fi(t,e,i){return t>11?i?"pm":"PM":i?"am":"AM"}function mi(t,e){e[Pn]=y(1e3*("0."+t))}function _i(){return this._isUTC?"UTC":""}function gi(){return this._isUTC?"Coordinated Universal Time":""}function vi(t){return Rt(1e3*t)}function yi(){return Rt.apply(null,arguments).parseZone()}function bi(t,e,i){var n=this._calendar[t];return T(n)?n.call(e,i):n}function wi(t){var e=this._longDateFormat[t],i=this._longDateFormat[t.toUpperCase()];return e||!i?e:(this._longDateFormat[t]=i.replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t])}function Mi(){return this._invalidDate}function ki(t){return this._ordinal.replace("%d",t)}function Ti(t){return t}function Si(t,e,i,n){var r=this._relativeTime[i];return T(r)?r(t,e,i,n):r.replace(/%d/i,t)}function Li(t,e){var i=this._relativeTime[t>0?"future":"past"];return T(i)?i(e):i.replace(/%s/i,e)}function xi(t,e,i,n){var r=I(),s=c().set(n,e);return r[i](s,t)}function Ei(t,e,i,n,r){if("number"==typeof t&&(e=t,t=void 0),t=t||"",null!=e)return xi(t,e,i,r);var s,o=[];for(s=0;s<n;s++)o[s]=xi(t,s,i,r);return o}function Di(t,e){return Ei(t,e,"months",12,"month")}function Yi(t,e){return Ei(t,e,"monthsShort",12,"month")}function Ci(t,e){return Ei(t,e,"weekdays",7,"day")}function Ai(t,e){return Ei(t,e,"weekdaysShort",7,"day")}function Oi(t,e){return Ei(t,e,"weekdaysMin",7,"day")}function Ni(){var t=this._data;return this._milliseconds=Lr(this._milliseconds),this._days=Lr(this._days),this._months=Lr(this._months),t.milliseconds=Lr(t.milliseconds),t.seconds=Lr(t.seconds),t.minutes=Lr(t.minutes),t.hours=Lr(t.hours),t.months=Lr(t.months),t.years=Lr(t.years),this}function Ii(t,e,i,n){var r=re(e,i);return t._milliseconds+=n*r._milliseconds,t._days+=n*r._days,t._months+=n*r._months,t._bubble()}function Pi(t,e){return Ii(this,t,e,1)}function Ri(t,e){return Ii(this,t,e,-1)}function Hi(t){return t<0?Math.floor(t):Math.ceil(t)}function ji(){var t,e,i,n,r,s=this._milliseconds,o=this._days,a=this._months,l=this._data;return s>=0&&o>=0&&a>=0||s<=0&&o<=0&&a<=0||(s+=864e5*Hi(Ui(a)+o),o=0,a=0),l.milliseconds=s%1e3,t=v(s/1e3),l.seconds=t%60,e=v(t/60),l.minutes=e%60,i=v(e/60),l.hours=i%24,o+=v(i/24),r=v(Fi(o)),a+=r,o-=Hi(Ui(r)),n=v(a/12),a%=12,l.days=o,l.months=a,l.years=n,this}function Fi(t){return 4800*t/146097}function Ui(t){return 146097*t/4800}function Wi(t){var e,i,n=this._milliseconds;if(t=H(t),"month"===t||"year"===t)return e=this._days+n/864e5,i=this._months+Fi(e),"month"===t?i:i/12;switch(e=this._days+Math.round(Ui(this._months)),t){case"week":return e/7+n/6048e5;case"day":return e+n/864e5;case"hour":return 24*e+n/36e5;case"minute":return 1440*e+n/6e4;case"second":return 86400*e+n/1e3;case"millisecond":return Math.floor(864e5*e)+n;default:throw new Error("Unknown unit "+t)}}function Bi(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*y(this._months/12)}function zi(t){return function(){return this.as(t)}}function Vi(t){return t=H(t),this[t+"s"]()}function $i(t){return function(){return this._data[t]}}function qi(){return v(this.days()/7)}function Gi(t,e,i,n,r){return r.relativeTime(e||1,!!i,t,n)}function Ji(t,e,i){var n=re(t).abs(),r=Wr(n.as("s")),s=Wr(n.as("m")),o=Wr(n.as("h")),a=Wr(n.as("d")),l=Wr(n.as("M")),c=Wr(n.as("y")),u=r<Br.s&&["s",r]||s<=1&&["m"]||s<Br.m&&["mm",s]||o<=1&&["h"]||o<Br.h&&["hh",o]||a<=1&&["d"]||a<Br.d&&["dd",a]||l<=1&&["M"]||l<Br.M&&["MM",l]||c<=1&&["y"]||["yy",c];return u[2]=e,u[3]=+t>0,u[4]=i,Gi.apply(null,u)}function Ki(t,e){return void 0!==Br[t]&&(void 0===e?Br[t]:(Br[t]=e,!0))}function Qi(t){var e=this.localeData(),i=Ji(this,!t,e);return t&&(i=e.pastFuture(+this,i)),e.postformat(i)}function Xi(){var t,e,i,n=zr(this._milliseconds)/1e3,r=zr(this._days),s=zr(this._months);t=v(n/60),e=v(t/60),n%=60,t%=60,i=v(s/12),s%=12;var o=i,a=s,l=r,c=e,u=t,d=n,h=this.asSeconds();return h?(h<0?"-":"")+"P"+(o?o+"Y":"")+(a?a+"M":"")+(l?l+"D":"")+(c||u||d?"T":"")+(c?c+"H":"")+(u?u+"M":"")+(d?d+"S":""):"P0D"}var Zi,tn=e.momentProperties=[],en=!1,nn={};e.suppressDeprecationWarnings=!1;var rn,sn={},on={},an=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,ln=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,cn={},un={},dn=/\d/,hn=/\d\d/,pn=/\d{3}/,fn=/\d{4}/,mn=/[+-]?\d{6}/,_n=/\d\d?/,gn=/\d\d\d\d?/,vn=/\d\d\d\d\d\d?/,yn=/\d{1,3}/,bn=/\d{1,4}/,wn=/[+-]?\d{1,6}/,Mn=/\d+/,kn=/[+-]?\d+/,Tn=/Z|[+-]\d\d:?\d\d/gi,Sn=/Z|[+-]\d\d(?::?\d\d)?/gi,Ln=/[+-]?\d+(\.\d{1,3})?/,xn=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,En={},Dn={},Yn=0,Cn=1,An=2,On=3,Nn=4,In=5,Pn=6,Rn=7,Hn=8;V("M",["MM",2],"Mo",function(){return this.month()+1}),V("MMM",0,0,function(t){return this.localeData().monthsShort(this,t)}),V("MMMM",0,0,function(t){return this.localeData().months(this,t)}),R("month","M"),K("M",_n),K("MM",_n,hn),K("MMM",function(t,e){return e.monthsShortRegex(t)}),K("MMMM",function(t,e){return e.monthsRegex(t)}),tt(["M","MM"],function(t,e){e[Cn]=y(t)-1}),tt(["MMM","MMMM"],function(t,e,i,n){var r=i._locale.monthsParse(t,n,i._strict);null!=r?e[Cn]=r:d(i).invalidMonth=t});var jn=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,Fn="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Un="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Wn=xn,Bn=xn,zn=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,Vn=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,$n=/Z|[+-]\d\d(?::?\d\d)?/,qn=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Gn=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Jn=/^\/?Date\((\-?\d+)/i;e.createFromInputFallback=M("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),V("Y",0,0,function(){var t=this.year();return t<=9999?""+t:"+"+t}),V(0,["YY",2],0,function(){return this.year()%100}),V(0,["YYYY",4],0,"year"),V(0,["YYYYY",5],0,"year"),V(0,["YYYYYY",6,!0],0,"year"),R("year","y"),K("Y",kn),K("YY",_n,hn),K("YYYY",bn,fn),K("YYYYY",wn,mn),K("YYYYYY",wn,mn),tt(["YYYYY","YYYYYY"],Yn),tt("YYYY",function(t,i){i[Yn]=2===t.length?e.parseTwoDigitYear(t):y(t)}),tt("YY",function(t,i){i[Yn]=e.parseTwoDigitYear(t)}),tt("Y",function(t,e){e[Yn]=parseInt(t,10)}),e.parseTwoDigitYear=function(t){return y(t)+(y(t)>68?1900:2e3)};var Kn=F("FullYear",!1);e.ISO_8601=function(){};var Qn=M("moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var t=Rt.apply(null,arguments);return this.isValid()&&t.isValid()?t<this?this:t:p()}),Xn=M("moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var t=Rt.apply(null,arguments);return this.isValid()&&t.isValid()?t>this?this:t:p()}),Zn=function(){return Date.now?Date.now():+new Date};Bt("Z",":"),Bt("ZZ",""),K("Z",Sn),K("ZZ",Sn),tt(["Z","ZZ"],function(t,e,i){i._useUTC=!0,i._tzm=zt(Sn,t)});var tr=/([\+\-]|\d\d)/gi;e.updateOffset=function(){};var er=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/,ir=/^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$/;re.fn=Ut.prototype;var nr=ce(1,"add"),rr=ce(-1,"subtract");e.defaultFormat="YYYY-MM-DDTHH:mm:ssZ";var sr=M("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(t){return void 0===t?this.localeData():this.locale(t)});V(0,["gg",2],0,function(){return this.weekYear()%100}),V(0,["GG",2],0,function(){return this.isoWeekYear()%100}),We("gggg","weekYear"),We("ggggg","weekYear"),We("GGGG","isoWeekYear"),We("GGGGG","isoWeekYear"),R("weekYear","gg"),R("isoWeekYear","GG"),K("G",kn),K("g",kn),K("GG",_n,hn),K("gg",_n,hn),K("GGGG",bn,fn),K("gggg",bn,fn),K("GGGGG",wn,mn),K("ggggg",wn,mn),et(["gggg","ggggg","GGGG","GGGGG"],function(t,e,i,n){e[n.substr(0,2)]=y(t)}),et(["gg","GG"],function(t,i,n,r){i[r]=e.parseTwoDigitYear(t)}),V("Q",0,"Qo","quarter"),R("quarter","Q"),K("Q",dn),tt("Q",function(t,e){e[Cn]=3*(y(t)-1)}),V("w",["ww",2],"wo","week"),V("W",["WW",2],"Wo","isoWeek"),R("week","w"),R("isoWeek","W"),K("w",_n),K("ww",_n,hn),K("W",_n),K("WW",_n,hn),et(["w","ww","W","WW"],function(t,e,i,n){e[n.substr(0,1)]=y(t)});var or={dow:0,doy:6};V("D",["DD",2],"Do","date"),R("date","D"),K("D",_n),K("DD",_n,hn),K("Do",function(t,e){return t?e._ordinalParse:e._ordinalParseLenient}),tt(["D","DD"],An),tt("Do",function(t,e){e[An]=y(t.match(_n)[0],10)});var ar=F("Date",!0);V("d",0,"do","day"),V("dd",0,0,function(t){return this.localeData().weekdaysMin(this,t)}),V("ddd",0,0,function(t){return this.localeData().weekdaysShort(this,t)}),V("dddd",0,0,function(t){return this.localeData().weekdays(this,t)}),V("e",0,0,"weekday"),V("E",0,0,"isoWeekday"),R("day","d"),R("weekday","e"),R("isoWeekday","E"),K("d",_n),K("e",_n),K("E",_n),K("dd",xn),K("ddd",xn),K("dddd",xn),et(["dd","ddd","dddd"],function(t,e,i,n){var r=i._locale.weekdaysParse(t,n,i._strict);null!=r?e.d=r:d(i).invalidWeekday=t}),et(["d","e","E"],function(t,e,i,n){e[n]=y(t)});var lr="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),cr="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),ur="Su_Mo_Tu_We_Th_Fr_Sa".split("_");V("DDD",["DDDD",3],"DDDo","dayOfYear"),R("dayOfYear","DDD"),K("DDD",yn),K("DDDD",pn),tt(["DDD","DDDD"],function(t,e,i){i._dayOfYear=y(t)}),V("H",["HH",2],0,"hour"),V("h",["hh",2],0,ui),V("hmm",0,0,function(){return""+ui.apply(this)+z(this.minutes(),2)}),V("hmmss",0,0,function(){return""+ui.apply(this)+z(this.minutes(),2)+z(this.seconds(),2)}),V("Hmm",0,0,function(){return""+this.hours()+z(this.minutes(),2)}),V("Hmmss",0,0,function(){return""+this.hours()+z(this.minutes(),2)+z(this.seconds(),2)}),di("a",!0),di("A",!1),R("hour","h"),K("a",hi),K("A",hi),K("H",_n),K("h",_n),K("HH",_n,hn),K("hh",_n,hn),K("hmm",gn),K("hmmss",vn),K("Hmm",gn),K("Hmmss",vn),tt(["H","HH"],On),tt(["a","A"],function(t,e,i){i._isPm=i._locale.isPM(t),i._meridiem=t}),tt(["h","hh"],function(t,e,i){e[On]=y(t),d(i).bigHour=!0}),tt("hmm",function(t,e,i){var n=t.length-2;e[On]=y(t.substr(0,n)),e[Nn]=y(t.substr(n)),d(i).bigHour=!0}),tt("hmmss",function(t,e,i){var n=t.length-4,r=t.length-2;e[On]=y(t.substr(0,n)),e[Nn]=y(t.substr(n,2)),e[In]=y(t.substr(r)),d(i).bigHour=!0}),tt("Hmm",function(t,e,i){var n=t.length-2;e[On]=y(t.substr(0,n)),e[Nn]=y(t.substr(n))}),tt("Hmmss",function(t,e,i){var n=t.length-4,r=t.length-2;e[On]=y(t.substr(0,n)),e[Nn]=y(t.substr(n,2)),e[In]=y(t.substr(r))});var dr=/[ap]\.?m?\.?/i,hr=F("Hours",!0);V("m",["mm",2],0,"minute"),R("minute","m"),K("m",_n),K("mm",_n,hn),tt(["m","mm"],Nn);var pr=F("Minutes",!1);V("s",["ss",2],0,"second"),R("second","s"),K("s",_n),K("ss",_n,hn),tt(["s","ss"],In);var fr=F("Seconds",!1);V("S",0,0,function(){return~~(this.millisecond()/100)}),V(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),V(0,["SSS",3],0,"millisecond"),V(0,["SSSS",4],0,function(){return 10*this.millisecond()}),V(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),V(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),V(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),V(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),V(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),R("millisecond","ms"),K("S",yn,dn),K("SS",yn,hn),K("SSS",yn,pn);var mr;for(mr="SSSS";mr.length<=9;mr+="S")K(mr,Mn);for(mr="S";mr.length<=9;mr+="S")tt(mr,mi);var _r=F("Milliseconds",!1);V("z",0,0,"zoneAbbr"),V("zz",0,0,"zoneName");var gr=_.prototype;gr.add=nr,gr.calendar=de,gr.clone=he,gr.diff=ye,gr.endOf=Ce,gr.format=ke,gr.from=Te,gr.fromNow=Se,gr.to=Le,gr.toNow=xe,gr.get=B,gr.invalidAt=Fe,gr.isAfter=pe,gr.isBefore=fe,gr.isBetween=me,gr.isSame=_e,gr.isSameOrAfter=ge,gr.isSameOrBefore=ve,gr.isValid=He,gr.lang=sr,gr.locale=Ee,gr.localeData=De,gr.max=Xn,gr.min=Qn,gr.parsingFlags=je,gr.set=B,gr.startOf=Ye,gr.subtract=rr,gr.toArray=Ie,gr.toObject=Pe,gr.toDate=Ne,gr.toISOString=Me,gr.toJSON=Re,gr.toString=we,gr.unix=Oe,gr.valueOf=Ae,gr.creationData=Ue,gr.year=Kn,gr.isLeapYear=bt,gr.weekYear=Be,gr.isoWeekYear=ze,gr.quarter=gr.quarters=Je,gr.month=lt,gr.daysInMonth=ct,gr.week=gr.weeks=Ze,gr.isoWeek=gr.isoWeeks=ti,gr.weeksInYear=$e,gr.isoWeeksInYear=Ve,gr.date=ar,gr.day=gr.days=oi,gr.weekday=ai,gr.isoWeekday=li,gr.dayOfYear=ci,gr.hour=gr.hours=hr,gr.minute=gr.minutes=pr,gr.second=gr.seconds=fr,gr.millisecond=gr.milliseconds=_r,gr.utcOffset=qt,gr.utc=Jt,gr.local=Kt,gr.parseZone=Qt,gr.hasAlignedHourOffset=Xt,gr.isDST=Zt,gr.isDSTShifted=te,gr.isLocal=ee,gr.isUtcOffset=ie,gr.isUtc=ne,gr.isUTC=ne,gr.zoneAbbr=_i,gr.zoneName=gi,gr.dates=M("dates accessor is deprecated. Use date instead.",ar),gr.months=M("months accessor is deprecated. Use month instead",lt),gr.years=M("years accessor is deprecated. Use year instead",Kn),gr.zone=M("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",Gt);var vr=gr,yr={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},br={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},wr="Invalid date",Mr="%d",kr=/\d{1,2}/,Tr={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Sr=E.prototype;Sr._calendar=yr,Sr.calendar=bi,Sr._longDateFormat=br,Sr.longDateFormat=wi,Sr._invalidDate=wr,Sr.invalidDate=Mi,Sr._ordinal=Mr,Sr.ordinal=ki,Sr._ordinalParse=kr,Sr.preparse=Ti,Sr.postformat=Ti,Sr._relativeTime=Tr,Sr.relativeTime=Si,Sr.pastFuture=Li,Sr.set=L,Sr.months=rt,Sr._months=Fn,Sr.monthsShort=st,Sr._monthsShort=Un,Sr.monthsParse=ot,Sr._monthsRegex=Bn,Sr.monthsRegex=dt,Sr._monthsShortRegex=Wn,Sr.monthsShortRegex=ut,Sr.week=Ke,Sr._week=or,Sr.firstDayOfYear=Xe,Sr.firstDayOfWeek=Qe,Sr.weekdays=ii,Sr._weekdays=lr,Sr.weekdaysMin=ri,Sr._weekdaysMin=ur,Sr.weekdaysShort=ni,Sr._weekdaysShort=cr,Sr.weekdaysParse=si,Sr.isPM=pi,Sr._meridiemParse=dr,Sr.meridiem=fi,A("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10,i=1===y(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+i}}),e.lang=M("moment.lang is deprecated. Use moment.locale instead.",A),e.langData=M("moment.langData is deprecated. Use moment.localeData instead.",I);var Lr=Math.abs,xr=zi("ms"),Er=zi("s"),Dr=zi("m"),Yr=zi("h"),Cr=zi("d"),Ar=zi("w"),Or=zi("M"),Nr=zi("y"),Ir=$i("milliseconds"),Pr=$i("seconds"),Rr=$i("minutes"),Hr=$i("hours"),jr=$i("days"),Fr=$i("months"),Ur=$i("years"),Wr=Math.round,Br={s:45,m:45,h:22,d:26,M:11},zr=Math.abs,Vr=Ut.prototype;Vr.abs=Ni,Vr.add=Pi,Vr.subtract=Ri,Vr.as=Wi,Vr.asMilliseconds=xr,Vr.asSeconds=Er,Vr.asMinutes=Dr,Vr.asHours=Yr,Vr.asDays=Cr,Vr.asWeeks=Ar,Vr.asMonths=Or,Vr.asYears=Nr,Vr.valueOf=Bi,Vr._bubble=ji,Vr.get=Vi,Vr.milliseconds=Ir,Vr.seconds=Pr,Vr.minutes=Rr,Vr.hours=Hr,Vr.days=jr,Vr.weeks=qi,Vr.months=Fr,Vr.years=Ur,Vr.humanize=Qi,Vr.toISOString=Xi,Vr.toString=Xi,Vr.toJSON=Xi,Vr.locale=Ee,Vr.localeData=De,Vr.toIsoString=M("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Xi),Vr.lang=sr,V("X",0,0,"unix"),V("x",0,0,"valueOf"),K("x",kn),K("X",Ln),tt("X",function(t,e,i){i._d=new Date(1e3*parseFloat(t,10))}),tt("x",function(t,e,i){i._d=new Date(y(t))}),e.version="2.12.0",n(Rt),e.fn=vr,e.min=jt,e.max=Ft,e.now=Zn,e.utc=c,e.unix=vi,e.months=Di,e.isDate=s,e.locale=A,e.invalid=p,e.duration=re,e.isMoment=g,e.weekdays=Ci,e.parseZone=yi,e.localeData=I,e.isDuration=Wt,e.monthsShort=Yi,e.weekdaysMin=Oi,e.defineLocale=O,e.updateLocale=N,e.locales=P,e.weekdaysShort=Ai,e.normalizeUnits=H,e.relativeTimeThreshold=Ki,e.prototype=vr;var $r=e;return $r})}).call(e,i(37)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],t.webpackPolyfill=1),t}},function(t,e,i){function n(t){return i(r(t))}function r(t){return s[t]||function(){throw new Error("Cannot find module '"+t+"'.")}()}var s={"./af":39,"./af.js":39,"./ar":40,"./ar-ma":41,"./ar-ma.js":41,"./ar-sa":42,"./ar-sa.js":42,"./ar-tn":43,"./ar-tn.js":43,"./ar.js":40,"./az":44,"./az.js":44,"./be":45,"./be.js":45,"./bg":46,"./bg.js":46,"./bn":47,"./bn.js":47,"./bo":48,"./bo.js":48,"./br":49,"./br.js":49,"./bs":50,"./bs.js":50,"./ca":51,"./ca.js":51,
	"./cs":52,"./cs.js":52,"./cv":53,"./cv.js":53,"./cy":54,"./cy.js":54,"./da":55,"./da.js":55,"./de":56,"./de-at":57,"./de-at.js":57,"./de.js":56,"./dv":58,"./dv.js":58,"./el":59,"./el.js":59,"./en-au":60,"./en-au.js":60,"./en-ca":61,"./en-ca.js":61,"./en-gb":62,"./en-gb.js":62,"./en-ie":63,"./en-ie.js":63,"./en-nz":64,"./en-nz.js":64,"./eo":65,"./eo.js":65,"./es":66,"./es.js":66,"./et":67,"./et.js":67,"./eu":68,"./eu.js":68,"./fa":69,"./fa.js":69,"./fi":70,"./fi.js":70,"./fo":71,"./fo.js":71,"./fr":72,"./fr-ca":73,"./fr-ca.js":73,"./fr-ch":74,"./fr-ch.js":74,"./fr.js":72,"./fy":75,"./fy.js":75,"./gd":76,"./gd.js":76,"./gl":77,"./gl.js":77,"./he":78,"./he.js":78,"./hi":79,"./hi.js":79,"./hr":80,"./hr.js":80,"./hu":81,"./hu.js":81,"./hy-am":82,"./hy-am.js":82,"./id":83,"./id.js":83,"./is":84,"./is.js":84,"./it":85,"./it.js":85,"./ja":86,"./ja.js":86,"./jv":87,"./jv.js":87,"./ka":88,"./ka.js":88,"./kk":89,"./kk.js":89,"./km":90,"./km.js":90,"./ko":91,"./ko.js":91,"./lb":92,"./lb.js":92,"./lo":93,"./lo.js":93,"./lt":94,"./lt.js":94,"./lv":95,"./lv.js":95,"./me":96,"./me.js":96,"./mk":97,"./mk.js":97,"./ml":98,"./ml.js":98,"./mr":99,"./mr.js":99,"./ms":100,"./ms-my":101,"./ms-my.js":101,"./ms.js":100,"./my":102,"./my.js":102,"./nb":103,"./nb.js":103,"./ne":104,"./ne.js":104,"./nl":105,"./nl.js":105,"./nn":106,"./nn.js":106,"./pa-in":107,"./pa-in.js":107,"./pl":108,"./pl.js":108,"./pt":109,"./pt-br":110,"./pt-br.js":110,"./pt.js":109,"./ro":111,"./ro.js":111,"./ru":112,"./ru.js":112,"./se":113,"./se.js":113,"./si":114,"./si.js":114,"./sk":115,"./sk.js":115,"./sl":116,"./sl.js":116,"./sq":117,"./sq.js":117,"./sr":118,"./sr-cyrl":119,"./sr-cyrl.js":119,"./sr.js":118,"./sv":120,"./sv.js":120,"./sw":121,"./sw.js":121,"./ta":122,"./ta.js":122,"./te":123,"./te.js":123,"./th":124,"./th.js":124,"./tl-ph":125,"./tl-ph.js":125,"./tlh":126,"./tlh.js":126,"./tr":127,"./tr.js":127,"./tzl":128,"./tzl.js":128,"./tzm":129,"./tzm-latn":130,"./tzm-latn.js":130,"./tzm.js":129,"./uk":131,"./uk.js":131,"./uz":132,"./uz.js":132,"./vi":133,"./vi.js":133,"./zh-cn":134,"./zh-cn.js":134,"./zh-tw":135,"./zh-tw.js":135};n.keys=function(){return Object.keys(s)},n.resolve=r,t.exports=n,n.id=38},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(t){return/^nm$/i.test(t)},meridiem:function(t,e,i){return t<12?i?"vm":"VM":i?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},i={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},n=function(t){return 0===t?0:1===t?1:2===t?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},s=function(t){return function(e,i,s,o){var a=n(e),l=r[t][n(e)];return 2===a&&(l=l[i?0:1]),l.replace(/%d/i,e)}},o=["كانون الثاني يناير","شباط فبراير","آذار مارس","نيسان أبريل","أيار مايو","حزيران يونيو","تموز يوليو","آب أغسطس","أيلول سبتمبر","تشرين الأول أكتوبر","تشرين الثاني نوفمبر","كانون الأول ديسمبر"],a=t.defineLocale("ar",{months:o,monthsShort:o,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(t){return"م"===t},meridiem:function(t,e,i){return t<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:s("s"),m:s("m"),mm:s("m"),h:s("h"),hh:s("h"),d:s("d"),dd:s("d"),M:s("M"),MM:s("M"),y:s("y"),yy:s("y")},preparse:function(t){return t.replace(/\u200f/g,"").replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(t){return i[t]}).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,function(t){return e[t]}).replace(/,/g,"،")},week:{dow:6,doy:12}});return a})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},i={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},n=t.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(t){return"م"===t},meridiem:function(t,e,i){return t<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(t){return t.replace(/[١٢٣٤٥٦٧٨٩٠]/g,function(t){return i[t]}).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,function(t){return e[t]}).replace(/,/g,"،")},week:{dow:6,doy:12}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"},i=t.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(t){return/^(gündüz|axşam)$/.test(t)},meridiem:function(t,e,i){return t<4?"gecə":t<12?"səhər":t<17?"gündüz":"axşam"},ordinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(t){if(0===t)return t+"-ıncı";var i=t%10,n=t%100-i,r=t>=100?100:null;return t+(e[i]||e[n]||e[r])},week:{dow:1,doy:7}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e){var i=t.split("_");return e%10===1&&e%100!==11?i[0]:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?i[1]:i[2]}function i(t,i,n){var r={mm:i?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:i?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"};return"m"===n?i?"хвіліна":"хвіліну":"h"===n?i?"гадзіна":"гадзіну":t+" "+e(r[n],+t)}var n=t.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:i,mm:i,h:i,hh:i,d:"дзень",dd:i,M:"месяц",MM:i,y:"год",yy:i},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(t){return/^(дня|вечара)$/.test(t)},meridiem:function(t,e,i){return t<4?"ночы":t<12?"раніцы":t<17?"дня":"вечара"},ordinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(t,e){switch(e){case"M":case"d":case"DDD":case"w":case"W":return t%10!==2&&t%10!==3||t%100===12||t%100===13?t+"-ы":t+"-і";case"D":return t+"-га";default:return t}},week:{dow:1,doy:7}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(t){var e=t%10,i=t%100;return 0===t?t+"-ев":0===i?t+"-ен":i>10&&i<20?t+"-ти":1===e?t+"-ви":2===e?t+"-ри":7===e||8===e?t+"-ми":t+"-ти"},week:{dow:1,doy:7}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},i={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"},n=t.defineLocale("bn",{months:"জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্র_শনি".split("_"),weekdaysMin:"রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(t){return t.replace(/[১২৩৪৫৬৭৮৯০]/g,function(t){return i[t]})},postformat:function(t){return t.replace(/\d/g,function(t){return e[t]})},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(t,e){return 12===t&&(t=0),"রাত"===e&&t>=4||"দুপুর"===e&&t<5||"বিকাল"===e?t+12:t},meridiem:function(t,e,i){return t<4?"রাত":t<10?"সকাল":t<17?"দুপুর":t<20?"বিকাল":"রাত"},week:{dow:0,doy:6}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},i={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"},n=t.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(t){return t.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,function(t){return i[t]})},postformat:function(t){return t.replace(/\d/g,function(t){return e[t]})},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(t,e){return 12===t&&(t=0),"མཚན་མོ"===e&&t>=4||"ཉིན་གུང"===e&&t<5||"དགོང་དག"===e?t+12:t},meridiem:function(t,e,i){return t<4?"མཚན་མོ":t<10?"ཞོགས་ཀས":t<17?"ཉིན་གུང":t<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,i){var n={mm:"munutenn",MM:"miz",dd:"devezh"};return t+" "+r(n[i],t)}function i(t){switch(n(t)){case 1:case 3:case 4:case 5:case 9:return t+" bloaz";default:return t+" vloaz"}}function n(t){return t>9?n(t%10):t}function r(t,e){return 2===e?s(t):t}function s(t){var e={m:"v",b:"v",d:"z"};return void 0===e[t.charAt(0)]?t:e[t.charAt(0)]+t.substring(1)}var o=t.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",m:"ur vunutenn",mm:e,h:"un eur",hh:"%d eur",d:"un devezh",dd:e,M:"ur miz",MM:e,y:"ur bloaz",yy:i},ordinalParse:/\d{1,2}(añ|vet)/,ordinal:function(t){var e=1===t?"añ":"vet";return t+e},week:{dow:1,doy:4}});return o})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,i){var n=t+" ";switch(i){case"m":return e?"jedna minuta":"jedne minute";case"mm":return n+=1===t?"minuta":2===t||3===t||4===t?"minute":"minuta";case"h":return e?"jedan sat":"jednog sata";case"hh":return n+=1===t?"sat":2===t||3===t||4===t?"sata":"sati";case"dd":return n+=1===t?"dan":"dana";case"MM":return n+=1===t?"mjesec":2===t||3===t||4===t?"mjeseca":"mjeseci";case"yy":return n+=1===t?"godina":2===t||3===t||4===t?"godine":"godina"}}var i=t.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:e,mm:e,h:e,hh:e,d:"dan",dd:e,M:"mjesec",MM:e,y:"godinu",yy:e},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("ca",{months:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),monthsShort:"gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd D MMMM YYYY H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"fa %s",s:"uns segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},ordinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(t,e){var i=1===t?"r":2===t?"n":3===t?"r":4===t?"t":"è";return"w"!==e&&"W"!==e||(i="a"),t+i},week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t){return t>1&&t<5&&1!==~~(t/10)}function i(t,i,n,r){var s=t+" ";switch(n){case"s":return i||r?"pár sekund":"pár sekundami";case"m":return i?"minuta":r?"minutu":"minutou";case"mm":return i||r?s+(e(t)?"minuty":"minut"):s+"minutami";case"h":return i?"hodina":r?"hodinu":"hodinou";case"hh":return i||r?s+(e(t)?"hodiny":"hodin"):s+"hodinami";case"d":return i||r?"den":"dnem";case"dd":return i||r?s+(e(t)?"dny":"dní"):s+"dny";case"M":return i||r?"měsíc":"měsícem";case"MM":return i||r?s+(e(t)?"měsíce":"měsíců"):s+"měsíci";case"y":return i||r?"rok":"rokem";case"yy":return i||r?s+(e(t)?"roky":"let"):s+"lety"}}var n="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),r="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),s=t.defineLocale("cs",{months:n,monthsShort:r,monthsParse:function(t,e){var i,n=[];for(i=0;i<12;i++)n[i]=new RegExp("^"+t[i]+"$|^"+e[i]+"$","i");return n}(n,r),shortMonthsParse:function(t){var e,i=[];for(e=0;e<12;e++)i[e]=new RegExp("^"+t[e]+"$","i");return i}(r),longMonthsParse:function(t){var e,i=[];for(e=0;e<12;e++)i[e]=new RegExp("^"+t[e]+"$","i");return i}(n),weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:i,m:i,mm:i,h:i,hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return s})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(t){var e=/сехет$/i.exec(t)?"рен":/ҫул$/i.exec(t)?"тан":"ран";return t+e},past:"%s каялла",s:"пӗр-ик ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},ordinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},ordinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(t){var e=t,i="",n=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"];return e>20?i=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(i=n[e]),t+i},week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY HH:mm"},calendar:{sameDay:"[I dag kl.] LT",nextDay:"[I morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[I går kl.] LT",lastWeek:"[sidste] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,i,n){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[t+" Tage",t+" Tagen"],M:["ein Monat","einem Monat"],MM:[t+" Monate",t+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[t+" Jahre",t+" Jahren"]};return e?r[i][0]:r[i][1]}var i=t.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:e,mm:"%d Minuten",h:e,hh:"%d Stunden",d:e,dd:e,M:e,MM:e,y:e,yy:e},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,i,n){var r={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[t+" Tage",t+" Tagen"],M:["ein Monat","einem Monat"],MM:[t+" Monate",t+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[t+" Jahre",t+" Jahren"]};return e?r[i][0]:r[i][1]}var i=t.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",m:e,mm:"%d Minuten",h:e,hh:"%d Stunden",d:e,dd:e,M:e,MM:e,y:e,yy:e},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],i=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"],n=t.defineLocale("dv",{months:e,monthsShort:e,weekdays:i,weekdaysShort:i,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(t){return"މފ"===t},meridiem:function(t,e,i){return t<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/,/g,"،")},week:{dow:7,doy:12}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t){return t instanceof Function||"[object Function]"===Object.prototype.toString.call(t)}var i=t.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(t,e){return/D/.test(e.substring(0,e.indexOf("MMMM")))?this._monthsGenitiveEl[t.month()]:this._monthsNominativeEl[t.month()]},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(t,e,i){return t>11?i?"μμ":"ΜΜ":i?"πμ":"ΠΜ"},isPM:function(t){return"μ"===(t+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,
	longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(t,i){var n=this._calendarEl[t],r=i&&i.hours();return e(n)&&(n=n.apply(i)),n.replace("{}",r%12===1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},ordinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10,i=1===~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+i},week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10,i=1===~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+i}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10,i=1===~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+i},week:{dow:1,doy:4}});return e})},function(t", "base64"));
  res.write(new Buffer(",e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10,i=1===~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+i},week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},ordinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10,i=1===~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+i},week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),weekdaysShort:"Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-an de] MMMM, YYYY",LLL:"D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-an de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(t){return"p"===t.charAt(0).toLowerCase()},meridiem:function(t,e,i){return t>11?i?"p.t.m.":"P.T.M.":i?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"je %s",past:"antaŭ %s",s:"sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},ordinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),i="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),n=t.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(t,n){return/-MMM-/.test(n)?i[t.month()]:e[t.month()]},weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,i,n){var r={s:["mõne sekundi","mõni sekund","paar sekundit"],m:["ühe minuti","üks minut"],mm:[t+" minuti",t+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[t+" tunni",t+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[t+" kuu",t+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[t+" aasta",t+" aastat"]};return e?r[i][2]?r[i][2]:r[i][1]:n?r[i][0]:r[i][1]}var i=t.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:e,m:e,mm:e,h:e,hh:e,d:e,dd:"%d päeva",M:e,MM:e,y:e,yy:e},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},i={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"},n=t.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(t){return/بعد از ظهر/.test(t)},meridiem:function(t,e,i){return t<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چندین ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(t){return t.replace(/[۰-۹]/g,function(t){return i[t]}).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,function(t){return e[t]}).replace(/,/g,"،")},ordinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,n,r){var s="";switch(n){case"s":return r?"muutaman sekunnin":"muutama sekunti";case"m":return r?"minuutin":"minuutti";case"mm":s=r?"minuutin":"minuuttia";break;case"h":return r?"tunnin":"tunti";case"hh":s=r?"tunnin":"tuntia";break;case"d":return r?"päivän":"päivä";case"dd":s=r?"päivän":"päivää";break;case"M":return r?"kuukauden":"kuukausi";case"MM":s=r?"kuukauden":"kuukautta";break;case"y":return r?"vuoden":"vuosi";case"yy":s=r?"vuoden":"vuotta"}return s=i(t,r)+" "+s}function i(t,e){return t<10?e?r[t]:n[t]:t}var n="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),r=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",n[7],n[8],n[9]],s=t.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return s})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",m:"ein minutt",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaði",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|)/,ordinal:function(t){return t+(1===t?"er":"")},week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(t){return t+(1===t?"er":"e")}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd'hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},ordinalParse:/\d{1,2}(er|e)/,ordinal:function(t){return t+(1===t?"er":"e")},week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),i="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),n=t.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(t,n){return/-MMM-/.test(n)?i[t.month()]:e[t.month()]},weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],i=["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],n=["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],r=["Did","Dil","Dim","Dic","Dia","Dih","Dis"],s=["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],o=t.defineLocale("gd",{months:e,monthsShort:i,monthsParseExact:!0,weekdays:n,weekdaysShort:r,weekdaysMin:s,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},ordinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(t){var e=1===t?"d":t%10===2?"na":"mh";return t+e},week:{dow:1,doy:4}});return o})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("gl",{months:"Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro".split("_"),monthsShort:"Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.".split("_"),weekdays:"Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado".split("_"),weekdaysShort:"Dom._Lun._Mar._Mér._Xov._Ven._Sáb.".split("_"),weekdaysMin:"Do_Lu_Ma_Mé_Xo_Ve_Sá".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd D MMMM YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(t){return"uns segundos"===t?"nuns segundos":"en "+t},past:"hai %s",s:"uns segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:7}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(t){return 2===t?"שעתיים":t+" שעות"},d:"יום",dd:function(t){return 2===t?"יומיים":t+" ימים"},M:"חודש",MM:function(t){return 2===t?"חודשיים":t+" חודשים"},y:"שנה",yy:function(t){return 2===t?"שנתיים":t%10===0&&10!==t?t+" שנה":t+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(t){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(t)},meridiem:function(t,e,i){return t<5?"לפנות בוקר":t<10?"בבוקר":t<12?i?'לפנה"צ':"לפני הצהריים":t<18?i?'אחה"צ':"אחרי הצהריים":"בערב"}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},i={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},n=t.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(t){return t.replace(/[१२३४५६७८९०]/g,function(t){return i[t]})},postformat:function(t){return t.replace(/\d/g,function(t){return e[t]})},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(t,e){return 12===t&&(t=0),"रात"===e?t<4?t:t+12:"सुबह"===e?t:"दोपहर"===e?t>=10?t:t+12:"शाम"===e?t+12:void 0},meridiem:function(t,e,i){return t<4?"रात":t<10?"सुबह":t<17?"दोपहर":t<20?"शाम":"रात"},week:{dow:0,doy:6}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,i){var n=t+" ";switch(i){case"m":return e?"jedna minuta":"jedne minute";case"mm":return n+=1===t?"minuta":2===t||3===t||4===t?"minute":"minuta";case"h":return e?"jedan sat":"jednog sata";case"hh":return n+=1===t?"sat":2===t||3===t||4===t?"sata":"sati";case"dd":return n+=1===t?"dan":"dana";case"MM":return n+=1===t?"mjesec":2===t||3===t||4===t?"mjeseca":"mjeseci";case"yy":return n+=1===t?"godina":2===t||3===t||4===t?"godine":"godina"}}var i=t.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",m:e,mm:e,h:e,hh:e,d:"dan",dd:e,M:"mjesec",MM:e,y:"godinu",yy:e},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,i,n){var r=t;switch(i){case"s":return n||e?"néhány másodperc":"néhány másodperce";case"m":return"egy"+(n||e?" perc":" perce");case"mm":return r+(n||e?" perc":" perce");case"h":return"egy"+(n||e?" óra":" órája");case"hh":return r+(n||e?" óra":" órája");case"d":return"egy"+(n||e?" nap":" napja");case"dd":return r+(n||e?" nap":" napja");case"M":return"egy"+(n||e?" hónap":" hónapja");case"MM":return r+(n||e?" hónap":" hónapja");case"y":return"egy"+(n||e?" év":" éve");case"yy":return r+(n||e?" év":" éve")}return""}function i(t){return(t?"":"[múlt] ")+"["+n[this.day()]+"] LT[-kor]"}var n="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" "),r=t.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(t){return"u"===t.charAt(1).toLowerCase()},meridiem:function(t,e,i){return t<12?i===!0?"de":"DE":i===!0?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return i.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return i.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return r})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(t){return/^(ցերեկվա|երեկոյան)$/.test(t)},meridiem:function(t){return t<4?"գիշերվա":t<12?"առավոտվա":t<17?"ցերեկվա":"երեկոյան"},ordinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(t,e){switch(e){case"DDD":case"w":case"W":case"DDDo":return 1===t?t+"-ին":t+"-րդ";default:return t}},week:{dow:1,doy:7}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(t,e){return 12===t&&(t=0),"pagi"===e?t:"siang"===e?t>=11?t:t+12:"sore"===e||"malam"===e?t+12:void 0},meridiem:function(t,e,i){return t<11?"pagi":t<15?"siang":t<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",
	MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t){return t%100===11||t%10!==1}function i(t,i,n,r){var s=t+" ";switch(n){case"s":return i||r?"nokkrar sekúndur":"nokkrum sekúndum";case"m":return i?"mínúta":"mínútu";case"mm":return e(t)?s+(i||r?"mínútur":"mínútum"):i?s+"mínúta":s+"mínútu";case"hh":return e(t)?s+(i||r?"klukkustundir":"klukkustundum"):s+"klukkustund";case"d":return i?"dagur":r?"dag":"degi";case"dd":return e(t)?i?s+"dagar":s+(r?"daga":"dögum"):i?s+"dagur":s+(r?"dag":"degi");case"M":return i?"mánuður":r?"mánuð":"mánuði";case"MM":return e(t)?i?s+"mánuðir":s+(r?"mánuði":"mánuðum"):i?s+"mánuður":s+(r?"mánuð":"mánuði");case"y":return i||r?"ár":"ári";case"yy":return e(t)?s+(i||r?"ár":"árum"):s+(i||r?"ár":"ári")}}var n=t.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:i,m:i,mm:i,h:"klukkustund",hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),weekdaysShort:"Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),weekdaysMin:"Do_Lu_Ma_Me_Gi_Ve_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(t){return(/^[0-9].+$/.test(t)?"tra":"in")+" "+t},past:"%s fa",s:"alcuni secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("ja",{months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"Ah時m分",LTS:"Ah時m分s秒",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah時m分",LLLL:"YYYY年M月D日Ah時m分 dddd"},meridiemParse:/午前|午後/i,isPM:function(t){return"午後"===t},meridiem:function(t,e,i){return t<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:"[来週]dddd LT",lastDay:"[昨日] LT",lastWeek:"[前週]dddd LT",sameElse:"L"},ordinalParse:/\d{1,2}日/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";default:return t}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(t,e){return 12===t&&(t=0),"enjing"===e?t:"siyang"===e?t>=11?t:t+12:"sonten"===e||"ndalu"===e?t+12:void 0},meridiem:function(t,e,i){return t<11?"enjing":t<15?"siyang":t<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(t){return/(წამი|წუთი|საათი|წელი)/.test(t)?t.replace(/ი$/,"ში"):t+"ში"},past:function(t){return/(წამი|წუთი|საათი|დღე|თვე)/.test(t)?t.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(t)?t.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},ordinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(t){return 0===t?t:1===t?t+"-ლი":t<20||t<=100&&t%20===0||t%100===0?"მე-"+t:t+"-ე"},week:{dow:1,doy:7}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"},i=t.defineLocale("kk",{months:"Қаңтар_Ақпан_Наурыз_Сәуір_Мамыр_Маусым_Шілде_Тамыз_Қыркүйек_Қазан_Қараша_Желтоқсан".split("_"),monthsShort:"Қаң_Ақп_Нау_Сәу_Мам_Мау_Шіл_Там_Қыр_Қаз_Қар_Жел".split("_"),weekdays:"Жексенбі_Дүйсенбі_Сейсенбі_Сәрсенбі_Бейсенбі_Жұма_Сенбі".split("_"),weekdaysShort:"Жек_Дүй_Сей_Сәр_Бей_Жұм_Сен".split("_"),weekdaysMin:"Жк_Дй_Сй_Ср_Бй_Жм_Сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},ordinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(t){var i=t%10,n=t>=100?100:null;return t+(e[t]||e[i]||e[n])},week:{dow:1,doy:7}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("km",{months:"មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysMin:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h시 m분",LTS:"A h시 m분 s초",L:"YYYY.MM.DD",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h시 m분",LLLL:"YYYY년 MMMM D일 dddd A h시 m분"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇초",ss:"%d초",m:"일분",mm:"%d분",h:"한시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한달",MM:"%d달",y:"일년",yy:"%d년"},ordinalParse:/\d{1,2}일/,ordinal:"%d일",meridiemParse:/오전|오후/,isPM:function(t){return"오후"===t},meridiem:function(t,e,i){return t<12?"오전":"오후"}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,i,n){var r={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return e?r[i][0]:r[i][1]}function i(t){var e=t.substr(0,t.indexOf(" "));return r(e)?"a "+t:"an "+t}function n(t){var e=t.substr(0,t.indexOf(" "));return r(e)?"viru "+t:"virun "+t}function r(t){if(t=parseInt(t,10),isNaN(t))return!1;if(t<0)return!0;if(t<10)return 4<=t&&t<=7;if(t<100){var e=t%10,i=t/10;return r(0===e?i:e)}if(t<1e4){for(;t>=10;)t/=10;return r(t)}return t/=1e3,r(t)}var s=t.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:i,past:n,s:"e puer Sekonnen",m:e,mm:"%d Minutten",h:e,hh:"%d Stonnen",d:e,dd:"%d Deeg",M:e,MM:"%d Méint",y:e,yy:"%d Joer"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return s})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(t){return"ຕອນແລງ"===t},meridiem:function(t,e,i){return t<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},ordinalParse:/(ທີ່)\d{1,2}/,ordinal:function(t){return"ທີ່"+t}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,i,n){return e?"kelios sekundės":n?"kelių sekundžių":"kelias sekundes"}function i(t,e,i,n){return e?r(i)[0]:n?r(i)[1]:r(i)[2]}function n(t){return t%10===0||t>10&&t<20}function r(t){return o[t].split("_")}function s(t,e,s,o){var a=t+" ";return 1===t?a+i(t,e,s[0],o):e?a+(n(t)?r(s)[1]:r(s)[0]):o?a+r(s)[1]:a+(n(t)?r(s)[1]:r(s)[2])}var o={m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"},a=t.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_")},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:e,m:i,mm:s,h:i,hh:s,d:i,dd:s,M:i,MM:s,y:i,yy:s},ordinalParse:/\d{1,2}-oji/,ordinal:function(t){return t+"-oji"},week:{dow:1,doy:4}});return a})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,i){return i?e%10===1&&11!==e?t[2]:t[3]:e%10===1&&11!==e?t[0]:t[1]}function i(t,i,n){return t+" "+e(s[n],t,i)}function n(t,i,n){return e(s[n],t,i)}function r(t,e){return e?"dažas sekundes":"dažām sekundēm"}var s={m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")},o=t.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:r,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return o})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={words:{m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(t,e){return 1===t?e[0]:t>=2&&t<=4?e[1]:e[2]},translate:function(t,i,n){var r=e.words[n];return 1===n.length?i?r[0]:r[1]:t+" "+e.correctGrammaticalCase(t,r)}},i=t.defineLocale("me",{months:["januar","februar","mart","april","maj","jun","jul","avgust","septembar","oktobar","novembar","decembar"],monthsShort:["jan.","feb.","mar.","apr.","maj","jun","jul","avg.","sep.","okt.","nov.","dec."],weekdays:["nedjelja","ponedjeljak","utorak","srijeda","četvrtak","petak","subota"],weekdaysShort:["ned.","pon.","uto.","sri.","čet.","pet.","sub."],weekdaysMin:["ne","po","ut","sr","če","pe","su"],longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var t=["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return t[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",m:e.translate,mm:e.translate,h:e.translate,hh:e.translate,d:"dan",dd:e.translate,M:"mjesec",MM:e.translate,y:"godinu",yy:e.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},ordinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(t){var e=t%10,i=t%100;return 0===t?t+"-ев":0===i?t+"-ен":i>10&&i<20?t+"-ти":1===e?t+"-ви":2===e?t+"-ри":7===e||8===e?t+"-ми":t+"-ти"},week:{dow:1,doy:7}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(t,e){return 12===t&&(t=0),"രാത്രി"===e&&t>=4||"ഉച്ച കഴിഞ്ഞ്"===e||"വൈകുന്നേരം"===e?t+12:t},meridiem:function(t,e,i){return t<4?"രാത്രി":t<12?"രാവിലെ":t<17?"ഉച്ച കഴിഞ്ഞ്":t<20?"വൈകുന്നേരം":"രാത്രി"}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,i,n){var r="";if(e)switch(i){case"s":r="काही सेकंद";break;case"m":r="एक मिनिट";break;case"mm":r="%d मिनिटे";break;case"h":r="एक तास";break;case"hh":r="%d तास";break;case"d":r="एक दिवस";break;case"dd":r="%d दिवस";break;case"M":r="एक महिना";break;case"MM":r="%d महिने";break;case"y":r="एक वर्ष";break;case"yy":r="%d वर्षे"}else switch(i){case"s":r="काही सेकंदां";break;case"m":r="एका मिनिटा";break;case"mm":r="%d मिनिटां";break;case"h":r="एका तासा";break;case"hh":r="%d तासां";break;case"d":r="एका दिवसा";break;case"dd":r="%d दिवसां";break;case"M":r="एका महिन्या";break;case"MM":r="%d महिन्यां";break;case"y":r="एका वर्षा";break;case"yy":r="%d वर्षां"}return r.replace(/%d/i,t)}var i={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},r=t.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},preparse:function(t){return t.replace(/[१२३४५६७८९०]/g,function(t){return n[t]})},postformat:function(t){return t.replace(/\d/g,function(t){return i[t]})},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(t,e){return 12===t&&(t=0),"रात्री"===e?t<4?t:t+12:"सकाळी"===e?t:"दुपारी"===e?t>=10?t:t+12:"सायंकाळी"===e?t+12:void 0},meridiem:function(t,e,i){return t<4?"रात्री":t<10?"सकाळी":t<17?"दुपारी":t<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}});return r})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(t,e){return 12===t&&(t=0),"pagi"===e?t:"tengahari"===e?t>=11?t:t+12:"petang"===e||"malam"===e?t+12:void 0},meridiem:function(t,e,i){return t<11?"pagi":t<15?"tengahari":t<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(t,e){return 12===t&&(t=0),"pagi"===e?t:"tengahari"===e?t>=11?t:t+12:"petang"===e||"malam"===e?t+12:void 0},meridiem:function(t,e,i){return t<11?"pagi":t<15?"tengahari":t<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},i={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"},n=t.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(t){return t.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,function(t){return i[t]})},postformat:function(t){return t.replace(/\d/g,function(t){return e[t]})},week:{dow:1,doy:4}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"for %s siden",s:"noen sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},i={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},n=t.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),longDate", "base64"));
  res.write(new Buffer("Format:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(t){return t.replace(/[१२३४५६७८९०]/g,function(t){return i[t]})},postformat:function(t){return t.replace(/\d/g,function(t){return e[t]})},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(t,e){return 12===t&&(t=0),"राति"===e?t<4?t:t+12:"बिहान"===e?t:"दिउँसो"===e?t>=10?t:t+12:"साँझ"===e?t+12:void 0},meridiem:function(t,e,i){return t<3?"राति":t<12?"बिहान":t<16?"दिउँसो":t<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),i="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),n=t.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(t,n){return/-MMM-/.test(n)?i[t.month()]:e[t.month()]},weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},ordinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"for %s sidan",s:"nokre sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},i={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"},n=t.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),
	weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(t){return t.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,function(t){return i[t]})},postformat:function(t){return t.replace(/\d/g,function(t){return e[t]})},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(t,e){return 12===t&&(t=0),"ਰਾਤ"===e?t<4?t:t+12:"ਸਵੇਰ"===e?t:"ਦੁਪਹਿਰ"===e?t>=10?t:t+12:"ਸ਼ਾਮ"===e?t+12:void 0},meridiem:function(t,e,i){return t<4?"ਰਾਤ":t<10?"ਸਵੇਰ":t<17?"ਦੁਪਹਿਰ":t<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t){return t%10<5&&t%10>1&&~~(t/10)%10!==1}function i(t,i,n){var r=t+" ";switch(n){case"m":return i?"minuta":"minutę";case"mm":return r+(e(t)?"minuty":"minut");case"h":return i?"godzina":"godzinę";case"hh":return r+(e(t)?"godziny":"godzin");case"MM":return r+(e(t)?"miesiące":"miesięcy");case"yy":return r+(e(t)?"lata":"lat")}}var n="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),r="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),s=t.defineLocale("pl",{months:function(t,e){return""===e?"("+r[t.month()]+"|"+n[t.month()]+")":/D MMMM/.test(e)?r[t.month()]:n[t.month()]},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"nie_pon_wt_śr_czw_pt_sb".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:"[W] dddd [o] LT",lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",m:i,mm:i,h:i,hh:i,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:i,y:"rok",yy:i},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return s})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"%s atrás",s:"poucos segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},ordinalParse:/\d{1,2}º/,ordinal:"%dº"});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,i){var n={mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"},r=" ";return(t%100>=20||t>=100&&t%100===0)&&(r=" de "),t+r+n[i]}var i=t.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",m:"un minut",mm:e,h:"o oră",hh:e,d:"o zi",dd:e,M:"o lună",MM:e,y:"un an",yy:e},week:{dow:1,doy:7}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e){var i=t.split("_");return e%10===1&&e%100!==11?i[0]:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?i[1]:i[2]}function i(t,i,n){var r={mm:i?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"};return"m"===n?i?"минута":"минуту":t+" "+e(r[n],+t)}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[й|я]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i],r=t.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек".split("_"),standalone:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сегодня в] LT",nextDay:"[Завтра в] LT",lastDay:"[Вчера в] LT",nextWeek:function(t){if(t.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В следующее] dddd [в] LT";case 1:case 2:case 4:return"[В следующий] dddd [в] LT";case 3:case 5:case 6:return"[В следующую] dddd [в] LT"}},lastWeek:function(t){if(t.week()===this.week())return 2===this.day()?"[Во] dddd [в] LT":"[В] dddd [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",m:i,mm:i,h:"час",hh:i,d:"день",dd:i,M:"месяц",MM:i,y:"год",yy:i},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(t){return/^(дня|вечера)$/.test(t)},meridiem:function(t,e,i){return t<4?"ночи":t<12?"утра":t<17?"дня":"вечера"},ordinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(t,e){switch(e){case"M":case"d":case"DDD":return t+"-й";case"D":return t+"-го";case"w":case"W":return t+"-я";default:return t}},week:{dow:1,doy:7}});return r})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},ordinalParse:/\d{1,2} වැනි/,ordinal:function(t){return t+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(t){return"ප.ව."===t||"පස් වරු"===t},meridiem:function(t,e,i){return t>11?i?"ප.ව.":"පස් වරු":i?"පෙ.ව.":"පෙර වරු"}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t){return t>1&&t<5}function i(t,i,n,r){var s=t+" ";switch(n){case"s":return i||r?"pár sekúnd":"pár sekundami";case"m":return i?"minúta":r?"minútu":"minútou";case"mm":return i||r?s+(e(t)?"minúty":"minút"):s+"minútami";case"h":return i?"hodina":r?"hodinu":"hodinou";case"hh":return i||r?s+(e(t)?"hodiny":"hodín"):s+"hodinami";case"d":return i||r?"deň":"dňom";case"dd":return i||r?s+(e(t)?"dni":"dní"):s+"dňami";case"M":return i||r?"mesiac":"mesiacom";case"MM":return i||r?s+(e(t)?"mesiace":"mesiacov"):s+"mesiacmi";case"y":return i||r?"rok":"rokom";case"yy":return i||r?s+(e(t)?"roky":"rokov"):s+"rokmi"}}var n="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),r="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_"),s=t.defineLocale("sk",{months:n,monthsShort:r,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:i,m:i,mm:i,h:i,hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return s})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,i,n){var r=t+" ";switch(i){case"s":return e||n?"nekaj sekund":"nekaj sekundami";case"m":return e?"ena minuta":"eno minuto";case"mm":return r+=1===t?e?"minuta":"minuto":2===t?e||n?"minuti":"minutama":t<5?e||n?"minute":"minutami":e||n?"minut":"minutami";case"h":return e?"ena ura":"eno uro";case"hh":return r+=1===t?e?"ura":"uro":2===t?e||n?"uri":"urama":t<5?e||n?"ure":"urami":e||n?"ur":"urami";case"d":return e||n?"en dan":"enim dnem";case"dd":return r+=1===t?e||n?"dan":"dnem":2===t?e||n?"dni":"dnevoma":e||n?"dni":"dnevi";case"M":return e||n?"en mesec":"enim mesecem";case"MM":return r+=1===t?e||n?"mesec":"mesecem":2===t?e||n?"meseca":"mesecema":t<5?e||n?"mesece":"meseci":e||n?"mesecev":"meseci";case"y":return e||n?"eno leto":"enim letom";case"yy":return r+=1===t?e||n?"leto":"letom":2===t?e||n?"leti":"letoma":t<5?e||n?"leta":"leti":e||n?"let":"leti"}}var i=t.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),meridiemParse:/PD|MD/,isPM:function(t){return"M"===t.charAt(0)},meridiem:function(t,e,i){return t<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={words:{m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(t,e){return 1===t?e[0]:t>=2&&t<=4?e[1]:e[2]},translate:function(t,i,n){var r=e.words[n];return 1===n.length?i?r[0]:r[1]:t+" "+e.correctGrammaticalCase(t,r)}},i=t.defineLocale("sr",{months:["januar","februar","mart","april","maj","jun","jul","avgust","septembar","oktobar","novembar","decembar"],monthsShort:["jan.","feb.","mar.","apr.","maj","jun","jul","avg.","sep.","okt.","nov.","dec."],weekdays:["nedelja","ponedeljak","utorak","sreda","četvrtak","petak","subota"],weekdaysShort:["ned.","pon.","uto.","sre.","čet.","pet.","sub."],weekdaysMin:["ne","po","ut","sr","če","pe","su"],longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){var t=["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"];return t[this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",m:e.translate,mm:e.translate,h:e.translate,hh:e.translate,d:"dan",dd:e.translate,M:"mesec",MM:e.translate,y:"godinu",yy:e.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={words:{m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(t,e){return 1===t?e[0]:t>=2&&t<=4?e[1]:e[2]},translate:function(t,i,n){var r=e.words[n];return 1===n.length?i?r[0]:r[1]:t+" "+e.correctGrammaticalCase(t,r)}},i=t.defineLocale("sr-cyrl",{months:["јануар","фебруар","март","април","мај","јун","јул","август","септембар","октобар","новембар","децембар"],monthsShort:["јан.","феб.","мар.","апр.","мај","јун","јул","авг.","сеп.","окт.","нов.","дец."],weekdays:["недеља","понедељак","уторак","среда","четвртак","петак","субота"],weekdaysShort:["нед.","пон.","уто.","сре.","чет.","пет.","суб."],weekdaysMin:["не","по","ут","ср","че","пе","су"],longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){var t=["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"];return t[this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",m:e.translate,mm:e.translate,h:e.translate,hh:e.translate,d:"дан",dd:e.translate,M:"месец",MM:e.translate,y:"годину",yy:e.translate},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},ordinalParse:/\d{1,2}(e|a)/,ordinal:function(t){var e=t%10,i=1===~~(t%100/10)?"e":1===e?"a":2===e?"a":"e";return t+i},week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},i={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"},n=t.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},ordinalParse:/\d{1,2}வது/,ordinal:function(t){return t+"வது"},preparse:function(t){return t.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,function(t){return i[t]})},postformat:function(t){return t.replace(/\d/g,function(t){return e[t]})},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(t,e,i){return t<2?" யாமம்":t<6?" வைகறை":t<10?" காலை":t<14?" நண்பகல்":t<18?" எற்பாடு":t<22?" மாலை":" யாமம்"},meridiemHour:function(t,e){return 12===t&&(t=0),"யாமம்"===e?t<2?t:t+12:"வைகறை"===e||"காலை"===e?t:"நண்பகல்"===e&&t>=10?t:t+12},week:{dow:0,doy:6}});return n})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},ordinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(t,e){return 12===t&&(t=0),"రాత్రి"===e?t<4?t:t+12:"ఉదయం"===e?t:"మధ్యాహ్నం"===e?t>=10?t:t+12:"సాయంత్రం"===e?t+12:void 0},meridiem:function(t,e,i){return t<4?"రాత్రి":t<10?"ఉదయం":t<17?"మధ్యాహ్నం":t<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"),weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),longDateFormat:{LT:"H นาฬิกา m นาที",LTS:"H นาฬิกา m นาที s วินาที",L:"YYYY/MM/DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H นาฬิกา m นาที",LLLL:"วันddddที่ D MMMM YYYY เวลา H นาฬิกา m นาที"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(t){return"หลังเที่ยง"===t},meridiem:function(t,e,i){return t<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"[Ngayon sa] LT",nextDay:"[Bukas sa] LT",nextWeek:"dddd [sa] LT",lastDay:"[Kahapon sa] LT",lastWeek:"dddd [huling linggo] LT",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},ordinalParse:/\d{1,2}/,ordinal:function(t){return t},week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t){var e=t;return e=t.indexOf("jaj")!==-1?e.slice(0,-3)+"leS":t.indexOf("jar")!==-1?e.slice(0,-3)+"waQ":t.indexOf("DIS")!==-1?e.slice(0,-3)+"nem":e+" pIq"}function i(t){var e=t;return e=t.indexOf("jaj")!==-1?e.slice(0,-3)+"Hu’":t.indexOf("jar")!==-1?e.slice(0,-3)+"wen":t.indexOf("DIS")!==-1?e.slice(0,-3)+"ben":e+" ret"}function n(t,e,i,n){var s=r(t);switch(i){case"mm":return s+" tup";case"hh":return s+" rep";case"dd":return s+" jaj";case"MM":return s+" jar";case"yy":return s+" DIS"}}function r(t){var e=Math.floor(t%1e3/100),i=Math.floor(t%100/10),n=t%10,r="";return e>0&&(r+=s[e]+"vatlh"),i>0&&(r+=(""!==r?" ":"")+s[i]+"maH"),n>0&&(r+=(""!==r?" ":"")+s[n]),""===r?"pagh":r}var s="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_"),o=t.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:e,past:i,s:"puS lup",m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},ordinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}});return o})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"},i=t.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[haftaya] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen hafta] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinalParse:/\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,ordinal:function(t){if(0===t)return t+"'ıncı";var i=t%10,n=t%100-i,r=t>=100?100:null;return t+(e[i]||e[n]||e[r])},week:{dow:1,doy:7}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e,i,n){var r={s:["viensas secunds","'iensas secunds"],m:["'n míut","'iens míut"],mm:[t+" míuts",""+t+" míuts"],h:["'n þora","'iensa þora"],hh:[t+" þoras",""+t+" þoras"],d:["'n ziua","'iensa ziua"],dd:[t+" ziuas",""+t+" ziuas"],M:["'n mes","'iens mes"],MM:[t+" mesen",""+t+" mesen"],y:["'n ar","'iens ar"],yy:[t+" ars",""+t+" ars"]};return n?r[i][0]:e?r[i][0]:r[i][1]}var i=t.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(t){return"d'o"===t.toLowerCase()},meridiem:function(t,e,i){return t>11?i?"d'o":"D'O":i?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},ordinalParse:/\d{1,2}\./,
	ordinal:"%d.",week:{dow:1,doy:4}});return i})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";function e(t,e){var i=t.split("_");return e%10===1&&e%100!==11?i[0]:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?i[1]:i[2]}function i(t,i,n){var r={mm:i?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:i?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"};return"m"===n?i?"хвилина":"хвилину":"h"===n?i?"година":"годину":t+" "+e(r[n],+t)}function n(t,e){var i={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")},n=/(\[[ВвУу]\]) ?dddd/.test(e)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(e)?"genitive":"nominative";return i[n][t.day()]}function r(t){return function(){return t+"о"+(11===this.hours()?"б":"")+"] LT"}}var s=t.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:n,weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:r("[Сьогодні "),nextDay:r("[Завтра "),lastDay:r("[Вчора "),nextWeek:r("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return r("[Минулої] dddd [").call(this);case 1:case 2:case 4:return r("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",m:i,mm:i,h:"годину",hh:i,d:"день",dd:i,M:"місяць",MM:i,y:"рік",yy:i},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(t){return/^(дня|вечора)$/.test(t)},meridiem:function(t,e,i){return t<4?"ночі":t<12?"ранку":t<17?"дня":"вечора"},ordinalParse:/\d{1,2}-(й|го)/,ordinal:function(t,e){switch(e){case"M":case"d":case"DDD":case"w":case"W":return t+"-й";case"D":return t+"-го";default:return t}},week:{dow:1,doy:7}});return s})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),meridiemParse:/sa|ch/i,isPM:function(t){return/^ch$/i.test(t)},meridiem:function(t,e,i){return t<12?i?"sa":"SA":i?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},ordinalParse:/\d{1,2}/,ordinal:function(t){return t},week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah点mm分",LTS:"Ah点m分s秒",L:"YYYY-MM-DD",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah点mm分",LLLL:"YYYY年MMMD日ddddAh点mm分",l:"YYYY-MM-DD",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah点mm分",llll:"YYYY年MMMD日ddddAh点mm分"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(t,e){return 12===t&&(t=0),"凌晨"===e||"早上"===e||"上午"===e?t:"下午"===e||"晚上"===e?t+12:t>=11?t:t+12},meridiem:function(t,e,i){var n=100*t+e;return n<600?"凌晨":n<900?"早上":n<1130?"上午":n<1230?"中午":n<1800?"下午":"晚上"},calendar:{sameDay:function(){return 0===this.minutes()?"[今天]Ah[点整]":"[今天]LT"},nextDay:function(){return 0===this.minutes()?"[明天]Ah[点整]":"[明天]LT"},lastDay:function(){return 0===this.minutes()?"[昨天]Ah[点整]":"[昨天]LT"},nextWeek:function(){var e,i;return e=t().startOf("week"),i=this.unix()-e.unix()>=604800?"[下]":"[本]",0===this.minutes()?i+"dddAh点整":i+"dddAh点mm"},lastWeek:function(){var e,i;return e=t().startOf("week"),i=this.unix()<e.unix()?"[上]":"[本]",0===this.minutes()?i+"dddAh点整":i+"dddAh点mm"},sameElse:"LL"},ordinalParse:/\d{1,2}(日|月|周)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";case"M":return t+"月";case"w":case"W":return t+"周";default:return t}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}});return e})},function(t,e,i){!function(t,e){e(i(36))}(this,function(t){"use strict";var e=t.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"Ah點mm分",LTS:"Ah點m分s秒",L:"YYYY年MMMD日",LL:"YYYY年MMMD日",LLL:"YYYY年MMMD日Ah點mm分",LLLL:"YYYY年MMMD日ddddAh點mm分",l:"YYYY年MMMD日",ll:"YYYY年MMMD日",lll:"YYYY年MMMD日Ah點mm分",llll:"YYYY年MMMD日ddddAh點mm分"},meridiemParse:/早上|上午|中午|下午|晚上/,meridiemHour:function(t,e){return 12===t&&(t=0),"早上"===e||"上午"===e?t:"中午"===e?t>=11?t:t+12:"下午"===e||"晚上"===e?t+12:void 0},meridiem:function(t,e,i){var n=100*t+e;return n<900?"早上":n<1130?"上午":n<1230?"中午":n<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},ordinalParse:/\d{1,2}(日|月|週)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";case"M":return t+"月";case"w":case"W":return t+"週";default:return t}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",m:"一分鐘",mm:"%d分鐘",h:"一小時",hh:"%d小時",d:"一天",dd:"%d天",M:"一個月",MM:"%d個月",y:"一年",yy:"%d年"}});return e})},function(t,e,i){var n,r;n=[i(2),i(137)],r=function(t,e){return e.extend({secureJSON:!1,_builtInLocalProps:{__edit__:"boolean",__pending__:"boolean"},constructor:function(){this.local=t.defaults({},t.result(this,"local"),this._builtInLocalProps),t.result(this,"secureJSON")&&(this.sync=t.wrap(this.sync,function(e,i,n,r){return e.call(this,i,n,t.extend({dataType:"secureJSON"},r))})),e.apply(this,arguments)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r,s;!function(o,a){r=[i(2),i(35)],n=a,s="function"==typeof n?n.apply(e,r):n,!(void 0!==s&&(t.exports=s))}(this,function(t,e){function i(e,n,r,s){var o=t.contains(n,r);return s||(s={}),o||!t.isObject(e)||t.isArray(e)||t.isFunction(e)?void 0!==r&&(s[r]=e):t.each(e,function(t,e){i(t,n,r?r+"."+e:e,s)}),s}function n(e){return t.each(e,function(t,e,i){if(e.indexOf(".")!=-1){for(var n,r=i,s=e.split(".");void 0!==(n=s.shift());)r[n]||(r[n]=s.length?{}:t),r=r[n];delete i[e]}}),e}function r(t,e){var i={};return i[t.name]=e,i}function s(e,i){var n;return n=t.isString(e)?{type:e}:t.isArray(e)?{type:e[0],required:e[1],value:e[2]}:t.clone(e),t.defaults(n,{required:!1,name:i}),n}function o(t){return t.toLowerCase().replace(/\b[a-z]/g,function(t){return t.toUpperCase()})}function a(e,i){return t.isBoolean(e)?e:t.isRegExp(e)?e.test(i):!!t.isFunction(e)&&e.call(this,i)}function l(t,e,i){if(!e.test(t))return i}function c(t,e){var i=f[t.format];if(t.format&&!i)throw new TypeError(t.format+" is not a supported string format");return i&&i(e)}function u(e,i){var n=t.partial(r,e),s=c(e,i);return s?n(s):i&&e.minLength&&i.length<e.minLength?n(p.ERROR_STRING_STRING_MIN_LENGTH,i.length):i&&e.maxLength&&i.length>e.maxLength?n(p.ERROR_STRING_STRING_MAX_LENGTH,i.length):void 0}function d(e,i){var n,s,a=t.partial(r,e),l=!t.isUndefined(i)&&!t.isNull(i);if(e.required&&(!l||t.isNull(i)||""===i))return a(p.ERROR_BLANK);if(n=t["is"+o(e.type)],l&&"any"!=e.type&&(!t.isFunction(n)||!n(i)))return a(p.ERROR_WRONG_TYPE);if(i&&"string"==e.type){var c=u(e,i);if(c)return c}if(l&&e.values&&!t.contains(e.values,i))return a(p.ERROR_NOT_ALLOWED);if(t.isFunction(e.validate)){var d=e.validate(i);if(t.isString(d)&&d)return a(d);if(d===!1)return a(p.ERROR_INVALID)}return l&&"array"==e.type&&(s=h(e,i))?a(s):void 0}function h(e,i){if(e.minItems&&i.length<e.minItems)return"model.validation.field.array.minItems";if(e.maxItems&&i.length>e.maxItems)return"model.validation.field.array.maxItems";if(e.uniqueItems&&i.length>t.uniq(i).length)return p.ERROR_IARRAY_UNIQUE;if(e.items)for(var n=s(e.items,"placeholder"),r=0;r<i.length;r++){var o=i[r],a=d(n,o);if(a)return a.placeholder}}var p,f={email:function(t){var e=/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;return l(t,e,p.ERROR_INVALID_FORMAT_EMAIL)},uri:function(t){var e=/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))\.?)(?::\d{2,5})?(?:[\/?#]\S*)?$/i;return l(t,e,p.ERROR_INVALID_FORMAT_URI)},ipv4:function(t){var e=/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;return l(t,e,p.ERROR_INVALID_FORMAT_IPV4)},hostname:function(t){var e=/^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/;return l(t,e,p.ERROR_INVALID_FORMAT_HOSTNAME)}};return p=e.Model.extend({props:{},derived:{},local:{},extraProperties:!1,flat:!0,defaults:{},constructor:function(n){this.options=n||{};var r=this.__schema__={},o=[];r.computedProperties={},r.extraProperties=this.extraProperties,r.props=t.clone(t.result(this,"props")||{}),r.derived=t.clone(t.result(this,"derived")||{}),r.local=t.clone(t.result(this,"local")||{});var a={};if(t.each(t.extend({},r.props,r.local),function(e,i){var n=s(e,i);t.isUndefined(n.value)||(a[i]=n.value),"object"===n.type&&o.push(i)},this),t.size(a)){var l=t.result(this,"defaults");this.defaults=function(){return t.defaults({},a,l)}}this.validate=t.wrap(this.validate,function(e){var i=t.rest(arguments),n=t.extend(this._validateSchema.apply(this,i),e.apply(this,i));return t.size(n)&&n||void 0}),this.parse=t.wrap(this.parse,function(e){var n=e.apply(this,t.rest(arguments));return this.flat&&(n=i(n,o)),n}),e.Model.apply(this,arguments),t.each(r.derived,function(t,e){r.computedProperties[e]=this.__getDerivedValue(e);var i=t.deps||[];i.length&&this.on("cache:clear change:"+i.join(" change:"),function(){var t=this.__getDerivedValue(e);t!==r.computedProperties[e]&&(r.computedProperties[e]=t,this.trigger("change:"+e,this,t))},this)},this),this.on("sync",function(){this.__syncedData=this.toJSON()},this)},validate:function(){},allows:function(e){var i=this.__schema__,n=t.extend({},i.props,i.local);return!!t.has(n,e)||!!a.call(this,i.extraProperties,e)},getPropertySchema:function(e){var i=this.__schema__;return t.reduce([i.props,i.local],function(t,i){return t||s(i[e],e)},null)},set:function(i,n){var r;"object"==typeof i?r=i:(r={})[i]=n,t.each(r,function(e,i){if(t.has(this.__schema__.derived,i))throw"overriding derived properties is not supported: "+i},this);var s=[];if(t.each(r,function(t,e){this.allows(e)||s.push(e)},this),s.length)throw"field not allowed: "+s.join(", ");return e.Model.prototype.set.apply(this,arguments)},get:function(i){var n=this.__schema__;return t.has(n.derived,i)?n.derived[i].cache!==!1?n.computedProperties[i]:this.__getDerivedValue(i):e.Model.prototype.get.apply(this,arguments)},toJSON:function(i){i||(i={});var r=t.clone(e.Model.prototype.toJSON.apply(this,arguments)),s=this.__schema__;return i.verbose?t.each(s.derived,function(t,e){r[e]=this.get(e)},this):r=t.omit(r,t.keys(s.local)),this.flat&&(r=n(r)),r},reset:function(e){this.clear(e),this.set(t.result(this,"defaults"),e)},isSynced:function(){return t.isEqual(this.__syncedData,this.toJSON())},validateField:function(t){var e=t&&this.getPropertySchema(t);return e&&d(e,this.get(t))},_validateSchema:function(){var e=this.__schema__;return t.reduce(t.extend({},e.props,e.local),function(e,i,n){return t.extend(e,this.validateField(n)||{})},{},this)},__getDerivedValue:function(e){var i=this.__schema__.derived[e];if(t.isString(i)){var n=i;i={deps:[n],fn:function(){return this.get(n)}}}var r=i.deps||[];return i.fn.apply(this,t.map(r,this.get,this))}},{ERROR_BLANK:"model.validation.field.blank",ERROR_WRONG_TYPE:"model.validation.field.wrong.type",ERROR_NOT_ALLOWED:"model.validation.field.value.not.allowed",ERROR_INVALID:"model.validation.field.invalid",ERROR_IARRAY_UNIQUE:"model.validation.field.array.unique",ERROR_INVALID_FORMAT_EMAIL:"model.validation.field.invalid.format.email",ERROR_INVALID_FORMAT_URI:"model.validation.field.invalid.format.uri",ERROR_INVALID_FORMAT_IPV4:"model.validation.field.invalid.format.ipv4",ERROR_INVALID_FORMAT_HOSTNAME:"model.validation.field.invalid.format.hostname",ERROR_STRING_STRING_MIN_LENGTH:"model.validation.field.string.minLength",ERROR_STRING_STRING_MAX_LENGTH:"model.validation.field.string.maxLength"})})},function(t,e,i){var n,r;n=[i(2),i(136)],r=function(t,e){var i=function(e){var i=t.omit(e.local,t.keys(e._builtInLocalProps));return t.size(e.props)+t.size(i)>0},n=e.extend({flat:!1,constructor:function(){e.apply(this,arguments),this.on("sync",this._setSynced)},allows:function(){return!i(this)||e.prototype.allows.apply(this,arguments)},set:function(i,n){var r;return"object"==typeof i?r=i:(r={})[i]=n,t(r).each(function(e,i){e&&t.isArray(e.__attributes)&&this.on("change:"+e.__attributes.join(" change:"),function(){var t=this.get(i);t!==this.__schema__.computedProperties[i]&&(this.__schema__.computedProperties[i]=t,this.trigger("change:"+i,t))},this)},this),e.prototype.set.apply(this,arguments)},get:function(){var i=e.prototype.get.apply(this,arguments);return t.isFunction(i)?i.apply(this,t.map(i.__attributes||[],this.get,this)):i},toJSON:function(i){i||(i={});var n=e.prototype.toJSON.apply(this,arguments);return t(n).each(function(t,e){"function"==typeof t&&(i.verbose?n[e]=this.get(e):delete n[e])},this),i.verbose||t(n).each(function(t,e){/^__\w+__$/.test(e)&&delete n[e]}),n},sanitizeAttributes:function(e){var i={};return t.each(e,function(e,n){t.isFunction(e)||(i[n]=e)}),i},reset:function(t){this.clear(t),this.set(this.sanitizeAttributes(this.defaults),t)},clear:function(e){var i={};return t.each(this.sanitizeAttributes(this.attributes),function(t,e){i[e]=void 0}),this.set(i,t.extend({},e,{unset:!0}))},_setSynced:function(e){this._syncedData=e&&t.isFunction(e.toJSON)?e.toJSON():{}},_getSynced:function(){return this._syncedData},isSynced:function(){return t.isEqual(this._getSynced(),this.toJSON())}},{ComputedProperty:function(){var e=t.toArray(arguments),i=e.pop();return i.__attributes=e.pop(),i}});return n}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n;n=function(){}.call(e,i,e,t),!(void 0!==n&&(t.exports=n))},function(t,e,i){var n,r;n=[i(141)],r=function(t){return{TableFactory:t}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r,s;!function(o,a){r=[i(2),i(142)],n=a,s="function"==typeof n?n.apply(e,r):n,!(void 0!==s&&(t.exports=s))}(this,function(t,e){function i(e){return t.map(e,function(e){return t.isString(e)&&(e={name:e}),!e.name&&e.field&&(e=t.extend({name:e.field},e)),e})}function n(e){var i={};return t.each(e||{},function(e,n){i[n]=function(i){i.preventDefault(),i.stopPropagation(),t.isFunction(e)&&e.apply(this,arguments)}},this),i}return{createHeader:function(n){return e.extend({tagName:"thead",template:"<tr></tr>",initialize:function(){t.each(i(n),function(t){this.add(e.extend({el:'<th role="columnheader"></th>',children:t.headerView&&[t.headerView],template:t.headerView?null:t.label||"&nbsp;"}),"tr")},this)}})},createRow:function(n){var r=this;return e.extend({tagName:"tbody",template:'<tr role="row"></tr>',children:t.map(i(n),function(t){return[r.createCell(t),"tr"]})})},createCell:function(i){var r=t.extend(t.pick(i,"className","attributes","initialize"),{tagName:"td",events:n(i.events),children:i.view&&[i.view],template:i.view?null:i.template||"{{"+i.name+"}}"});return e.extend(r)},__normalizeFields:i,__cleanEvents:n}})},function(t,e,i){var n,r,s;!function(o,a){r=[i(2),i(35)],n=a,s="function"==typeof n?n.apply(e,r):n,!(void 0!==s&&(t.exports=s))}(this,function(t,e){function i(t,e){for(var i=0;i<t[o].length;i++)if(e.cid===t[o][i].cid)return i}function n(){}function r(t){t[a]=!0;var e=t.renderTemplate(t.template);e?t.$el.html(e):t.length&&t.$el.empty(),t.each(function(t){t[u]()})}function s(e){var i=/^(?!(?:delegate|undelegate|_))([a-zA-Z0-9]+)(?:Events)$/;t.each(t.allKeys(e),function(n){var r=n.match(i);if(r){var s=t.result(e,n),o=e.options[r[1]]||e[r[1]];o&&t.isObject(s)&&t.isFunction(o.trigger)&&t.each(s,function(i,n){var r=t.isFunction(i)?[i]:t.reduce(i.split(/\s+/),function(i,n){return t.isFunction(e[n])&&i.push(e[n]),i},[]);t.each(r,function(t){e.listenTo(o,n,t)})})}})}var o="__children__",a="__rendered__",l="__parent__",c="__children_definitions__",u="__add_to_container__",d=e.View.extend({constructor:function(i){this.options=i||{},t.extend(this,t.pick(this.options,"state","settings")),this[o]=[],this[a]=!1,this[l]=null,this[c]=this.children;var r=this.initial", "base64"));
  res.write(new Buffer("ize;if(this.initialize=n,e.View.apply(this,arguments),t.each(t.result(this,c),function(e){this.add.apply(this,t.isArray(e)?e:[e])},this),delete this[c],this.autoRender&&this.model){var u=t.isArray(this.autoRender)?t.map(this.autoRender,function(t){return"change:"+t}).join(" "):"change";this.listenTo(this.model,u,function(){this.render()})}this.initialize=r,this.initialize.apply(this,arguments),s(this)},unregister:function(e){this.stopListening(e);var n=i(this,e);t.isNumber(n)&&this[o].splice(n,1)},autoRender:!1,template:null,children:[],add:function(n,r,s,a,c){var h={},p=t.toArray(arguments);if(t.isObject(r)?(h=r,r=h.selector,s=h.bubble,a=h.prepend,c=h.options):t.isObject(s)&&(h=s,s=h.bubble,a=h.prepend,c=h.options),t.isString(n)&&(n=function(t){return d.extend({constructor:function(){try{var i=e.$(t);if(1!=i.length)throw"invalid Element";this.template=i.html(),this.el=i.empty()[0]}catch(n){this.template=t}d.apply(this,arguments)}})}(n)),n.prototype&&n.prototype instanceof d){var f=t.omit(t.extend({},this.options,c),"el");return p[0]=new n(f),this.add.apply(this,p)}if(t.isNumber(i(this,n)))throw new Error("Duplicate child");return n[l]=this,n[u]=function(t){return function(){if(t&&1!=n[l].$(t).length)throw new Error("Invalid selector: "+t);var e=t?this[l].$(t):this[l].$el;this.render(),this.delegateEvents(),a?e.prepend(this.el):e.append(this.el)}}.call(n,r),s&&this.listenTo(n,"all",function(){this.trigger.apply(this,arguments)}),this.rendered()&&n[u](),this[o].push(n),this},removeChildren:function(){return this.each(function(t){t.remove()}),this},remove:function(){return this.removeChildren(),this[l]&&this[l].unregister(this),e.View.prototype.remove.apply(this,arguments)},compileTemplate:function(e){return t.template(e)},renderTemplate:function(e){if(t.isString(e)&&(e=this.compileTemplate(e)),t.isFunction(e))return e(this.getTemplateData())},getTemplateData:function(){var e=this.model&&this.model.toJSON({verbose:!0})||{},i=t.omit(this.options,["state","settings","model","collection"]);return t.defaults({},e,i)},render:function(){return this.preRender(),r(this),this.postRender(),this},preRender:n,postRender:n,rendered:function(){return this[a]},getChildren:function(){return this.toArray()},at:function(t){return this.getChildren()[t]},invoke:function(e){var i=t.toArray(arguments);return this.each(function(n){n.size()&&n.invoke.apply(n,i),t.isFunction(n[e])&&n[e].apply(n,i.slice(1))}),this}}),h=["each","map","reduce","reduceRight","find","filter","reject","every","some","contains","toArray","size","first","initial","rest","last","without","indexOf","shuffle","lastIndexOf","isEmpty","chain","where","findWhere"];return t.each(h,function(e){d.prototype[e]=function(){var i=t.toArray(arguments);return i.unshift(t.toArray(this[o])),t[e].apply(t,i)}},this),d})},function(t,e,i){var n,r;n=[i(145),i(150),i(152),i(153),i(156),i(157),i(165),i(167),i(168),i(169),i(170),i(172),i(173),i(144),i(174),i(175),i(176),i(149),i(148),i(177),i(183),i(147),i(187),i(188),i(189),i(190)],r=function(t,e,i,n,r,s,o,a,l,c,u,d,h,p,f,m,_,g,v,y,b,w,M,k,T,S){return{BaseController:t,BaseRouter:e,BatchAjaxUtil:i,ButtonFactory:n,Class:r,Clipboard:s,Cookie:o,DataListController:a,ErrorParser:l,Events:c,formatXml:u,Fx:d,Keys:h,Logger:p,Metrics:f,NumberUtil:m,SchemaUtil:_,SettingsModel:g,StateMachine:v,StringUtil:y,TabbedRouter:b,TemplateUtil:w,Time:M,TimeUtil:k,TimezoneUtil:T,Util:S}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n;n=function(){function t(t,e){window.console&&window.console[t].apply(window.console,e)}return{trace:function(){return t("trace",arguments)},dir:function(){return t("dir",arguments)},time:function(){return t("time",arguments)},timeEnd:function(){return t("timeEnd",arguments)},group:function(){return t("group",arguments)},groupEnd:function(){return t("groupEnd",arguments)},assert:function(){return t("assert",arguments)},log:function(){return t("log",arguments)},info:function(){return t("info",arguments)},warn:function(){return t("warn",arguments)},error:function(){return t("error",arguments)}}}.call(e,i,e,t),!(void 0!==n&&(t.exports=n))},function(t,e,i){var n,r;n=[i(5),i(2),i(146),i(148),i(149),i(150)],r=function(t,e,i,n,r,s){function o(t){var i={};return e.each(t,function(t,n){e.isNull(t)||(i[n]=t)}),i}return i.extend({constructor:function(t){t||(t={});var a=e.defaults(o(t.state),this.state||{});this.state=new n(a),delete t.state,t.settings?this.settings=t.settings:(this.settings=t.settings=new r(e.omit(t||{},"el")),this.listen("notification",s.prototype._notify),this.listen("confirmation",s.prototype._confirm)),i.call(this,t),this.listenTo(this.state,"__invoke__",function(){var t=e.toArray(arguments),i=t.shift();e.isFunction(this[i])&&this[i].apply(this,t)}),this.View&&this.add(new this.View(this.toJSON()))},state:{},View:null,render:function(){var e=arguments,n=this;return t(function(){i.prototype.render.apply(n,e)}),this},toJSON:function(t){return e.extend(e.pick(this,"state","settings","collection","model"),t||{})},remove:function(){return this.removeChildren(),this.stopListening(),this.$el.empty(),this}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(35),i(147),i(142)],r=function(t,e,i,n){var r=t.clone(e.Events),s={constructor:function(){n.apply(this,arguments),this.module&&this.$el.attr("data-view",this.module.id)},empty:function(){return this.removeChildren()},compileTemplate:i.tpl,broadcast:function(){return r.trigger.apply(r,arguments),this},listen:function(t,e){return this.listenTo(r,t,e),this},notify:function(e,i,n){return this.broadcast("notification",t.defaults({message:i,level:e},n)),this},confirm:function(e,i,n,r){var s;return s="object"==typeof e?e:2==arguments.length&&t.isFunction(i)?{title:"Okta",subtitle:e,ok:i}:{title:e,subtitle:i,ok:n,cancelFn:r},t.isFunction(s.ok)&&(s.ok=t.bind(s.ok,this)),t.isFunction(s.cancelFn)&&(s.cancelFn=t.bind(s.cancelFn,this)),this.broadcast("confirmation",s),this},alert:function(e){return t.isString(e)&&(e={subtitle:e}),this.confirm(t.extend({},e,{noCancelButton:!0})),this}};return n.extend(s,{decorate:function(e){var i=e.extend({});return t.defaults(i.prototype,s),i}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(4)],r=function(t,e){return{tpl:t.memoize(function(t){return e.compile(t)})}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(136)],r=function(t,e){return e.extend({extraProperties:!0,invoke:function(){var e=t.toArray(arguments);e.unshift("__invoke__"),this.trigger.apply(this,e)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(136)],r=function(t,e){return e.extend({local:function(){var t=window.okta&&window.okta.settings||{};return{orgId:["string",!1,t.orgId],orgName:["string",!1,t.orgName],isPreview:["boolean",!1,t.isPreview],serverStatus:["string",!1,t.serverStatus],permissions:["array",!0,t.permissions||[]]}},extraProperties:!0,constructor:function(){this.features=window._features||[],e.apply(this,arguments)},hasFeature:function(e){return t.contains(this.features,e)},hasAnyFeature:function(e){return t.some(e,this.hasFeature,this)},hasPermission:function(e){return t.contains(this.get("permissions"),e)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(5),i(2),i(35),i(149),i(151),i(139)],r=function(t,e,i,n,r,s){return i.Router.extend({listen:r.prototype.listen,constructor:function(t){t||(t={}),this.el=t.el,this.settings=new n(e.omit(t,"el")),i.Router.apply(this,arguments),this.listen("notification",this._notify),this.listen("confirmation",this._confirm)},_confirm:function(t){t||(t={});var i=s.extend(e.pick(t,"title","subtitle","save","ok","cancel","cancelFn","noCancelButton","content","danger")),n=new i({model:this.settings});return n.render(),n},_notify:function(e){var i=new r(e);return t("#content").prepend(i.render().el),i},render:function(t,i){this.controller&&(this.stopListening(this.controller),this.stopListening(this.controller.state),this.controller.remove()),i=e.extend(e.pick(this,"settings","el"),i||{}),this.controller=new t(i),this.controller.render()},start:function(){var e=arguments;t(function(){i.history.start.apply(i.history,e)})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(5),i(2),i(146)],r=function(t,e,i){var n={level:"success",message:"Great Success!",hide:!0,fade:400,delay:3e3,width:0,dismissable:!1};return i.extend({className:"infobox infobox-confirm infobox-confirm-fixed",events:{"click .infobox-dismiss-link":"fadeOut"},template:'\t      {{#if dismissable}}\t      <a class="infobox-dismiss-link" title="Dismiss" href="#">\t        <span class="dismiss-icon"></span>\t      </a>\t      {{/if}}\t      <span class="icon {{level}}-16"></span>\t      {{#if title}}<h3>{{title}}</h3>{{/if}}\t      <p>{{message}}</p>\t    ',initialize:function(){this.options=e.defaults({},this.options,n),this.$el.addClass("infobox-"+this.options.level),this.options.width&&this.$el.width(this.options.width).css({"margin-left":"0px",left:Math.round((t(window).width()-this.options.width)/2)})},getTemplateData:function(){return e.extend(e.pick(this.options,"level","message","title"),{dismissable:this.options.hide===!1||this.options.dismissable===!0})},postRender:function(){this.options.hide&&e.delay(e.bind(this.fadeOut,this),this.options.delay)},fadeOut:function(){this.$el.fadeOut(this.options.fade,e.bind(this.remove,this))}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(5),i(2)],r=function(t,e){var i={queryBuildFn:e.noop,batchSize:20};return{getByIds:function(n){var r=e.defaults({},n,i),s=r.ids;if(!e.isString(r.url))throw new Error("Expecting an string URL but get: "+r.url);if(!e.isArray(s)||e.isEmpty(s))throw new Error("Expecting an list of IDs but get: "+s);if(!e.isNumber(r.batchSize)||0===r.batchSize||s.length<=r.batchSize)return t.get(r.url,r.queryBuildFn(s));var o=e.chain(s).groupBy(function(t,e){return Math.floor(e/r.batchSize)}).values().map(function(e){return t.get(r.url,r.queryBuildFn(e))},this).value();return t.when.apply(t,o).then(function(){return e.chain(arguments).map(e.first).flatten().value()})}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(154)],r=function(t,e){function i(e){var i=t.extend(e.click?{click:e.click}:{},e.events||{}),n={};return t.each(i,function(t,i){n[i]=function(i){e.href||(i.preventDefault(),i.stopPropagation()),t.apply(this,arguments)}}),n}return{create:function(n){return n=t.clone(n),e.extend(t.extend(n,{events:i(n)}))}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(146),i(155)],r=function(t,e,i){var n={click:function(t){t.preventDefault(),t.stopPropagation()}};return e.extend({tagName:"a",template:'{{#if icon}}<span class="icon {{icon}}"></span>{{/if}}{{#if title}}{{title}}{{/if}}',visible:!0,enabled:!0,enableWhen:{},showWhen:{},
	constructor:function(t){this.options=t||{};var i=this.getTemplateData();this.disabled=!1,e.apply(this,arguments),this.$el.addClass("link-button"),i.icon&&(this.$el.addClass("link-button-icon"),i.title||this.$el.addClass("icon-only"))},getTemplateData:function(){return{href:this.__getAttribute("href"),title:this.__getAttribute("title"),icon:this.__getAttribute("icon")}},initialize:function(){i.applyDoWhen(this,t.resultCtx(this,"enableWhen",this),this.toggle),i.applyDoWhen(this,t.resultCtx(this,"showWhen",this),this.toggleVisible)},render:function(){e.prototype.render.apply(this,arguments),t.result(this,"enabled")||this.toggle(!1),t.result(this,"visible")||this.toggleVisible(!1);var i=this.getTemplateData();return this.$el.attr("href",i.href||"#"),this},__getAttribute:function(e,i){var n=t.resultCtx(this.options,e,this);return t.isUndefined(n)&&(n=t.result(this,e)),t.isUndefined(n)?i:n},enable:function(){this.toggle(!0)},disable:function(){this.toggle(!1)},show:function(){this.toggleVisible(!0)},hide:function(){this.toggleVisible(!1)},toggle:function(e){var i=!!e&&t.result(this,"enabled");this.disabled=!i,this.$el.toggleClass("link-button-disabled btn-disabled disabled",this.disabled),t.defer(t.bind(function(){this.delegateEvents(this.disabled?n:null)},this))},toggleVisible:function(e){var i=!e||!t.result(this,"visible");this.$el.toggleClass("hide",i)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2)],r=function(t){function e(e){return"change:"+t.keys(e).join(" change:")}function i(e,i){var n=this.model.get(i);return t.isFunction(e)?e.call(this,n):e==n}function n(i,n,r){var s=t.bind(r,i,i,n);i.render=t.wrap(i.render,function(t){var e=t.call(i);return s({animate:!1}),e}),i.listenTo(i.model,e(n),function(){s({animate:!0})})}return{applyDoWhen:function(e,r,s){e.model&&t.isObject(r)&&t.size(r)&&t.isFunction(s)&&n(e,r,function(e,n,r){var o=t.every(t.map(n,i,e));s.call(e,o,r)})}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(35)],r=function(t,e){function i(e){this.options=t.clone(e||{}),this.cid=t.uniqueId("class"),this.initialize.apply(this,arguments)}return t.extend(i.prototype,e.Events,{initialize:function(){}}),i.extend=e.Model.extend,i}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(5),i(2),i(156),i(158),i(142)],r=function(t,e,i,n,r){var s=n,o=["success","error","target","text"],a=i.extend({initialize:function(i,n){n=e.pick(n||{},o);var a,l,c;e.isString(i)&&(a=i),e.isElement(i)&&(a=i),i instanceof t&&(a=i.selector),i instanceof r&&(a=i.el),e.isFunction(n.target)&&(l=n.target),e.isElement(n.target)&&(l=e.constant(n.target)),e.isString(n.text)?c=e.constant(n.text):e.isFunction(n.text)&&(c=n.text),this.__instance=new s(a,{target:l,text:c}),this.done=e.partial(this.__setCallback,"success"),this.error=e.partial(this.__setCallback,"error"),this.done(n.success),this.error(n.error)},__setCallback:function(t,i){if(e.isFunction(i))return this.__instance.on(t,i),this.__instance}});return{attach:function(t,e){return new a(t,e)}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r,s;!function(o,a){r=[t,i(159),i(30),i(161)],n=a,s="function"==typeof n?n.apply(e,r):n,!(void 0!==s&&(t.exports=s))}(this,function(t,e,i,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function a(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function l(t,e){var i="data-clipboard-"+t;if(e.hasAttribute(i))return e.getAttribute(i)}var c=r(e),u=r(i),d=r(n),h=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),p=function(t){function e(t,i){s(this,e);var n=o(this,(e.__proto__||Object.getPrototypeOf(e)).call(this));return n.resolveOptions(i),n.listenClick(t),n}return a(e,t),h(e,[{key:"resolveOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action="function"==typeof t.action?t.action:this.defaultAction,this.target="function"==typeof t.target?t.target:this.defaultTarget,this.text="function"==typeof t.text?t.text:this.defaultText}},{key:"listenClick",value:function(t){var e=this;this.listener=(0,d["default"])(t,"click",function(t){return e.onClick(t)})}},{key:"onClick",value:function(t){var e=t.delegateTarget||t.currentTarget;this.clipboardAction&&(this.clipboardAction=null),this.clipboardAction=new c["default"]({action:this.action(e),target:this.target(e),text:this.text(e),trigger:e,emitter:this})}},{key:"defaultAction",value:function(t){return l("action",t)}},{key:"defaultTarget",value:function(t){var e=l("target",t);if(e)return document.querySelector(e)}},{key:"defaultText",value:function(t){return l("text",t)}},{key:"destroy",value:function(){this.listener.destroy(),this.clipboardAction&&(this.clipboardAction.destroy(),this.clipboardAction=null)}}],[{key:"isSupported",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["copy","cut"],e="string"==typeof t?[t]:t,i=!!document.queryCommandSupported;return e.forEach(function(t){i=i&&!!document.queryCommandSupported(t)}),i}}]),e}(u["default"]);t.exports=p})},function(t,e,i){var n,r,s;!function(o,a){r=[t,i(160)],n=a,s="function"==typeof n?n.apply(e,r):n,!(void 0!==s&&(t.exports=s))}(this,function(t,e){"use strict";function i(t){return t&&t.__esModule?t:{"default":t}}function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var r=i(e),s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),a=function(){function t(e){n(this,t),this.resolveOptions(e),this.initSelection()}return o(t,[{key:"resolveOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.action=t.action,this.emitter=t.emitter,this.target=t.target,this.text=t.text,this.trigger=t.trigger,this.selectedText=""}},{key:"initSelection",value:function(){this.text?this.selectFake():this.target&&this.selectTarget()}},{key:"selectFake",value:function(){var t=this,e="rtl"==document.documentElement.getAttribute("dir");this.removeFake(),this.fakeHandlerCallback=function(){return t.removeFake()},this.fakeHandler=document.body.addEventListener("click",this.fakeHandlerCallback)||!0,this.fakeElem=document.createElement("textarea"),this.fakeElem.style.fontSize="12pt",this.fakeElem.style.border="0",this.fakeElem.style.padding="0",this.fakeElem.style.margin="0",this.fakeElem.style.position="absolute",this.fakeElem.style[e?"right":"left"]="-9999px";var i=window.pageYOffset||document.documentElement.scrollTop;this.fakeElem.style.top=i+"px",this.fakeElem.setAttribute("readonly",""),this.fakeElem.value=this.text,document.body.appendChild(this.fakeElem),this.selectedText=(0,r["default"])(this.fakeElem),this.copyText()}},{key:"removeFake",value:function(){this.fakeHandler&&(document.body.removeEventListener("click",this.fakeHandlerCallback),this.fakeHandler=null,this.fakeHandlerCallback=null),this.fakeElem&&(document.body.removeChild(this.fakeElem),this.fakeElem=null)}},{key:"selectTarget",value:function(){this.selectedText=(0,r["default"])(this.target),this.copyText()}},{key:"copyText",value:function(){var t=void 0;try{t=document.execCommand(this.action)}catch(e){t=!1}this.handleResult(t)}},{key:"handleResult",value:function(t){this.emitter.emit(t?"success":"error",{action:this.action,text:this.selectedText,trigger:this.trigger,clearSelection:this.clearSelection.bind(this)})}},{key:"clearSelection",value:function(){this.target&&this.target.blur(),window.getSelection().removeAllRanges()}},{key:"destroy",value:function(){this.removeFake()}},{key:"action",set:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"copy";if(this._action=t,"copy"!==this._action&&"cut"!==this._action)throw new Error('Invalid "action" value, use either "copy" or "cut"')},get:function(){return this._action}},{key:"target",set:function(t){if(void 0!==t){if(!t||"object"!==("undefined"==typeof t?"undefined":s(t))||1!==t.nodeType)throw new Error('Invalid "target" value, use a valid Element');if("copy"===this.action&&t.hasAttribute("disabled"))throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');if("cut"===this.action&&(t.hasAttribute("readonly")||t.hasAttribute("disabled")))throw new Error('Invalid "target" attribute. You can\'t cut text from elements with "readonly" or "disabled" attributes');this._target=t}},get:function(){return this._target}}]),t}();t.exports=a})},function(t,e){function i(t){var e;if("SELECT"===t.nodeName)t.focus(),e=t.value;else if("INPUT"===t.nodeName||"TEXTAREA"===t.nodeName){var i=t.hasAttribute("readonly");i||t.setAttribute("readonly",""),t.select(),t.setSelectionRange(0,t.value.length),i||t.removeAttribute("readonly"),e=t.value}else{t.hasAttribute("contenteditable")&&t.focus();var n=window.getSelection(),r=document.createRange();r.selectNodeContents(t),n.removeAllRanges(),n.addRange(r),e=n.toString()}return e}t.exports=i},function(t,e,i){function n(t,e,i){if(!t&&!e&&!i)throw new Error("Missing required arguments");if(!a.string(e))throw new TypeError("Second argument must be a String");if(!a.fn(i))throw new TypeError("Third argument must be a Function");if(a.node(t))return r(t,e,i);if(a.nodeList(t))return s(t,e,i);if(a.string(t))return o(t,e,i);throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList")}function r(t,e,i){return t.addEventListener(e,i),{destroy:function(){t.removeEventListener(e,i)}}}function s(t,e,i){return Array.prototype.forEach.call(t,function(t){t.addEventListener(e,i)}),{destroy:function(){Array.prototype.forEach.call(t,function(t){t.removeEventListener(e,i)})}}}function o(t,e,i){return l(document.body,t,e,i)}var a=i(162),l=i(163);t.exports=n},function(t,e){e.node=function(t){return void 0!==t&&t instanceof HTMLElement&&1===t.nodeType},e.nodeList=function(t){var i=Object.prototype.toString.call(t);return void 0!==t&&("[object NodeList]"===i||"[object HTMLCollection]"===i)&&"length"in t&&(0===t.length||e.node(t[0]))},e.string=function(t){return"string"==typeof t||t instanceof String},e.fn=function(t){var e=Object.prototype.toString.call(t);return"[object Function]"===e}},function(t,e,i){function n(t,e,i,n,s){var o=r.apply(this,arguments);return t.addEventListener(i,o,s),{destroy:function(){t.removeEventListener(i,o,s)}}}function r(t,e,i,n){return function(i){i.delegateTarget=s(i.target,e),i.delegateTarget&&n.call(t,i)}}var s=i(164);t.exports=n},function(t,e){function i(t,e){for(;t&&t.nodeType!==n;){if("function"==typeof t.matches&&t.matches(e))return t;t=t.parentNode}}var n=9;if("undefined"!=typeof Element&&!Element.prototype.matches){var r=Element.prototype;r.matches=r.matchesSelector||r.mozMatchesSelector||r.msMatchesSelector||r.oMatchesSelector||r.webkitMatchesSelector}t.exports=i},function(t,e,i){var n,r;n=[i(2),i(166)],r=function(t,e){var i=/^https/.test(window.location.href);return{setCookie:function(n,r,s){e.set(n,r,t.defaults(s||{},{secure:i,path:"/"}))},getCookie:function(){return e.get.apply(e,arguments)},removeCookie:function(){return e.remove.apply(e,arguments)}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;/*!
		 * JavaScript Cookie v2.1.0
		 * https://github.com/js-cookie/js-cookie
		 *
		 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
		 * Released under the MIT license
		 */
	!function(s){n=s,r="function"==typeof n?n.call(e,i,e,t):n,!(void 0!==r&&(t.exports=r))}(function(){function t(){for(var t=0,e={};t<arguments.length;t++){var i=arguments[t];for(var n in i)e[n]=i[n]}return e}function e(i){function n(e,r,s){var o;if(arguments.length>1){if(s=t({path:"/"},n.defaults,s),"number"==typeof s.expires){var a=new Date;a.setMilliseconds(a.getMilliseconds()+864e5*s.expires),s.expires=a}try{o=JSON.stringify(r),/^[\{\[]/.test(o)&&(r=o)}catch(l){}return r=i.write?i.write(r,e):encodeURIComponent(String(r)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),e=encodeURIComponent(String(e)),e=e.replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent),e=e.replace(/[\(\)]/g,escape),document.cookie=[e,"=",r,s.expires&&"; expires="+s.expires.toUTCString(),s.path&&"; path="+s.path,s.domain&&"; domain="+s.domain,s.secure?"; secure":""].join("")}e||(o={});for(var c=document.cookie?document.cookie.split("; "):[],u=/(%[0-9A-Z]{2})+/g,d=0;d<c.length;d++){var h=c[d].split("="),p=h[0].replace(u,decodeURIComponent),f=h.slice(1).join("=");'"'===f.charAt(0)&&(f=f.slice(1,-1));try{if(f=i.read?i.read(f,p):i(f,p)||f.replace(u,decodeURIComponent),this.json)try{f=JSON.parse(f)}catch(l){}if(e===p){o=f;break}e||(o[p]=f)}catch(l){}}return o}return n.get=n.set=n,n.getJSON=function(){return n.apply({json:!0},[].slice.call(arguments))},n.defaults={},n.remove=function(e,i){n(e,"",t(i,{expires:-1}))},n.withConverter=e,n}return e(function(){})})},function(t,e,i){var n,r;n=[i(2),i(145)],r=function(t,e){return e.extend({fetchEvents:"change",constructor:function(){this.fetch=t.debounce(this.fetch,50),this.Collection&&(this.collection=new this.Collection),e.apply(this,arguments),this.listenTo(this.state,t.result(this,"fetchEvents"),function(){this.fetch({reset:!0})}),this.collection&&this.listenTo(this.collection,"error",function(t){t===this.collection&&this.collection.reset()}),this.fetch({reset:!0})},fetch:function(e){this.collection&&(this.trigger("fetch",this.state),this.collection.fetch(t.extend(t.pick(e||{},["reset","remove","success","error","data"]),{data:this.getFetchData()})))},getFetchData:function(){return this.state.toJSON()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2)],r=function(t){return{create:function(e){return e&&e.errorObj&&(t.isEmpty(e.errorObj.errorCauses)?e.errors=[{errorSummary:e.errorObj.errorSummary}]:e.errors=e.errorObj.errorCauses),{getFieldName:function(t){return t.indexOf(":")>-1?t.split(":")[0]:null},getMessages:function(){var i=[];return t.each(e.errors,function(t){var n=this.getFieldName(t.errorSummary);if(n&&e.inputMap[n]){var r=new RegExp("^"+n);i.push({errorSummary:t.errorSummary.replace(r,e.inputMap[n])})}else i.push(t)},this),i},getInputs:function(){var i=[];return t.each(e.errors,function(t){var n=this.getFieldName(t.errorSummary);e.inputMap.hasOwnProperty(n)&&i.push(n)},this),i},getReformattedMessages:function(){var i={};return t.each(e.errors,function(e){if(t.isUndefined(e.errorSummary))i.errorSummary=e;else{var n=e.errorSummary.indexOf(":")>-1?e.errorSummary.split(": "):null;n?i[n[0]]=n[1]:i.errorSummary=e.errorSummary}},this),i}}}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){!(t.exports={FETCH_MORE:"FETCH_MORE",SHOW_MORE:"SHOW_MORE",DELETE:"DELETE",ACTIVATE:"ACTIVATE",DEACTIVATE:"DEACTIVATE",CHECK_ALL:"CHECK_ALL",UPLOAD_DONE:"UPLOAD_DONE",UPLOAD_EMPTY_CONTENT:"UPLOAD_EMPTY_CONTENT",DOWNLOAD_DONE:"DOWNLOAD_DONE",CLOSE:"CLOSE",DONE:"DONE",SUBMIT:"SUBMIT"})},function(t,e,i){var n,r;n=[i(171)],r=function(){function t(t,e){return t=vkbeautify.xml(t),e&&(t=t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;")),t}return t}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e){/**
		* vkBeautify - javascript plugin to pretty-print or minify text in XML, JSON, CSS and SQL formats.
		*  
		* Version - 0.99.00.beta 
		* Copyright (c) 2012 Vadim Kiryukhin
		* vkiryukhin @ gmail.com
		* http://www.eslinstructor.net/vkbeautify/
		* 
		* Dual licensed under the MIT and GPL licenses:
		*   http://www.opensource.org/licenses/mit-license.php
		*   http://www.gnu.org/licenses/gpl.html
		*
		*   Pretty print
		*
		*        vkbeautify.xml(text [,indent_pattern]);
		*        vkbeautify.json(text [,indent_pattern]);
		*        vkbeautify.css(text [,indent_pattern]);
		*        vkbeautify.sql(text [,indent_pattern]);
		*
		*        @text - String; text to beatufy;
		*        @indent_pattern - Integer | String;
		*                Integer:  number of white spaces;
		*                String:   character string to visualize indentation ( can also be a set of white spaces )
		*   Minify
		*
		*        vkbeautify.xmlmin(text [,preserve_comments]);
		*        vkbeautify.jsonmin(text);
		*        vkbeautify.cssmin(text [,preserve_comments]);
		*        vkbeautify.sqlmin(text);
		*
		*        @text - String; text to minify;
		*        @preserve_comments - Bool; [optional];
		*                Set this flag to true to prevent removing comments from @text ( minxml and mincss functions only. )
		*
		*   Examples:
		*        vkbeautify.xml(text); // pretty print XML
		*        vkbeautify.json(text, 4 ); // pretty print JSON
		*        vkbeautify.css(text, '. . . .'); // pretty print CSS
		*        vkbeautify.sql(text, '----'); // pretty print SQL
		*
		*        vkbeautify.xmlmin(text, true);// minify XML, preserve comments
		*        vkbeautify.jsonmin(text);// minify JSON
		*        vkbeautify.cssmin(text);// minify CSS, remove comments ( default )
		*        vkbeautify.sqlmin(text);// minify SQL
		*
		*/
	!function(){function t(t){var e="    ";if(isNaN(parseInt(t)))e=t;else switch(t){case 1:e=" ";break;case 2:e="  ";break;case 3:e="   ";break;case 4:e="    ";break;case 5:e="     ";break;case 6:e="      ";break;case 7:e="       ";break;case 8:e="        ";break;case 9:e="         ";break;case 10:e="          ";break;case 11:e="           ";break;case 12:e="            "}var i=["\n"];for(ix=0;ix<100;ix++)i.push(i[ix]+e);return i}function e(){this.step="    ",this.shift=t(this.step)}function i(t,e){return e-(t.replace(/\(/g,"").length-t.replace(/\)/g,"").length)}function n(t,e){return t.replace(/\s{1,}/g," ").replace(/ AND /gi,"~::~"+e+e+"AND ").replace(/ BETWEEN /gi,"~::~"+e+"BETWEEN ").replace(/ CASE /gi,"~::~"+e+"CASE ").replace(/ ELSE /gi,"~::~"+e+"ELSE ").replace(/ END /gi,"~::~"+e+"END ").replace(/ FROM /gi,"~::~FROM ").replace(/ GROUP\s{1,}BY/gi,"~::~GROUP BY ").replace(/ HAVING /gi,"~::~HAVING ").replace(/ IN /gi," IN ").replace(/ JOIN /gi,"~::~JOIN ").replace(/ CROSS~::~{1,}JOIN /gi,"~::~CROSS JOIN ").replace(/ INNER~::~{1,}JOIN /gi,"~::~INNER JOIN ").replace(/ LEFT~::~{1,}JOIN /gi,"~::~LEFT JOIN ").replace(/ RIGHT~::~{1,}JOIN /gi,"~::~RIGHT JOIN ").replace(/ ON /gi,"~::~"+e+"ON ").replace(/ OR /gi,"~::~"+e+e+"OR ").replace(/ ORDER\s{1,}BY/gi,"~::~ORDER BY ").replace(/ OVER /gi,"~::~"+e+"OVER ").replace(/\(\s{0,}SELECT /gi,"~::~(SELECT ").replace(/\)\s{0,}SELECT /gi,")~::~SELECT ").replace(/ THEN /gi," THEN~::~"+e).replace(/ UNION /gi,"~::~UNION~::~").replace(/ USING /gi,"~::~USING ").replace(/ WHEN /gi,"~::~"+e+"WHEN ").replace(/ WHERE /gi,"~::~WHERE ").replace(/ WITH /gi,"~::~WITH ").replace(/ ALL /gi," ALL ").replace(/ AS /gi," AS ").replace(/ ASC /gi," ASC ").replace(/ DESC /gi," DESC ").replace(/ DISTINCT /gi," DISTINCT ").replace(/ EXISTS /gi," EXISTS ").replace(/ NOT /gi," NOT ").replace(/ NULL /gi," NULL ").replace(/ LIKE /gi," LIKE ").replace(/\s{0,}SELECT /gi,"SELECT ").replace(/\s{0,}UPDATE /gi,"UPDATE ").replace(/ SET /gi," SET ").replace(/~::~{1,}/g,"~::~").split("~::~")}e.prototype.xml=function(e,i){var n=e.replace(/>\s{0,}</g,"><").replace(/</g,"~::~<").replace(/\s*xmlns\:/g,"~::~xmlns:").replace(/\s*xmlns\=/g,"~::~xmlns=").split("~::~"),r=n.length,s=!1,o=0,a="",l=0,c=i?t(i):this.shift;for(l=0;l<r;l++)n[l].search(/<!/)>-1?(a+=c[o]+n[l],s=!0,(n[l].search(/-->/)>-1||n[l].search(/\]>/)>-1||n[l].search(/!DOCTYPE/)>-1)&&(s=!1)):n[l].search(/-->/)>-1||n[l].search(/\]>/)>-1?(a+=n[l],s=!1):/^<\w/.exec(n[l-1])&&/^<\/\w/.exec(n[l])&&/^<[\w:\-\.\,]+/.exec(n[l-1])==/^<\/[\w:\-\.\,]+/.exec(n[l])[0].replace("/","")?(a+=n[l],s||o--):n[l].search(/<\w/)>-1&&n[l].search(/<\//)==-1&&n[l].search(/\/>/)==-1?a=a+=s?n[l]:c[o++]+n[l]:n[l].search(/<\w/)>-1&&n[l].search(/<\//)>-1?a=a+=s?n[l]:c[o]+n[l]:n[l].search(/<\//)>-1?a=a+=s?n[l]:c[--o]+n[l]:n[l].search(/\/>/)>-1?a=a+=s?n[l]:c[o]+n[l]:a+=n[l].search(/<\?/)>-1?c[o]+n[l]:n[l].search(/xmlns\:/)>-1||n[l].search(/xmlns\=/)>-1?c[o]+n[l]:n[l];return"\n"==a[0]?a.slice(1):a},e.prototype.json=function(t,e){var e=e?e:this.step;return"undefined"==typeof JSON?t:"string"==typeof t?JSON.stringify(JSON.parse(t),null,e):"object"==typeof t?JSON.stringify(t,null,e):t},e.prototype.css=function(e,i){var n=e.replace(/\s{1,}/g," ").replace(/\{/g,"{~::~").replace(/\}/g,"~::~}~::~").replace(/\;/g,";~::~").replace(/\/\*/g,"~::~/*").replace(/\*\//g,"*/~::~").replace(/~::~\s{0,}~::~/g,"~::~").split("~::~"),r=n.length,s=0,o="",a=0,l=i?t(i):this.shift;for(a=0;a<r;a++)o+=/\{/.exec(n[a])?l[s++]+n[a]:/\}/.exec(n[a])?l[--s]+n[a]:/\*\\/.exec(n[a])?l[s]+n[a]:l[s]+n[a];return o.replace(/^\n{1,}/,"")},e.prototype.sql=function(e,r){var s=e.replace(/\s{1,}/g," ").replace(/\'/gi,"~::~'").split("~::~"),o=s.length,a=[],l=0,c=this.step,u=0,d="",h=0,p=r?t(r):this.shift;for(h=0;h<o;h++)a=h%2?a.concat(s[h]):a.concat(n(s[h],c));for(o=a.length,h=0;h<o;h++){u=i(a[h],u),/\s{0,}\s{0,}SELECT\s{0,}/.exec(a[h])&&(a[h]=a[h].replace(/\,/g,",\n"+c+c)),/\s{0,}\s{0,}SET\s{0,}/.exec(a[h])&&(a[h]=a[h].replace(/\,/g,",\n"+c+c)),/\s{0,}\(\s{0,}SELECT\s{0,}/.exec(a[h])?(l++,d+=p[l]+a[h]):/\'/.exec(a[h])?(u<1&&l&&l--,d+=a[h]):(d+=p[l]+a[h],u<1&&l&&l--)}return d=d.replace(/^\n{1,}/,"").replace(/\n{1,}/g,"\n")},e.prototype.xmlmin=function(t,e){var i=e?t:t.replace(/\<![ \r\n\t]*(--([^\-]|[\r\n]|-[^\-])*--[ \r\n\t]*)\>/g,"").replace(/[ \r\n\t]{1,}xmlns/g," xmlns");return i.replace(/>\s{0,}</g,"><")},e.prototype.jsonmin=function(t){return"undefined"==typeof JSON?t:JSON.stringify(JSON.parse(t),null,0)},e.prototype.cssmin=function(t,e){var i=e?t:t.replace(/\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\//g,"");return i.replace(/\s{1,}/g," ").replace(/\{\s{1,}/g,"{").replace(/\}\s{1,}/g,"}").replace(/\;\s{1,}/g,";").replace(/\/\*\s{1,}/g,"/*").replace(/\*\/\s{1,}/g,"*/")},e.prototype.sqlmin=function(t){return t.replace(/\s{1,}/g," ").replace(/\s{1,}\(/,"(").replace(/\s{1,}\)/,")")},window.vkbeautify=new e}()},function(t,e,i){var n,r;n=[i(2)],r=function(t){var e={NONE:"none",SLIDE:"slide",FADE:"fade"};return{DEFAULT_DURATION:400,EFFECTS:e,animate:function(i,n){switch(n||(n={}),t.isString(n)&&(n={effect:n}),n.effect){case e.SLIDE:case e.FADE:i.hide(),i.toggle(n);break;case e.NONE:}}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){!(t.exports={UP:38,DOWN:40,DEL:46,TAB:9,RETURN:13,ENTER:13,ESC:27,COMMA:188,PAGEUP:33,PAGEDOWN:34,SPACE:32,BACKSPACE:8,__isKey:function(t,e){return(t.which||t.keyCode)==this[e]},isEnter:function(t){return this.__isKey(t,"ENTER")},isEsc:function(t){return this.__isKey(t,"ESC")},isSpaceBar:function(t){return this.__isKey(t,"SPACE")}})},function(t,e,i){var n,r;n=[i(5),i(2),i(139),i(156),i(144),i(147)],r=function(t,e,i,n,r,s){function o(t){var i=["%cmixpanel:"+t,c].concat(e.rest(arguments));r.log.apply(r,i)}var a="ed04ba7b43abbdfbc578c5402f86a03e",l="73623d035cdabf11e9cfd7580c6d5a97",c="background-color:#f10; color:#fff; padding:2px";return n.extend({component:void 0,name:void 0,initialize:function(t){if(t||(t={}),!this.component)throw new Error("Must define metrics component");if(!this.name)throw new Error("Must define metrics name");var e=this.isProduction(),n=e?l:a,r=this.getSuperProperties(),s=this.getDistinctId(),c=!window.okta||window.okta.mixpanel!==!1;i.init(n,{},this.name),this.__instance=i[this.name],this.__instance.register(r),this.__instance.identify(s),this.__sendMixpanelEvents=c&&(e||t.sendEventsInDev),this.__sendMixpanelEvents||o("init",{distinctId:s,isProd:e,superProperties:r})},isProduction:function(){var t=this.getDeployEnvironment();return"PREVIEW"===t||"PROD"===t},getDistinctId:function(){return t("#analytics-uid").text()},getDeployEnvironment:function(){return t("#analytics-env").text()||"DEV"},getSuperProperties:function(){return{env:this.getDeployEnvironment()}},getDefaultProperties:function(){return{metricsComponent:this.component,metricsName:this.name}},getFullEventName:function(t){var e=this.getDefaultProperties();return s.tpl("{{metricsComponent}}:{{metricsName}}:{{eventName}}")({metricsComponent:e.metricsComponent,metricsName:e.metricsName,eventName:t})},track:function(i,n){var s=e.extend(this.getDefaultProperties(),n),a=t.Deferred(),l=this.getFullEventName(i);return this.__sendMixpanelEvents?this.__instance.track(l,s,function(){a.resolve()}):(l.length>30&&r.warn("Prefixed event name is too long (>30):"+l),o("track",l,s),e.defer(a.resolve)),a.promise()},timeEvent:function(t){this.__sendMixpanelEvents?this.__instance.time_event(this.getFullEventName(t)):o("time_event",this.getFullEventName(t))}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2)],r=function(t){var e=new RegExp("(\\d)(?=(\\d{3})+(?!\\d))","g");return{numberToString:function(i,n){var r=n||",";return t.isNumber(i)?String(i).replace(e,"$1"+r):"0"}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(177)],r=function(t,e){var i=e.localize,n={STRING:"string",NUMBER:"number",INTEGER:"integer",BOOLEAN:"boolean",OBJECT:"object",FORMATDISPLAYTYPE:{"date-time":"date",uri:"uri",email:"email","country-code":"country-code","language-code":"language-code",locale:"locale",timezone:"timezone","ref-id":"reference"},ARRAYDISPLAYTYPE:{arrayofobject:"arrayofobject",arrayofstring:"arrayofstring",arrayofnumber:"arrayofnumber",arrayofinteger:"arrayofinteger"},DISPLAYTYPES:{date:{type:"string",format:"date-time"},uri:{type:"string",format:"uri"},email:{type:"string",format:"email"},"country-code":{type:"string",format:"country-code"},"language-code":{type:"string",format:"language-code"},locale:{type:"string",format:"locale"},timezone:{type:"string",format:"timezone"},string:{type:"string"},number:{type:"number"},"boolean":{type:"boolean"},integer:{type:"integer"},reference:{type:"string",format:"ref-id"},arrayofobject:{type:"array",items:{type:"object"}},arrayofstring:{type:"array",items:{type:"string"}},arrayofnumber:{type:"array",items:{type:"number"}},arrayofinteger:{type:"array",items:{type:"integer"}},image:{type:"image"},password:{type:"string"}},SUPPORTSMINMAX:["string","number","integer","password"],DATATYPE:{string:"string",number:"number","boolean":"boolean",integer:"integer",date:"datetime",object:"object",arrayofobject:"object array",arrayofstring:"string array",arrayofnumber:"number array",arrayofinteger:"integer array","country-code":"country code","language-code":"language code",reference:"reference",timezone:"timezone",image:"image"},MUTABILITY:{READONLY:"READ_ONLY",WRITEONLY:"WRITE_ONLY",READWRITE:"READ_WRITE",IMMUTABLE:"IMMUTABLE"},SCOPE:{NONE:"NONE",SELF:"SELF",SYSTEM:"SYSTEM"},DISPLAYSCOPE:{SELF:"User personal",SYSTEM:"System",NA:"None"},UNION:{DISABLE:"DISABLE",ENABLE:"ENABLE"},UNION_OPTIONS:{DISABLE:i("universal-directory.profiles.attribute.form.union.enable.display"),ENABLE:i("universal-directory.profiles.attribute.form.union.disable.display")},PERMISSION:{HIDE:"HIDE",READ_ONLY:"READ_ONLY",WRITE_ONLY:"WRITE_ONLY",READ_WRITE:"READ_WRITE"},ENDUSER_ATTRIBUTE_PERMISSION_OPTIONS:{HIDE:i("universal-directory.profiles.attribute.enduser.permission.hide"),READ_ONLY:i("universal-directory.profiles.attribute.enduser.permission.readonly"),READ_WRITE:i("universal-directory.profiles.attribute.enduser.permission.readwrite")},ATTRIBUTE_LEVEL_MASTERING_OPTIONS:{INHERIT:i("universal-directory.profiles.attribute.master.inherit"),OKTA_MASTERED:i("universal-directory.profiles.attribute.master.oktamastered"),OVERRIDE:i("universal-directory.profiles.attribute.master.override")},USERNAMETYPE:{NONE:"non-username",OKTA_TO_APP:"okta-to-app-username",OKTA_TO_AD:"okta-to-ad-username",APP_TO_OKTA:"app-to-okta-username",IDP_TO_OKTA:"idp-to-okta-username"},getDisplayType:function(t,e,i,n){var r;return t&&(r=e?this.FORMATDISPLAYTYPE[e]:i?this.ARRAYDISPLAYTYPE[t+"of"+i]:t),r||(r="undefined"==typeof n?"":n),r},getSourceUsernameType:function(t,e,i){var n=this.USERNAMETYPE.NONE;return"oktaToApp"===t?"userName"===e?n=this.USERNAMETYPE.OKTA_TO_APP:"cn"===e&&(n=this.USERNAMETYPE.OKTA_TO_AD):"appToOkta"===t&&"login"===e&&(n="saml_idp"===i?this.USERNAMETYPE.IDP_TO_OKTA:this.USERNAMETYPE.APP_TO_OKTA),n},isArrayDataType:function(e){return t.contains(t.values(this.ARRAYDISPLAYTYPE),e)},isObjectDataType:function(t){return this.DATATYPE.object===t}};return n}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(5),i(178),i(7)],r=function(t,e,i){var n={"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'","&#039;":"'","&#x2F;":"/"},r=/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@(?!-)((\[?[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\]?)|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,s={sprintf:function(){function t(){throw new Error("Mismatch number of variables: "+arguments[0]+", "+JSON.stringify(e))}for(var e=Array.prototype.slice.apply(arguments),i=e.shift(),n=i,r=0,s=e.length;r<s;r++){var o=e[r];i=i.replace("{"+r+"}",o),void 0!==o&&null!==o&&i!==n||t(),n=i}return/\{[\d+]\}/.test(i)&&t(),i},parseQuery:function(t){for(var e={},i=decodeURIComponent(t.replace(/\+/g," ")).split("&"),n=0;n<i.length;n++){var r=i[n],s=r.split("=");e[s.shift()]=s.join("=")}return e},encodeJSObject:function(t){return encodeURIComponent(JSON.stringify(t))},decodeJSObject:function(t){try{return JSON.parse(decodeURIComponent(t))}catch(e){return null}},unescapeHtml:function(t){return String(t).replace(/&[\w\#\d]{2,};/g,function(t){return n[t]||t})},localize:function(e,n,r){var o=n?i[n]:i[t.keys(i)[0]];if(!o)return"L10N_ERROR["+n+"]";var a=o[e];try{r=r&&r.slice?r.slice(0):[],r.unshift(a),a=s.sprintf.apply(null,r)}catch(l){a=null}return a||"L10N_ERROR["+e+"]"},parseFloat:function(t){var e=+t;return"string"==typeof t&&e===parseFloat(t)?e:t},randomString:function(e){var i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz";if(void 0===e)e=t.random(i.length);else if(0===e)return"";for(var n=[];e--;)n.push(i[t.random(i.length-1)]);return n.join("")},endsWith:function(t,e){return t+="",e+="",t.length>=e.length&&t.substring(t.length-e.length)===e},isEmail:function(i){var n=e.trim(i);return!t.isEmpty(n)&&r.test(n)}};return s}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(21),i(5),i(179),i(180),i(181),i(1),i(182)],r=function(t,e,i,n,r,s,o,a){function l(e){return e?t.mapObject(e,function(e){var i={login:{},country:{}};if(!t.isObject(e))throw new Error('Invalid format for "i18n"');return t.each(e,function(t,e){var n=e.split(/^country\./);n.length>1?i.country[n[1]]=t:i.login[n[0]]=t}),i}):{}}function c(){var t=JSON.parse(localStorage.getItem(p));return t&&t.version===o.version||(t={version:o.version}),t}function u(t,e,i){var n=c();n[t]={login:e,country:i},localStorage.setItem(p,JSON.stringify(n))}function d(t,e,n){var r,s;return r=e.replace("-","_"),s=n.rewrite(f({bundle:t,languageCode:r})),i.ajax({url:n.baseUrl+s,dataType:"jsonp",cache:!0,timeout:5e3,jsonpCallback:"jsonp_"+t})}function h(i,n){if("en"===i||!t.contains(o.supportedLanguages,i))return e({});var r=!a.localStorageIsNotSupported();if(r){var l=c();if(l[i])return e(l[i])}return e.all([d("login",i,n),d("country",i,n)]).spread(function(t,e){return r&&u(i,t,e),{login:t,country:e}}).fail(function(){return s.warn("Unable to load language: "+i),{}})}var p="osw.languages",f=t.template("/labels/jsonp/{{bundle}}_{{languageCode}}.jsonp");return{login:n,country:r,currentLanguage:null,isLoaded:function(t){return this.currentLanguage===t},loadLanguage:function(e,i,s){var o=l(i),a=e.toLowerCase();return h(e,s).then(t.bind(function(i){this.login=t.extend({},n,i.login),this.country=t.extend({},r,i.country),o[a]&&(t.extend(this.login,o[a].login),t.extend(this.country,o[a].country)),this.currentLanguage=e},this))}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e){t.exports={signout:"Sign Out",remember:"Remember me",rememberDevice:"Trust this device","rememberDevice.timebased":"Do not challenge me on this device for the next {0}","rememberDevice.devicebased":"Do not challenge me on this device again",autoPush:"Send push automatically",unlockaccount:"Unlock account?",needhelp:"Need help signing in?",goback:"Back to Sign In",forgotpassword:"Forgot password?",help:"Help",retry:"Retry","minutes.oneMinute":"minute",minutes:"{0} minutes",hours:"{0} hours",days:"{0} days","error.config":"There was a configuration error","error.required.authParams":'Missing parameters for the configured authentication scheme - "OAUTH2"',"error.required.baseUrl":'"baseUrl" is a required widget parameter',"error.required.success":"A success handler is required","error.required.el":'"el" is a required widget parameter',"error.unsupported.browser":"Unsupported browser","error.unsupported.cors":"Unsupported browser - missing CORS support","error.unsupported.localStorage":"Unsupported browser - missing localStorage support","error.enabled.cors":"There was an error sending the request - have you enabled CORS?","error.expired.session":"Your session has expired. Please try to log in again.","error.auth.lockedOut":"Your account is locked. Please contact your administrator.","error.oauth.idToken":"There was a problem generating the id_token for the user. Please try again.","error.network.connection":"Unable to connect to the server. Please check your network connection.","error.username.required":"Please enter a username","error.password.required":"Please enter a password","errors.E0000004":"Sign in failed!","errors.E0000069":"Your account was locked due to excessive MFA attempts.","errors.E0000047":"You exceeded the maximum number of requests. Try again in a while.","errors.E0000001":"Api validation failed: {0}","errors.E0000002":"The request was not valid: {0}","errors.E0000003":"The request body was not well-formed.","errors.E0000005":"Invalid session","errors.E0000006":"You do not have permission to perform the requested action","errors.E0000007":"Not found: {0}","errors.E0000008":"The requested path was not found","errors.E0000009":"Internal Server Error","errors.E0000010":"Service is in read only mode","errors.E0000011":"Invalid token provided","errors.E0000012":"Unsupported media type","errors.E0000013":"Invalid client app id","errors.E0000015":"You do not have permission to access the feature you are requesting","errors.E0000016":"Activation failed because the user is already active","errors.E0000017":"Password reset failed","errors.E0000018":"Bad request.  Accept and/or Content-Type headers are likely not set.","errors.E0000019":"Bad request.  Accept and/or Content-Type headers likely do not match supported values.","errors.E0000020":"Bad request.","errors.E0000021":"Bad request.  Accept and/or Content-Type headers likely do not match supported values.","errors.E0000022":"The endpoint does not support the provided HTTP method","errors.E0000023":"Operation failed because user profile is mastered under another system","errors.E0000024":"Bad request.  This operation on app metadata is not yet supported.","errors.E0000025":"App version assignment failed.","errors.E0000026":"This endpoint has been deprecated.","errors.E0000027":"Group push bad request : {0}","errors.E0000028":"The request is missing a required parameter.","errors.E0000029":"Invalid paging request.","errors.E0000030":"Bad request. Invalid date. Dates must be of the form yyyy-MM-dd''T''HH:mm:ss.SSSZZ, e.g. 2013-01-01T12:00:00.000-07:00.","errors.E0000031":"Invalid search criteria.","errors.E0000032":"Unlock is not allowed for this user.","errors.E0000033":"Bad request. Can't specify a search query and filter in the same request.","errors.E0000034":"Forgot password not allowed on specified user.","errors.E0000035":"Change password not allowed on specified user.","errors.E0000036":"Change recovery question not allowed on specified user.","errors.E0000037":"Type mismatch exception.","errors.E0000038":"This operation is not allowed in the user''s current status.","errors.E0000039":"Operation on application settings failed.","errors.E0000040":"Application label must not be the same as an existing application label.","errors.E0000041":"Credentials should not be set on this resource based on the scheme.","errors.E0000042":"Setting the error page redirect URL failed.","errors.E0000043":"Self service application assignment is not enabled.","errors.E0000044":"Self service application assignment is not supported.","errors.E0000045":"Field mapping bad request.","errors.E0000046":"Deactivate application for user forbidden.","errors.E0000048":"Entity not found exception.","errors.E0000049":"Invalid SCIM data from SCIM implementation.","errors.E0000050":"Invalid SCIM data from client.","errors.E0000051":"No response from SCIM implementation.","errors.E0000052":"Endpoint not implemented.","errors.E0000053":"Invalid SCIM filter.","errors.E0000054":"Invalid pagination properties.","errors.E0000055":"Duplicate group.","errors.E0000056":"Delete application forbidden.","errors.E0000057":"Access to this application is denied due to a policy.","errors.E0000058":"Access to this application requires MFA: {0}","errors.E0000059":"The connector configuration could not be tested. Make sure that the URL, Authentication Parameters are correct and that there is an implementation available at the URL provided.","errors.E0000060":"Unsupported operation.","errors.E0000061":"Tab error: {0}","errors.E0000062":"The specified user is already assigned to the application.","errors.E0000063":"Invalid combination of parameters specified.","errors.E0000064":"Password is expired and must be changed.","errors.E0000065":"Internal error processing app metadata.","errors.E0000066":"APNS is not configured, contact your admin","errors.E0000067":"Factors Service Error.","errors.E0000070":"Waiting for ACK","errors.E0000071":"Unsupported OS Version: {0}","errors.E0000072":"MIM policy settings have disallowed enrollment for this user","errors.E0000073":"User rejected authentication","errors.E0000074":"Factor Service Error","errors.E0000075":"Cannot modify the {0} attribute because it has a field mapping and profile push is enabled.","errors.E0000076":"Cannot modify the app user because it is mastered by an external app.","errors.E0000077":"Cannot modify the {0} attribute because it is read-only.","errors.E0000078":"Cannot modify the {0} attribute because it is immutable.","errors.E0000079":"This operation is not allowed in the current authentication state.","errors.E0000081":"Cannot modify the {0} attribute because it is a reserved attribute for this application.","errors.E0000082":"Each code can only be used once. Please wait for a new code and try again.","errors.E0000083":"PassCode is valid but exceeded time window.","errors.E0000084":"App evaluation error.","errors.E0000085":"You do not have permission to access your account at this time.","errors.E0000086":"This policy cannot be activated at this time.","errors.E0000087":"The recovery question answer did not match our records.","errors.E0000090":"The role specified is already assigned to the user.","errors.E0000091":"The provided role type was not the same as required role type.","errors.E0000092":"Access to this application requires re-authentication: {0}","errors.E0000093":"Target count limit exceeded","errors.E0000094":"The provided filter is unsupported.","errors.E0000095":"Recovery not allowed for unknown user.","errors.E0000096":"This certificate has already been uploaded with kid={0}.","errors.E0000097":"There is no verified phone number on file.","errors.E0000098":"This phone number is invalid.","errors.E0000099":"Only numbers located in US and Canada are allowed.  Contact your administrator if this is a problem.","errors.E0000100":"Unable to perform search query.","errors.E0000101":"Upload failed because of a problem with your ipa file, {0}","errors.E0000102":"YubiKey cannot be deleted while assigned to an user. Please deactivate YubiKey using reset MFA and try again","errors.E0000103":"Action on device already in queue or in progress","errors.E0000104":"Device is already locked and cannot be locked again","errors.E0000105":"You have accessed an account recovery link that has expired or been previously used.","errors.E0000106":"Wait for token to change, then enter the new tokencode.","errors.E0000107":"The entity is not in the expected state for the requested transition.","errors.E0000109":"An SMS message was recently sent. Please wait 30 seconds before trying again.","errors.E0000110":"You have accessed a link that has expired or has been previously used.","errors.E0000111":"Cannot modify the {0} object because it is read-only.","errors.E0000112":"Cannot update this user because they are still being activated. Please try again in a few minutes.","errors.E0000113":"{0}.","errors.E0000114":"A user with this login already exists in the current organization.","errors.E0000115":"Upload failed, {0}","errors.E0000116":"{0}","oform.next":"Next","oform.verify":"Verify","oform.send":"Send","oform.back":"Back","oform.save":"Save","oform.cancel":"Cancel","oform.edit":"Edit","oform.previous":"Previous","oform.errorbanner.title":"We found some errors. Please review the form and make corrections.","oform.errormsg.title":"Please review the form to correct the following errors:","oform.error.unexpected":"There was an unexpected internal error. Please try again.","model.validation.field.blank":"The field cannot be left blank","model.validation.field.ascii":"The field cannot contain Non-ASCII characters","model.validation.field.wrong.type":"The field is of the wrong type","model.validation.field.invalid":"The field has an invalid value","model.validation.field.value.not.allowed":"The field value is not allowed","model.validation.field.array.minItems":"The array does not have enough items","model.validation.field.array.maxItems":"The array contains too many items","model.validation.field.array.unique":"The array can only have unique values","model.validation.field.too.long":"The field cannot exceed {0} characters","model.validation.field.too.small":"The field cannot be less than {0} characters","model.validation.field.string.minLength":"This field cannot be less than the minimum required characters","model.validation.field.string.maxLength":"This field cannot exceed the maximum allowed characters","model.validation.field.invalid.format.email":"This value is not a valid email address","model.validation.field.invalid.format.uri":"This value is not a valid URI","model.validation.field.invalid.format.ipv4":"This value is not a valid IPv4 address","model.validation.field.invalid.format.hostname":"This value is not a valid hostname","model.validation.field.username":"Please check your username","factor.totpSoft.oktaVerify":"Okta Verify","factor.totpSoft.googleAuthenticator":"Google Authenticator","factor.totpSoft.description":"Enter single-use code from the mobile app.","factor.totpHard.rsaSecurId":"RSA SecurID","factor.totpHard.symantecVip":"Symantec VIP","factor.totpHard.description":"Enter a single-use code from a hardware token.","factor.totpHard.yubikey":"Yubikey","factor.totpHard.yubikey.description":"Insert your Yubikey and tap it to get a verification code.","factor.totpHard.yubikey.placeholder":"Click here, then tap your Yubikey","factor.oktaVerifyPush":"Okta Verify","factor.push.description":"Use a push notification sent to the mobile app.","factor.duo":"Duo Security","factor.duo.description":"Use Push Notification, SMS, or Voice call to authenticate.","factor.sms":"SMS Authentication","factor.sms.description":"Enter a single-use code sent to your mobile phone.","factor.call":"Voice Call Authentication","factor.call.description":"Use a phone to authenticate by following voice instructions.","factor.securityQuestion":"Security Question","factor.securityQuestion.description":"Use the answer to a security question to authenticate.","factor.windowsHello":"Windows Hello","factor.windowsHello.signin.description":"Sign in to Okta using Windows Hello.","factor.u2f":"Security Key (U2F)","factor.u2f.description":"Use a Universal 2nd Factor (U2F) security key to sign on to Okta.","factor.email":"Email Authentication","mfa.challenge.verify":"Verify","mfa.challenge.answer.placeholder":"Answer","mfa.challenge.answer.tooltip":"Answer","mfa.challenge.answer.showAnswer":"Show","mfa.challenge.answer.hideAnswer":"Hide","mfa.challenge.enterCode.placeholder":"Enter Code","mfa.challenge.enterCode.tooltip":"Enter Code","mfa.backToFactors":"Back to factor list","mfa.phoneNumber.placeholder":"Phone number","mfa.phoneNumber.ext.placeholder":"Extension","mfa.sendCode":"Send code","mfa.sent":"Sent","mfa.resendCode":"Re-send code","mfa.call":"Call","mfa.calling":"Calling","mfa.redial":"Redial","mfa.sendEmail":"Send email","mfa.resendEmail":"Re-send email","mfa.scanBarcode":"Scan barcode","mfa.noAccessToEmail":"Can't access email","password.reset":"Reset Password","password.oldPassword.placeholder":"Old password","password.oldPassword.tooltip":"Old password","password.newPassword.placeholder":"New password","password.newPassword.tooltip":"New password","password.confirmPassword.placeholder":"Repeat password","password.confirmPassword.tooltip":"Repeat password","password.error.match":"New passwords must match","recovery.sms.hint":"SMS can only be used if a mobile phone number has been configured.","recovery.mobile.hint":"{0} can only be used if a mobile phone number has been configured.","recovery.sms":"SMS","recovery.call":"Voice Call","recovery.smsOrCall":"SMS or Voice Call","enroll.choices.title":"Set up multifactor authentication","enroll.choices.description":"Your company requires multifactor authentication to add an additional layer of security when signing into your Okta account","enroll.choices.optional":"You can configure any additional optional factor or click finish","enroll.choices.list.setup":"Setup required","enroll.choices.list.enrolled":"Enrolled factors","enroll.choices.list.optional":"Additional optional factors","enroll.choices.step":"{0} of {1}","enroll.choices.setup":"Setup","enroll.choices.submit.finish":"Finish","enroll.choices.submit.configure":"Configure factor","enroll.choices.submit.next":"Configure next factor","enroll.securityQuestion.setup":"Setup secret question authentication","security.disliked_food":"What is the food you least liked as a child?","security.name_of_first_plush_toy":"What is the name of your first stuffed animal?","security.first_award":"What did you earn your first medal or award for?","security.favorite_security_question":"What is your favorite security question?","security.favorite_toy":"What is the toy/stuffed animal you liked the most as a kid?","security.first_computer_game":"What was the first computer game you played?","security.favorite_movie_quote":"What is your favorite movie quote?","security.first_sports_team_mascot":"What was the mascot of the first sports team you played on?","security.first_music_purchase":"What music album or song did you first purchase?","security.favorite_art_piece":"What is your favorite piece of art?","security.grandmother_favorite_desert":"What was your grandmother's favorite dessert?","security.first_thing_cooked":"What was the first thing you learned to cook?","security.childhood_dream_job":"What was your dream job as a child?","security.first_kiss_location":"Where did you have your first kiss?","security.place_where_significant_other_was_met":"Where did you meet your spouse/significant other?","security.favorite_vacation_location":"Where did you go for your favorite vacation?","security.new_years_two_thousand":"Where were you on New Year's Eve in the year 2000?","security.favorite_speaker_actor":"Who is your favorite speaker/orator?","security.favorite_book_movie_character":"Who is your favorite book/movie character?","security.favorite_sports_player":"Who is your favorite sports player?","enroll.sms.setup":"Receive a code via SMS to authenticate","enroll.sms.try_again":"The number you entered seems invalid. If the number is correct, please try again.","enroll.call.setup":"Follow phone call instructions to authenticate","enroll.onprem.username.placeholder":"Enter {0} username","enroll.onprem.username.tooltip":"Enter {0} username","enroll.onprem.passcode.placeholder":"Enter {0} passcode","enroll.onprem.passcode.tooltip":"Enter {0} passcode","enroll.symantecVip.subtitle":"Enter Credential ID and two consecutive generated codes","enroll.symantecVip.credentialId.placeholder":"Enter credential ID","enroll.symantecVip.credentialId.tooltip":"Enter credential ID","enroll.symantecVip.passcode1.placeholder":"Security code 1","enroll.symantecVip.passcode1.tooltip":"Security code 1","enroll.symantecVip.passcode2.placeholder":"Security code 2","enroll.symantecVip.passcode2.tooltip":"Security code 2","enroll.yubikey.title":"Setup Yubikey","enroll.yubikey.subtitle":"Insert your Yubikey into a USB port and tap it to generate a verification code","enroll.totp.title":"Setup {0}","enroll.totp.selectDevice":"Select your device type","enroll.totp.downloadApp":'Download <a href="{0}" class="inline-link">{1} from the {2}</a> onto your mobile device.',"enroll.totp.installApp":"Install {0}","enroll.duo.title":"Setup Duo Security","enroll.windowsHello.title":"Enroll Windows Hello",
	"enroll.windowsHello.subtitle":"Click below to enroll Windows Hello as a second form of authentication","enroll.windowsHello.subtitle.loading":"Please wait while Windows Hello is loading...","enroll.windowsHello.save":"Enroll Windows Hello","enroll.windowsHello.error.notWindows":"Windows Hello can only be used on Windows Edge with Windows 10. Contact your admin for assistance.","enroll.windowsHello.error.notConfiguredHtml":"Windows Hello is not configured. Select the <b>Start</b> button, then select <b>Settings</b> &gt; <b>Accounts</b> &gt; <b>Sign-in</b> to configure Windows Hello.","verify.windowsHello.subtitle":"Verify your identity with Windows Hello","verify.windowsHello.subtitle.loading":"Please wait while Windows Hello is loading...","verify.windowsHello.subtitle.signingIn":"Signing into Okta...","verify.windowsHello.save":"Verify with Windows Hello","verify.windowsHello.error.notFound":"Your Windows Hello enrollment does not match our records. Contact your administrator for assistance.","verify.windowsHello.error.notFound.selectAnother":"Your Windows Hello enrollment does not match our records. Select another factor or contact your administrator for assistance.","enroll.u2f.title":"Setup Security Key (U2F)","enroll.u2f.save":"Register Security Key","enroll.u2f.general1":"If using Firefox download and install the U2F browser extension.","enroll.u2f.general2":"Make sure you have a Security Key. If already inserted, remove it now.<br>If you have a Bluetooth Security Key, turn on your computer's Bluetooth.","enroll.u2f.general3":"Click the button below to register","enroll.u2f.instructions":"Insert your Security Key into a USB port on this computer. If it has a button or gold disk, tap it.","enroll.u2f.instructionsBluetooth":"If you are using a Bluetooth Security Key, press the button.","u2f.error.notSupportedBrowser":"The Security Key is only supported for Chrome or Firefox browsers. Select another factor or contact your admin for assistance.","u2f.error.notSupportedBrowser.oneFactor":"The Security Key is only supported for Chrome or Firefox browsers. Contact your admin for assistance.","u2f.error.noFirefoxExtension":'<a target="_blank" href="https://addons.mozilla.org/en-US/firefox/addon/u2f-support-add-on/">Download</a> and install the Firefox U2F browser extension before proceeding. You may be required to restart your browser after installation.',"u2f.error.other":"An unknown error has occured. Try again or select another factor.","u2f.error.other.oneFactor":"An unknown error has occured. Try again or contact your admin for assistance.","u2f.error.badRequest":"There was an error with the U2F request. Try again or select another factor.","u2f.error.badRequest.oneFactor":"There was an error with the U2F request. Try again or contact your admin for assistance.","u2f.error.unsupported":"The security key is unsupported. Select another factor.","u2f.error.unsupported.oneFactor":"The security key is unsupported. Contact your admin for assistance.","u2f.error.timeout":"You have timed out of the authentication period. Please try again.","verify.u2f.instructions":"Insert your Security Key. If it has a button or gold disk, tap it.","verify.u2f.instructionsBluetooth":"If you are using a Bluetooth Security Key, turn on your computer's Bluetooth and press the button.","verify.u2f.retry":"Retry","enroll.totp.enterCode":"Enter code displayed from the application","enroll.totp.setupApp":"Launch {0} application on your mobile device and select Add an account.","enroll.totp.setupGoogleAuthApp":'Launch {0}, tap the "+" icon, then select "Scan barcode".',"enroll.totp.cannotScan":"Can't scan?","enroll.totp.refreshBarcode":"Refresh code","enroll.totp.cannotScanBarcode":"Can't scan barcode?","enroll.totp.manualSetupInstructions":"To set up manually enter your Okta Account username and then input the following in the Secret Key Field","enroll.totp.sharedSecretInstructions":"Enter your Okta Account username and enter the following in the Secret Key Field","enroll.totp.sendSms":"Send activation link via SMS","enroll.totp.sendEmail":"Send activation link via email","enroll.totp.setupManually":"Setup manually without push notification","enroll.totp.enrollViaEmail.title":"Activation email sent!","enroll.totp.enrollViaEmail.msg":"Open the email from your mobile device.","enroll.totp.enrollViaSms.title":"SMS sent!","enroll.totp.enrollViaSms.msg":"View the SMS on your mobile device.","recoveryChallenge.sms.title":"Enter verification code sent via SMS","recoveryChallenge.call.title":"Enter verification code received via Voice Call","mfa.factors.dropdown.title":"Select an authentication factor","mfa.duoSec", "base64"));
  res.write(new Buffer("urity.push":"Push — {0}","mfa.duoSecurity.sms":"SMS — {0}","mfa.duoSecurity.call":"Call — {0}","mfa.challenge.title":"Enter your {0} passcode","mfa.challenge.orEnterCode":"Or enter code","oktaverify.send":"Send Push","oktaverify.resend":"Re-send Push","oktaverify.sent":"Push sent!","oktaverify.rejected":"You have chosen to reject this login.","oktaverify.timeout":"Your push notification has expired.","oktaverify.warning":"Haven't received a push notification yet? Try opening the Okta Verify App on your phone.","primaryauth.title":"Sign In","primaryauth.username.placeholder":"Username","primaryauth.username.tooltip":"Username","primaryauth.password.placeholder":"Password","primaryauth.password.tooltip":"Password","primaryauth.submit":"Sign In","primaryauth.newUser.tooltip":"This is the first time you are connecting to {0} from this browser","primaryauth.newUser.tooltip.close":"Close","password.forgot.email.or.username.placeholder":"Email or Username","password.forgot.email.or.username.tooltip":"Email or Username","password.forgot.sendText":"Reset via SMS","password.forgot.sendEmail":"Reset via Email","password.forgot.call":"Reset via Voice Call","password.forgot.emailSent.title":"Email sent!","password.forgot.emailSent.desc":"Email has been sent to {0} with instructions on resetting your password.","password.forgot.question.title":"Answer Forgotten Password Challenge","password.forgot.question.submit":"Reset Password","password.forgot.sms.notReceived":"Didn't receive an SMS? Reset via email","password.forgot.code.notReceived":"Didn't receive a code? Reset via email","password.reset.title":"Reset your Okta password","password.complexity.description":"Your password must have {0}.","password.complexity.history":"Your password cannot be any of your last {0} passwords.","password.complexity.minAgeMinutes":"At least {0} minute(s) must have elapsed since you last changed your password.","password.complexity.minAgeHours":"At least {0} hour(s) must have elapsed since you last changed your password.","password.complexity.minAgeDays":"At least {0} day(s) must have elapsed since you last changed your password.","password.complexity.length":"at least {0} characters","password.complexity.list.element":", {0}","password.complexity.lowercase":"a lowercase letter","password.complexity.uppercase":"an uppercase letter","password.complexity.number":"a number","password.complexity.symbol":"a symbol","password.complexity.no_username":"no parts of your username","password.expired.submit":"Change Password","password.expired.title":"Your Okta password has expired","password.expiring.later":"Remind me later","password.expiring.title":"Your password will expire in {0} days","password.expiring.today":"Your password will expire later today","password.expiring.subtitle":"When password expires you may be locked out of Okta Mobile, mobile email, and other services.","password.expired.custom.submit":"Go to {0}","password.expired.custom.subtitle":"This password is set on another website. Click the button below to go there and set a new password.","account.unlock.title":"Unlock account","account.unlock.email.or.username.placeholder":"Email or username","account.unlock.email.or.username.tooltip":"Email or username","account.unlock.sendText":"Send SMS","account.unlock.sendEmail":"Send Email","account.unlock.emailSent.title":"Email sent!","account.unlock.emailSent.desc":"Email has been sent to {0} with instructions on unlocking your account.","account.unlock.question.title":"Answer Unlock Account Challenge","account.unlock.question.submit":"Unlock Account","account.unlock.unlocked.title":"Account successfully unlocked!","account.unlock.unlocked.desc":"You can log in using your existing username and password.","account.unlock.sms.notReceived":"Didn't receive an SMS? Unlock via email","contact.support":"If you didn't provide a secondary email address or don't have access to email, please contact your administrator at {0}","socialauth.divider.text":"OR","socialauth.facebook.label":"Sign in with Facebook","socialauth.google.label":"Sign in with Google","socialauth.linkedin.label":"Sign in with LinkedIn","socialauth.microsoft.label":"Sign in with Microsoft","socialauth.popup.title":"External Identity Provider User Authentication","authbutton.divider.text":"or","registration.signup.label":"Don't have an account?","registration.signup.text":"Sign up","registration.complete.title":"Verification email sent","registration.complete.desc":"We just sent a verification email to {0}. Please check your email and verify your account to continue.","registration.form.title":"Create Account","registration.form.submit":"Register","registration.passwordComplexity.minLength":"At least {0} character(s)","registration.passwordComplexity.minLowerCase":"At least {0} lowercase letter(s)","registration.passwordComplexity.minUpperCase":"At least {0} uppercase letter(s)","registration.passwordComplexity.minNumber":"At least {0} number(s)","registration.passwordComplexity.minSymbol":"At least {0} symbol(s)","registration.passwordComplexity.excludeUsername":"Does not contain part of username","piv.card":"PIV Card","piv.card.insert":"Please insert your PIV card and select the user certificate.","piv.card.error":"Certificate authentication failed. Contact your admin.","piv.card.error.empty":"No certificate selected. Choose a certificate and try again.","piv.card.error.invalid":"Certificate validation failed. Choose another certificate and try again.","unsupported.oneDrive.title":"Your OneDrive version is not supported","unsupported.oneDrive.desc":"Upgrade now by installing the OneDrive for Business Next Generation Sync Client to login to Okta","unsupported.oneDrive.action":"Learn how to upgrade","unsupported.cookies.title":"Cookies are required","unsupported.cookies.desc":"Cookies are disabled on your browser. Please enable Cookies and refresh this page.","unsupported.cookies.action":"Refresh ","deviceTrust.sso.text":"Sign in to access company resources","deviceTrust.sso.hint":"Easily get company resources using Okta Mobile to sign in to apps from your secure device.","deviceTrust.sso.button":"Sign in using Okta Mobile","deviceTrust.sso.expire.title":"Oops let's get you back on track","deviceTrust.sso.expire.subtitle":"Unfortunately the steps required to sign in took longer than expected and your attempt timed out.","deviceTrust.sso.expire.button":"Sign in using Okta Mobile","deviceTrust.universalLink.fallback.getOktaMobile.title":"Get Okta Mobile","deviceTrust.universalLink.fallback.getOktaMobile.subtitle":"Go to the {0}AppStore{1}, {0}search{1} for {0}Okta Mobile{1} and tap on {0}GET{1} Okta Mobile. Once installed, sign in to Okta Mobile and follow the instructions to secure your device.","registration.emailSent.title":"Verification email sent","registration.emailSent.desc":"We just sent a verification email to {0}. Please check your email and verify your account to continue."}},function(t,e){t.exports={AF:"Afghanistan",AX:"Åland Islands",AL:"Albania",DZ:"Algeria",AS:"American Samoa",AD:"Andorra",AO:"Angola",AI:"Anguilla",AQ:"Antarctica",AG:"Antigua and Barbuda",AR:"Argentina",AM:"Armenia",AW:"Aruba",AU:"Australia",AT:"Austria",AZ:"Azerbaijan",BS:"Bahamas",BH:"Bahrain",BD:"Bangladesh",BB:"Barbados",BY:"Belarus",BE:"Belgium",BZ:"Belize",BJ:"Benin",BM:"Bermuda",BT:"Bhutan",BO:"Bolivia, Plurinational State of",BA:"Bosnia and Herzegovina",BW:"Botswana",BV:"Bouvet Island",BR:"Brazil",IO:"British Indian Ocean Territory",VG:"Virgin Islands, British",BN:"Brunei Darussalam",BG:"Bulgaria",BF:"Burkina Faso",BI:"Burundi",KH:"Cambodia",CM:"Cameroon",CA:"Canada",CV:"Cape Verde",KY:"Cayman Islands",CF:"Central African Republic",TD:"Chad",CL:"Chile",CN:"China",CX:"Christmas Island",CO:"Colombia",KM:"Comoros",CG:"Congo",CK:"Cook Islands",CR:"Costa Rica",CI:"Côte d'Ivoire",HR:"Croatia",CU:"Cuba",CY:"Cyprus",CZ:"Czech Republic",CD:"Congo, the Democratic Republic of the",DK:"Denmark",DJ:"Djibouti",DM:"Dominica",DO:"Dominican Republic",TL:"Timor-Leste",EC:"Ecuador",EG:"Egypt",SV:"El Salvador",GQ:"Equatorial Guinea",ER:"Eritrea",EE:"Estonia",ET:"Ethiopia",FK:"Falkland Islands (Malvinas)",FO:"Faroe Islands",FJ:"Fiji",FI:"Finland",FR:"France",GF:"French Guiana",PF:"French Polynesia",TF:"French Southern Territories",GA:"Gabon",GM:"Gambia",GE:"Georgia",DE:"Germany",GH:"Ghana",GI:"Gibraltar",GR:"Greece",GL:"Greenland",GD:"Grenada",GP:"Guadeloupe",GU:"Guam",GT:"Guatemala",GG:"Guernsey",GN:"Guinea",GW:"Guinea-Bissau",GY:"Guyana",HT:"Haiti",HM:"Heard Island and McDonald Islands",HN:"Honduras",HK:"Hong Kong",HU:"Hungary",IS:"Iceland",IN:"India",ID:"Indonesia",IR:"Iran, Islamic Republic of",IQ:"Iraq",IE:"Ireland",IL:"Israel",IT:"Italy",JM:"Jamaica",JP:"Japan",JE:"Jersey",JO:"Jordan",KZ:"Kazakhstan",KE:"Kenya",KI:"Kiribati",KR:"Korea, Republic of",KW:"Kuwait",KG:"Kyrgyzstan",LA:"Lao People's Democratic Republic",LV:"Latvia",LB:"Lebanon",LS:"Lesotho",LR:"Liberia",LY:"Libya",LI:"Liechtenstein",LT:"Lithuania",LU:"Luxembourg",MO:"Macao",MK:"Macedonia, the former Yugoslav Republic of",MG:"Madagascar",MW:"Malawi",MY:"Malaysia",MV:"Maldives",ML:"Mali",MT:"Malta",MH:"Marshall Islands",MQ:"Martinique",MR:"Mauritania",MU:"Mauritius",YT:"Mayotte",MX:"Mexico",FM:"Micronesia, Federated States of",MD:"Moldova, Republic of",MC:"Monaco",MN:"Mongolia",ME:"Montenegro",MS:"Montserrat",MA:"Morocco",MZ:"Mozambique",MM:"Myanmar",NA:"Namibia",NR:"Nauru",NP:"Nepal",NL:"Netherlands",AN:"Netherlands Antilles",NC:"New Caledonia",NZ:"New Zealand",NI:"Nicaragua",NE:"Niger",NG:"Nigeria",NU:"Niue",NF:"Norfolk Island",KP:"Korea, Democratic People's Republic of",MP:"Northern Mariana Islands",NO:"Norway",OM:"Oman",PK:"Pakistan",PW:"Palau",PS:"Palestine, State of",PA:"Panama",PG:"Papua New Guinea",PY:"Paraguay",PE:"Peru",PH:"Philippines",PN:"Pitcairn",PL:"Poland",PT:"Portugal",PR:"Puerto Rico",QA:"Qatar",RE:"Réunion",RO:"Romania",RU:"Russian Federation",RW:"Rwanda",SH:"Saint Helena, Ascension and Tristan da Cunha",KN:"Saint Kitts and Nevis",LC:"Saint Lucia",PM:"Saint Pierre and Miquelon",VC:"Saint Vincent and the Grenadines",WS:"Samoa",SM:"San Marino",ST:"São Tomé and Príncipe",SA:"Saudi Arabia",SN:"Senegal",RS:"Serbia",SC:"Seychelles",SL:"Sierra Leone",SG:"Singapore",SK:"Slovakia",SI:"Slovenia",SB:"Solomon Islands",SO:"Somalia",ZA:"South Africa",GS:"South Georgia and the South Sandwich Islands",SS:"South Sudan",ES:"Spain",LK:"Sri Lanka",SD:"Sudan",SR:"Suriname",SJ:"Svalbard and Jan Mayen",SZ:"Swaziland",SE:"Sweden",CH:"Switzerland",SY:"Syrian Arab Republic",TW:"Taiwan",TJ:"Tajikistan",TZ:"Tanzania, United Republic of",TH:"Thailand",TG:"Togo",TK:"Tokelau",TO:"Tonga",TT:"Trinidad and Tobago",TN:"Tunisia",TR:"Turkey",TM:"Turkmenistan",TC:"Turks and Caicos Islands",TV:"Tuvalu",VI:"Virgin Islands, U.S.",UG:"Uganda",UA:"Ukraine",AE:"United Arab Emirates",GB:"United Kingdom",US:"United States",UM:"United States Minor Outlying Islands",UY:"Uruguay",UZ:"Uzbekistan",VU:"Vanuatu",VA:"Holy See (Vatican City State)",VE:"Venezuela, Bolivarian Republic of",VN:"Viet Nam",WF:"Wallis and Futuna",EH:"Western Sahara",YE:"Yemen",ZM:"Zambia",ZW:"Zimbabwe"}},function(t,e,i){var n,r;n=[i(2),i(144)],r=function(t,e){return t.extend(e,{deprecate:function(t){e.warn("[okta-signin-widget] DEPRECATED:",t)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2)],r=function(t){var e={},i="withCredentials"in new window.XMLHttpRequest,n="undefined"!=typeof XDomainRequest;return e.corsIsNotSupported=function(){return!(i||n)},e.corsIsNotEnabled=function(t){return 0===t.status},e.localStorageIsNotSupported=function(){var t="test";try{return localStorage.setItem(t,t),localStorage.removeItem(t),!1}catch(e){return!0}},e.supportsPushState=function(t){return t=t||window,!(!t.history||!t.history.pushState)},e.isIE=function(){return/(msie|trident)/i.test(navigator.userAgent)},e.isFirefox=function(){return navigator.userAgent.toLowerCase().indexOf("firefox")>-1},e.getUserLanguages=function(){var e,i;return navigator.languages?navigator.languages:(e=[],i=["language","userLanguage","browserLanguage","systemLanguage"],t.each(i,function(t){navigator[t]&&e.push(navigator[t])}),e)},e}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(5),i(2),i(184),i(150)],r=function(t,e,i,n){return n.extend({constructor:function(e){this.__hasDefaultRoute=!1;var r=this.__tabsWidget=new i;r.render();var s=t(e.el);e.el=r.content(),t(function(){s.append(r.el)}),n.call(this,e)},tab:function(t,i,n,r){var s=e.isArray(t)?t:[t];return this.__addTab({routes:s,method:i,label:n,subtabs:r}),this},__addTab:function(t){this.__hasDefaultRoute||(this.route("",t.method),this.__hasDefaultRoute=!0),t.subtabs&&t.subtabs.length&&this.__addSubTabs(e.extend(e.pick(t,"routes","subtabs"))),e.each(t.routes,function(e){this.route(e,t.method)},this);var i=e.first(t.routes);this.__tabsWidget.addTab(e.extend(e.pick(t,"label","method","subtabs"),{route:i,router:this}))},__addSubTabs:function(t){e.each(t.subtabs,function(i){var n=t.routes+"/"+i.routes;this.route(n,i.method),this.__tabsWidget.addSubTab(e.extend(e.pick(i,"label","method"),{route:n,router:this}))},this)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(146),i(185),i(186)],r=function(t,e,i){return t.extend({className:"clearfix ui-tabs ui-widget ui-widget-content ui-corner-all",template:'<ul role="tablist" class="ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all ui-tabs-margin"></ul><div role="subtabs" class="ui-subtabs ui-helper-reset ui-tabs-margin"></div><div role="tabpanel" class="ui-tabs-panel ui-widget-content ui-corner-bottom"></div>',content:function(){return this.$("div.ui-tabs-panel")},addTab:function(t){this.add(e,"ul",{options:t})},addSubTab:function(t){this.add(i,"div.ui-subtabs",{options:t})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(146)],r=function(t,e){return e.extend({tagName:"li",className:"ui-state-default ui-corner-top",attributes:{role:"tab"},template:'<a class="ui-tabs-anchor" role="presentation" href="{{route}}">{{label}}</a>',events:{"click a":function(t){t.preventDefault(),t.stopPropagation(),this.router.navigate(this.route,{trigger:!0})}},initialize:function(){t.extend(this,t.pick(this.options,"route","router","method")),this.listenTo(this.router,"route",this.toggle)},toggle:function(e){if(this.$el.toggleClass("ui-state-active ui-tabs-selected",e==this.method),this.options.subtabs&&this.options.subtabs.length)if(e!=this.method)t.each(this.options.subtabs,function(t){t.method==e&&this.$el.addClass("ui-state-active ui-tabs-selected")},this);else{this.$el.parent().parent().find(".ui-subtabs li:first-child").addClass("ui-state-active ui-tabs-selected");var i=this.options.route+"/"+this.options.subtabs[0].routes;this.router.navigate(i,{trigger:!0})}else this.$el.parent().parent().find(".ui-subtabs").toggle(e!=this.method)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(146)],r=function(t,e){return e.extend({tagName:"li",className:"subtab ui-state-default ui-corner-top",attributes:{role:"subtab"},template:'<a class="sub-tab-link ui-tabs-anchor" role="presentation" href="{{route}}">{{label}}</a>',events:{"click a":function(t){t.preventDefault(),t.stopPropagation(),this.router.navigate(this.route,{trigger:!0})}},initialize:function(){t.extend(this,t.pick(this.options,"route","router","method")),this.listenTo(this.router,"route",this.toggle)},toggle:function(t){this.$el.toggleClass("ui-state-active ui-tabs-selected",t==this.method),this.$el.parent().parent().find(".ui-tabs-panel").addClass("subtab-content"),this.$el.parent().parent().find(".ui-subtabs").addClass("subtabs-panel")}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){!(t.exports={DEBOUNCE_DELAY:200,LOADING_FADE:400,UNLOADING_FADE:400,ROW_EXPANDER_TRANSITION:150,HIDE_ADD_MAPPING_FORM:300})},function(t,e,i){var n,r;n=[i(36)],r=function(t){var e={MILLISECOND:"milliseconds",SECOND:"seconds",MINUTE:"minutes",HOUR:"hours",DAY:"days"};return{MINUTES_HOURS_DAYS:{MINUTE:"Minutes",HOUR:"Hours",DAY:"Days"},MILLISECONDS_SECONDS_MINUTES:{MILLISECOND:"Milliseconds",SECOND:"Seconds",MINUTE:"Minutes"},convertToPDT:function(e,i,n){return i||(i="MMM DD, YYYY h:mm:ss A"),n||(n=""),e?t(e).utc().zone("-07:00").format(i):n},getTimeInHighestRelevantUnit:function(i,n){var r,s=t.duration(i,e[n]||n);return r=0!==s.milliseconds()?"milliseconds":0!==s.seconds()?"seconds":0!==s.minutes()?"minutes":0!==s.hours()?"hours":"days",{time:s.as(r),unit:this.convertMomentUnits(r)}},convertMomentUnits:function(t){switch(t){case"milliseconds":return"MILLISECOND";case"seconds":return"SECOND";case"minutes":return"MINUTE";case"hours":return"HOUR";case"days":return"DAY";default:throw new Error("Time unit not recognized: "+t)}},convertTimeUnit:function(i,n,r){return i=parseInt(i,10),n=e[n]||n,r=e[r]||r,t.duration(i,n).as(r)},convertTimeFormat:function(e,i,n){return n||(n="MMMM Do, YYYY"),t(e,i).format(n)}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e){},function(t,e,i){var n,r;n=[i(2)],r=function(t){return{redirect:function(t){window.location=t},reloadPage:function(){window.location.reload()},constantError:function(t){return function(){throw new Error(t)}},getUrlQueryString:function(e){t.isObject(e)||(e={});var i=t.without(t.map(e,function(t,e){if(void 0!==t&&null!==t)return e+"="+encodeURIComponent(t)}),void 0).join("&");return t.isEmpty(i)?"":"?"+i}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(146),i(192),i(194),i(195),i(247),i(267),i(283),i(284)],r=function(t,e,i,n,r,s,o,a){return{BaseView:t,ListView:e,TableView:i,components:n,datalist:r,forms:s,tabs:o,uploader:a}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(146),i(193)],r=function(t,e){return t.decorate(e)}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r,s;!function(o,a){r=[i(2),i(142)],n=a,s="function"==typeof n?n.apply(e,r):n,!(void 0!==s&&(t.exports=s))}(this,function(t,e){return e.extend({constructor:function(){if(e.apply(this,arguments),!this.collection)throw new Error("Missing collection");this.listenTo(this.collection,"reset sort",this.reset),this.listenTo(this.collection,"add",this.addItem),this.collection.each(this.addItem,this)},item:null,itemSelector:null,reset:function(){return this.removeChildren(),this.collection.each(this.addItem,this),this},addItem:function(t){var e=this.add(this.item,this.itemSelector,{options:{model:t}}).last();return e.listenTo(t,"destroy remove",e.remove),this}})})},function(t,e){},function(t,e,i){var n,r;n=[i(154),i(196),i(197),i(237),i(239),i(242),i(243),i(244),i(245)],r=function(t,e,i,n,r,s,o,a,l){return{BaseButtonLink:t,BaseDropDown:e,BaseFormDialog:i,BaseModalDialog:n,BaseSpinner:r,Callout:s,ConfirmationDialog:o,DropDown:a,MultiViewModalDialog:l}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(5),i(147),i(146)],r=function(t,e,i,n){var r=i.tpl('\t    <a class="icon-16 {{className}}" data-se="{{seleniumId}}">\t      {{#if icon}}\t      <span class="icon {{icon}}"></span>\t      {{/if}}\t      {{#if title}}\t      {{title}}\t      {{/if}}\t      {{#if subtitle}}\t        <p class="option-subtitle">{{subtitle}}</p>\t      {{/if}}\t   </a>\t   '),s=n.extend({tagName:"li",events:{click:function(t){t.preventDefault(),this.action&&this.action.call(this)}},constructor:function(){n.apply(this,arguments),this.$el.addClass("okta-dropdown-option option")},render:function(){return this.$el.html(r({icon:t.result(this,"icon"),className:t.result(this,"className")||"",title:t.result(this,"title"),subtitle:t.result(this,"subtitle"),seleniumId:t.result(this,"seleniumId")})),this}});return n.extend({events:{"click a.option-selected":function(e){e.preventDefault(),t.result(this,"disabled")&&e.stopPropagation()},"click .dropdown-disabled":function(t){t.preventDefault(),t.stopPropagation()}},items:[],constructor:function(){var e=this.className;this.className=null,n.apply(this,arguments),this.className=e,this.$el.addClass("dropdown more-actions float-l"),t.each(t.result(this,"items"),function(t){this.addOption(t,this.options)},this)},template:'\t      <a href="#" class="link-button {{className}} link-button-icon option-selected center">\t        {{#if icon}}\t        <span class="icon {{icon}}"></span>\t        {{/if}}\t        <span class="option-selected-text">{{title}}</span>\t        <span class="icon-dm"></span>\t      </a>\t      <div class="options clearfix" style="display: none;">\t      <ul class="okta-dropdown-list options-wrap clearfix"></ul>\t      </div>\t    ',getTemplateData:function(){var i=[t.result(this,"className")||"",t.result(this,"disabled")?"dropdown-disabled":""];return{icon:t.result(this,"icon"),className:e.trim(i.join(" ")),title:t.result(this,"title")}},addOption:function(t,e){this.add(s.extend(t),"ul.options-wrap",{options:e||{}})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(5),i(2),i(146),i(139),i(198)],r=function(t,e,i,n,r){var s=["save","noCancelButton","inputs","subtitle","autoSave","focus","cancel","danger","hasSavingState","customSavingState","parseErrorMessage"],o={layout:"o-form-wrap",scrollOnError:!1},a={minWidth:600,maxWidth:950,focus:!1,close:!1,autoResize:!1,autoPosition:!0};return i.extend({constructor:function(l){var c=r.extend(e.extend({},o,e.pick(this,s)));this.form=new c(e.omit(l,"title","subtitle")),this.listenTo(this.form,"resize",e.debounce(e.bind(this.resizeModal,this),100));var u=e.bind(this.remove,this);this.listenTo(this.form,"all",function(){this.trigger.apply(this,arguments),"cancel"===arguments[0]&&u()}),t(window).resize(e.debounce(e.bind(this.resizeModal,this),100));var d=n.extend({title:this.title,className:this.className,params:e.extend({},a,this.params)});this.dialog=new d(l),this.dialog.add(this.form),this.el=this.dialog.el,i.apply(this,arguments),this.form.getAttribute("autoSave")&&this.listenTo(this,"saved",this.remove)},form:void 0,dialog:void 0,addInput:function(){return this.form.addInput.apply(this.form,arguments)},addButton:function(){return this.form.addButton.apply(this.form,arguments)},addDivider:function(){return this.form.addDivider.apply(this.form,arguments)},addSectionTitle:function(){return this.form.addSectionTitle.apply(this.form,arguments)},add:function(){return this.form.add.apply(this.form,arguments)},render:function(){return this.preRender(),this.dialog.render.apply(this.dialog,arguments),e.defer(e.bind(this.resizeModal,this)),this.postRender(),this},remove:function(){return this.dialog.remove.apply(this.dialog,arguments),i.prototype.remove.apply(this,arguments)},resizeModal:function(){var i=t(".simplemodal-container-new"),n=this.form,r=i.height(),s=e.isNumber(this.dialog.params.minHeight)?this.dialog.params.minHeight:0,o=t(window).height();s<=r&&(r>=o?n.contentHeight(o-this.dialog.$("h2").outerHeight()-n.$(".o-form-button-bar").outerHeight()-(i.outerHeight(!0)-n.$el.outerHeight(!0))):n.contentHeight(n.contentHeight()+(o-r)-(i.outerHeight()-r)),this.dialog.resize.apply(this.dialog,arguments))},clearErrors:function(){return this.form.clearErrors.apply(this.form,arguments)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(5),i(147),i(177),i(146),i(200),i(230),i(199),i(232),i(234),i(225),i(233),i(235),i(236)],r=function(t,e,i,n,r,s,o,a,l,c,u,d,h,p){function f(t){if(!_&&this.$el.hasClass("o-form-saving")){var i=e(t.currentTarget);i.css("display","none");var n=document.elementFromPoint(t.clientX,t.clientY);return i.css("display","block"),t.target=n,e(n).trigger(t),!1}}var m='\t    {{#if hasReadMode}}\t      <h2 class="o-form-title-bar" data-se="o-form-title-bar">\t        {{title}}\t      </h2>\t    {{/if}}\t    <div data-se="o-form-content" class="o-form-content {{layout}} clearfix">\t      {{#unless hasReadMode}}\t        {{#if title}}\t          <h2 data-se="o-form-head" class="okta-form-title o-form-head">{{title}}</h2>\t        {{/if}}\t      {{/unless}}\t      {{#if subtitle}}\t        <p class="okta-form-subtitle o-form-explain" data-se="o-form-explain">{{subtitle}}</p>\t      {{/if}}\t      <div class="o-form-error-container" data-se="o-form-error-container"></div>\t      <div class="o-form-fieldset-container" data-se="o-form-fieldset-container"></div>\t    </div>\t  ',_="auto"===e("<div>").css({"pointer-events":"auto"})[0].style.pointerEvents,g={submit:function(t){t.preventDefault(),this.__save()}};t.each(["click","dblclick","mousedown","mouseup"],function(t){g[t+" .o-form-input"]=f});var v=function(e){e||(e={});var i=e&&e.collection||{};return{method:"POST",action:t.result(e,"urlRoot")||t.result(i,"url")||window.location.pathname,"data-se":"o-form"}},y=function(e,i){e||(e="");var n=[];return t.isString(e)&&(n=e.split(" ")),n=t.union(n,i),n.join(" ")};return r.extend({constructor:function(e){e||(e={}),this.options=e,this.id=t.uniqueId("form"),this.tagName="form",t.defaults(this.events,g),t.defaults(this.attributes,v(e.model)),this.__buttons=[],this.__errorFields={},this.__saveModelState(e.model),this.step&&(this.save||(this.save=this.totalSteps&&this.step!==this.totalSteps?"Next":"Finish"),this.className+=" wizard"),this.className+=" o-form",this.__toolbar=this.__createToolbar(e),r.call(this,e),t.each(t.result(this,"inputs")||[],function(t){this.__addLayoutItem(t)},this),this.add(this.__toolbar,""),this.listenTo(this.model,"change:__edit__",this.__applyMode),this.listenTo(this.model,"invalid error",t.throttle(function(t,e,i){this.__showErrors(t,e,i!==!1)},100,{trailing:!1})),this.listenTo(this.model,"form:resize",function(){this.trigger("resize")}),this.listenTo(this.model,"form:cancel",t.throttle(this.__cancel,100,{trailing:!1})),this.listenTo(this.model,"form:previous",t.throttle(this.__previous,100,{trailing:!1})),this.__save=t.throttle(this.__save,200,{trailing:!1}),this.listenTo(this.model,"form:save",function(){this.$el.submit()}),this.listenTo(this.model,"sync",function(){this.model.get("__edit__")&&this.model.set("__edit__",!1,{silent:!0}),this.__saveModelState(this.model),this.render()});var i=this.getAttribute("hasSavingState");if(this.getAttribute("autoSave")&&(this.listenTo(this,"save",function(e){var i=e.save();i&&i.done&&i.done(t.bind(function(){this.trigger("saved",e)},this))}),t.isUndefined(i)&&(i=!0)),i){var n=this.getAttribute("customSavingState",{});this.listenTo(this.model,y(n.start||"",["request"]),this.__setSavingState),this.listenTo(this.model,y(n.stop||"",["error","sync"]),this.__clearSavingState)}},__createToolbar:function(e){var i=this.getAttribute("danger"),r=i===!0?"button-error":"button-primary",s=new p(t.extend({save:this.save||n.localize("oform.save"),saveId:this.saveId,saveClassName:r,cancel:this.cancel||n.localize("oform.cancel"),noCancelButton:this.noCancelButton||!1,hasPrevStep:this.step&&this.step>1},e||this.options));return t.each(this.__buttons,function(t){s.addButton.apply(s,t)}),s},className:"",attributes:{},events:{},inputs:[],template:null,read:!1,readOnly:!1,noButtonBar:!1,noCancelButton:!1,save:null,cancel:null,danger:!1,layout:"",step:void 0,totalSteps:void 0,title:null,subtitle:null,autoSave:!1,scrollOnError:!0,showErrors:!0,resizeSelector:".o-form-content",getAttribute:function(e,i){var n=t.resultCtx(this.options,e,this);return t.isUndefined(n)&&(n=t.result(this,e)),t.isUndefined(n)?i:n},hasReadMode:function(){return!!this.getAttribute("read");
	},isReadOnly:function(){return!!this.getAttribute("readOnly")},hasButtonBar:function(){return!(this.getAttribute("noButtonBar")||this.isReadOnly())},render:function(){if(this.__readModeBar&&this.__readModeBar.remove(),this.hasReadMode()&&!this.isReadOnly()){var t=h.extend({formTitle:this.getAttribute("title","")});this.__readModeBar=this.add(t,".o-form-title-bar").last()}var e=i.tpl(m)({layout:this.getAttribute("layout",""),title:this.getAttribute("title","",!0),subtitle:this.getAttribute("subtitle","",!0),hasReadMode:this.hasReadMode()});return this.$el.html(e),delete this.template,r.prototype.render.apply(this,arguments),this.__applyMode(),this},__setSavingState:function(){this.model.trigger("form:set-saving-state"),this.$el.addClass("o-form-saving")},__clearSavingState:function(){this.model.trigger("form:clear-saving-state"),this.$el.removeClass("o-form-saving")},__toggleToolbar:function(){this.__toolbar&&this.__toolbar.remove(),this.hasButtonBar()&&this._editMode()&&(this.__toolbar=this.__createToolbar(),this.add(this.__toolbar,"")),this.trigger("resize")},__cancel:function(){var e=this.model.get("__edit__");this.model.clear({silent:!0});var i;i=this.model.sanitizeAttributes?this.model.sanitizeAttributes(this.__originalModel):t.clone(this.__originalModel),this.model.set(i,{silent:!0}),this.trigger("cancel",this.model),this.model.trigger("cache:clear"),e&&(this.model.set("__edit__",!1,{silent:!0}),this.model.trigger("change:__edit__",this.model,!1)),this.clearErrors()},isValid:function(){function e(e){return t.reduce(e,function(e,i){return t.extend(e,n.model.validateField(i))},{})}var i,n=this;return t.isUndefined(this.validate)?this.model.isValid():(t.isFunction(this.validate)?i=this.validate():t.isArray(this.validate)?i=e(this.validate):"local"===this.validate&&(i=e(this.getInputs().map(function(t){return t.options.name}))),!!t.isEmpty(i)||(this.model.trigger("invalid",this.model,i),!1))},__save:function(){this.clearErrors(),this.isValid()&&this.trigger("save",this.model)},__previous:function(){this.trigger("previous",this.model)},__applyMode:function(){this.clearErrors(),this.__toggleToolbar(),this._editMode()?(this.$el.addClass("o-form-edit-mode"),this.$el.removeClass("o-form-read-mode"),this.$(".o-form-content").removeClass("rounded-btm-4"),this.focus()):(this.$el.removeClass("o-form-edit-mode"),this.$el.addClass("o-form-read-mode"),this.$(".o-form-content").addClass("rounded-btm-4"))},_editMode:function(){return this.model.get("__edit__")||!this.hasReadMode()},parseErrorMessage:t.identity,__showErrors:function(i,r,s){if(this.trigger("error",i),this.getAttribute("showErrors")){var o,a=u.parseFieldErrors(r);if(t.size(a))t.each(a,function(e,i){this.model.trigger("form:field-error",this.__errorFields[i]||i,t.map(e,function(t){return/^model\.validation/.test(t)?n.localize(t):t}))},this);else{var l=u.getResponseJSON(r);l=this.parseErrorMessage(l),o=l&&l.errorSummary}if(s&&(this.$(".o-form-error-container").addClass("o-form-has-errors"),this.add(c,".o-form-error-container",{options:{errorSummary:o}})),this.getAttribute("scrollOnError")){var d=e("#"+this.id+" .o-form-error-container");d.length&&e("html, body").animate({scrollTop:d.offset().top},400)}this.model.trigger("form:resize")}},clearErrors:function(){this.$(".o-form-error-container").removeClass("o-form-has-errors"),this.model.trigger("form:clear-errors"),this.model.trigger("form:resize")},toggle:function(){return this.model.set("__edit__",!this.hasReadMode()||!this.model.get("__edit__")),this},__addLayoutItem:function(t){s.supports(t)?this.addInput(t):this.__addNonInputLayoutItem(t)},__addNonInputLayoutItem:function(e){var i=t.omit(e,"type");switch(e.type){case"sectionTitle":this.addSectionTitle(e.title,t.omit(i,"title"));break;case"divider":this.addDivider(i);break;default:throw new Error("unknown input: "+e.type)}},addButton:function(t,e){this.__toolbar&&this.__toolbar.addButton(t,e),this.__buttons.push([t,e])},addDivider:function(t){return this.add('<div class="okta-form-divider form-divider"></div>'),d.applyShowWhen(this.last(),t&&t.showWhen),this},addSectionTitle:function(t,e){return this.add(i.tpl('<h2 class="o-form-head">{{title}}</h2>')({title:t})),d.applyShowWhen(this.last(),e&&e.showWhen),this},addInput:function(e){e=t.clone(e),d.validateInput(e,this.model);var i=d.generateInputOptions(e,this,this.__createInput).reverse();t.isEmpty(this.getInputs().toArray())&&t.extend(i[0],{validateOnlyIfDirty:!0});var n=t.map(i,this.__createInput,this);t.each(i,function(t){t.errorField&&(this.__errorFields[t.errorField]=t.name)},this);var r={inputId:t.last(n).options.inputId,input:n,multi:i.length>1?i.length:void 0};t.extend(r,t.omit(this.options,"input"),t.omit(e,"input"));var s=this.__createWrapper(r);r.label!==!1&&s.add(this.__createLabel(r)),s.add(this._createContainer(r)),s.type=r.type||r.input.type||"custom";var o=[s].concat(t.drop(arguments,1));return this.add.apply(this,o)},__createInput:function(e){return e=t.pick(e,d.INPUT_OPTIONS),s.create(e)},__createWrapper:function(e){return e=t.pick(e,d.WRAPPER_OPTIONS),new l(e)},__createLabel:function(e){return e=t.pick(e,d.LABEL_OPTIONS),new o(e)},_createContainer:function(e){return e=t.pick(e,d.CONTAINER_OPTIONS),new a(e)},__saveModelState:function(t){this.__originalModel=t.clone().attributes},add:function(){var e=t.toArray(arguments);return"undefined"==typeof e[1]&&(e[1]="> div.o-form-content > .o-form-fieldset-container"),r.prototype.add.apply(this,e)},focus:function(){var t=this.getInputs().first();return t&&t.focus&&t.focus(),this},disable:function(){return this.invoke("disable"),this},enable:function(){this.invoke("enable")},contentHeight:function(e){var i=this.$(".o-form-content");return t.isNumber(e)?void i.css("max-height",e):i.height()},getInputs:function(){return t(this.filter(function(t){return t instanceof l}))}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(147),i(144),i(146)],r=function(t,e,i,n){function r(t){return t instanceof n||t.prototype instanceof n}return n.extend({attributes:function(){return{"data-se":"o-form-input-container"}},className:function(){var e="o-form-input";if(this.options.wide&&(e+=" o-form-wide"),t.contains([1,2,3,4],this.options.multi)&&(e+=" o-form-multi-input-"+this.options.multi,t.isArray(this.options.input))){var i=t.find(this.options.input,function(e){return t.contains(["text+select","select+text"],e.options.type)});i&&(e+=" o-form-multi-input-group-"+this.options.multi)}return e},_getNames:function(){var e=t.isArray(this.options.name)?this.options.name:[this.options.name];return"group"==this.options.type?e.push.apply(e,t.pluck(this.options.input[0].options.params.inputs,"name")):t.isArray(this.options.name)?this.options.input&&this.options.input.options&&this.options.input.options.name&&e.push(this.options.input.options.name):this.options.input&&(t.isArray(this.options.input)?t.each(this.options.input,function(t){e.push(t.options.name)}):e.push(this.options.input.options.name)),t.uniq(t.compact(e))},constructor:function(){n.apply(this,arguments),this.options.input&&(t.isArray(this.options.input)?t.each(this.options.input,function(t){this.add(t,{prepend:!0})},this):this.add(this.options.input,{prepend:!0})),this.__setExplain(this.options);var e=this._getNames();this.listenTo(this.model,"form:field-error",function(i,n){t.contains(e,i)&&this.__setError(n)}),this.listenTo(this.model,"form:clear-errors change:"+e.join(" change:"),this.__clearError),this.listenTo(this.model,"form:clear-error:"+e.join(" form:clear-error:"),this.__clearError),t.resultCtx(this.options,"autoRender",this)&&this.listenTo(this.model,"change:"+this.options.name,this.render),this.__errorState=!1},__setExplain:function(e){var n;return e.customExplain?(i.warn("Deprecated - use explain instead of customExplain"),void this.add(this.options.customExplain)):(n=e.explain,t.isFunction(n)&&!r(n)&&(n=t.resultCtx(this.options,"explain",this)),void(n&&(r(n)?(this.template='<p class="o-form-explain"></p>',this.add(n,".o-form-explain")):this.template='<p class="o-form-explain">{{explain}}</p>')))},__setError:function(t){this.__errorState=!0,this.$el.addClass("o-form-has-errors");var i=['<p class="okta-form-input-error o-form-input-error o-form-explain" role="alert">','<span class="icon icon-16 error-16-small"></span>',"{{text}}","</p>"].join(""),n=e.tpl(i)({text:t.join(", ")}),r=this.$(".o-form-explain").not(".o-form-input-error").first();r.length?r.before(n):this.$el.append(n)},__clearError:function(){this.__errorState&&(this.$(".o-form-input-error").remove(),this.$el.removeClass("o-form-has-errors"),this.__errorState=!1,t.defer(t.bind(function(){this.model.trigger("form:resize")},this)))},focus:function(){return this.each(function(t){if(t.focus)return t.focus()}),this}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(203),i(202),i(205),i(206),i(208),i(210),i(211),i(212),i(213),i(214),i(215),i(201),i(216),i(217),i(218),i(219),i(220),i(221),i(222),i(223),i(228),i(229)],r=function(t,e,i,n,r,s,o,a,l,c,u,d,h,p,f,m,_,g,v,y,b,w,M){function k(i,n){return i.prototype instanceof e?new i(t.omit(n,"input")):i}function T(e){if(e=t.clone(e),e.input)return k(e.input,e);var i;if(!L[e.type])throw new Error("unknown input: "+e.type);return i="select"==e.type&&t.size(e.options)>1e3?M:L[e.type],k(i,e)}function S(t){return!!t.input||t.type in L}var L={"file/image":b,"file/cert":w,select:r,textarea:n,radio:s,checkbox:o,text:i,password:i,number:u,textselect:a,"text+select":l,"select+text":l,date:c,grouppicker:d,userpicker:h,apppicker:p,appinstancepicker:f,"su-orgspicker":m,zonepicker:_,list:g,group:v,checkboxset:y};return{create:T,supports:S}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e){},function(t,e,i){var n,r;n=[i(147),i(203),i(173),i(204)],r=function(t,e,i){var n="okta-form-input-field input-fix";return e.extend({template:t.tpl('<input type="{{type}}" placeholder="{{placeholder}}"\t      name="{{name}}" id="{{inputId}}" value="{{value}}"/>'),events:{"input input":"update","change input":"update","keydown input":"update","keyup input":function(t){i.isEnter(t)?this.model.trigger("form:save"):i.isEsc(t)&&this.model.trigger("form:cancel")}},constructor:function(){e.apply(this,arguments),this.$el.addClass("o-form-control")},editMode:function(){this.$el.addClass(n),e.prototype.editMode.apply(this,arguments),this.$("input").placeholder()},readMode:function(){e.prototype.readMode.apply(this,arguments),"password"==this.options.type&&this.$el.text("********"),this.$el.removeClass(n)},val:function(){return this.$('input[type="'+this.options.type+'"]').val()},focus:function(){return this.$("input").focus()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(146)],r=function(t,e){return e.extend({tagName:"span",attributes:function(){return{"data-se":"o-form-input-"+this.getNameString()}},defaultPlaceholder:"",constructor:function(i){i=t.defaults(i||{},{inputId:i.id||t.uniqueId("input"),placeholder:this.defaultPlaceholder,inlineValidation:!0,validateOnlyIfDirty:!1}),delete i.id;var n=this;t.each({enable:"removeClass",disable:"addClass"},function(e,i){n[i]=t.wrap(n[i],function(t){t.apply(n,arguments),n.$el[e]("o-form-disabled")})}),e.call(this,i),t.result(i,"readOnly")!==!0&&t.result(i,"read")===!0&&this.listenTo(this.model,"change:__edit__",this.render),t.isFunction(this.focus)&&(this.focus=t.debounce(t.bind(this.focus,this),50)),t.result(i,"validateOnlyIfDirty")||this.addInlineValidation(),this.addModelListeners(),this.$el.addClass("o-form-input-name-"+this.getNameString())},addInlineValidation:function(){t.result(this.options,"inlineValidation")&&this.$el.on("focusout",":input",t.bind(this.validate,this))},toModelValue:function(){var e=this.val();return t.isFunction(this.to)&&(e=this.to.call(this,e)),t.isFunction(this.options.to)&&(e=this.options.to.call(this,e)),e},_isEdited:!1,update:function(){!this._isEdited&&t.result(this.options,"validateOnlyIfDirty")&&(this._isEdited=!0,this.addInlineValidation()),this.model.set(this.options.name,this.toModelValue())},isEditMode:function(){var e=!t.result(this.options,"readOnly")&&(t.result(this.options,"read")!==!0||this.model.get("__edit__")===!0);return e},render:function(){this.preRender();var e=this.options.params;return this.options.params=t.resultCtx(this.options,"params",this),this.isEditMode()?(this.editMode(),t.resultCtx(this.options,"disabled",this)?this.disable():this.enable()):this.readMode(),this.options.params=e,this.postRender(),this},validate:function(){if(!this.model.get("__pending__")&&this.isEditMode()&&t.isFunction(this.model.validateField)){var e=this.model.validateField(this.options.name);e&&t.delay(function(){this.model.trigger("form:clear-error:"+this.options.name),this.model.trigger("invalid",this.model,e,!1)}.bind(this),100)}},addModelListeners:function(){this.listenTo(this.model,"form:field-error",function(t){this.options.name===t&&this.__markError()}),this.listenTo(this.model,"form:clear-errors change:"+this.options.name,this.__clearError),this.listenTo(this.model,"form:clear-error:"+this.options.name,this.__clearError)},val:function(){throw new Error("val() is an abstract method")},focus:function(){throw new Error("focus() is an abstract method")},defaultValue:function(){return""},editMode:function(){var e=t.extend({},this.options,{value:this.getModelValue()});return this.$el.html(this.template(e)),this.options.multi&&this.$el.removeClass("margin-r"),this},readMode:function(){return this.$el.text(this.getReadModeString()),this.$el.removeClass("error-field"),this.options.multi&&this.$el.addClass("margin-r"),this},getReadModeString:function(){var e=t.resultCtx(this.options,"readModeString",this);return e?e:this.toStringValue()},getModelValue:function(){var e=this.model.get(this.options.name);return t.isFunction(this.from)&&(e=this.from.call(this,e)),t.isFunction(this.options.from)&&(e=this.options.from.call(this,e)),e},toStringValue:function(){var t=this.getModelValue();return this.options.options&&(t=this.options.options[t]),t||this.defaultValue()},resize:function(){this.model.trigger("form:resize")},disable:function(){this.$(":input").prop("disabled",!0)},enable:function(){this.$(":input").prop("disabled",!1)},changeType:function(t){this.$(":input").prop("type",t),this.options.type=t},getNameString:function(){return t.isArray(this.options.name)?this.options.name.join("-"):this.options.name},getParams:function(e){var i=e||this.options||{};return t.clone(t.resultCtx(i,"params",this)||{})},getParam:function(e,i){var n=t.resultCtx(this.getParams(),e,this);return t.isUndefined(n)?i:n},getParamOrAttribute:function(e){return this.getParam(e)||t.result(this,e)},__markError:function(){this.$el.addClass("o-form-has-errors")},__clearError:function(){this.$el.removeClass("o-form-has-errors")}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){(function(){var t=i(6);!function(t,e,i){function n(t){var e={},n=/^jQuery\d+$/;return i.each(t.attributes,function(t,i){i.specified&&!n.test(i.name)&&(e[i.name]=i.value)}),e}function r(t,e){var n=this,r=i(n);if(n.value==r.attr("placeholder")&&r.hasClass("placeholder"))if(r.data("placeholder-password")){if(r=r.hide().next().show().attr("id",r.removeAttr("id").data("placeholder-id")),t===!0)return r[0].value=e;r.focus()}else n.value="",r.removeClass("placeholder"),n==o()&&n.select()}function s(){var t,e=this,s=i(e),o=this.id;if(""==e.value){if("password"==e.type){if(!s.data("placeholder-textinput")){try{t=s.clone().attr({type:"text"})}catch(a){t=i("<input>").attr(i.extend(n(this),{type:"text"}))}t.removeAttr("name").data({"placeholder-password":s,"placeholder-id":o}).bind("focus.placeholder",r),s.data({"placeholder-textinput":t,"placeholder-id":o}).before(t)}s=s.removeAttr("id").hide().prev().attr("id",o).show()}s.addClass("placeholder"),s[0].value=s.attr("placeholder")}else s.removeClass("placeholder")}function o(){try{return e.activeElement}catch(t){}}var a,l,c="placeholder"in e.createElement("input"),u="placeholder"in e.createElement("textarea"),d=i.fn,h=i.valHooks,p=i.propHooks;c&&u?(l=d.placeholder=function(){return this},l.input=l.textarea=!0):(l=d.placeholder=function(){var t=this;return t.filter((c?"textarea":":input")+"[placeholder]").not(".placeholder").bind({"focus.placeholder":r,"blur.placeholder":s}).data("placeholder-enabled",!0).trigger("blur.placeholder"),t},l.input=c,l.textarea=u,a={get:function(t){var e=i(t),n=e.data("placeholder-password");return n?n[0].value:e.data("placeholder-enabled")&&e.hasClass("placeholder")?"":t.value},set:function(t,e){var n=i(t),a=n.data("placeholder-password");return a?a[0].value=e:n.data("placeholder-enabled")?(""==e?(t.value=e,t!=o()&&s.call(t)):n.hasClass("placeholder")?r.call(t,!0,e)||(t.value=e):t.value=e,n):t.value=e}},c||(h.input=a,p.value=a),u||(h.textarea=a,p.value=a),i(function(){i(e).delegate("form","submit.placeholder",function(){var t=i(".placeholder",this).each(r);setTimeout(function(){t.each(s)},10)})}),i(t).bind("beforeunload.placeholder",function(){i(".placeholder").each(function(){this.value=""})}))}(this,document,t)}).call(window)},function(t,e){},function(t,e,i){var n,r;n=[i(5),i(2),i(173),i(147),i(203),i(207)],r=function(t,e,i,n,r){function s(t){return this.params.autoWidth?t.call(this):e.defer(e.bind(t,this))}function o(e){e.$select.hide();var i=t(e.$select[0]).hide();t("body").append(i);var n=e.params.width=1.2*i.width()+"px";return e.$el.append(i.show()),n}function a(e,i,n){var r=n.offset();e.css({left:r.left,top:r.top});var s=t(window),o=i.outerHeight(),a=o+i.offset().top-s.scrollTop(),l=s.height()-d,c=Math.min(o+l-a,h);i.css("max-height",c)}function l(i){var n=i.next(".chzn-container"),r=n.clone(),s=n.find(".chzn-results");r.css("visibility","hidden"),r.removeAttr("id"),r.find("li").removeAttr("id");var o={left:n.css("left"),top:n.css("top"),position:n.css("position"),"float":n.css("float"),"z-index":n.css("z-index")};s.hide();var l=e.debounce(function(){a(n,s,r)},10);i.on("liszt:showing_dropdown",function(){n.width(n.width()),i.after(r),n.css({position:"absolute","float":"none","z-index":p,top:-999999}),t("body").append(n),s.show(),a(n,s,r),i.parents().scroll(l),t(window).on("resize scroll",l)}),i.on("liszt:hiding_dropdown remove",function(){i.parents().off("scroll",l),t(window).off("resize scroll",l),n.css(o),s.hide(),s.css("max-height",h),r.remove(),i.after(n)})}var c=n.tpl('<select id="{{inputId}}" name="{{name}}"></select>'),u=n.tpl('<option value="{{key}}">{{value}}</option>'),d=20,h=240,p=5e4;return r.extend({className:"o-form-select",events:{"change select":"update","keyup .chzn-search > :text":function(t){i.isEsc(t)&&(this.$(".chzn-search > :text").val(""),t.stopPropagation())}},constructor:function(){r.apply(this,arguments),this.params=this.options.params||{}},editMode:function(){this.$el.html(c(this.options)),this.$select=this.$("select");var t=this.getOptions();e.each(t,function(t,e){this.$select.append(u({key:e,value:t}))},this);var i=this.getModelValue();return i?this.$select.val(i):this.$("option:first-child").prop("selected",!0),this.$el.addClass("o-form-control"),this.params.chosen!==!1&&this.__applyChosen(),this},__applyChosen:function(){var t=this.options.wide?"100%":this.params.width||"62%";this.params.autoWidth&&(t=o(this)),s.call(this,function(){var i=this.getParam("searchThreshold",10);e.result(this.options,"autoRender")||this.update(),this.$select.chosen({width:t,disable_search_threshold:i,placeholder_text:this.options.placeholder}),l(this.$select),this.params.autoWidth&&this.$el.width(0),this.model.trigger("form:resize")})},val:function(){return this.$select&&this.$select.val()},focus:function(){if(this.$select)return this.$select.focus()},toStringValue:function(){var t=this.getModelValue(),i=t,n=this.getOptions();return e.isEmpty(n)||(i=n[t]),e.isUndefined(i)&&(i=this.defaultValue()),i||""},getOptions:function(){var t=this.options.options;return e.isFunction(t)&&(t=t.call(this)),e.isObject(t)?t:{}},remove:function(){return this.$select&&this.$select.trigger("remove"),r.prototype.remove.apply(this,arguments)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(6)],r=function(t){(function(){var t;t=function(){function t(){this.options_index=0,this.parsed=[]}return t.prototype.add_node=function(t){return"OPTGROUP"===t.nodeName.toUpperCase()?this.add_group(t):this.add_option(t)},t.prototype.add_group=function(t){var e,i,n,r,s,o;for(e=this.parsed.length,this.parsed.push({array_index:e,group:!0,label:t.label,children:0,disabled:t.disabled}),s=t.childNodes,o=[],n=0,r=s.length;n<r;n++)i=s[n],o.push(this.add_option(i,e,t.disabled));return o},t.prototype.add_option=function(t,e,i){if("OPTION"===t.nodeName.toUpperCase())return""!==t.text?(null!=e&&(this.parsed[e].children+=1),this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,value:t.value,text:t.text,html:t.innerHTML,selected:t.selected,disabled:i===!0?i:t.disabled,group_array_index:e,classes:t.className,style:t.style.cssText})):this.parsed.push({array_index:this.parsed.length,options_index:this.options_index,empty:!0}),this.options_index+=1},t}(),t.select_to_array=function(e){var i,n,r,s,o;for(n=new t,o=e.childNodes,r=0,s=o.length;r<s;r++)i=o[r],n.add_node(i);return n.parsed},this.SelectParser=t}).call(this),function(){var t,e;e=this,t=function(){function t(e,i){this.form_field=e,this.options=null!=i?i:{},t.browser_is_supported()&&(this.is_multiple=this.form_field.multiple,this.set_default_text(),this.set_default_values(),this.setup(),this.set_up_html(),this.register_observers(),this.finish_setup())}return t.prototype.set_default_values=function(){var t=this;return this.click_test_action=function(e){return t.test_active_click(e)},this.activate_action=function(e){return t.activate_field(e)},this.active_field=!1,this.mouse_on_container=!1,this.results_showing=!1,this.result_highlighted=null,this.result_single_selected=null,this.allow_single_deselect=null!=this.options.allow_single_deselect&&null!=this.form_field.options[0]&&""===this.form_field.options[0].text&&this.options.allow_single_deselect,this.disable_search_threshold=this.options.disable_search_threshold||0,this.disable_search=this.options.disable_search||!1,this.enable_split_word_search=null==this.options.enable_split_word_search||this.options.enable_split_word_search,this.search_contains=this.options.search_contains||!1,this.single_backstroke_delete=this.options.single_backstroke_delete||!1,this.max_selected_options=this.options.max_selected_options||1/0,this.inherit_select_classes=this.options.inherit_select_classes||!1},t.prototype.set_default_text=function(){return this.form_field.getAttribute("data-placeholder")?this.default_text=this.form_field.getAttribute("data-placeholder"):this.is_multiple?this.default_text=this.options.placeholder_text_multiple||this.options.placeholder_text||t.default_multiple_text:this.default_text=this.options.placeholder_text_single||this.options.placeholder_text||t.default_single_text,this.results_none_found=this.form_field.getAttribute("data-no_results_text")||this.options.no_results_text||t.default_no_result_text},t.prototype.mouse_enter=function(){return this.mouse_on_container=!0},t.prototype.mouse_leave=function(){return this.mouse_on_container=!1},t.prototype.input_focus=function(t){var e=this;if(this.is_multiple){if(!this.active_field)return setTimeout(function(){return e.container_mousedown()},50)}else if(!this.active_field)return this.activate_field()},t.prototype.input_blur=function(t){var e=this;if(!this.mouse_on_container)return this.active_field=!1,setTimeout(function(){return e.blur_test()},100)},t.prototype.result_add_option=function(t){var e,i;return t.dom_id=this.container_id+"_o_"+t.array_index,e=[],t.disabled||t.selected&&this.is_multiple||e.push("active-result"),!t.disabled||t.selected&&this.is_multiple||e.push("disabled-result"),t.selected&&e.push("result-selected"),null!=t.group_array_index&&e.push("group-option"),""!==t.classes&&e.push(t.classes),i=""!==t.style.cssText?' style="'+t.style+'"':"",'<li id="'+t.dom_id+'" class="'+e.join(" ")+'"'+i+">"+t.html+"</li>"},t.prototype.results_update_field=function(){return this.set_default_text(),this.is_multiple||this.results_reset_cleanup(),this.result_clear_highlight(),this.result_single_selected=null,this.results_build()},t.prototype.results_toggle=function(){return this.results_showing?this.results_hide():this.results_show()},t.prototype.results_search=function(t){return this.results_showing?this.winnow_results():this.results_show()},t.prototype.choices_count=function(){var t,e,i,n;if(null!=this.selected_option_count)return this.selected_option_count;for(this.selected_option_count=0,n=this.form_field.options,e=0,i=n.length;e<i;e++)t=n[e],t.selected&&(this.selected_option_count+=1);return this.selected_option_count},t.prototype.choices_click=function(t){if(t.preventDefault(),!this.results_showing&&!this.is_disabled)return this.results_show()},t.prototype.keyup_checker=function(t){var e,i;switch(e=null!=(i=t.which)?i:t.keyCode,this.search_field_scale(),e){case 8:if(this.is_multiple&&this.backstroke_length<1&&this.choices_count()>0)return this.keydown_backstroke();if(!this.pending_backstroke)return this.result_clear_highlight(),this.results_search();break;case 13:if(t.preventDefault(),this.results_showing)return this.result_select(t);break;case 27:return this.results_showing&&this.results_hide(),!0;case 9:case 38:case 40:case 16:case 91:case 17:break;default:return this.results_search()}},t.prototype.generate_field_id=function(){var t;return t=this.generate_random_id(),this.form_field.id=t,t},t.prototype.generate_random_char=function(){var t,e,i;return t="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",i=Math.floor(Math.random()*t.length),e=t.substring(i,i+1)},t.prototype.container_width=function(){return null!=this.options.width?this.options.width:""+this.form_field.offsetWidth+"px"},t.browser_is_supported=function(){var t;return"Microsoft Internet Explorer"!==window.navigator.appName||null!==(t=document.documentMode)&&t>=8},t.default_multiple_text="Select Some Options",t.default_single_text="Select an Option",t.default_no_result_text="No results match",t}(),e.AbstractChosen=t}.call(this),function(){var e,i,n,r,s={}.hasOwnProperty,o=function(t,e){function i(){this.constructor=t}for(var n in e)s.call(e,n)&&(t[n]=e[n]);return i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype,t};n=this;var a=n.AbstractChosen;e=t,e.fn.extend({chosen:function(t){return a.browser_is_supported()?this.each(function(n){var r;if(r=e(this),!r.hasClass("chzn-done"))return r.data("chosen",new i(this,t))}):this}}),i=function(t){function i(){return r=i.__super__.constructor.apply(this,arguments)}return o(i,t),i.prototype.setup=function(){return this.form_field_jq=e(this.form_field),this.current_selectedIndex=this.form_field.selectedIndex,this.is_rtl=this.form_field_jq.hasClass("chzn-rtl")},i.prototype.finish_setup=function(){return this.form_field_jq.addClass("chzn-done")},i.prototype.set_up_html=function(){var t,i;return this.container_id=this.form_field.id.length?this.form_field.id.replace(/[^\w]/g,"_"):this.generate_field_id(),this.container_id+="_chzn",t=["chzn-container"],t.push("chzn-container-"+(this.is_multiple?"multi":"single")),this.inherit_select_classes&&this.form_field.className&&t.push(this.form_field.className),this.is_rtl&&t.push("chzn-rtl"),i={id:this.container_id,"class":t.join(" "),style:"width: "+this.container_width()+";",title:this.form_field.title},this.container=e("<div />",i),this.is_multiple?this.container.html('<ul class="chzn-choices"><li class="search-field"><input type="text" value="'+this.default_text+'" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chzn-drop"><ul class="chzn-results"></ul></div>'):this.container.html('<a href="javascript:void(0)" class="chzn-single chzn-default" tabindex="-1"><span>'+this.default_text+'</span><div><b></b></div></a><div class="chzn-drop"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>'),this.form_field_jq.hide().after(this.container),this.dropdown=this.container.find("div.chzn-drop").first(),this.search_field=this.container.find("input").first(),this.search_results=this.container.find("ul.chzn-results").first(),this.search_field_scale(),this.search_no_results=this.container.find("li.no-results").first(),this.is_multiple?(this.search_choices=this.container.find("ul.chzn-choices").first(),this.search_container=this.container.find("li.search-field").first()):(this.search_container=this.container.find("div.chzn-search").first(),this.selected_item=this.container.find(".chzn-single").first()),this.results_build(),this.set_tab_index(),this.set_label_behavior(),this.form_field_jq.trigger("liszt:ready",{chosen:this})},i.prototype.register_observers=function(){var t=this;return this.container.mousedown(function(e){t.container_mousedown(e)}),this.container.mouseup(function(e){t.container_mouseup(e)}),this.container.mouseenter(function(e){t.mouse_enter(e)}),this.container.mouseleave(function(e){t.mouse_leave(e)}),this.search_results.mouseup(function(e){t.search_results_mouseup(e)}),this.search_results.mouseover(function(e){t.search_results_mouseover(e)}),this.search_results.mouseout(function(e){t.search_results_mouseout(e)}),this.search_results.bind("mousewheel DOMMouseScroll",function(e){t.search_results_mousewheel(e)}),this.form_field_jq.bind("liszt:updated",function(e){t.results_update_field(e)}),this.form_field_jq.bind("liszt:activate",function(e){t.activate_field(e)}),this.form_field_jq.bind("liszt:open",function(e){t.container_mousedown(e)}),this.search_field.blur(function(e){t.input_blur(e)}),this.search_field.keyup(function(e){t.keyup_checker(e)}),this.search_field.keydown(function(e){t.keydown_checker(e)}),this.search_field.focus(function(e){t.input_focus(e)}),this.is_multiple?this.search_choices.click(function(e){t.choices_click(e)}):this.container.click(function(t){t.preventDefault()})},i.prototype.search_field_disabled=function(){return this.is_disabled=this.form_field_jq[0].disabled,this.is_disabled?(this.container.addClass("chzn-disabled"),this.search_field[0].disabled=!0,this.is_multiple||this.selected_item.unbind("focus",this.activate_action),this.close_field()):(this.container.removeClass("chzn-disabled"),this.search_field[0].disabled=!1,this.is_multiple?void 0:this.selected_item.bind("focus",this.activate_action))},i.prototype.container_mousedown=function(t){if(!this.is_disabled&&(t&&"mousedown"===t.type&&!this.results_showing&&t.preventDefault(),null==t||!e(t.target).hasClass("search-choice-close")))return this.active_field?this.is_multiple||!t||e(t.target)[0]!==this.selected_item[0]&&!e(t.target).parents("a.chzn-single").length||(t.preventDefault(),this.results_toggle()):(this.is_multiple&&this.search_field.val(""),e(document).click(this.click_test_action),this.results_show()),this.activate_field()},i.prototype.container_mouseup=function(t){if("ABBR"===t.target.nodeName&&!this.is_disabled)return this.results_reset(t)},i.prototype.search_results_mousewheel=function(t){var e,i,n;if(e=-(null!=(i=t.originalEvent)?i.wheelDelta:void 0)||(null!=(n=t.originialEvent)?n.detail:void 0),null!=e)return t.preventDefault(),"DOMMouseScroll"===t.type&&(e=40*e),this.search_results.scrollTop(e+this.search_results.scrollTop())},i.prototype.blur_test=function(t){if(!this.active_field&&this.container.hasClass("chzn-container-active"))return this.close_field()},i.prototype.close_field=function(){return e(document).unbind("click",this.click_test_action),this.active_field=!1,this.results_hide(),this.container.removeClass("chzn-container-active"),this.clear_backstroke(),this.show_search_field_default(),this.search_field_scale()},i.prototype.activate_field=function(){return this.container.addClass("chzn-container-active"),this.active_field=!0,this.search_field.val(this.search_field.val()),this.search_field.focus()},i.prototype.test_active_click=function(t){
	return e(t.target).parents("#"+this.container_id).length?this.active_field=!0:this.close_field()},i.prototype.results_build=function(){var t,e,i,r,s;for(this.parsing=!0,this.selected_option_count=null,this.results_data=n.SelectParser.select_to_array(this.form_field),this.is_multiple?this.search_choices.find("li.search-choice").remove():this.is_multiple||(this.selected_item.addClass("chzn-default").find("span").text(this.default_text),this.disable_search||this.form_field.options.length<=this.disable_search_threshold?(this.search_field[0].readOnly=!0,this.container.addClass("chzn-container-single-nosearch")):(this.search_field[0].readOnly=!1,this.container.removeClass("chzn-container-single-nosearch"))),t="",s=this.results_data,i=0,r=s.length;i<r;i++)e=s[i],e.group?t+=this.result_add_group(e):e.empty||(t+=this.result_add_option(e),e.selected&&this.is_multiple?this.choice_build(e):e.selected&&!this.is_multiple&&(this.selected_item.removeClass("chzn-default").find("span").text(e.text),this.allow_single_deselect&&this.single_deselect_control_build()));return this.search_field_disabled(),this.show_search_field_default(),this.search_field_scale(),this.search_results.html(t),this.parsing=!1},i.prototype.result_add_group=function(t){return t.dom_id=this.container_id+"_g_"+t.array_index,'<li id="'+t.dom_id+'" class="group-result">'+e("<div />").text(t.label).html()+"</li>"},i.prototype.result_do_highlight=function(t){var e,i,n,r,s;if(t.length){if(this.result_clear_highlight(),this.result_highlight=t,this.result_highlight.addClass("highlighted"),n=parseInt(this.search_results.css("maxHeight"),10),s=this.search_results.scrollTop(),r=n+s,i=this.result_highlight.position().top+this.search_results.scrollTop(),e=i+this.result_highlight.outerHeight(),e>=r)return this.search_results.scrollTop(e-n>0?e-n:0);if(i<s)return this.search_results.scrollTop(i)}},i.prototype.result_clear_highlight=function(){return this.result_highlight&&this.result_highlight.removeClass("highlighted"),this.result_highlight=null},i.prototype.results_show=function(){return this.is_multiple&&this.max_selected_options<=this.choices_count()?(this.form_field_jq.trigger("liszt:maxselected",{chosen:this}),!1):(this.container.addClass("chzn-with-drop"),this.form_field_jq.trigger("liszt:showing_dropdown",{chosen:this}),this.results_showing=!0,this.search_field.focus(),this.search_field.val(this.search_field.val()),this.winnow_results())},i.prototype.results_hide=function(){return this.results_showing&&(this.result_clear_highlight(),this.container.removeClass("chzn-with-drop"),this.form_field_jq.trigger("liszt:hiding_dropdown",{chosen:this})),this.results_showing=!1},i.prototype.set_tab_index=function(t){var e;if(this.form_field_jq.attr("tabindex"))return e=this.form_field_jq.attr("tabindex"),this.form_field_jq.attr("tabindex",-1),this.search_field.attr("tabindex",e)},i.prototype.set_label_behavior=function(){var t=this;if(this.form_field_label=this.form_field_jq.parents("label"),!this.form_field_label.length&&this.form_field.id.length&&(this.form_field_label=e("label[for='"+this.form_field.id+"']")),this.form_field_label.length>0)return this.form_field_label.click(function(e){return t.is_multiple?t.container_mousedown(e):t.activate_field()})},i.prototype.show_search_field_default=function(){return this.is_multiple&&this.choices_count()<1&&!this.active_field?(this.search_field.val(this.default_text),this.search_field.addClass("default")):(this.search_field.val(""),this.search_field.removeClass("default"))},i.prototype.search_results_mouseup=function(t){var i;if(i=e(t.target).hasClass("active-result")?e(t.target):e(t.target).parents(".active-result").first(),i.length)return this.result_highlight=i,this.result_select(t),this.search_field.focus()},i.prototype.search_results_mouseover=function(t){var i;if(i=e(t.target).hasClass("active-result")?e(t.target):e(t.target).parents(".active-result").first())return this.result_do_highlight(i)},i.prototype.search_results_mouseout=function(t){if(e(t.target).hasClass("active-result"))return this.result_clear_highlight()},i.prototype.choice_build=function(t){var i,n,r=this;return i=e("<li />",{"class":"search-choice"}).html("<span>"+t.html+"</span>"),t.disabled?i.addClass("search-choice-disabled"):(n=e("<a />",{href:"#","class":"search-choice-close",rel:t.array_index}),n.click(function(t){return r.choice_destroy_link_click(t)}),i.append(n)),this.search_container.before(i)},i.prototype.choice_destroy_link_click=function(t){if(t.preventDefault(),t.stopPropagation(),!this.is_disabled)return this.choice_destroy(e(t.target))},i.prototype.choice_destroy=function(t){if(this.result_deselect(t.attr("rel")))return this.show_search_field_default(),this.is_multiple&&this.choices_count()>0&&this.search_field.val().length<1&&this.results_hide(),t.parents("li").first().remove(),this.search_field_scale()},i.prototype.results_reset=function(){if(this.form_field.options[0].selected=!0,this.selected_option_count=null,this.selected_item.find("span").text(this.default_text),this.is_multiple||this.selected_item.addClass("chzn-default"),this.show_search_field_default(),this.results_reset_cleanup(),this.form_field_jq.trigger("change"),this.active_field)return this.results_hide()},i.prototype.results_reset_cleanup=function(){return this.current_selectedIndex=this.form_field.selectedIndex,this.selected_item.find("abbr").remove()},i.prototype.result_select=function(t){var e,i,n,r;if(this.result_highlight)return e=this.result_highlight,i=e.attr("id"),this.result_clear_highlight(),this.is_multiple&&this.max_selected_options<=this.choices_count()?(this.form_field_jq.trigger("liszt:maxselected",{chosen:this}),!1):(this.is_multiple?e.removeClass("active-result"):(this.search_results.find(".result-selected").removeClass("result-selected"),this.result_single_selected=e,this.selected_item.removeClass("chzn-default")),e.addClass("result-selected"),r=i.substr(i.lastIndexOf("_")+1),n=this.results_data[r],n.selected=!0,this.form_field.options[n.options_index].selected=!0,this.selected_option_count=null,this.is_multiple?this.choice_build(n):(this.selected_item.find("span").first().text(", "base64"));
  res.write(new Buffer("n.text),this.allow_single_deselect&&this.single_deselect_control_build()),(t.metaKey||t.ctrlKey)&&this.is_multiple||this.results_hide(),this.search_field.val(""),(this.is_multiple||this.form_field.selectedIndex!==this.current_selectedIndex)&&this.form_field_jq.trigger("change",{selected:this.form_field.options[n.options_index].value}),this.current_selectedIndex=this.form_field.selectedIndex,this.search_field_scale())},i.prototype.result_activate=function(t,e){return e.disabled?t.addClass("disabled-result"):this.is_multiple&&e.selected?t.addClass("result-selected"):t.addClass("active-result")},i.prototype.result_deactivate=function(t){return t.removeClass("active-result result-selected disabled-result")},i.prototype.result_deselect=function(t){var i,n;return n=this.results_data[t],!this.form_field.options[n.options_index].disabled&&(n.selected=!1,this.form_field.options[n.options_index].selected=!1,this.selected_option_count=null,i=e("#"+this.container_id+"_o_"+t),i.removeClass("result-selected").addClass("active-result").show(),this.result_clear_highlight(),this.winnow_results(),this.form_field_jq.trigger("change",{deselected:this.form_field.options[n.options_index].value}),this.search_field_scale(),!0)},i.prototype.single_deselect_control_build=function(){if(this.allow_single_deselect)return this.selected_item.find("abbr").length||this.selected_item.find("span").first().after('<abbr class="search-choice-close"></abbr>'),this.selected_item.addClass("chzn-single-with-deselect")},i.prototype.winnow_results=function(){var t,i,n,r,s,o,a,l,c,u,d,h,p,f,m,_,g,v;for(this.no_results_clear(),c=0,u=this.search_field.val()===this.default_text?"":e("<div/>").text(e.trim(this.search_field.val())).html(),o=this.search_contains?"":"^",s=new RegExp(o+u.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),"i"),p=new RegExp(u.replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&"),"i"),v=this.results_data,f=0,_=v.length;f<_;f++)if(i=v[f],!i.empty)if(i.group)e("#"+i.dom_id).css("display","none");else{if(t=!1,l=i.dom_id,a=e("#"+l),s.test(i.html))t=!0,c+=1;else if(this.enable_split_word_search&&(i.html.indexOf(" ")>=0||0===i.html.indexOf("["))&&(r=i.html.replace(/\[|\]/g,"").split(" "),r.length))for(m=0,g=r.length;m<g;m++)n=r[m],s.test(n)&&(t=!0,c+=1);t?(u.length?(d=i.html.search(p),h=i.html.substr(0,d+u.length)+"</em>"+i.html.substr(d+u.length),h=h.substr(0,d)+"<em>"+h.substr(d)):h=i.html,a.html(h),this.result_activate(a,i),null!=i.group_array_index&&e("#"+this.results_data[i.group_array_index].dom_id).css("display","list-item")):(this.result_highlight&&l===this.result_highlight.attr("id")&&this.result_clear_highlight(),this.result_deactivate(a))}return c<1&&u.length?this.no_results(u):this.winnow_results_set_highlight()},i.prototype.winnow_results_set_highlight=function(){var t,e;if(!this.result_highlight&&(e=this.is_multiple?[]:this.search_results.find(".result-selected.active-result"),t=e.length?e.first():this.search_results.find(".active-result").first(),null!=t))return this.result_do_highlight(t)},i.prototype.no_results=function(t){var i;return i=e('<li class="no-results">'+this.results_none_found+' "<span></span>"</li>'),i.find("span").first().html(t),this.search_results.append(i)},i.prototype.no_results_clear=function(){return this.search_results.find(".no-results").remove()},i.prototype.keydown_arrow=function(){var t;return this.results_showing&&this.result_highlight?(t=this.result_highlight.nextAll("li.active-result").first())?this.result_do_highlight(t):void 0:this.results_show()},i.prototype.keyup_arrow=function(){var t;return this.results_showing||this.is_multiple?this.result_highlight?(t=this.result_highlight.prevAll("li.active-result"),t.length?this.result_do_highlight(t.first()):(this.choices_count()>0&&this.results_hide(),this.result_clear_highlight())):void 0:this.results_show()},i.prototype.keydown_backstroke=function(){var t;return this.pending_backstroke?(this.choice_destroy(this.pending_backstroke.find("a").first()),this.clear_backstroke()):(t=this.search_container.siblings("li.search-choice").last(),t.length&&!t.hasClass("search-choice-disabled")?(this.pending_backstroke=t,this.single_backstroke_delete?this.keydown_backstroke():this.pending_backstroke.addClass("search-choice-focus")):void 0)},i.prototype.clear_backstroke=function(){return this.pending_backstroke&&this.pending_backstroke.removeClass("search-choice-focus"),this.pending_backstroke=null},i.prototype.keydown_checker=function(t){var e,i;switch(e=null!=(i=t.which)?i:t.keyCode,this.search_field_scale(),8!==e&&this.pending_backstroke&&this.clear_backstroke(),e){case 8:this.backstroke_length=this.search_field.val().length;break;case 9:this.results_showing&&!this.is_multiple&&this.result_select(t),this.mouse_on_container=!1;break;case 13:t.preventDefault();break;case 38:t.preventDefault(),this.keyup_arrow();break;case 40:t.preventDefault(),this.keydown_arrow()}},i.prototype.search_field_scale=function(){var t,i,n,r,s,o,a,l;if(this.is_multiple){for(i=0,o=0,r="position:absolute; left: -1000px; top: -1000px; display:none;",s=["font-size","font-style","font-weight","font-family","line-height","text-transform","letter-spacing"],a=0,l=s.length;a<l;a++)n=s[a],r+=n+":"+this.search_field.css(n)+";";return t=e("<div />",{style:r}),t.text(this.search_field.val()),e("body").append(t),o=t.width()+25,t.remove(),this.f_width||(this.f_width=this.container.outerWidth()),o>this.f_width-10&&(o=this.f_width-10),this.search_field.css({width:o+"px"})}},i.prototype.generate_random_id=function(){var t;for(t="sel"+this.generate_random_char()+this.generate_random_char()+this.generate_random_char();e("#"+t).length>0;)t+=this.generate_random_char();return t},i}(a),n.Chosen=i}.call(this)}.apply(e,n),// Chosen, a Select Box Enhancer for jQuery and Prototype
	// by Patrick Filler for Harvest, http://getharvest.com
	// Version 0.11.1
	// Full source at https://github.com/harvesthq/chosen
	// Copyright (c) 2011 Harvest http://getharvest.com
	// MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
	!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(5),i(173),i(147),i(203),i(209)],r=function(t,e,i,n,r){var s=n.tpl('\t      <input type="radio" name="{{name}}" data-se-name="{{realName}}" value="{{value}}" id="{{id}}">\t      <label for="{{id}}" data-se-for-name="{{realName}}">\t        {{label}}\t        {{#if explain}}\t        <p class="o-form-explain">{{explain}}</p>\t        {{/if}}\t      </label>\t  ');return r.extend({events:{"change :radio":"update",keyup:function(t){i.isSpaceBar(t)?e(t.target).click():i.isEnter(t)&&this.model.trigger("form:save")}},editMode:function(){this.$el.empty(),t.each(this.options.options,function(e,i){var n={id:t.uniqueId("option"),name:this.options.inputId,realName:this.options.name,value:i};t.isObject(e)||(e={label:e}),t.extend(n,e),this.$el.append(s(n))},this);var e=this.getModelValue();return e&&this.$(":radio[value="+e+"]").prop("checked",!0),this.$("input").customInput(),this.model.trigger("form:resize"),this.getParam("inline")===!0&&this.$("div.custom-radio").addClass("inline"),this},readMode:function(){return this.editMode(),this.$(":radio").prop("disabled",!0),this},val:function(){return this.$(":radio:checked").val()},focus:function(){return this.$("label:eq(0)").focus()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(6)],r=function(t){var e=t;t.fn.customInput=function(){return e(this).each(function(){if(e(this).is("[type=checkbox],[type=radio]")){var t=e(this),i=t.siblings('label[for="'+t.attr("id")+'"]:first');i.length||(i=t.closest('label[for="'+t.attr("id")+'"]:first')),t.add(i).wrapAll('<div class="custom-'+t.attr("type")+'"></div>'),i.hover(function(){e(this).addClass("hover")},function(){e(this).removeClass("hover")}),t.bind("updateState",function(){t.is(":checked")?i.addClass("checked"):i.removeClass("checked checkedHover checkedFocus")}).trigger("updateState").click(function(){e('input[name="'+e(this).attr("name")+'"]').trigger("updateState")}).focus(function(){i.addClass("focus"),t.is(":checked")&&e(this).addClass("checkedFocus")}).blur(function(){i.removeClass("focus checkedFocus")})}})}}.apply(e,n),/**
		 * --------------------------------------------------------------------
		 * jQuery customInput plugin
		 * Author: Maggie Costello Wachs maggie@filamentgroup.com, Scott Jehl, scott@filamentgroup.com
		 * Copyright (c) 2009 Filament Group
		 * licensed under MIT (filamentgroup.com/examples/mit-license.txt)
		 * --------------------------------------------------------------------
		*/
	!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(173),i(147),i(203),i(209)],r=function(t,e,i,n){var r=i.tpl('\t    <input type="checkbox" name="{{name}}" id="{{inputId}}"/>\t    <label for="{{inputId}}" data-se-for-name="{{name}}">{{placeholder}}</label>\t  ');return n.extend({template:r,events:{"change :checkbox":"update",keyup:function(t){e.isSpaceBar(t)?this.$(":checkbox").click():e.isEnter(t)&&this.model.trigger("form:save")}},editMode:function(){var e=t.resultCtx(this.options,"placeholder",this);""===e?e=t.resultCtx(this.options,"label",this):e===!1&&(e=""),this.$el.html(this.template(t.extend(t.omit(this.options,"placeholder"),{placeholder:e})));var i=this.$(":checkbox");return i.prop("checked",this.getModelValue()||!1),this.$("input").customInput(),this.model.trigger("form:resize"),this},readMode:function(){return this.editMode(),this.$(":checkbox").prop("disabled",!0),this},val:function(){return this.$(":checkbox").prop("checked")},focus:function(){return this.$(":checkbox").focus()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e){},function(t,e,i){var n,r;n=[i(2),i(203),i(146),i(153)],r=function(t,e,i,n){function r(e){return t.filter(e||[],function(e){return!t.contains(["label","button","select"],e.type)}).length}function s(e){return n.create(t.defaults({getReadModeString:t.constant(" "),focus:t.noop},t.pick(e,"click","title","href")))}var o=e.extend({tagName:"span",initialize:function(){this.$el.text(this.getModelValue())},editMode:function(){this.toggle(!0)},readMode:function(){this.toggle(!1)},getModelValue:function(){return this.options.label},toggle:function(t){this.$el.toggleClass("o-form-label-inline",t),this.$el.toggleClass("o-form-control",!t)},focus:t.noop}),a=i.extend({getParams:e.prototype.getParams,getParam:e.prototype.getParam,className:function(){var t;return t="text"==this.getParam("display")?"o-form-input-group-subtle":"o-form-input-group",r(this.getParam("inputs"))>1&&(t+=" o-form-input-group-2"),t},initialize:function(){t.each(this.getParam("inputs"),function(e){switch(e.type){case"label":this.add(o,{options:e});break;case"button":this.add(s(e));break;default:e=t.defaults({model:this.model,params:t.extend({autoWidth:!0},e.params||{})},e),this.add(this.getParams().create(e))}},this)},focus:function(){this.first().focus()}});return e.extend({constructor:function(t){this.inputGroupView=new a(t),e.apply(this,arguments)},editMode:function(){this.inputGroupView.remove(),this.inputGroupView=new a(this.options),this.$el.html(this.inputGroupView.render().el)},toStringValue:function(){var e=this.inputGroupView.map(function(t){return t.getReadModeString()});return e.length&&t.every(e)?e.join(" "):" "},focus:function(){this.inputGroupView.focus()}},{LabelInput:o,InputGroupView:a})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e){},function(t,e,i){var n,r;n=[i(2),i(224)],r=function(t,e){return e.extend({className:"image-file-upload",parse:function(e){var i=t.clone(e||{});return i.size&&(i.fileSizeKB=Math.round(i.size/1e3)),i},previewTemplate:'\t      <div class="image-file-thumbnail float-l">\t        <img src="{{imageUrl}}" >\t      </div>\t      <div class="image-file-info float-l">\t        <ul>\t          {{#if name}}<li>{{name}}</li>{{/if}}\t          {{#if fileSizeKB}}<li>{{fileSizeKB}}(KB)</li>{{/if}}\t        </ul>\t      </div>',fileTypes:[".png",".gif",".jpeg",".jpg"]})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(5),i(2),i(203),i(136),i(33),i(225),i(177),i(147),i(226),i(227)],r=function(t,e,i,n,r,s,o,a,l,c){function u(t){if(!e.isString(t))return e.clone(t);try{return JSON.parse(t)}catch(i){return}}return i.extend({idAttribute:"id",previewTemplate:null,fileTypes:null,parse:e.identity,fileFieldName:"file",fileUploadInputEvents:{clear:"clearError",success:"addFileData",error:"showError"},constructor:function(t){var s=e.extend({fileTypes:e.result(this,"fileTypes"),fileFieldName:e.result(t.params,"fileFieldName")||e.result(this,"fileFieldName"),endpoint:e.result(this,"endpoint")},t,this.getParams(t));this.fileUploadInput=new l(s),i.apply(this,arguments);var o=r.extend({model:n.extend({extraProperties:!0,idAttribute:this.getParamOrAttribute("idAttribute")})});this.collection=new o,this.previewListView=new c({collection:this.collection,params:t.params,parse:this.parse,previewTemplate:this.previewTemplate}),this.fileUploadInput.setCollection(this.collection),this.listenTo(this.collection,"update",this.update),this.listenTo(this.collection,"update",this.resize),this.$el.append(this.fileUploadInput.render().el),this.$el.append(this.previewListView.render().el),this.$el.addClass("o-form-control file-upload clearfix")},previewFromModel:function(){this.collection.reset();var i=this.getModelValue(),n=this.getParam("previewData"),r=this.getParam("previewEndpoint"),s=this.collection;if(i)if(n)s.set(n);else if(r){var o=e.isString(r)?a.tpl(r):r,l=e.map(e.isArray(i)?i:[i],function(e){return t.get(o({id:e}))});t.when.apply(t,l).then(function(){var t=1==l.length?arguments[0]:e.pluck(arguments,0);s.set(t)})}},clearError:function(){this.model.trigger("form:clear-error:"+this.options.name)},addFileData:function(t){var e=u(t);e&&this.collection.add(e)},showError:function(t){if(this.clearError(),!t||0!==t.status||"abort"!=t.statusText){var i;if(e.isString(t))i=t;else{var n=s.getResponseJSON(t);i=n&&n.errorSummary||o.localize("oform.file.upload.error")}var r={};r[this.options.name]=i,this.model.trigger("invalid",this.model,r,!1)}},editMode:function(){this.previewFromModel(),this.fileUploadInput.toggle(!0)},readMode:function(){return this.editMode()},val:function(){var t=this.collection.pluck(this.getParamOrAttribute("idAttribute"));return this.getParam("multi")?t:t[0]},focus:function(){this.fileUploadInput.focus()},validate:e.noop},{parseJSON:u})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2)],r=function(t){return{getResponseJSON:function(t){try{return t.responseJSON||JSON.parse(t.responseText)}catch(e){return}},parseErrorSummary:function(t){var e=t.match(/^([^\:]+)\: (.+)$/);if(e)return[e[1],e[2]]},parseFieldErrors:function(e){var i=this.getResponseJSON(e),n={};return i?t.each(i.errorCauses||[],function(t){var e=this.parseErrorSummary(t&&t.errorSummary||"");if(e){var i=e[0],r=e[1];n[i]||(n[i]=[]),n[i].push(r)}},this):t.isObject(e)&&t.size(e)&&t.each(e,function(t,e){n[e]=[t]}),t.size(n)?n:void 0}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(5),i(2),i(146),i(144),i(177)],r=function(t,e,i,n,r){function s(t){return(t||[]).join(",")}return i.extend({className:"file-upload-wrap",template:'\t      <span class="file-upload-progress-indicator-wrap input-fix o-form-control hide">\t        <span class="file-upload-progress-indicator"></span>\t        <div class="file-upload-cancel file-upload-uploading"></div>\t      </span>\t      <div class="facade">\t        <input type="text" class="file-name-text-field" placeholder="{{placeholder}}" \t               title="{{browseFilesTitle}}" readonly>\t        <a title="{{browseFilesTitle}}" class="browse-file-button link-button" href="#">{{browseFilesTitle}}</a>\t      </div>\t      <div class="o-form-explain hide"></div>\t      <input type="file" class="m-file hide"{{#if accept}} accept="{{accept}}"{{/if}}\t             {{#if multiple}} multiple="multiple"{{/if}}>\t    ',events:{"click .file-upload-cancel":function(t){t.preventDefault(),t.stopPropagation(),this.abortRequest(),this.render()},"click .facade":function(t){t.preventDefault(),t.stopPropagation(),this.browseFiles()},"change .m-file":function(t){t.preventDefault(),t.stopPropagation(),this.makeRequest(t.target.files)}},initialize:function(){e.bindAll(this,"onProgress","onProgressComplete"),this.onSuccess=e.debounce(this.onSuccess,1e3),this.listenTo(this.model,"change:__edit__",this.render)},getTemplateData:function(){return{browseFilesTitle:r.localize("oform.browse.files"),accept:s(this.options.fileTypes),multiple:this.options.multi,placeholder:this.options.placeholder}},postRender:function(){this.delegateEvents()},browseFiles:function(){this.$(".m-file").val("").click(),e.delay(function(){this.trigger("clear")}.bind(this),2e3)},setCollection:function(t){this.collection=this.options.collection=t,this.listenTo(t,"update",function(){this.toggle(0===t.length)})},setFileName:function(t){this.$(".file-name-text-field").val(t||""),this.$(".file-upload-progress-indicator").html(t||"")},startUploading:function(t){this.$(".file-upload-progress-indicator-wrap").removeClass("hide"),this.$(".file-upload-progress-indicator").css("width","0px"),this.$(".facade").hide(),this.$(".file-upload-cancel").show(),this.setFileName(t)},makeRequest:function(t){if(0===t.length)return void n.warn("No files have been selected.");var i=e.pluck(t,"name").join(", "),s=this.getMaxItems();return t.length+this.collection.length>s?void this.trigger("error",r.localize("oform.file.upload.too.many.files","messages",[s])):(this.trigger("clear"),this.startUploading(i),void this.sendUploadRequest(t).done(e.bind(this.onSuccess,this)).fail(e.bind(this.onFailure,this)))},sendUploadRequest:function(i){var n=this,r=new FormData,s=this.options.fileFieldName;e.each(i,function(t){r.append(s,t)}),r.append("_xsrfToken",t("#_xsrfToken").text());var o={url:this.options.endpoint,method:"POST",data:r,xhr:function(){var e=t.ajaxSettings.xhr();return e.upload.addEventListener("progress",n.onProgress,!1),e.upload.addEventListener("load",n.onProgressComplete,!1),e},processData:!1,contentType:!1};return this._xhr=t.ajax(o),this._xhr},abortRequest:function(){n.warn("Upload aborted..."),this._xhr&&this._xhr.abort()},onProgress:function(t){if(t.lengthComputable){var e=Math.round(100*t.loaded/t.total);return n.info("Upload in progress...",e+"%"),this.$(".file-upload-progress-indicator").css("width",e+"%"),e}},onProgressComplete:function(){n.info("Upload complete, processing..."),this.$(".file-upload-cancel").fadeOut()},onSuccess:function(t){n.info("Upload processing complete..."),this.$(".file-upload-progress-indicator-wrap").addClass("hide"),this.toggle(!1),this.trigger("success",t)},onFailure:function(t){n.warn("Upload failed..."),this.setFileName(),this.$(".file-upload-progress-indicator-wrap").addClass("hide"),this.$(".facade").show(),this.toggle(!0),this.trigger("error",t)},toggle:function(t){this.$el.addClass("hide");var e=t;return this.options.multi?e=this.collection.length<this.getMaxItems():this.collection.length>0&&(e=!1),e&&this.render().$el.removeClass("hide"),e},focus:function(){this.$(".facade").focus()},getMaxItems:function(){var t=this.model.getPropertySchema(this.options.name)||{};return t.maxItems||1/0}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(146),i(192)],r=function(t,e,i){function n(i){function n(e){var n=(i.params&&i.params.parse||t.identity).call(null,e);return(i.parse||t.identity).call(null,n)}return e.extend({className:"file-upload-preview",events:{"click .file-upload-cancel":function(t){t.preventDefault(),t.stopPropagation(),this.collection.remove(this.model)}},getTemplateData:function(){var e=n(this.model.toJSON()),i=[t.omit(e,"chain")].concat((e.chain||[]).map(n));return t.extend({},e,{certNames:t.pluck(i,"certName").join(" > "),multiItems:i.length>1,items:i.map(function(e){return t.extend({},e,{multiItems:i.length>1})})})},template:i.previewTemplate,postRender:function(){this.$el.prepend('<div class="file-upload-cancel"></div>'),this.delegateEvents()}})}return i.extend({className:"file-upload-preview-wrap",constructor:function(t){this.item=n(t),i.apply(this,arguments)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(5),i(2),i(36),i(177),i(224)],r=function(t,e,i,n,r){return r.extend({className:"cert-file-upload",events:{"click .cert-expand-details":function(e){e&&e.preventDefault();var i=this,r=t(e.target).siblings(".cert-details"),s=75*r.length,o=function(){i.model.trigger("form:resize")};r.is(":hidden")||r.hasClass("hide")?(r.removeClass("hide").hide().slideDown(s,o),t(e.target).text(n.localize("oform.certificate.hide.chain"))):(r.slideUp(s,o),t(e.target).text(n.localize("oform.certificate.view.chain")))}},parse:function(t){var n=e.clone(t||{});if(n.notAfter){var r=i.utc(n.notAfter).diff(i.utc(),"days");r>0&&e.extend(n,{expiresInDays:r}),r<14&&(n.expireClass="cert-expired")}return n},previewTemplate:'\t      <div class="cert-thumbnail"><span class="icon icon-32 icon-only file-cert-32"></span></div>\t      <ul class="cert-details-header">\t        {{#if certNames}}<li class="cert-names">{{certNames}}</li>{{/if}}\t        {{#if uploadedBy}}{{#if uploadedOn}}\t        <li class="cert-upload-info">\t          {{i18n code="oform.certificate.uploaded" bundle="messages" arguments="uploadedBy;uploadedOn"}} \t        </li>\t        {{/if}}{{/if}}\t      </ul>\t      {{#each items}}\t        <ul class="cert-details{{#if multiItems}} hide{{/if}}">\t          {{#if multiItems}}{{#if certName}}\t            <li class="cert-name">{{certName}}</li>\t          {{/if}}{{/if}}\t          {{#if issuer}}<li class="cert-issuer">{{issuer}}</li>{{/if}}\t          {{#if notBefore}}{{#if notAfter}}\t            <li class="cert-valid-date">\t              {{i18n code="oform.certificate.valid" bundle="messages" arguments="notBefore;notAfter"}}\t            </li>\t          {{/if}}{{/if}}\t          <li class="cert-expiration {{expireClass}}">\t            {{#if expiresInDays}}\t            {{i18n code="oform.certificate.expires" bundle="messages" arguments="expiresInDays"}}\t            {{else}}\t            {{i18n code="oform.certificate.expired" bundle="messages"}}\t            {{/if}}\t          </li>\t        </ul>\t      {{/each}}\t      {{#if multiItems}}\t        <a href="#" class="cert-expand-details">{{i18n code="oform.certificate.view.chain"}}</a>\t      {{/if}}\t      ',fileTypes:[".crt",".pem"]})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(147),i(203),i(139)],r=function(t,e,i){var n=e.tpl('\t    <p class="dropdown-footer">{{i18n code="oform.select.dropdown.footer" arguments="num"}}</p>\t  '),r=e.tpl('\t    <p class="dropdown-footer">{{i18n code="oform.baseselect.noresults"}}</p>\t  ')();return i.extend({template:e.tpl('<select id="{{inputId}}" name="{{name}}"></select>'),className:"o-form-searchable-select",maxOptions:50,events:{"change select":"update"},constructor:function(){i.apply(this,arguments),this.selectOptions=this.__getOptions(this.options.options)},editMode:function(){function e(){l.$(".dropdown-footer").remove(),t.defer(function(){var t=l.$(".selectize-dropdown-content > .option").length;t===o?l.$(".selectize-dropdown-content").append(n({num:o})):0===t&&(l.$(".selectize-dropdown-content").append(r),l.$(".selectize-dropdown.single").show())})}i.prototype.editMode.apply(this,arguments);var s=this.getModelValue(),o=this.getParamOrAttribute("maxOptions"),a=this.selectOptions,l=this;return this.$select=this.$("select"),this.$select.selectize({options:a,items:s?[s]:[],placeholder:this.options.placeholder,preload:!0,create:!1,maxOptions:o,maxItems:1,labelField:"value",valueField:"key",searchField:["value"],onType:e,onDropdownOpen:e}),this},val:function(){return this.$select&&this.$select.val()},focus:function(){return this.$select&&this.$select.focus()},__getOptions:function(e){return t.isFunction(e)&&(e=e.call(this)),t.map(t.isObject(e)?e:{},function(t,e){return{key:e,value:t}})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(147),i(146),i(231)],r=function(t,e,i){return i.extend({className:"okta-form-label o-form-label",attributes:{"data-se":"o-form-label"},constructor:function(n){t.defaults(n,{inputId:n.id}),delete n.id,i.apply(this,arguments);var r;r=this._isLabelView(n.label)?'<label for="{{inputId}}"></label>':t.contains(["radio","checkbox"],n.type)||!n.label?"{{label}}":'<label for="{{inputId}}">{{label}}&nbsp;</label>',n.sublabel&&(r+='<span class="o-form-explain">{{sublabel}}</span>'),n.tooltip&&(t.isString(n.tooltip)&&(n.tooltip={text:n.tooltip}),r+='<span class="o-form-tooltip icon-16 icon-only form-help-16" title="{{tooltip.text}}"></span>'),this.template=e.tpl(r)},getTemplateData:function(){var e={label:""};return t.each(["inputId","label","sublabel","tooltip"],function(i){e[i]=t.resultCtx(this.options,i,this)},this),e},_isLabelView:function(e){return!t.isUndefined(e)&&e instanceof i},postRender:function(){var e=this.getTemplateData();this._isLabelView(e.label)&&(this.removeChildren(),this.add(e.label,"label")),e.tooltip&&this.$(".o-form-tooltip").qtip(t.extend({style:{classes:"qtip-custom qtip-shadow"},position:{my:"bottom left",at:"top center"},hide:{fixed:!0},show:{delay:0}},e.tooltip.options))}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r,s;/*
		 * qTip2 - Pretty powerful tooltips - v3.0.3-5-g
		 * http://qtip2.com
		 *
		 * Copyright (c) 2017 
		 * Released under the MIT licenses
		 * http://jquery.org/license
		 *
		 * Date: Wed May 24 2017 01:22 UTC+0000
		 * Plugins: tips modal viewport svg imagemap ie6
		 * Styles: core basic css3
		 */
	!function(o,a,l){!function(o){"use strict";r=[i(6)],n=o,s="function"==typeof n?n.apply(e,r):n,!(s!==l&&(t.exports=s))}(function(t){"use strict";function e(e,i,n,r){this.id=n,this.target=e,this.tooltip=C,this.elements={target:e},this._id=z+"-"+n,this.timers={img:{}},this.options=i,this.plugins={},this.cache={event:{},target:t(),disabled:Y,attr:r,onTooltip:Y,lastClass:""},this.rendered=this.destroyed=this.disabled=this.waiting=this.hiddenDuringWait=this.positioning=this.triggering=Y}function i(e){return e===C||"object"!==t.type(e)}function n(e){return!(t.isFunction(e)||e&&e.attr||e.length||"object"===t.type(e)&&(e.jquery||e.then))}function r(e){var r,s,o,a;return i(e)?Y:(i(e.metadata)&&(e.metadata={type:e.metadata}),"content"in e&&(r=e.content,i(r)||r.jquery||r.done?(s=n(r)?Y:r,r=e.content={text:s}):s=r.text,"ajax"in r&&(o=r.ajax,a=o&&o.once!==Y,delete r.ajax,r.text=function(e,i){var n=s||t(this).attr(i.options.content.attr)||"Loading...",r=t.ajax(t.extend({},o,{context:i})).then(o.success,C,o.error).then(function(t){return t&&a&&i.set("content.text",t),t},function(t,e,n){i.destroyed||0===t.status||i.set("content.text",e+": "+n)});return a?n:(i.set("content.text",n),r)}),"title"in r&&(t.isPlainObject(r.title)&&(r.button=r.title.button,r.title=r.title.text),n(r.title||Y)&&(r.title=Y))),"position"in e&&i(e.position)&&(e.position={my:e.position,at:e.position}),"show"in e&&i(e.show)&&(e.show=e.show.jquery?{target:e.show}:e.show===D?{ready:D}:{event:e.show}),"hide"in e&&i(e.hide)&&(e.hide=e.hide.jquery?{target:e.hide}:{event:e.hide}),"style"in e&&i(e.style)&&(e.style={classes:e.style}),t.each(B,function(){this.sanitize&&this.sanitize(e)}),e)}function s(t,e){for(var i,n=0,r=t,s=e.split(".");r=r[s[n++]];)n<s.length&&(i=r);return[i||t,s.pop()]}function c(t,e){var i,n,r;for(i in this.checks)if(this.checks.hasOwnProperty(i))for(n in this.checks[i])this.checks[i].hasOwnProperty(n)&&(r=new RegExp(n,"i").exec(t))&&(e.push(r),("builtin"===i||this.plugins[i])&&this.checks[i][n].apply(this.plugins[i]||this,e))}function u(t){return q.concat("").join(t?"-"+t+" ":" ")}function d(e,i){return i>0?setTimeout(t.proxy(e,this),i):void e.call(this)}function h(t){this.tooltip.hasClass(tt)||(clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this.timers.show=d.call(this,function(){this.toggle(D,t)},this.options.show.delay))}function p(e){if(!this.tooltip.hasClass(tt)&&!this.destroyed){var i=t(e.relatedTarget),n=i.closest(G)[0]===this.tooltip[0],r=i[0]===this.options.show.target[0];if(clearTimeout(this.timers.show),clearTimeout(this.timers.hide),this!==i[0]&&"mouse"===this.options.position.target&&n||this.options.hide.fixed&&/mouse(out|leave|move)/.test(e.type)&&(n||r))try{e.preventDefault(),e.stopImmediatePropagation()}catch(s){}else this.timers.hide=d.call(this,function(){this.toggle(Y,e)},this.options.hide.delay,this)}}function f(t){!this.tooltip.hasClass(tt)&&this.options.hide.inactive&&(clearTimeout(this.timers.inactive),this.timers.inactive=d.call(this,function(){this.hide(t)},this.options.hide.inactive))}function m(t){this.rendered&&this.tooltip[0].offsetWidth>0&&this.reposition(t)}function _(e,i,n){t(a.body).delegate(e,(i.split?i:i.join("."+z+" "))+"."+z,function(){var e=T.api[t.attr(this,$)];e&&!e.disabled&&n.apply(e,arguments)})}function g(i,n,s){var o,l,c,u,d,h=t(a.body),p=i[0]===a?h:i,f=i.metadata?i.metadata(s.metadata):C,m="html5"===s.metadata.type&&f?f[s.metadata.name]:C,_=i.data(s.metadata.name||"qtipopts");try{_="string"==typeof _?t.parseJSON(_):_}catch(g){}if(u=t.extend(D,{},T.defaults,s,"object"==typeof _?r(_):C,r(m||f)),l=u.position,u.id=n,"boolean"==typeof u.content.text){if(c=i.attr(u.content.attr),u.content.attr===Y||!c)return Y;u.content.text=c}if(l.container.length||(l.container=h),l.target===Y&&(l.target=p),u.show.target===Y&&(u.show.target=p),u.show.solo===D&&(u.show.solo=l.container.closest("body")),u.hide.target===Y&&(u.hide.target=p),u.position.viewport===D&&(u.position.viewport=l.container),l.container=l.container.eq(0),l.at=new L(l.at,D),l.my=new L(l.my),i.data(z))if(u.overwrite)i.qtip("destroy",!0);else if(u.overwrite===Y)return Y;return i.attr(V,n),u.suppress&&(d=i.attr("title"))&&i.removeAttr("title").attr(it,d).attr("title",""),o=new e(i,u,n,(!!c)),i.data(z,o),o}function v(t){return t.charAt(0).toUpperCase()+t.slice(1)}function y(t,e){var i,n,r=e.charAt(0).toUpperCase()+e.slice(1),s=(e+" "+wt.join(r+" ")+r).split(" "),o=0;if(bt[e])return t.css(bt[e]);for(;i=s[o++];)if((n=t.css(i))!==l)return bt[e]=i,n}function b(t,e){return Math.ceil(parseFloat(y(t,e)))}function w(t,e){this._ns="tip",this.options=e,this.offset=e.offset,this.size=[e.width,e.height],this.qtip=t,this.init(t)}function M(t,e){this.options=e,this._ns="-modal",this.qtip=t,this.init(t)}function k(t){this._ns="ie6",this.qtip=t,this.init(t)}var T,S,L,x,E,D=!0,Y=!1,C=null,A="x",O="y",N="width",I="height",P="top",R="left",H="bottom",j="right",F="center",U="flipinvert",W="shift",B={},z="qtip",V="data-hasqtip",$="data-qtip-id",q=["ui-widget","ui-tooltip"],G="."+z,J="click dblclick mousedown mouseup mousemove mouseleave mouseenter".split(" "),K=z+"-fixed",Q=z+"-default",X=z+"-focus",Z=z+"-hover",tt=z+"-disabled",et="_replacedByqTip",it="oldtitle",nt={ie:function(){var t,e;for(t=4,e=a.createElement("div");(e.innerHTML="<!--[if gt IE "+t+"]><i></i><![endif]-->")&&e.getElementsByTagName("i")[0];t+=1);return t>4?t:NaN}(),iOS:parseFloat((""+(/CPU.*OS ([0-9_]{1,5})|(CPU like).*AppleWebKit.*Mobile/i.exec(navigator.userAgent)||[0,""])[1]).replace("undefined","3_2").replace("_",".").replace("_",""))||Y};S=e.prototype,S._when=function(e){return t.when.apply(t,e)},S.render=function(e){if(this.rendered||this.destroyed)return this;var i=this,n=this.options,r=this.cache,s=this.elements,o=n.content.text,a=n.content.title,l=n.content.button,c=n.position,u=[];return t.attr(this.target[0],"aria-describedby",this._id),r.posClass=this._createPosClass((this.position={my:c.my,at:c.at}).my),this.tooltip=s.tooltip=t("<div/>",{id:this._id,"class":[z,Q,n.style.classes,r.posClass].join(" "),width:n.style.width||"",height:n.style.height||"",tracking:"mouse"===c.target&&c.adjust.mouse,role:"alert","aria-live":"polite","aria-atomic":Y,"aria-describedby":this._id+"-content","aria-hidden":D}).toggleClass(tt,this.disabled).attr($,this.id).data(z,this).appendTo(c.container).append(s.content=t("<div />",{"class":z+"-content",id:this._id+"-content","aria-atomic":D})),this.rendered=-1,this.positioning=D,a&&(this._createTitle(),t.isFunction(a)||u.push(this._updateTitle(a,Y))),l&&this._createButton(),t.isFunction(o)||u.push(this._updateContent(o,Y)),this.rendered=D,this._setWidget(),t.each(B,function(t){var e;"render"===this.initialize&&(e=this(i))&&(i.plugins[t]=e)}),this._unassignEvents(),this._assignEvents(),this._when(u).then(function(){i._trigger("render"),i.positioning=Y,i.hiddenDuringWait||!n.show.ready&&!e||i.toggle(D,r.event,Y),i.hiddenDuringWait=Y}),T.api[this.id]=this,this},S.destroy=function(e){function i(){if(!this.destroyed){this.destroyed=D;var e,i=this.target,n=i.attr(it);this.rendered&&this.tooltip.stop(1,0).find("*").remove().end().remove(),t.each(this.plugins,function(){this.destroy&&this.destroy()});for(e in this.timers)this.timers.hasOwnProperty(e)&&clearTimeout(this.timers[e]);i.removeData(z).removeAttr($).removeAttr(V).removeAttr("aria-describedby"),this.options.suppress&&n&&i.attr("title",n).removeAttr(it),this._unassignEvents(),this.options=this.elements=this.cache=this.timers=this.plugins=this.mouse=C,delete T.api[this.id]}}return this.destroyed?this.target:(e===D&&"hide"!==this.triggering||!this.rendered?i.call(this):(this.tooltip.one("tooltiphidden",t.proxy(i,this)),!this.triggering&&this.hide()),this.target)},x=S.checks={builtin:{"^id$":function(e,i,n,r){var s=n===D?T.nextid:n,o=z+"-"+s;s!==Y&&s.length>0&&!t("#"+o).length?(this._id=o,this.rendered&&(this.tooltip[0].id=this._id,this.elements.content[0].id=this._id+"-content",this.elements.title[0].id=this._id+"-title")):e[i]=r},"^prerender":function(t,e,i){i&&!this.rendered&&this.render(this.options.show.ready)},"^content.text$":function(t,e,i){this._updateContent(i)},"^content.attr$":function(t,e,i,n){this.options.content.text===this.target.attr(n)&&this._updateContent(this.target.attr(i))},"^content.title$":function(t,e,i){return i?(i&&!this.elements.title&&this._createTitle(),void this._updateTitle(i)):this._removeTitle()},"^content.button$":function(t,e,i){this._updateButton(i)},"^content.title.(text|button)$":function(t,e,i){this.set("content."+e,i)},"^position.(my|at)$":function(t,e,i){"string"==typeof i&&(this.position[e]=t[e]=new L(i,"at"===e))},"^position.container$":function(t,e,i){this.rendered&&this.tooltip.appendTo(i)},"^show.ready$":function(t,e,i){i&&(!this.rendered&&this.render(D)||this.toggle(D))},"^style.classes$":function(t,e,i,n){this.rendered&&this.tooltip.removeClass(n).addClass(i)},"^style.(width|height)":function(t,e,i){this.rendered&&this.tooltip.css(e,i)},"^style.widget|content.title":function(){this.rendered&&this._setWidget()},"^style.def":function(t,e,i){this.rendered&&this.tooltip.toggleClass(Q,!!i)},"^events.(render|show|move|hide|focus|blur)$":function(e,i,n){this.rendered&&this.tooltip[(t.isFunction(n)?"":"un")+"bind"]("tooltip"+i,n)},"^(show|hide|position).(event|target|fixed|inactive|leave|distance|viewport|adjust)":function(){if(this.rendered){var t=this.options.position;this.tooltip.attr("tracking","mouse"===t.target&&t.adjust.mouse),this._unassignEvents(),this._assignEvents()}}}},S.get=function(t){if(this.destroyed)return this;var e=s(this.options,t.toLowerCase()),i=e[0][e[1]];return i.precedance?i.string():i};var rt=/^position\.(my|at|adjust|target|container|viewport)|style|content|show\.ready/i,st=/^prerender|show\.ready/i;S.set=function(e,i){if(this.destroyed)return this;var n,o=this.rendered,a=Y,l=this.options;return"string"==typeof e?(n=e,e={},e[n]=i):e=t.extend({},e),t.each(e,function(i,n){if(o&&st.test(i))return void delete e[i];var r,c=s(l,i.toLowerCase());r=c[0][c[1]],c[0][c[1]]=n&&n.nodeType?t(n):n,a=rt.test(i)||a,e[i]=[c[0],c[1],n,r]}),r(l),this.positioning=D,t.each(e,t.proxy(c,this)),this.positioning=Y,this.rendered&&this.tooltip[0].offsetWidth>0&&a&&this.reposition("mouse"===l.position.target?C:this.cache.event),this},S._update=function(e,i){var n=this,r=this.cache;return this.rendered&&e?(t.isFunction(e)&&(e=e.call(this.elements.target,r.event,this)||""),t.isFunction(e.then)?(r.waiting=D,e.then(function(t){return r.waiting=Y,n._update(t,i)},C,function(t){return n._update(t,i)})):e===Y||!e&&""!==e?Y:(e.jquery&&e.length>0?i.empty().append(e.css({display:"block",visibility:"visible"})):i.html(e),this._waitForContent(i).then(function(t){n.rendered&&n.tooltip[0].offsetWidth>0&&n.reposition(r.event,!t.length)}))):Y},S._waitForContent=function(e){var i=this.cache;return i.waiting=D,(t.fn.imagesLoaded?e.imagesLoaded():(new t.Deferred).resolve([])).done(function(){i.waiting=Y}).promise()},S._updateContent=function(t,e){this._update(t,this.elements.content,e)},S._updateTitle=function(t,e){this._update(t,this.elements.title,e)===Y&&this._removeTitle(Y)},S._createTitle=function(){var e=this.elements,i=this._id+"-title";e.titlebar&&this._removeTitle(),e.titlebar=t("<div />",{"class":z+"-titlebar "+(this.options.style.widget?u("header"):"")}).append(e.title=t("<div />",{id:i,"class":z+"-title","aria-atomic":D})).insertBefore(e.content).delegate(".qtip-close","mousedown keydown mouseup keyup mouseout",function(e){t(this).toggleClass("ui-state-active ui-state-focus","down"===e.type.substr(-4))}).delegate(".qtip-close","mouseover mouseout",function(e){t(this).toggleClass("ui-state-hover","mouseover"===e.type)}),this.options.content.button&&this._createButton()},S._removeTitle=function(t){var e=this.elements;e.title&&(e.titlebar.remove(),e.titlebar=e.title=e.button=C,t!==Y&&this.reposition())},S._createPosClass=function(t){return z+"-pos-"+(t||this.options.position.my).abbrev()},S.reposition=function(e,i){if(!this.rendered||this.positioning||this.destroyed)return this;this.positioning=D;var n,r,s,l,c=this.cache,u=this.tooltip,d=this.options.position,h=d.target,p=d.my,f=d.at,m=d.viewport,_=d.container,g=d.adjust,v=g.method.split(" "),y=u.outerWidth(Y),b=u.outerHeight(Y),w=0,M=0,k=u.css("position"),T={left:0,top:0},S=u[0].offsetWidth>0,L=e&&"scroll"===e.type,x=t(o),E=_[0].ownerDocument,C=this.mouse;if(t.isArray(h)&&2===h.length)f={x:R,y:P},T={left:h[0],top:h[1]};else if("mouse"===h)f={x:R,y:P},(!g.mouse||this.options.hide.distance)&&c.origin&&c.origin.pageX?e=c.origin:!e||e&&("resize"===e.type||"scroll"===e.type)?e=c.event:C&&C.pageX&&(e=C),"static"!==k&&(T=_.offset()),E.body.offsetWidth!==(o.innerWidth||E.documentElement.clientWidth)&&(r=t(a.body).offset()),T={left:e.pageX-T.left+(r&&r.left||0),top:e.pageY-T.top+(r&&r.top||0)},g.mouse&&L&&C&&(T.left-=(C.scrollX||0)-x.scrollLeft(),T.top-=(C.scrollY||0)-x.scrollTop());else{if("event"===h?e&&e.target&&"scroll"!==e.type&&"resize"!==e.type?c.target=t(e.target):e.target||(c.target=this.elements.target):"event"!==h&&(c.target=t(h.jquery?h:this.elements.target)),h=c.target,h=t(h).eq(0),0===h.length)return this;h[0]===a||h[0]===o?(w=nt.iOS?o.innerWidth:h.width(),M=nt.iOS?o.innerHeight:h.height(),h[0]===o&&(T={top:(m||h).scrollTop(),left:(m||h).scrollLeft()})):B.imagemap&&h.is("area")?n=B.imagemap(this,h,f,B.viewport?v:Y):B.svg&&h&&h[0].ownerSVGElement?n=B.svg(this,h,f,B.viewport?v:Y):(w=h.outerWidth(Y),M=h.outerHeight(Y),T=h.offset()),n&&(w=n.width,M=n.height,r=n.offset,T=n.position),T=this.reposition.offset(h,T,_),(nt.iOS>3.1&&nt.iOS<4.1||nt.iOS>=4.3&&nt.iOS<4.33||!nt.iOS&&"fixed"===k)&&(T.left-=x.scrollLeft(),T.top-=x.scrollTop()),(!n||n&&n.adjustable!==Y)&&(T.left+=f.x===j?w:f.x===F?w/2:0,T.top+=f.y===H?M:f.y===F?M/2:0)}return T.left+=g.x+(p.x===j?-y:p.x===F?-y/2:0),T.top+=g.y+(p.y===H?-b:p.y===F?-b/2:0),B.viewport?(s=T.adjusted=B.viewport(this,T,d,w,M,y,b),r&&s.left&&(T.left+=r.left),r&&s.top&&(T.top+=r.top),s.my&&(this.position.my=s.my)):T.adjusted={left:0,top:0},c.posClass!==(l=this._createPosClass(this.position.my))&&(c.posClass=l,u.removeClass(c.posClass).addClass(l)),this._trigger("move",[T,m.elem||m],e)?(delete T.adjusted,i===Y||!S||isNaN(T.left)||isNaN(T.top)||"mouse"===h||!t.isFunction(d.effect)?u.css(T):t.isFunction(d.effect)&&(d.effect.call(u,this,t.extend({},T)),u.queue(function(e){t(this).css({opacity:"",height:""}),nt.ie&&this.style.removeAttribute("filter"),e()})),this.positioning=Y,this):this},S.reposition.offset=function(e,i,n){function r(t,e){i.left+=e*t.scrollLeft(),i.top+=e*t.scrollTop()}if(!n[0])return i;var s,o,l,c,u=t(e[0].ownerDocument),d=!!nt.ie&&"CSS1Compat"!==a.compatMode,h=n[0];do"static"!==(o=t.css(h,"position"))&&("fixed"===o?(l=h.getBoundingClientRect(),r(u,-1)):(l=t(h).position(),l.left+=parseFloat(t.css(h,"borderLeftWidth"))||0,l.top+=parseFloat(t.css(h,"borderTopWidth"))||0),i.left-=l.left+(parseFloat(t.css(h,"marginLeft"))||0),i.top-=l.top+(parseFloat(t.css(h,"marginTop"))||0),s||"hidden"===(c=t.css(h,"overflow"))||"visible"===c||"BODY"===t.prop(h,"tagName")||(s=t(h)));while(h=h.offsetParent);return s&&(s[0]!==u[0]||d)&&r(s,1),i};var ot=(L=S.reposition.Corner=function(t,e){t=(""+t).replace(/([A-Z])/," $1").replace(/middle/gi,F).toLowerCase(),this.x=(t.match(/left|right/i)||t.match(/center/)||["inherit"])[0].toLowerCase(),this.y=(t.match(/top|bottom|center/i)||["inherit"])[0].toLowerCase(),this.forceY=!!e;var i=t.charAt(0);this.precedance="t"===i||"b"===i?O:A}).prototype;ot.invert=function(t,e){this[t]=this[t]===R?j:this[t]===j?R:e||this[t]},ot.string=function(t){var e=this.x,i=this.y,n=e!==i?"center"===e||"center"!==i&&(this.precedance===O||this.forceY)?[i,e]:[e,i]:[e];return t!==!1?n.join(" "):n},ot.abbrev=function(){var t=this.string(!1);return t[0].charAt(0)+(t[1]&&t[1].charAt(0)||"")},ot.clone=function(){return new L(this.string(),this.forceY)},S.toggle=function(e,i){var n=this.cache,r=this.options,s=this.tooltip;if(i){if(/over|enter/.test(i.type)&&n.event&&/out|leave/.test(n.event.type)&&r.show.target.add(i.target).length===r.show.target.length&&s.has(i.relatedTarget).length)return this;n.event=t.event.fix(i)}if(this.waiting&&!e&&(this.hiddenDuringWait=D),!this.rendered)return e?this.render(1):this;if(this.destroyed||this.disabled)return this;var o,l,c,u=e?"show":"hide",d=this.options[u],h=this.options.position,p=this.options.content,f=this.tooltip.css("width"),m=this.tooltip.is(":visible"),_=e||1===d.target.length,g=!i||d.target.length<2||n.target[0]===i.target;return(typeof e).search("boolean|number")&&(e=!m),o=!s.is(":animated")&&m===e&&g,l=o?C:!!this._trigger(u,[90]),this.destroyed?this:(l!==Y&&e&&this.focus(i),!l||o?this:(t.attr(s[0],"aria-hidden",!e),e?(this.mouse&&(n.origin=t.event.fix(this.mouse)),t.isFunction(p.text)&&this._updateContent(p.text,Y),t.isFunction(p.title)&&this._updateTitle(p.title,Y),!E&&"mouse"===h.target&&h.adjust.mouse&&(t(a).bind("mousemove."+z,this._storeMouse),E=D),f||s.css("width",s.outerWidth(Y)),this.reposition(i,arguments[2]),f||s.css("width",""),d.solo&&("string"==typeof d.solo?t(d.solo):t(G,d.solo)).not(s).not(d.target).qtip("hide",new t.Event("tooltipsolo"))):(clearTimeout(this.timers.show),delete n.origin,E&&!t(G+'[tracking="true"]:visible',d.solo).not(s).length&&(t(a).unbind("mousemove."+z),E=Y),this.blur(i)),c=t.proxy(function(){e?(nt.ie&&s[0].style.removeAttribute("filter"),s.css("overflow",""),"string"==typeof d.autofocus&&t(this.options.show.autofocus,s).focus(),this.options.show.target.trigger("qtip-"+this.id+"-inactive")):s.css({display:"",visibility:"",opacity:"",left:"",top:""}),this._trigger(e?"visible":"hidden")},this),d.effect===Y||_===Y?(s[u](),c()):t.isFunction(d.effect)?(s.stop(1,1),d.effect.call(s,this),s.queue("fx",function(t){c(),t()})):s.fadeTo(90,e?1:0,c),e&&d.target.trigger("qtip-"+this.id+"-inactive"),this))},S.show=function(t){return this.toggle(D,t)},S.hide=function(t){return this.toggle(Y,t)},S.focus=function(e){if(!this.rendered||this.destroyed)return this;var i=t(G),n=this.tooltip,r=parseInt(n[0].style.zIndex,10),s=T.zindex+i.length;return n.hasClass(X)||this._trigger("focus",[s],e)&&(r!==s&&(i.each(function(){this.style.zIndex>r&&(this.style.zIndex=this.style.zIndex-1)}),i.filter("."+X).qtip("blur",e)),n.addClass(X)[0].style.zIndex=s),this},S.blur=function(t){return!this.rendered||this.destroyed?this:(this.tooltip.removeClass(X),this._trigger("blur",[this.tooltip.css("zIndex")],t),this)},S.disable=function(t){return this.destroyed?this:("toggle"===t?t=!(this.rendered?this.tooltip.hasClass(tt):this.disabled):"boolean"!=typeof t&&(t=D),this.rendered&&this.tooltip.toggleClass(tt,t).attr("aria-disabled",t),this.disabled=!!t,this)},S.enable=function(){return this.disable(Y)},S._createButton=function(){var e=this,i=this.elements,n=i.tooltip,r=this.options.content.button,s="string"==typeof r,o=s?r:"Close tooltip";i.button&&i.button.remove(),r.jquery?i.button=r:i.button=t("<a />",{"class":"qtip-close "+(this.options.style.widget?"":z+"-icon"),title:o,"aria-label":o}).prepend(t("<span />",{"class":"ui-icon ui-icon-close",html:"&times;"})),i.button.appendTo(i.titlebar||n).attr("role","button").click(function(t){return n.hasClass(tt)||e.hide(t),Y})},S._updateButton=function(t){if(!this.rendered)return Y;var e=this.elements.button;t?this._createButton():e.remove()},S._setWidget=function(){var t=this.options.style.widget,e=this.elements,i=e.tooltip,n=i.hasClass(tt);i.removeClass(tt),tt=t?"ui-state-disabled":"qtip-disabled",i.toggleClass(tt,n),i.toggleClass("ui-helper-reset "+u(),t).toggleClass(Q,this.options.style.def&&!t),e.content&&e.content.toggleClass(u("content"),t),e.titlebar&&e.titlebar.toggleClass(u("header"),t),e.button&&e.button.toggleClass(z+"-icon",!t)},S._storeMouse=function(e){return(this.mouse=t.event.fix(e)).type="mousemove",this},S._bind=function(e,i,n,r,s){if(e&&n&&i.length){var o="."+this._id+(r?"-"+r:"");return t(e).bind((i.split?i:i.join(o+" "))+o,t.proxy(n,s||this)),this}},S._unbind=function(e,i){return e&&t(e).unbind("."+this._id+(i?"-"+i:"")),this},S._trigger=function(e,i,n){var r=new t.Event("tooltip"+e);return r.originalEvent=n&&t.extend({},n)||this.cache.event||C,this.triggering=e,this.tooltip.trigger(r,[this].concat(i||[])),this.triggering=Y,!r.isDefaultPrevented()},S._bindEvents=function(e,i,n,r,s,o){var a=n.filter(r).add(r.filter(n)),l=[];a.length&&(t.each(i,function(i,n){var r=t.inArray(n,e);r>-1&&l.push(e.splice(r,1)[0])}),l.length&&(this._bind(a,l,function(t){var e=!!this.rendered&&this.tooltip[0].offsetWidth>0;(e?o:s).call(this,t)}),n=n.not(a),r=r.not(a))),this._bind(n,e,s),this._bind(r,i,o)},S._assignInitialEvents=function(e){function i(e){return this.disabled||this.destroyed?Y:(this.cache.event=e&&t.event.fix(e),this.cache.target=e&&t(e.target),clearTimeout(this.timers.show),void(this.timers.show=d.call(this,function(){this.render("object"==typeof e||n.show.ready)},n.prerender?0:n.show.delay)))}var n=this.options,r=n.show.target,s=n.hide.target,o=n.show.event?t.trim(""+n.show.event).split(" "):[],a=n.hide.event?t.trim(""+n.hide.event).split(" "):[];this._bind(this.elements.target,["remove","removeqtip"],function(){this.destroy(!0)},"destroy"),/mouse(over|enter)/i.test(n.show.event)&&!/mouse(out|leave)/i.test(n.hide.event)&&a.push("mouseleave"),this._bind(r,"mousemove",function(t){this._storeMouse(t),this.cache.onTarget=D}),this._bindEvents(o,a,r,s,i,function(){return this.timers?void clearTimeout(this.timers.show):Y}),(n.show.ready||n.prerender)&&i.call(this,e)},S._assignEvents=function(){var e=this,i=this.options,n=i.position,r=this.tooltip,s=i.show.target,l=i.hide.target,c=n.container,u=n.viewport,d=t(a),_=t(o),g=i.show.event?t.trim(""+i.show.event).split(" "):[],v=i.hide.event?t.trim(""+i.hide.event).split(" "):[];t.each(i.events,function(t,i){e._bind(r,"toggle"===t?["tooltipshow","tooltiphide"]:["tooltip"+t],i,null,r)}),/mouse(out|leave)/i.test(i.hide.event)&&"window"===i.hide.leave&&this._bind(d,["mouseout","blur"],function(t){/select|option/.test(t.target.nodeName)||t.relatedTarget||this.hide(t)}),i.hide.fixed?l=l.add(r.addClass(K)):/mouse(over|enter)/i.test(i.show.event)&&this._bind(l,"mouseleave",function(){clearTimeout(this.timers.show)}),(""+i.hide.event).indexOf("unfocus")>-1&&this._bind(c.closest("html"),["mousedown","touchstart"],function(e){var i=t(e.target),n=this.rendered&&!this.tooltip.hasClass(tt)&&this.tooltip[0].offsetWidth>0,r=i.parents(G).filter(this.tooltip[0]).length>0;i[0]===this.target[0]||i[0]===this.tooltip[0]||r||this.target.has(i[0]).length||!n||this.hide(e)}),"number"==typeof i.hide.inactive&&(this._bind(s,"qtip-"+this.id+"-inactive",f,"inactive"),this._bind(l.add(r),T.inactiveEvents,f)),this._bindEvents(g,v,s,l,h,p),this._bind(s.add(r),"mousemove",function(t){if("number"==typeof i.hide.distance){var e=this.cache.origin||{},n=this.options.hide.distance,r=Math.abs;(r(t.pageX-e.pageX)>=n||r(t.pageY-e.pageY)>=n)&&this.hide(t)}this._storeMouse(t)}),"mouse"===n.target&&n.adjust.mouse&&(i.hide.event&&this._bind(s,["mouseenter","mouseleave"],function(t){return this.cache?void(this.cache.onTarget="mouseenter"===t.type):Y}),this._bind(d,"mousemove",function(t){this.rendered&&this.cache.onTarget&&!this.tooltip.hasClass(tt)&&this.tooltip[0].offsetWidth>0&&this.reposition(t)})),(n.adjust.resize||u.length)&&this._bind(t.event.special.resize?u:_,"resize",m),n.adjust.scroll&&this._bind(_.add(n.container),"scroll",m)},S._unassignEvents=function(){var e=this.options,i=e.show.target,n=e.hide.target,r=t.grep([this.elements.target[0],this.rendered&&this.tooltip[0],e.position.container[0],e.position.viewport[0],e.position.container.closest("html")[0],o,a],function(t){return"object"==typeof t});i&&i.toArray&&(r=r.concat(i.toArray())),n&&n.toArray&&(r=r.concat(n.toArray())),this._unbind(r)._unbind(r,"destroy")._unbind(r,"inactive")},t(function(){_(G,["mouseenter","mouseleave"],function(e){var i="mouseenter"===e.type,n=t(e.currentTarget),r=t(e.relatedTarget||e.target),s=this.options;i?(this.focus(e),n.hasClass(K)&&!n.hasClass(tt)&&clearTimeout(this.timers.hide)):"mouse"===s.position.target&&s.position.adjust.mouse&&s.hide.event&&s.show.target&&!r.closest(s.show.target[0]).length&&this.hide(e),n.toggleClass(Z,i)}),_("["+$+"]",J,f)}),T=t.fn.qtip=function(e,i,n){var s=(""+e).toLowerCase(),o=C,a=t.makeArray(arguments).slice(1),c=a[a.length-1],u=this[0]?t.data(this[0],z):C;return!arguments.length&&u||"api"===s?u:"string"==typeof e?(this.each(function(){var e=t.data(this,z);if(!e)return D;if(c&&c.timeStamp&&(e.cache.event=c),!i||"option"!==s&&"options"!==s)e[s]&&e[s].apply(e,a);else{if(n===l&&!t.isPlainObject(i))return o=e.get(i),Y;e.set(i,n)}}),o!==C?o:this):"object"!=typeof e&&arguments.length?void 0:(u=r(t.extend(D,{},e)),this.each(function(e){var i,n;return n=t.isArray(u.id)?u.id[e]:u.id,n=!n||n===Y||n.length<1||T.api[n]?T.nextid++:n,i=g(t(this),n,u),i===Y?D:(T.api[n]=i,t.each(B,function(){"initialize"===this.initialize&&this(i)}),void i._assignInitialEvents(c))}))},t.qtip=e,T.api={},t.each({attr:function(e,i){if(this.length){var n=this[0],r="title",s=t.data(n,"qtip");if(e===r&&s&&s.options&&"object"==typeof s&&"object"==typeof s.options&&s.options.suppress)return arguments.length<2?t.attr(n,it):(s&&s.options.content.attr===r&&s.cache.attr&&s.set("content.text",i),this.attr(it,i))}return t.fn["attr"+et].apply(this,arguments)},clone:function(e){var i=t.fn["clone"+et].apply(this,arguments);return e||i.filter("["+it+"]").attr("title",function(){return t.attr(this,it)}).removeAttr(it),i}},function(e,i){if(!i||t.fn[e+et])return D;var n=t.fn[e+et]=t.fn[e];t.fn[e]=function(){return i.apply(this,arguments)||n.apply(this,arguments)}}),t.ui||(t["cleanData"+et]=t.cleanData,t.cleanData=function(e){for(var i,n=0;(i=t(e[n])).length;n++)if(i.attr(V))try{i.triggerHandler("removeqtip")}catch(r){}t["cleanData"+et].apply(this,arguments)}),T.version="3.0.3-5-g",T.nextid=0,T.inactiveEvents=J,T.zindex=15e3,T.defaults={prerender:Y,id:Y,overwrite:D,suppress:D,content:{text:D,attr:"title",title:Y,button:Y},position:{my:"top left",at:"bottom right",target:Y,container:Y,viewport:Y,adjust:{x:0,y:0,mouse:D,scroll:D,resize:D,method:"flipinvert flipinvert"},effect:function(e,i){t(this).animate(i,{duration:200,queue:Y})}},show:{target:Y,event:"mouseenter",effect:D,delay:90,solo:Y,ready:Y,autofocus:Y},hide:{target:Y,event:"mouseleave",effect:D,delay:0,fixed:Y,inactive:Y,leave:"window",distance:Y},style:{classes:"",widget:Y,width:Y,height:Y,def:D},events:{render:C,move:C,show:C,hide:C,toggle:C,visible:C,hidden:C,focus:C,blur:C}};var at,lt,ct,ut,dt,ht="margin",pt="border",ft="color",mt="background-color",_t="transparent",gt=" !important",vt=!!a.createElement("canvas").getContext,yt=/rgba?\(0, 0, 0(, 0)?\)|transparent|#123456/i,bt={},wt=["Webkit","O","Moz","ms"];vt?(ut=o.devicePixelRatio||1,dt=function(){var t=a.createElement("canvas").getContext("2d");return t.backingStorePixelRatio||t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||1}(),ct=ut/dt):lt=function(t,e,i){return"<qtipvml:"+t+' xmlns="urn:schemas-microsoft.com:vml" class="qtip-vml" '+(e||"")+' style="behavior: url(#default#VML); '+(i||"")+'" />'},t.extend(w.prototype,{init:function(e){var i,n;n=this.element=e.elements.tip=t("<div />",{"class":z+"-tip"}).prependTo(e.tooltip),vt?(i=t("<canvas />").appendTo(this.element)[0].getContext("2d"),i.lineJoin="miter",i.miterLimit=1e5,i.save()):(i=lt("shape",'coordorigin="0,0"',"position:absolute;"),this.element.html(i+i),e._bind(t("*",n).add(n),["click","mousedown"],function(t){t.stopPropagation()},this._ns)),e._bind(e.tooltip,"tooltipmove",this.reposition,this._ns,this),this.create()},_swapDimensions:function(){this.size[0]=this.options.height,this.size[1]=this.options.width},_resetDimensions:function(){this.size[0]=this.options.width,this.size[1]=this.options.height},_useTitle:function(t){var e=this.qtip.elements.titlebar;return e&&(t.y===P||t.y===F&&this.element.position().top+this.size[1]/2+this.options.offset<e.outerHeight(D))},_parseCorner:function(t){var e=this.qtip.options.position.my;return t===Y||e===Y?t=Y:t===D?t=new L(e.string()):t.string||(t=new L(t),t.fixed=D),t},_parseWidth:function(t,e,i){var n=this.qtip.elements,r=pt+v(e)+"Width";return(i?b(i,r):b(n.content,r)||b(this._useTitle(t)&&n.titlebar||n.content,r)||b(n.tooltip,r))||0},_parseRadius:function(t){var e=this.qtip.elements,i=pt+v(t.y)+v(t.x)+"Radius";return nt.ie<9?0:b(this._useTitle(t)&&e.titlebar||e.content,i)||b(e.tooltip,i)||0},_invalidColour:function(t,e,i){var n=t.css(e);return!n||i&&n===t.css(i)||yt.test(n)?Y:n},_parseColours:function(e){var i=this.qtip.elements,n=this.element.css("cssText",""),r=pt+v(e[e.precedance])+v(ft),s=this._useTitle(e)&&i.titlebar||i.content,o=this._invalidColour,a=[];return a[0]=o(n,mt)||o(s,mt)||o(i.content,mt)||o(i.tooltip,mt)||n.css(mt),a[1]=o(n,r,ft)||o(s,r,ft)||o(i.content,r,ft)||o(i.tooltip,r,ft)||i.tooltip.css(r),t("*",n).add(n).css("cssText",mt+":"+_t+gt+";"+pt+":0"+gt+";"),a},_calculateSize:function(t){var e,i,n,r=t.precedance===O,s=this.options.width,o=this.options.height,a="c"===t.abbrev(),l=(r?s:o)*(a?.5:1),c=Math.pow,u=Math.round,d=Math.sqrt(c(l,2)+c(o,2)),h=[this.border/l*d,this.border/o*d];return h[2]=Math.sqrt(c(h[0],2)-c(this.border,2)),h[3]=Math.sqrt(c(h[1],2)-c(this.border,2)),e=d+h[2]+h[3]+(a?0:h[0]),i=e/d,n=[u(i*s),u(i*o)],r?n:n.reverse()},_calculateTip:function(t,e,i){i=i||1,e=e||this.size;var n=e[0]*i,r=e[1]*i,s=Math.ceil(n/2),o=Math.ceil(r/2),a={br:[0,0,n,r,n,0],bl:[0,0,n,0,0,r],tr:[0,r,n,0,n,r],tl:[0,0,0,r,n,r],tc:[0,r,s,0,n,r],bc:[0,0,n,0,s,r],rc:[0,0,n,o,0,r],lc:[n,0,n,r,0,o]};return a.lt=a.br,a.rt=a.bl,a.lb=a.tr,a.rb=a.tl,a[t.abbrev()]},_drawCoords:function(t,e){t.beginPath(),t.moveTo(e[0],e[1]),t.lineTo(e[2],e[3]),t.lineTo(e[4],e[5]),t.closePath()},create:function(){var t=this.corner=(vt||nt.ie)&&this._parseCorner(this.options.corner);return this.enabled=!!this.corner&&"c"!==this.corner.abbrev(),this.enabled&&(this.qtip.cache.corner=t.clone(),this.update()),this.element.toggle(this.enabled),this.corner},update:function(e,i){if(!this.enabled)return this;var n,r,s,a,l,c,u,d,h=this.qtip.elements,p=this.element,f=p.children(),m=this.options,_=this.size,g=m.mimic,v=Math.round;e||(e=this.qtip.cache.corner||this.corner),g===Y?g=e:(g=new L(g),g.precedance=e.precedance,"inherit"===g.x?g.x=e.x:"inherit"===g.y?g.y=e.y:g.x===g.y&&(g[e.precedance]=e[e.precedance])),r=g.precedance,e.precedance===A?this._swapDimensions():this._resetDimensions(),n=this.color=this._parseColours(e),n[1]!==_t?(d=this.border=this._parseWidth(e,e[e.precedance]),m.border&&d<1&&!yt.test(n[1])&&(n[0]=n[1]),this.border=d=m.border!==D?m.border:d):this.border=d=0,u=this.size=this._calculateSize(e),p.css({width:u[0],height:u[1],lineHeight:u[1]+"px"}),c=e.precedance===O?[v(g.x===R?d:g.x===j?u[0]-_[0]-d:(u[0]-_[0])/2),v(g.y===P?u[1]-_[1]:0)]:[v(g.x===R?u[0]-_[0]:0),v(g.y===P?d:g.y===H?u[1]-_[1]-d:(u[1]-_[1])/2)],vt?(s=f[0].getContext("2d"),s.restore(),s.save(),s.clearRect(0,0,6e3,6e3),a=this._calculateTip(g,_,ct),l=this._calculateTip(g,this.size,ct),f.attr(N,u[0]*ct).attr(I,u[1]*ct),f.css(N,u[0]).css(I,u[1]),this._drawCoords(s,l),s.fillStyle=n[1],s.fill(),s.translate(c[0]*ct,c[1]*ct),this._drawCoords(s,a),s.fillStyle=n[0],s.fill()):(a=this._calculateTip(g),a="m"+a[0]+","+a[1]+" l"+a[2]+","+a[3]+" "+a[4]+","+a[5]+" xe",c[2]=d&&/^(r|b)/i.test(e.string())?8===nt.ie?2:1:0,f.css({coordsize:u[0]+d+" "+u[1]+d,antialias:""+(g.string().indexOf(F)>-1),left:c[0]-c[2]*Number(r===A),top:c[1]-c[2]*Number(r===O),width:u[0]+d,height:u[1]+d}).each(function(e){var i=t(this);i[i.prop?"prop":"attr"]({coordsize:u[0]+d+" "+u[1]+d,path:a,fillcolor:n[0],filled:!!e,stroked:!e}).toggle(!(!d&&!e)),!e&&i.html(lt("stroke",'weight="'+2*d+'px" color="'+n[1]+'" miterlimit="1000" joinstyle="miter"'))})),o.opera&&setTimeout(function(){h.tip.css({display:"inline-block",visibility:"visible"})},1),i!==Y&&this.calculate(e,u)},calculate:function(e,i){if(!this.enabled)return Y;var n,r,s=this,o=this.qtip.elements,a=this.element,l=this.options.offset,c={};
	return e=e||this.corner,n=e.precedance,i=i||this._calculateSize(e),r=[e.x,e.y],n===A&&r.reverse(),t.each(r,function(t,r){var a,u,d;r===F?(a=n===O?R:P,c[a]="50%",c[ht+"-"+a]=-Math.round(i[n===O?0:1]/2)+l):(a=s._parseWidth(e,r,o.tooltip),u=s._parseWidth(e,r,o.content),d=s._parseRadius(e),c[r]=Math.max(-s.border,t?u:l+(d>a?d:-a)))}),c[e[n]]-=i[n===A?0:1],a.css({margin:"",top:"",bottom:"",left:"",right:""}).css(c),c},reposition:function(t,e,i){function n(t,e,i,n,r){t===W&&c.precedance===e&&u[n]&&c[i]!==F?c.precedance=c.precedance===A?O:A:t!==W&&u[n]&&(c[e]=c[e]===F?u[n]>0?n:r:c[e]===n?r:n)}function r(t,e,n){c[t]===F?m[ht+"-"+e]=f[t]=s[ht+"-"+e]-u[e]:(o=s[n]!==l?[u[e],-s[e]]:[-u[e],s[e]],(f[t]=Math.max(o[0],o[1]))>o[0]&&(i[e]-=u[e],f[e]=Y),m[s[n]!==l?n:e]=f[t])}if(this.enabled){var s,o,a=e.cache,c=this.corner.clone(),u=i.adjusted,d=e.options.position.adjust.method.split(" "),h=d[0],p=d[1]||d[0],f={left:Y,top:Y,x:0,y:0},m={};this.corner.fixed!==D&&(n(h,A,O,R,j),n(p,O,A,P,H),c.string()===a.corner.string()&&a.cornerTop===u.top&&a.cornerLeft===u.left||this.update(c,Y)),s=this.calculate(c),s.right!==l&&(s.left=-s.right),s.bottom!==l&&(s.top=-s.bottom),s.user=this.offset,f.left=h===W&&!!u.left,f.left&&r(A,R,j),f.top=p===W&&!!u.top,f.top&&r(O,P,H),this.element.css(m).toggle(!(f.x&&f.y||c.x===F&&f.y||c.y===F&&f.x)),i.left-=s.left.charAt?s.user:h!==W||f.top||!f.left&&!f.top?s.left+this.border:0,i.top-=s.top.charAt?s.user:p!==W||f.left||!f.left&&!f.top?s.top+this.border:0,a.cornerLeft=u.left,a.cornerTop=u.top,a.corner=c.clone()}},destroy:function(){this.qtip._unbind(this.qtip.tooltip,this._ns),this.qtip.elements.tip&&this.qtip.elements.tip.find("*").remove().end().remove()}}),at=B.tip=function(t){return new w(t,t.options.style.tip)},at.initialize="render",at.sanitize=function(t){if(t.style&&"tip"in t.style){var e=t.style.tip;"object"!=typeof e&&(e=t.style.tip={corner:e}),/string|boolean/i.test(typeof e.corner)||(e.corner=D)}},x.tip={"^position.my|style.tip.(corner|mimic|border)$":function(){this.create(),this.qtip.reposition()},"^style.tip.(height|width)$":function(t){this.size=[t.width,t.height],this.update(),this.qtip.reposition()},"^content.title|style.(classes|widget)$":function(){this.update()}},t.extend(D,T.defaults,{style:{tip:{corner:D,mimic:Y,width:6,height:6,border:D,offset:0}}});var Mt,kt,Tt="qtip-modal",St="."+Tt;kt=function(){function e(e){if(t.expr[":"].focusable)return t.expr[":"].focusable;var i,n,r,s=!isNaN(t.attr(e,"tabindex")),o=e.nodeName&&e.nodeName.toLowerCase();return"area"===o?(i=e.parentNode,n=i.name,!(!e.href||!n||"map"!==i.nodeName.toLowerCase())&&(r=t("img[usemap=#"+n+"]")[0],!!r&&r.is(":visible"))):/input|select|textarea|button|object/.test(o)?!e.disabled:"a"===o?e.href||s:s}function i(t){c.length<1&&t.length?t.not("body").blur():c.first().focus()}function n(e){if(o.is(":visible")){var n,s=t(e.target),a=r.tooltip,l=s.closest(G);n=l.length<1?Y:parseInt(l[0].style.zIndex,10)>parseInt(a[0].style.zIndex,10),n||s.closest(G)[0]===a[0]||i(s)}}var r,s,o,l=this,c={};t.extend(l,{init:function(){return o=l.elem=t("<div />",{id:"qtip-overlay",html:"<div></div>",mousedown:function(){return Y}}).hide(),t(a.body).bind("focusin"+St,n),t(a).bind("keydown"+St,function(t){r&&r.options.show.modal.escape&&27===t.keyCode&&r.hide(t)}),o.bind("click"+St,function(t){r&&r.options.show.modal.blur&&r.hide(t)}),l},update:function(t){r=t,c=t.options.show.modal.stealfocus!==Y?t.tooltip.find("*").filter(function(){return e(this)}):[]},toggle:function(e,n,c){var u=e.tooltip,d=e.options.show.modal,h=d.effect,p=n?"show":"hide",f=o.is(":visible"),m=t(St).filter(":visible:not(:animated)").not(u);return l.update(e),n&&d.stealfocus!==Y&&i(t(":focus")),o.toggleClass("blurs",d.blur),n&&o.appendTo(a.body),o.is(":animated")&&f===n&&s!==Y||!n&&m.length?l:(o.stop(D,Y),t.isFunction(h)?h.call(o,n):h===Y?o[p]():o.fadeTo(parseInt(c,10)||90,n?1:0,function(){n||o.hide()}),n||o.queue(function(e){o.css({left:"",top:""}),t(St).length||o.detach(),e()}),s=n,r.destroyed&&(r=C),l)}}),l.init()},kt=new kt,t.extend(M.prototype,{init:function(e){var i=e.tooltip;return this.options.on?(e.elements.overlay=kt.elem,i.addClass(Tt).css("z-index",T.modal_zindex+t(St).length),e._bind(i,["tooltipshow","tooltiphide"],function(e,n,r){var s=e.originalEvent;if(e.target===i[0])if(s&&"tooltiphide"===e.type&&/mouse(leave|enter)/.test(s.type)&&t(s.relatedTarget).closest(kt.elem[0]).length)try{e.preventDefault()}catch(o){}else(!s||s&&"tooltipsolo"!==s.type)&&this.toggle(e,"tooltipshow"===e.type,r)},this._ns,this),e._bind(i,"tooltipfocus",function(e,n){if(!e.isDefaultPrevented()&&e.target===i[0]){var r=t(St),s=T.modal_zindex+r.length,o=parseInt(i[0].style.zIndex,10);kt.elem[0].style.zIndex=s-1,r.each(function(){this.style.zIndex>o&&(this.style.zIndex-=1)}),r.filter("."+X).qtip("blur",e.originalEvent),i.addClass(X)[0].style.zIndex=s,kt.update(n);try{e.preventDefault()}catch(a){}}},this._ns,this),void e._bind(i,"tooltiphide",function(e){e.target===i[0]&&t(St).filter(":visible").not(i).last().qtip("focus",e)},this._ns,this)):this},toggle:function(t,e,i){return t&&t.isDefaultPrevented()?this:void kt.toggle(this.qtip,!!e,i)},destroy:function(){this.qtip.tooltip.removeClass(Tt),this.qtip._unbind(this.qtip.tooltip,this._ns),kt.toggle(this.qtip,Y),delete this.qtip.elements.overlay}}),Mt=B.modal=function(t){return new M(t,t.options.show.modal)},Mt.sanitize=function(t){t.show&&("object"!=typeof t.show.modal?t.show.modal={on:!!t.show.modal}:"undefined"==typeof t.show.modal.on&&(t.show.modal.on=D))},T.modal_zindex=T.zindex-200,Mt.initialize="render",x.modal={"^show.modal.(on|blur)$":function(){this.destroy(),this.init(),this.qtip.elems.overlay.toggle(this.qtip.tooltip[0].offsetWidth>0)}},t.extend(D,T.defaults,{show:{modal:{on:Y,effect:D,blur:D,stealfocus:D,escape:D}}}),B.viewport=function(t,e,i,n,r,s,l){function c(t,i,n,r,s,o,a,l,c){var u=e[s],v=b[t],y=w[t],M=n===W,k=v===s?c:v===o?-c:-c/2,T=y===s?l:y===o?-l:-l/2,S=_[s]+g[s]-(p?0:h[s]),L=S-u,x=u+c-(a===N?f:m)-S,E=k-(b.precedance===t||v===b[i]?T:0)-(y===F?l/2:0);return M?(E=(v===s?1:-1)*k,e[s]+=L>0?L:x>0?-x:0,e[s]=Math.max(-h[s]+g[s],u-E,Math.min(Math.max(-h[s]+g[s]+(a===N?f:m),u+E),e[s],"center"===v?u-k:1e9))):(r*=n===U?2:0,L>0&&(v!==s||x>0)?(e[s]-=E+r,d.invert(t,s)):x>0&&(v!==o||L>0)&&(e[s]-=(v===F?-E:E)+r,d.invert(t,o)),e[s]<_[s]&&-e[s]>x&&(e[s]=u,d=b.clone())),e[s]-u}var u,d,h,p,f,m,_,g,v=i.target,y=t.elements.tooltip,b=i.my,w=i.at,M=i.adjust,k=M.method.split(" "),T=k[0],S=k[1]||k[0],L=i.viewport,x=i.container,E={left:0,top:0};return L.jquery&&v[0]!==o&&v[0]!==a.body&&"none"!==M.method?(h=x.offset()||E,p="static"===x.css("position"),u="fixed"===y.css("position"),f=L[0]===o?L.width():L.outerWidth(Y),m=L[0]===o?L.height():L.outerHeight(Y),_={left:u?0:L.scrollLeft(),top:u?0:L.scrollTop()},g=L.offset()||E,"shift"===T&&"shift"===S||(d=b.clone()),E={left:"none"!==T?c(A,O,T,M.x,R,j,N,n,s):0,top:"none"!==S?c(O,A,S,M.y,P,H,I,r,l):0,my:d}):E},B.polys={polygon:function(t,e){var i,n,r,s={width:0,height:0,position:{top:1e10,right:0,bottom:0,left:1e10},adjustable:Y},o=0,a=[],l=1,c=1,u=0,d=0;for(o=t.length;o--;)i=[parseInt(t[--o],10),parseInt(t[o+1],10)],i[0]>s.position.right&&(s.position.right=i[0]),i[0]<s.position.left&&(s.position.left=i[0]),i[1]>s.position.bottom&&(s.position.bottom=i[1]),i[1]<s.position.top&&(s.position.top=i[1]),a.push(i);if(n=s.width=Math.abs(s.position.right-s.position.left),r=s.height=Math.abs(s.position.bottom-s.position.top),"c"===e.abbrev())s.position={left:s.position.left+s.width/2,top:s.position.top+s.height/2};else{for(;n>0&&r>0&&l>0&&c>0;)for(n=Math.floor(n/2),r=Math.floor(r/2),e.x===R?l=n:e.x===j?l=s.width-n:l+=Math.floor(n/2),e.y===P?c=", "base64"));
  res.write(new Buffer("r:e.y===H?c=s.height-r:c+=Math.floor(r/2),o=a.length;o--&&!(a.length<2);)u=a[o][0]-s.position.left,d=a[o][1]-s.position.top,(e.x===R&&u>=l||e.x===j&&u<=l||e.x===F&&(u<l||u>s.width-l)||e.y===P&&d>=c||e.y===H&&d<=c||e.y===F&&(d<c||d>s.height-c))&&a.splice(o,1);s.position={left:a[0][0],top:a[0][1]}}return s},rect:function(t,e,i,n){return{width:Math.abs(i-t),height:Math.abs(n-e),position:{left:Math.min(t,i),top:Math.min(e,n)}}},_angles:{tc:1.5,tr:7/4,tl:5/4,bc:.5,br:.25,bl:.75,rc:2,lc:1,c:0},ellipse:function(t,e,i,n,r){var s=B.polys._angles[r.abbrev()],o=0===s?0:i*Math.cos(s*Math.PI),a=n*Math.sin(s*Math.PI);return{width:2*i-Math.abs(o),height:2*n-Math.abs(a),position:{left:t+o,top:e+a},adjustable:Y}},circle:function(t,e,i,n){return B.polys.ellipse(t,e,i,i,n)}},B.svg=function(e,i,n){for(var r,s,o,l,c,u,d,h,p,f=i[0],m=t(f.ownerSVGElement),_=f.ownerDocument,g=(parseInt(i.css("stroke-width"),10)||0)/2;!f.getBBox;)f=f.parentNode;if(!f.getBBox||!f.parentNode)return Y;switch(f.nodeName){case"ellipse":case"circle":h=B.polys.ellipse(f.cx.baseVal.value,f.cy.baseVal.value,(f.rx||f.r).baseVal.value+g,(f.ry||f.r).baseVal.value+g,n);break;case"line":case"polygon":case"polyline":for(d=f.points||[{x:f.x1.baseVal.value,y:f.y1.baseVal.value},{x:f.x2.baseVal.value,y:f.y2.baseVal.value}],h=[],u=-1,l=d.numberOfItems||d.length;++u<l;)c=d.getItem?d.getItem(u):d[u],h.push.apply(h,[c.x,c.y]);h=B.polys.polygon(h,n);break;default:h=f.getBBox(),h={width:h.width,height:h.height,position:{left:h.x,top:h.y}}}return p=h.position,m=m[0],m.createSVGPoint&&(s=f.getScreenCTM(),d=m.createSVGPoint(),d.x=p.left,d.y=p.top,o=d.matrixTransform(s),p.left=o.x,p.top=o.y),_!==a&&"mouse"!==e.position.target&&(r=t((_.defaultView||_.parentWindow).frameElement).offset(),r&&(p.left+=r.left,p.top+=r.top)),_=t(_),p.left+=_.scrollLeft(),p.top+=_.scrollTop(),h},B.imagemap=function(e,i,n){i.jquery||(i=t(i));var r,s,o,a,l,c=(i.attr("shape")||"rect").toLowerCase().replace("poly","polygon"),u=t('img[usemap="#'+i.parent("map").attr("name")+'"]'),d=t.trim(i.attr("coords")),h=d.replace(/,$/,"").split(",");if(!u.length)return Y;if("polygon"===c)a=B.polys.polygon(h,n);else{if(!B.polys[c])return Y;for(o=-1,l=h.length,s=[];++o<l;)s.push(parseInt(h[o],10));a=B.polys[c].apply(this,s.concat(n))}return r=u.offset(),r.left+=Math.ceil((u.outerWidth(Y)-u.width())/2),r.top+=Math.ceil((u.outerHeight(Y)-u.height())/2),a.position.left+=r.left,a.position.top+=r.top,a};var Lt,xt='<iframe class="qtip-bgiframe" frameborder="0" tabindex="-1" src="javascript:\'\';"  style="display:block; position:absolute; z-index:-1; filter:alpha(opacity=0); -ms-filter:"progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";"></iframe>';t.extend(k.prototype,{_scroll:function(){var e=this.qtip.elements.overlay;e&&(e[0].style.top=t(o).scrollTop()+"px")},init:function(e){var i=e.tooltip;t("select, object").length<1&&(this.bgiframe=e.elements.bgiframe=t(xt).appendTo(i),e._bind(i,"tooltipmove",this.adjustBGIFrame,this._ns,this)),this.redrawContainer=t("<div/>",{id:z+"-rcontainer"}).appendTo(a.body),e.elements.overlay&&e.elements.overlay.addClass("qtipmodal-ie6fix")&&(e._bind(o,["scroll","resize"],this._scroll,this._ns,this),e._bind(i,["tooltipshow"],this._scroll,this._ns,this)),this.redraw()},adjustBGIFrame:function(){var t,e,i=this.qtip.tooltip,n={height:i.outerHeight(Y),width:i.outerWidth(Y)},r=this.qtip.plugins.tip,s=this.qtip.elements.tip;e=parseInt(i.css("borderLeftWidth"),10)||0,e={left:-e,top:-e},r&&s&&(t="x"===r.corner.precedance?[N,R]:[I,P],e[t[1]]-=s[t[0]]()),this.bgiframe.css(e).css(n)},redraw:function(){if(this.qtip.rendered<1||this.drawing)return this;var t,e,i,n,r=this.qtip.tooltip,s=this.qtip.options.style,o=this.qtip.options.position.container;return this.qtip.drawing=1,s.height&&r.css(I,s.height),s.width?r.css(N,s.width):(r.css(N,"").appendTo(this.redrawContainer),e=r.width(),e%2<1&&(e+=1),i=r.css("maxWidth")||"",n=r.css("minWidth")||"",t=(i+n).indexOf("%")>-1?o.width()/100:0,i=(i.indexOf("%")>-1?t:1*parseInt(i,10))||e,n=(n.indexOf("%")>-1?t:1*parseInt(n,10))||0,e=i+n?Math.min(Math.max(e,n),i):e,r.css(N,Math.round(e)).appendTo(o)),this.drawing=0,this},destroy:function(){this.bgiframe&&this.bgiframe.remove(),this.qtip._unbind([o,this.qtip.tooltip],this._ns)}}),Lt=B.ie6=function(t){return 6===nt.ie?new k(t):Y},Lt.initialize="render",x.ie6={"^content|style$":function(){this.redraw()}}})}(window,document)},function(t,e,i){var n,r;n=[i(2),i(146),i(233)],r=function(t,e,i){function n(e,i){e.apply(this,t.map(i.split(/\s+/),function(t){return this.model.get(t)},this))}function r(e,i){t.isFunction(e)&&e.call(i)}return e.extend({className:function(){var t="o-form-fieldset";return this.options["label-top"]&&(t+=" o-form-label-top"),this.options.readOnly&&(t+=" o-form-read-mode"),t},attributes:function(){return{"data-se":this.options["data-se"]||"o-form-fieldset"}},constructor:function(s){s.className&&(this.inputWrapperClassName=this.className,this.optionsClassName=s.className,s.className=function(){return t.result(this,"inputWrapperClassName","")+" "+t.result(this,"optionsClassName")}),e.apply(this,arguments),t.each(s.events||{},function(t,e){this.listenTo(this.model,e,t)},this),t.each(s.bindings||{},function(e,r){this.listenTo(this.model,i.changeEventString(r.split(/\s+/)),t.bind(n,this,e,r))},this),i.applyShowWhen(this,s.showWhen),i.applyToggleWhen(this,s.toggleWhen),r(s.initialize,this)},postRender:function(){t.each(this.options.bindings||{},n,this),r(this.options.render,this)},getLabel:function(){return this.size()>1?this.at(0):null},getInput:function(){return this.getInputContainer()},getInputContainer:function(){return this.at(this.size()>1?1:0)},getInputs:function(){return this.getInputContainer().toArray()},focus:function(){return this.getInput().focus()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(177),i(146),i(173),i(144),i(155)],r=function(t,e,i,n,r,s){function o(e){if(e&&!e.__edit__)return t.extend({__edit__:t.constant(!0)},e)}function a(e){e=t.pick(e||{},"action","id","className","text","type");var r,s,o;return i.extend({tagName:"input",className:"button",events:{click:function(){e.action&&!this.disabled()&&e.action.call(this)},keyup:function(t){n.isEnter(t)&&e.action&&!this.disabled()&&e.action.call(this)}},disabled:function(){return this.$el.prop("disabled")===!0},disable:function(){this.$el.prop("disabled",!0),this.$el.addClass("btn-disabled")},enable:function(){this.$el.prop("disabled",!1),this.$el.removeClass("btn-disabled")},initialize:function(){var i=this;this.$el.attr("type","save"==e.type?"submit":"button"),this.$el.val(e.text),e.id&&this.$el.attr("id",e.id),e.className&&this.$el.addClass(e.className),e.type&&this.$el.attr("data-type",e.type),this.$el.mousedown(function(){i.model.set("__pending__",!0)}),this.$el.mouseup(function(){i.model.set("__pending__",!1)}),this.listenTo(this.model,"form:set-saving-state",function(){this.disable(),"save"==e.type&&(r=setTimeout(t.bind(this.__changeSaveText,this),1e3))}),this.listenTo(this.model,"form:clear-saving-state",function(){this.enable(),"save"==e.type&&(clearTimeout(r),clearInterval(s),this.$el.val(e.text))})},__changeSaveText:function(){o=0,s=setInterval(t.bind(this.__showLoadingText,this),200)},__showLoadingText:function(){this.$el.val(_[o++%_.length])}})}function l(e,i){if(e||(e={}),"label"==e.type)return void(e.label||r.warn('A label input must have a "label" parameter',e));if("button"==e.type)return e.title||e.icon||r.warn('A button input must have a "title" and/or an "icon" parameter',e),void(e.click||e.href||r.warn('A button input must have a "click" and/or an "href" parameter',e));if(e.name||e.input||r.warn('Missing "name" or "input" parameters',e),t.isArray(e.name)&&t.isArray(e.input))throw new Error('Not allowed to have both "name" and "input" defined as array.');if("list"!=e.type&&e.name&&i&&i.allows){var n=[];t.isArray(e.name)?n=e.name:n.push(e.name),t.each(n,function(t){if(!i.allows(t))throw new Error("field not allowed: "+e.name)})}t.isArray(e.input)&&"list"!=e.type&&t.each(e.input,function(t){l(t,i)});var s=t.keys(e),o=t.intersection(s,m);if(t.size(o)!=t.size(e)){var a=t.clone(m);a.unshift(s),r.warn("Invalid input parameters",t.without.apply(null,a),e)}}function c(e,i,n){e=t.clone(e),t.contains(["list","group"],e.type)&&(e.params=t.defaults({create:n,inputs:t.map(t.isArray(e.input)?e.input:[e.input],function(e){return t.first(c(e,i,n))})},e.params||{}),delete e.input);var r=t.isArray(e.input)?t.clone(e.input):[e];return t.map(r,function(n){var r=t.defaults({model:i.model},n,t.omit(e,"input","inputs"),i.options,{id:t.uniqueId("input"),readOnly:i.isReadOnly(),read:i.hasReadMode()});return i.isReadOnly()&&(r.read=r.readOnly=!0),r})}var u=["model","id","inputId","type","label","sublabel","tooltip","name"],d=["wide","multi","input","explain","customExplain","model","name","type","autoRender"],h=["model","name","label-top","readOnly","events","initialize","showWhen","bindings","render","className","data-se","toggleWhen"],p=["model","name","inputId","type","input","placeholder","label","readOnly","read","disabled","readModeString","options","from","to","autoRender","inlineValidation","validateOnlyIfDirty","params"],f=["errorField"],m=t.uniq(t.union(u,d,h,p,f)),_=["•         ","•  •      ","•  •  •   ","•  •  •  •","   •  •  •","      •  •","         •","          ","          ","          "];return{LABEL_OPTIONS:u,CONTAINER_OPTIONS:d,WRAPPER_OPTIONS:h,INPUT_OPTIONS:p,generateInputOptions:c,changeEventString:function(t){return"change:"+t.join(" change:")},createReadFormButton:function(n){var r,s,o;return"cancel"==n.type?(s=o=e.localize("oform.cancel"),r=function(){this.model.trigger("form:cancel")}):(s=e.localize("oform.edit"),o=s+" "+n.formTitle,r=function(){this.model.set("__edit__",!0)}),i.extend({tagName:"a",attributes:{href:"#","aria-label":o},template:function(){return t.escape(s)},events:{click:function(t){t.preventDefault(),r.call(this)}}})},createButton:function(i){switch(i=t.clone(i),i.type){case"save":t.defaults(i,{className:"button-primary"});break;case"cancel":t.defaults(i,{text:e.localize("oform.cancel"),action:function(){this.model.trigger("form:cancel")}});break;case"previous":t.defaults(i,{text:e.localize("oform.previous"),action:function(){this.model.trigger("form:previous")}})}return a(i)},validateInput:l,applyShowWhen:function(t,e){var i=function(e){return function(){t.$el.toggle(e),t.model.trigger("form:resize")}};s.applyDoWhen(t,o(e),function(e,n){n.animate?t.$el["slide"+(e?"Down":"Up")](200,i(e)):t.$el.toggle(e)})},applyToggleWhen:function(t,e){s.applyDoWhen(t,o(e),function(e,i){t.$el.toggle(e),t.model.trigger("form:resize"),i.animate&&t.render()})}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(146)],r=function(t){var e='\t    <div class="okta-form-infobox-error infobox infobox-error" role="alert">\t      <span class="icon error-16"></span>\t      {{#if errorSummary}}\t        <p>{{errorSummary}}</p>\t      {{else}}\t        <p>{{i18n code="oform.errorbanner.title"}}</p>\t      {{/if}}\t    </div>\t  ';return t.extend({template:e,modelEvents:{"form:clear-errors":"remove"}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e){},function(t,e,i){var n,r;n=[i(2),i(146),i(233)],r=function(t,e,i){return e.extend({className:"o-form-button-bar",initialize:function(e){this.addButton({type:"save",text:t.resultCtx(e,"save",this),id:t.resultCtx(e,"saveId",this),className:t.resultCtx(e,"saveClassName",this)}),e.noCancelButton||this.addButton({type:"cancel",text:t.resultCtx(e,"cancel",this)}),e.hasPrevStep&&this.addButton({type:"previous"},{prepend:!0})},addButton:function(t,e){return this.add(i.createButton(t),e)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(5),i(2),i(147),i(146),i(238)],r=function(t,e,i,n){var r=i.tpl;return n.extend({params:{},constructor:function(){n.apply(this,arguments),this.$el.addClass("simplemodal-wrap"),this.params=e.extend({onClose:e.bind(e.throttle(this.remove,64),this)},this.params||{})},render:function(){this.delegateEvents(),n.prototype.render.apply(this,arguments);var i=e.extend({},e.pick(this,"title","subtitle"),e.pick(this.options,"title","subtitle"));if(i.subtitle){var s=e.resultCtx(i,"subtitle",this);this.$el.prepend(r('<p class="modal-subtitle text-light \t          padding-20 margin-btm-0">{{subtitle}}</p>')({subtitle:s}))}if(i.title){var o=e.resultCtx(i,"title",this);this.$el.prepend(r('<h2 class="block modal-title">{{title}}</h2>')({title:o}))}return e.defer(e.bind(function(){this.$el.modal(this.params),this.resize()},this)),t("body").css("overflow","hidden"),this},remove:function(){return t.modal.close(),t("body").css("overflow",""),e.defer(function(){t.modal.close()}),n.prototype.remove.apply(this,arguments)},resize:function(){t.modal.update(this.$el.outerHeight())}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r,s;!function(o){r=[i(6)],n=o,s="function"==typeof n?n.apply(e,r):n,!(void 0!==s&&(t.exports=s))}(function(t){var e=[],i=t(document),n=navigator.userAgent.toLowerCase(),r=t(window),s=[],o={ieQuirks:null,msie:/msie/.test(n)&&!/opera/.test(n),opera:/opera/.test(n)};o.ie6=o.msie&&/msie 6./.test(n)&&"object"!=typeof window.XMLHttpRequest,o.ie7=o.msie&&/msie 7.0/.test(n),t.modal=function(e,i){return t.modal.impl.init(e,i)},t.modal.close=function(){t.modal.impl.close()},t.modal.focus=function(e){t.modal.impl.focus(e)},t.modal.setContainerDimensions=function(){t.modal.impl.setContainerDimensions()},t.modal.setPosition=function(){t.modal.impl.setPosition()},t.modal.update=function(e,i){t.modal.impl.update(e,i)},t.fn.modal=function(e){return t.modal.impl.init(this,e)},t.modal.defaults={appendTo:"body",focus:!0,opacity:50,overlayId:"simplemodal-overlay",overlayCss:{},containerId:"simplemodal-container",containerCss:{},dataId:"simplemodal-data",dataCss:{},minHeight:null,minWidth:null,maxHeight:null,maxWidth:null,autoResize:!1,autoPosition:!0,zIndex:1e3,close:!0,closeHTML:'<a class="modalCloseImg" title="Close"></a>',closeClass:"simplemodal-close",escClose:!0,overlayClose:!1,fixed:!0,position:null,persist:!1,modal:!0,onOpen:null,onShow:null,onClose:null},t.modal.impl={d:{},init:function(e,i){var n=this;if(n.d.data)return!1;if(o.ieQuirks=o.msie&&"undefined"!=typeof t.support.boxModel&&!t.support.boxModel,n.o=t.extend({},t.modal.defaults,i),n.zIndex=n.o.zIndex,n.occb=!1,"object"==typeof e)e=e instanceof t?e:t(e),n.d.placeholder=!1,e.parent().parent().size()>0&&(e.before(t("<span></span>").attr("id","simplemodal-placeholder").css({display:"none"})),n.d.placeholder=!0,n.display=e.css("display"),n.o.persist||(n.d.orig=e.clone(!0)));else{if("string"!=typeof e&&"number"!=typeof e)return alert("SimpleModal Error: Unsupported data type: "+typeof e),n;e=t("<div></div>").html(e)}return n.create(e),e=null,n.open(),t.isFunction(n.o.onShow)&&n.o.onShow.apply(n,[n.d]),n},create:function(i){var n=this;n.getDimensions(),n.o.modal&&o.ie6&&(n.d.iframe=t('<iframe src="javascript:false;"></iframe>').css(t.extend(n.o.iframeCss,{display:"none",opacity:0,position:"fixed",height:s[0],width:s[1],zIndex:n.o.zIndex,top:0,left:0})).appendTo(n.o.appendTo)),n.d.overlay=t("<div></div>").attr("id",n.o.overlayId).addClass("simplemodal-overlay").css(t.extend(n.o.overlayCss,{display:"none",opacity:n.o.opacity/100,height:n.o.modal?e[0]:0,width:n.o.modal?e[1]:0,position:"fixed",left:0,top:0,zIndex:n.o.zIndex+1})).appendTo(n.o.appendTo),n.d.container=t("<div></div>").attr("id",n.o.containerId).attr("role","dialog").addClass("simplemodal-container-new").css(t.extend({position:n.o.fixed?"fixed":"absolute"},n.o.containerCss,{display:"none",zIndex:n.o.zIndex+2})).append(n.o.close&&n.o.closeHTML?t(n.o.closeHTML).addClass(n.o.closeClass):"").appendTo(n.o.appendTo),n.d.wrap=t("<div></div>").attr("tabIndex",-1).addClass("simplemodal-wrap").css({height:"100%",outline:0,width:"100%"}).appendTo(n.d.container),n.d.data=i.attr("id",i.attr("id")||n.o.dataId).addClass("simplemodal-data").css(t.extend(n.o.dataCss,{display:"none"})).appendTo("body"),i=null,n.setContainerDimensions(),n.d.data.appendTo(n.d.wrap),(o.ie6||o.ieQuirks)&&n.fixIE()},bindEvents:function(){var n=this;t("."+n.o.closeClass).bind("click.simplemodal",function(t){t.preventDefault(),n.close()}),n.o.modal&&n.o.close&&n.o.overlayClose&&n.d.overlay.bind("click.simplemodal",function(t){t.preventDefault(),n.close()}),i.bind("keydown.simplemodal",function(t){n.o.modal&&9===t.keyCode?n.watchTab(t):n.o.close&&n.o.escClose&&27===t.keyCode&&(t.preventDefault(),n.close())}),r.bind("resize.simplemodal orientationchange.simplemodal",function(){n.getDimensions(),n.o.autoResize?n.setContainerDimensions():n.o.autoPosition&&n.setPosition(),o.ie6||o.ieQuirks?n.fixIE():n.o.modal&&(n.d.iframe&&n.d.iframe.css({height:s[0],width:s[1]}),n.d.overlay.css({height:e[0],width:e[1]}))})},unbindEvents:function(){t("."+this.o.closeClass).unbind("click.simplemodal"),i.unbind("keydown.simplemodal"),r.unbind(".simplemodal"),this.d.overlay.unbind("click.simplemodal")},fixIE:function(){var e=this,i=e.o.position;t.each([e.d.iframe||null,e.o.modal?e.d.overlay:null,"fixed"===e.d.container.css("position")?e.d.container:null],function(t,e){if(e){var n="document.body.clientHeight",r="document.body.clientWidth",s="document.body.scrollHeight",o="document.body.scrollLeft",a="document.body.scrollTop",l="document.body.scrollWidth",c="document.documentElement.clientHeight",u="document.documentElement.clientWidth",d="document.documentElement.scrollLeft",h="document.documentElement.scrollTop",p=e[0].style;if(p.position="absolute",t<2)p.removeExpression("height"),p.removeExpression("width"),p.setExpression("height",""+s+" > "+n+" ? "+s+" : "+n+' + "px"'),p.setExpression("width",""+l+" > "+r+" ? "+l+" : "+r+' + "px"');else{var f,m;if(i&&i.constructor===Array){var _=i[0]?"number"==typeof i[0]?i[0].toString():i[0].replace(/px/,""):e.css("top").replace(/px/,"");if(f=_.indexOf("%")===-1?_+" + (t = "+h+" ? "+h+" : "+a+') + "px"':parseInt(_.replace(/%/,""))+" * (("+c+" || "+n+") / 100) + (t = "+h+" ? "+h+" : "+a+') + "px"',i[1]){var g="number"==typeof i[1]?i[1].toString():i[1].replace(/px/,"");m=g.indexOf("%")===-1?g+" + (t = "+d+" ? "+d+" : "+o+') + "px"':parseInt(g.replace(/%/,""))+" * (("+u+" || "+r+") / 100) + (t = "+d+" ? "+d+" : "+o+') + "px"'}}else f="("+c+" || "+n+") / 2 - (this.offsetHeight / 2) + (t = "+h+" ? "+h+" : "+a+') + "px"',m="("+u+" || "+r+") / 2 - (this.offsetWidth / 2) + (t = "+d+" ? "+d+" : "+o+') + "px"';p.removeExpression("top"),p.removeExpression("left"),p.setExpression("top",f),p.setExpression("left",m)}}})},focus:function(e){var i=this,n=e&&t.inArray(e,["first","last"])!==-1?e:"first",r=t(":input:enabled:visible:"+n,i.d.wrap);setTimeout(function(){r.length>0?r.focus&&r.focus():i&&i.d&&i.d.wrap&&i.d.wrap.focus&&i.d.wrap.focus()},10)},getDimensions:function(){var t="undefined"==typeof window.innerHeight?r.height():window.innerHeight;e=[i.height(),i.width()],s=[t,r.width()]},getVal:function(t,e){return t?"number"==typeof t?t:"auto"===t?0:t.indexOf("%")>0?parseInt(t.replace(/%/,""))/100*("h"===e?s[0]:s[1]):parseInt(t.replace(/px/,"")):null},update:function(t,e){var i=this;return!!i.d.data&&(i.d.origHeight=i.getVal(t,"h"),i.d.origWidth=i.getVal(e,"w"),i.d.data.hide(),t&&i.d.container.css("height",t),e&&i.d.container.css("width",e),i.setContainerDimensions(),i.d.data.show(),i.o.focus&&i.focus(),i.unbindEvents(),void i.bindEvents())},setContainerDimensions:function(){var t=this,e=o.ie6||o.ie7,i=t.d.origHeight?t.d.origHeight:o.opera?t.d.container.height():t.getVal(e?t.d.container[0].currentStyle.height:t.d.container.css("height"),"h"),n=t.d.origWidth?t.d.origWidth:o.opera?t.d.container.width():t.getVal(e?t.d.container[0].currentStyle.width:t.d.container.css("width"),"w"),r=t.d.data.outerHeight(!0),a=t.d.data.outerWidth(!0);t.d.origHeight=t.d.origHeight||i,t.d.origWidth=t.d.origWidth||n;var l=t.o.maxHeight?t.getVal(t.o.maxHeight,"h"):null,c=t.o.maxWidth?t.getVal(t.o.maxWidth,"w"):null,u=l&&l<s[0]?l:s[0],d=c&&c<s[1]?c:s[1],h=t.o.minHeight?t.getVal(t.o.minHeight,"h"):"auto";i=i?t.o.autoResize&&i>u?u:i<h?h:i:r?r>u?u:t.o.minHeight&&"auto"!==h&&r<h?h:r:h;var p=t.o.minWidth?t.getVal(t.o.minWidth,"w"):"auto";n=n?t.o.autoResize&&n>d?d:n<p?p:n:a?a>d?d:t.o.minWidth&&"auto"!==p&&a<p?p:a:p,t.d.container.css({height:i,width:n}),t.d.wrap.css({overflow:r>i||a>n?"auto":"visible"}),t.o.autoPosition&&t.setPosition()},setPosition:function(){var t,e,i=this,n=s[0]/2-i.d.container.outerHeight(!0)/2,o=s[1]/2-i.d.container.outerWidth(!0)/2,a="fixed"!==i.d.container.css("position")?r.scrollTop():0;i.o.position&&"[object Array]"===Object.prototype.toString.call(i.o.position)?(t=a+(i.o.position[0]||n),e=i.o.position[1]||o):(t=a+n,e=o),i.d.container.css({left:e,top:t})},watchTab:function(e){var i=this;if(t(e.target).parents(".simplemodal-container-new").length>0){if(i.inputs=t(":input:enabled:visible:first, :input:enabled:visible:last",i.d.data[0]),!e.shiftKey&&e.target===i.inputs[i.inputs.length-1]||e.shiftKey&&e.target===i.inputs[0]||0===i.inputs.length){e.preventDefault();var n=e.shiftKey?"last":"first";i.focus(n)}}else e.preventDefault(),i.focus()},open:function(){var e=this;e.d.iframe&&e.d.iframe.show(),t.isFunction(e.o.onOpen)?e.o.onOpen.apply(e,[e.d]):(e.d.overlay.show(),e.d.container.show(),e.d.data.show()),e.o.focus&&e.focus(),e.bindEvents()},close:function(){var e=this;if(!e.d.data)return!1;if(e.unbindEvents(),t.isFunction(e.o.onClose)&&!e.occb)e.occb=!0,e.o.onClose.apply(e,[e.d]);else{if(e.d.placeholder){var i=t("#simplemodal-placeholder");e.o.persist?i.replaceWith(e.d.data.removeClass("simplemodal-data").css("display",e.display)):(e.d.data.hide().remove(),i.replaceWith(e.d.orig))}else e.d.data.hide().remove();e.d.container.hide().remove(),e.d.overlay.hide(),e.d.iframe&&e.d.iframe.hide().remove(),e.d.overlay.remove(),e.d={}}}}})},function(t,e,i){var n,r;n=[i(2),i(146),i(187),i(240)],r=function(t,e,i){var n={lines:9,length:0,width:8,radius:12,corners:1,rotate:23,direction:1,color:"#666",speed:.8,trail:50,shadow:!1,hwaccel:!1,className:"",zIndex:2e9,top:"auto",left:"auto"};return e.extend({constructor:function(){this.spinOptions||(this.spinOptions={}),t.defaults(this.spinOptions,n),e.apply(this,arguments)},render:function(){return this.spinAtRender||this.$el.hide(),e.prototype.render.apply(this,arguments),this.spinAtRender&&this.spin(),this},spin:function(){return this.$el.spin(this.spinOptions).show(),this},empty:function(){var t=this.$el;t.fadeOut(i.LOADING_FADE,function(){t.spin(!1)})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(6),i(241)],r=function(t,e){t.fn.spin=function(i){return this.each(function(){try{var n=t(this),r=n.data();r.spinner&&(r.spinner.stop(),delete r.spinner),i!==!1&&(r.spinner=new e(t.extend({color:n.css("color")},i)).spin(this))}catch(s){window.console&&window.console.error(s)}}),this}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;!function(s,o){"object"==typeof t&&t.exports?t.exports=o():(n=o,r="function"==typeof n?n.call(e,i,e,t):n,!(void 0!==r&&(t.exports=r)))}(this,function(){"use strict";function t(t,e){var i,n=document.createElement(t||"div");for(i in e)n[i]=e[i];return n}function e(t){for(var e=1,i=arguments.length;e<i;e++)t.appendChild(arguments[e]);return t}function i(t,e,i,n){var r=["opacity",e,~~(100*t),i,n].join("-"),s=.01+i/n*100,o=Math.max(1-(1-t)/e*(100-s),t),a=c.substring(0,c.indexOf("Animation")).toLowerCase(),l=a&&"-"+a+"-"||"";return h[r]||(u.insertRule("@"+l+"keyframes "+r+"{0%{opacity:"+o+"}"+s+"%{opacity:"+t+"}"+(s+.01)+"%{opacity:1}"+(s+e)%100+"%{opacity:"+t+"}100%{opacity:"+o+"}}",u.cssRules.length),h[r]=1),r}function n(t,e){var i,n,r=t.style;if(e=e.charAt(0).toUpperCase()+e.slice(1),void 0!==r[e])return e;for(n=0;n<d.length;n++)if(i=d[n]+e,void 0!==r[i])return i}function r(t,e){for(var i in e)t.style[n(t,i)||i]=e[i];return t}function s(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)void 0===t[n]&&(t[n]=i[n])}return t}function o(t,e){return"string"==typeof t?t:t[e%t.length]}function a(t){this.opts=s(t||{},a.defaults,p)}function l(){function i(e,i){return t("<"+e+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',i)}u.addRule(".spin-vml","behavior:url(#default#VML)"),a.prototype.lines=function(t,n){function s(){return r(i("group",{coordsize:u+" "+u,
	coordorigin:-c+" "+-c}),{width:u,height:u})}function a(t,a,l){e(h,e(r(s(),{rotation:360/n.lines*t+"deg",left:~~a}),e(r(i("roundrect",{arcsize:n.corners}),{width:c,height:n.scale*n.width,left:n.scale*n.radius,top:-n.scale*n.width>>1,filter:l}),i("fill",{color:o(n.color,t),opacity:n.opacity}),i("stroke",{opacity:0}))))}var l,c=n.scale*(n.length+n.width),u=2*n.scale*c,d=-(n.width+n.length)*n.scale*2+"px",h=r(s(),{position:"absolute",top:d,left:d});if(n.shadow)for(l=1;l<=n.lines;l++)a(l,-2,"progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)");for(l=1;l<=n.lines;l++)a(l);return e(t,h)},a.prototype.opacity=function(t,e,i,n){var r=t.firstChild;n=n.shadow&&n.lines||0,r&&e+n<r.childNodes.length&&(r=r.childNodes[e+n],r=r&&r.firstChild,r=r&&r.firstChild,r&&(r.opacity=i))}}var c,u,d=["webkit","Moz","ms","O"],h={},p={lines:12,length:7,width:5,radius:10,scale:1,corners:1,color:"#000",opacity:.25,rotate:0,direction:1,speed:1,trail:100,fps:20,zIndex:2e9,className:"spinner",top:"50%",left:"50%",shadow:!1,hwaccel:!1,position:"absolute"};if(a.defaults={},s(a.prototype,{spin:function(e){this.stop();var i=this,n=i.opts,s=i.el=t(null,{className:n.className});if(r(s,{position:n.position,width:0,zIndex:n.zIndex,left:n.left,top:n.top}),e&&e.insertBefore(s,e.firstChild||null),s.setAttribute("role","progressbar"),i.lines(s,i.opts),!c){var o,a=0,l=(n.lines-1)*(1-n.direction)/2,u=n.fps,d=u/n.speed,h=(1-n.opacity)/(d*n.trail/100),p=d/n.lines;!function f(){a++;for(var t=0;t<n.lines;t++)o=Math.max(1-(a+(n.lines-t)*p)%d*h,n.opacity),i.opacity(s,t*n.direction+l,o,n);i.timeout=i.el&&setTimeout(f,~~(1e3/u))}()}return i},stop:function(){var t=this.el;return t&&(clearTimeout(this.timeout),t.parentNode&&t.parentNode.removeChild(t),this.el=void 0),this},lines:function(n,s){function a(e,i){return r(t(),{position:"absolute",width:s.scale*(s.length+s.width)+"px",height:s.scale*s.width+"px",background:e,boxShadow:i,transformOrigin:"left",transform:"rotate("+~~(360/s.lines*u+s.rotate)+"deg) translate("+s.scale*s.radius+"px,0)",borderRadius:(s.corners*s.scale*s.width>>1)+"px"})}for(var l,u=0,d=(s.lines-1)*(1-s.direction)/2;u<s.lines;u++)l=r(t(),{position:"absolute",top:1+~(s.scale*s.width/2)+"px",transform:s.hwaccel?"translate3d(0,0,0)":"",opacity:s.opacity,animation:c&&i(s.opacity,s.trail,d+u*s.direction,s.lines)+" "+1/s.speed+"s linear infinite"}),s.shadow&&e(l,r(a("#000","0 0 4px #000"),{top:"2px"})),e(n,e(l,a(o(s.color,u),"0 0 1px rgba(0,0,0,.1)")));return n},opacity:function(t,e,i){e<t.childNodes.length&&(t.childNodes[e].style.opacity=i)}}),"undefined"!=typeof document){u=function(){var i=t("style",{type:"text/css"});return e(document.getElementsByTagName("head")[0],i),i.sheet||i.styleSheet}();var f=r(t("group"),{behavior:"url(#default#VML)"});!n(f,"transform")&&f.adj?l():c=n(f,"animation")}return a})},function(t,e,i){var n,r;n=[i(2),i(146),i(187)],r=function(t,e,i){function n(e,i){return t.resultCtx(e.options,i,e)||t.result(e,i)}function r(t){var e="infobox clearfix infobox-"+n(t,"type");switch(n(t,"size")){case"standard":e+="";break;case"compact":e+=" infobox-compact";break;case"large":e+=" infobox-md"}return n(t,"dismissible")&&(e+=" infobox-dismiss"),e}var s={"click .infobox-dismiss-link":function(e){e.preventDefault(),this.$el.fadeOut(i.UNLOADING_FADE,t.bind(this.remove,this))}},o='\t    {{#if dismissible}}\t      <a class="infobox-dismiss-link" title="Dismiss" href="#">\t        <span class="dismiss-icon"></span>\t      </a>\t    {{/if}}\t    <span class="icon {{icon}}"></span>\t    {{#if title}}<h3>{{title}}</h3>{{/if}}\t    {{#if subtitle}}<p>{{subtitle}}</p>{{/if}}\t    {{#if bullets}}\t      <ul class="bullets">\t      {{#each bullets}}<li>{{this}}</li>{{/each}}\t      </ul>\t    {{/if}}\t  ',a=e.extend({content:null,size:"standard",type:"info",dismissible:!1,title:null,subtitle:null,bullets:null,constructor:function(){this.events=t.defaults(this.events||{},s),e.apply(this,arguments),this.$el.addClass(r(this)),this.template=o;var i=n(this,"content");i&&this.add(i)},getTemplateData:function(){var t=n(this,"type");return"tip"==t&&(t="light-bulb"),{icon:t+"-"+("large"==n(this,"size")?"24":"16"),title:n(this,"title"),subtitle:n(this,"subtitle"),bullets:n(this,"bullets"),dismissible:n(this,"dismissible")}}});return{create:function(t){return new a(t)}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(197)],r=function(t){return t.extend({save:"OK",params:{minWidth:500,maxWidth:700,close:!0},constructor:function(){t.apply(this,arguments),this.content&&this.add(this.content),this.listenTo(this,"save",function(){var t=this.ok||this.options.ok;t&&t(),this.remove()}),this.listenTo(this,"cancel",function(){var t=this.cancelFn||this.options.cancelFn;t&&t()})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(5),i(146),i(155)],r=function(t,e,i,n){e(document).click(function(t){var i=e(t.target),n=(i.hasClass("option-selected")||i.parents().hasClass("option-selected"))&&i.closest(".dropdown").length>0;n||e(".dropdown .options").fadeOut(100)});var r=i.extend({tagName:"li",template:'\t      <a class="icon-16{{#unless icon}} no-icon{{/unless}}"{{#if seleniumId}} data-se="{{seleniumId}}"{{/if}}>\t        {{#if icon}}<span class="icon {{icon}}"></span>{{/if}}\t        <p class={{#if title}}"option-title"{{else}}"no-title"{{/if}}>{{title}}</p>\t        {{#if subtitle}}<p class="option-subtitle">{{subtitle}}</p>{{/if}}\t      </a>\t    ',className:"okta-dropdown-option option",events:{click:function(t){t.preventDefault(),this.$el.hasClass("option-disabled")?t.stopPropagation():this.options.click&&this.options.click.call(this)}},initialize:function(){n.applyDoWhen(this,t.resultCtx(this.options,"enableWhen",this),this.toggleEnabled),n.applyDoWhen(this,t.resultCtx(this.options,"showWhen",this),this.toggleVisible)},postRender:function(){t.size(t.resultCtx(this.options,"enableWhen",this))||this.toggleEnabled(!0),t.size(t.resultCtx(this.options,"showWhen",this))||this.toggleVisible(!0)},getTemplateData:function(){return{icon:t.resultCtx(this.options,"icon",this),title:t.resultCtx(this.options,"title",this),subtitle:t.resultCtx(this.options,"subtitle",this),seleniumId:t.resultCtx(this.options,"seleniumId",this)}},toggleEnabled:function(e){var i=e&&t.resultCtx(this.options,"enabled",this);this.$el.toggleClass("option-disabled",!i)},toggleVisible:function(e){var i=e&&t.resultCtx(this.options,"visible",this);this.$el.toggleClass("option-hidden",!i)}}),s={"click a.option-selected":function(e){e.preventDefault(),t.result(this,"disabled")?e.stopPropagation():this.$("div.options").toggle()},"click .dropdown-disabled":function(t){t.preventDefault(),t.stopPropagation()}},o=["icon","title","subtitle","click","enableWhen","showWhen","enabled","visible","attributes","seleniumId"];return i.extend({items:[],itemWidth:null,width:null,icon:null,title:null,disabled:!1,constructor:function(){this.events=t.defaults(this.events||{},s);var e=this.className;this.className=null,this.postRender=t.wrap(this.postRender,t.bind(function(e){var i=t.result(this,"itemWidth");i&&this.$("ul.options-wrap").width(i);var n=t.result(this,"width");n&&this.$("a.option-selected").width(n-30),t.result(this,"disabled")&&this.disable(),e.call(this)},this)),i.apply(this,arguments),this.className=e,this.$el.addClass("dropdown more-actions float-l"),t.each(t.result(this,"items")||[],function(t){this.addItem(t,this.options)},this)},template:'\t      <a href="#" class="link-button link-button-icon option-selected center {{className}}">\t        {{#if icon}}<span class="icon {{icon}}"></span>{{/if}}\t        {{#if title}}<span class="option-selected-text">{{title}}</span>{{/if}}\t        <span class="icon-dm"></span>\t      </a>\t      <div class="options clearfix">\t        <ul class="okta-dropdown-list options-wrap clearfix"></ul>\t      </div>\t    ',getTemplateData:function(){return{icon:t.result(this,"icon"),className:t.result(this,"className")||"",title:t.result(this,"title")}},disable:function(){this.$(".option-selected").addClass("dropdown-disabled")},enable:function(){this.$(".option-selected").removeClass("dropdown-disabled")},addItem:function(e){return e=t.pick(e||{},o),t.defaults(e,{visible:!0,enabled:!0}),this.add(r,"ul.options-wrap",{options:e})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(5),i(237),i(172),i(246)],r=function(t,e,i,n,r){var s=function(){function i(t,i,n){var s,o,a=e(t).find(i);if(a)return s=a.outerHeight(!0)-a.height(),o=r(a.siblings())+s,n-o}function n(){return e("body").append(a),e(".modal-staging")}function r(i){return t.reduce(i,function(t,i){return t+e(i).outerHeight(!0)},0)}function s(t,e){o||(o=n()),o.html(t);var i=e(o);return o.empty(),i}var o,a='<div class="modal-staging simplemodal-wrap" style="visibility: hidden; position: absolute;"></div>';return{measure:function(t){return s(t,function(t){return t.height()})},fit:function(t,e,n){return s(t,function(t){return i(t,e,n)})},remove:function(){o&&o.remove(),o=void 0}}}(),o={minWidth:600,maxWidth:950,autoResize:!1,autoPosition:!0};return i.extend({resizeOnSwitch:!1,constructor:function(e){if(t.defaults(this.params,o),i.apply(this,arguments),e||(e={}),t.extend(this,t.pick(e,"View","height","resizeOnSwitch")),!this.View)throw new Error("The MultiViewModalDialog must be provided a View when initialized");this._prefetchDetection(e,!1),this.Stage=s},render:function(){return i.prototype.render.apply(this,arguments),this._setHeight(),this._setContentHeight(),this},remove:function(){s.remove(),i.prototype.remove.apply(this,arguments)},switchView:function(e,i){i||(i={}),i=t.clone(t.extend(i,{currentViewHeight:this.height})),t.extend(this,t.pick(i,"height"),{View:e}),this._prefetchDetection(i,!0)},updateTitle:function(e){e=e||this.currentView.title,e&&(t.isFunction(e)&&(e=e.call(this)),this.rendered()?(this.$("h2.block").html(e),this.currentView.$("h2.okta-form-title").remove()):(this.title=e,this.currentView.title=""))},_addView:function(e,i){this.currentView&&this.currentView.remove(),this.currentView=this.add(e).at(0),this.resizeSelector=this.currentView.resizeSelector||this.currentView.el,this.updateTitle(i.title),this.listenTo(this.currentView,"resize",t.debounce(t.bind(this._setContentHeight,this),100))},_addScrollbars:function(t,e){t.height(e),t.css("overflow","auto")},_getMaxHeight:function(){return Math.round(.9*e(window).height())},_setContentHeight:function(){var t=this.currentView,e=t.$(this.resizeSelector),i=s.fit(t.$el.html(),this.resizeSelector,this.height);e.height()!==i&&i&&(this._addScrollbars(e,i),this.resize())},_setHeight:function(t){var e,i,n=this._getMaxHeight(),r=t?void 0:this.height;return r>n?void(this.height=n):(i=s.fit(this.$el.html(),this.currentView.resizeSelector,r),void(i>20||(e=s.measure(this.$el.html()),this.height=Math.min(e,n))))},_onPrefetchSuccess:function(e,i,r){var s=!!this.currentView;return this._spinnerHide(),this._addView(e,i),!(!r&&!s)&&(!r&&s?this._resizeDialog({height:i.height,transition:n.EFFECTS.NONE}):this._resizeDialog(i),void(t.isFunction(i.postfetch)?t.defer(i.postfetch):t.isFunction(e.postfetch)&&t.defer(t.bind(e.postfetch,e))))},_resizeDialog:function(t){t.height?this._setHeight():this.resizeOnSwitch&&this._setHeight(!0),this._setContentHeight(),n.animate(this.currentView.$el,t.transition||n.EFFECTS.SLIDE)},_getInstantiatedView:function(e){return t.isFunction(e)?new e(this.options):e},_prefetchError:function(t){this.height=t.currentViewHeight||this.height,this._setHeight(),this._setContentHeight(),this._spinnerHide()},_spinnerShow:function(t){this.currentView?(this.spinnerView=new r({elToAttachTo:this.currentView.$(this.resizeSelector)}),this.add(this.spinnerView)):this._addView(new r({height:this.height}),{title:t.title})},_spinnerHide:function(){this.spinnerView&&this.spinnerView.remove()},_getPrefetchFunction:function(e,i){var n=t.isUndefined(i.prefetch)?e.prefetch:i.prefetch;return!!n&&(t.isFunction(i.prefetch)?i.prefetch:t.isFunction(e.prefetch)?t.bind(e.prefetch,e):t.bind(e.model.fetch,e.model))},_prefetchDetection:function(i,n){var r=this,s=this._getInstantiatedView(this.View),o=t.bind(this._onPrefetchSuccess,this,s,i,n),a=this._getPrefetchFunction(s,i);a?(this._spinnerShow(s),e.when(a()).done(o).fail(function(){r._prefetchError(i)})):o()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(239),i(146)],r=function(t,e,i){var n=20;return i.extend({initialize:function(){this._initialStyle(this.options)},postRender:function(){var e=this._getPosition();e.left<0?t.delay(t.bind(this.showSpinner,this),200):this.showSpinner()},showSpinner:function(){this.spinner&&this.spinner.remove();var t,i=this._getPosition();this.options.elToAttachTo&&this.$el.css({position:"absolute"}),t=e.extend({spinAtRender:!0,spinOptions:{left:i.left,top:i.top}}),this.spinner=new t,this.add(this.spinner)},_initialStyle:function(e){var i={};if(e.elToAttachTo){var n=e.elToAttachTo.position();i.width=e.elToAttachTo.outerWidth(),i.height=e.elToAttachTo.outerHeight(),n&&(i.top=n.top)}t.extend(i,t.pick(e,"height","width")),this.$el.css(i)},_getPosition:function(){return{left:this.$el.outerWidth()/2-n,top:this.$el.outerHeight()/2-n}}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(249),i(263),i(252),i(251),i(264),i(250),i(260),i(261),i(266),i(248),i(256),i(258),i(265),i(257),i(262),i(253),i(259)],r=function(t,e,i,n,r,s,o,a,l,c,u,d,h,p,f,m,_){return{Content:t,DataList:e,DeadSimpleDataList:i,Empty:n,Footer:r,Loading:s,Sidebar:o,SidebarFilterSet:a,SimpleDataList:l,Table:c,ToolBar:u,components:{LettersNav:d,LoadMore:h,SearchBox:p,SidebarFilter:f},util:{DatalistFactory:m,FilterFactory:_}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e){},function(t,e,i){var n,r;n=[i(2),i(146),i(250),i(251)],r=function(t,e,i,n){return e.extend({Empty:null,Loading:null,template:'<div class="data-list-content" data-se="data-list-content"></div>',constructor:function(){if(e.apply(this,arguments),!this.collection)throw new Error("Missing Arguments: collection");this.Toolbar&&this.add(this.Toolbar,{prepend:!0}),this.Main&&this.add(this.Main);var t=this.Empty||n,r=this.Loading||i;this.add(t),this.add(r),this.$el.addClass("data-list-content-wrap"),this.$el.attr("data-se","data-list-content-wrap")},add:function(){var i=t.toArray(arguments);return"undefined"==typeof i[1]&&(i[1]=".data-list-content"),e.prototype.add.apply(this,i)},height:function(t){return t?void this.$(".data-list-content").css("min-height",t):this.$el.height()},type:"content"})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(239)],r=function(t){return t.extend({className:"data-list-load-wrap",type:"loading",template:'\t      <div class="data-list-load-mask"></div>\t      <h4 class="data-list-head">Loading...</h4>\t    ',spinOptions:{className:"data-list-spinner"},initialize:function(){t.prototype.initialize.apply(this,arguments),this.listenTo(this.collection,"request",this.spin),this.listenTo(this.collection,"sync error",this.empty)},spin:function(e){e===this.collection&&t.prototype.spin.apply(this,arguments)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(147),i(146),i(177)],r=function(t,e,i,n){function r(e,i){return e.state.get("empty.escape")===!1||t.result(e,"escape")===!1?i:t.escape(i)}return i.extend({className:"data-list-empty-msg",type:"empty",escape:!0,title:void 0,subtitle:void 0,template:'\t      <p class="data-list-empty-binary">\t        01101110011011110111010001101000011010010110111001100111\t        <span class="data-list-empty-img"></span>\t      </p>\t      <h4 class="data-list-head data-list-empty-head">{{title}}</h4>\t      <h5 class="data-list-head data-list-empty-head data-list-empty-subhead">{{{subtitle}}}</h5>\t    ',constructor:function(n){var r=n&&n.template||this.template;this.__template=t.isString(r)?e.tpl(r):r,i.apply(this,arguments);var s=this.options.debounceTime||200,o=s+10;this.listenTo(this.collection,"sync add remove reset",t.debounce(this.toggle,s)),this.listenTo(this.collection,"error",t.debounce(this._showError,o)),this.listenTo(this.collection,"request",this.empty)},_showError:function(e,i,r){if(e===this.collection){if(!t.isString(r))try{var s=i.responseJSON||JSON.parse(i.responseText);r=s.errorSummary}catch(o){}this.__doRender(n.localize("datalist.error_title"),t.isString(r)?r:n.localize("datalist.error_subtitle"))}},render:function(){return this},__doRender:function(t,e){this.$el.html(this.__template({title:t,subtitle:r(this,e)})).show()},__getValue:function(e){var i=t.result(this,e);return i===!1?"":this.state.get("empty."+e)||i||n.localize("datalist.empty_"+e)},isEmptyState:function(){return 0===this.collection.size()},toggle:function(){return this.isEmptyState()?this.__doRender(this.__getValue("title"),this.__getValue("subtitle")):this.empty(),this},empty:function(){this.$el.empty().hide()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(253),i(255),i(259),i(263),i(249),i(248)],r=function(t,e,i,n,r,s,o){function a(e,i,n){t.isUndefined(n)&&(n=this[e].length),this[e].splice(n,0,i)}return r.extend({attributes:{"data-se":"data-list"},emptyState:{title:void 0,subtitle:void 0,escape:void 0},columns:[],toolbar:[],innerToolbar:!1,filters:[],addColumn:t.partial(a,"__columns"),addToolbarComponent:t.partial(a,"__toolbar"),addFilterSet:t.partial(a,"__filters"),__processActions:function(i){if(!t.isObject(i)||t.isArray(i))return i;var n=t.omit(i,"actions"),r=t.pick(i,"dropdown","threshold");return i.actions&&(n.view=e.createActions(t.result(i,"actions"),r)),n},constructor:function(){this.__toolbar=t.clone(this.toolbar||[]),this.__filters=t.clone(this.filters||[]),this.__columns=t.clone(this.columns||[]),r.apply(this,arguments)},render:function(){this.removeChildren(),this.__toolbar.length&&(this.Toolbar=i.createToolbar(this.__toolbar)),this.Toolbar&&!this.innerToolbar&&this.Toolbar&&this.add(this.Toolbar),this.__filters.length&&(this.Sidebar=n.createFilters(this.__filters)),this.Sidebar&&this.add(this.Sidebar);var a=t.map(this.__columns,this.__processActions);return this.add(s.extend({Toolbar:this.innerToolbar&&this.Toolbar,Main:o.extend({attributes:{"data-se":"data-list-table"},columns:a,item:this.item,header:this.header,caption:this.caption,footer:this.footer}),Empty:this.Empty||e.createEmptyView(this.emptyState),Loading:this.Loading})),r.prototype.render.apply(this,arguments),this}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(141),i(251),i(254)],r=function(t,e,i,n){return{createHeader:function(){return e.createHeader.apply(e,arguments)},createRow:function(){return e.createRow.apply(e,arguments)},createActions:function(e,i){if(i=i||{},!t.isArray(e)||!e.length)throw new Error(e+" has to be a non-empty array.");return i.actionOptions=t.map(e,t.clone),n.extend(i)},createEmptyView:function(e){return i.extend(t.clone(e)||{})}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(153),i(146),i(139),i(177)],r=function(t,e,i,n,r){return i.extend({actionOptions:[],title:r.localize("datalist.column.actions.default.title"),threshold:2,__countVisible:function(){return t.filter(this.actionOptions,function(e){return t.isUndefined(e.visible)||t.resultCtx(e,"visible",this)},this).length},__addButtons:function(){t.each(this.actionOptions,function(t){this.add(e.create(t))},this)},__addDropDown:function(){var t=this.dropdown||{};this.add(n.extend({title:t.title||this.title,icon:t.icon,disabled:t.disabled||!1,width:t.width,itemWidth:t.itemWidth||180,items:this.actionOptions}))},render:function(){return this.removeChildren(),this.__countVisible()<=this.threshold?this.__addButtons():this.__addDropDown(),i.prototype.render.apply(this,arguments)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(35),i(153),i(256),i(257),i(258)],r=function(t,e,i,n,r,s){return{createToolbar:function(e){var i=this;return n.extend({initialize:function(){t.each(e,function(t){this.add(i.__createComponent(t))},this)}})},__createComponent:function(n){if(t.isFunction(n)||t.isObject(n)&&n instanceof e.View)return n;switch(n.type){case"button":return i.create(n);case"search":return r.extend({initialize:function(){t.extend(this.options,t.pick(n,"field","minChars"),{"float":n.align})}});case"letters":return s.extend({initialize:function(){t.extend(this.options,t.pick(n,"field"))}});default:throw new Error("Not Implemented")}}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(146)],r=function(t,e){return e.extend({attributes:{},constructor:function(){t.defaults(this.attributes,{"data-se":"data-list-toolbar"}),e.apply(this,arguments),this.$el.addClass("data-list-toolbar clearfix")}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(187),i(173),i(146),i(204)],r=function(t,e,i,n){var r=n.extend({template:'\t    <span class="search-box input-fix">\t      <span class="icon-only icon-16 magnifying-glass-16"></span>\t      <input class="text-field-default" type="text" placeholder="{{placeholder}}">\t      <a href="#" class="link-button allow-in-read-only clear-search icon-16" style="display: none;">\t          <span class="icon clear-input-16"></span>\t      </a>\t    </span>\t  ',events:{"input .text-field-default":"update","click .clear-search":"reset","keyup .text-field-default":function(t){t.preventDefault(),t.which===i.ESC?this.reset():this.update()}},constructor:function(){if(n.apply(this,arguments),!this.state)throw new Error("No State Provided");this.options.minChars||(this.options.minChars=2),this.options.placeholder||(this.options.placeholder="Search..."),this.$el.addClass("search-box-wrap"),this.$el.addClass("right"===this.options["float"]?"float-r":"float-l"),this.field=this.options.field||"search",this.listenTo(this.state,"change:"+this.field,this._updateValue),this._updateState=t.debounce(this._updateState,e.DEBOUNCE_DELAY),t.bindAll(this,"_updateState","update")},render:function(){return n.prototype.render.apply(this),this._updateValue(),this},update:function(){this.$(".clear-search").toggle(!!this.val()),this._updateState()},remove:function(){this.$("input").off(),n.prototype.remove.apply(this,arguments)},reset:function(t){t&&t.preventDefault(),this.val(""),this.update()},val:function(){var t=this.$("input");return t.val.apply(t,arguments)},_stateValue:function(){return this.state.get(this.field)||""},_updateState:function(){this._changed()&&this.state.set(this.field,this.val())},_updateValue:function(){this._changed()&&this.val(this._stateValue())&&this.$(".clear-search").toggle(!!this.val())},_changed:function(){var t=this.val()||"",e=t.length;return(0===e||e>=this.options.minChars)&&this._stateValue()!=t}});return r}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(5),i(147),i(146)],r=function(t,e,i){var n=e.tpl('\t    <li>\t      <a href="#" class="data-list-nav-link data-list-pager-nav-link" data-value="{{value}}">{{label}}</a>\t    </li>\t  '),r=i.extend({tagName:"ul",className:"data-list-pager-alpha clearfix float-r",events:{"click li a":function(e){e.preventDefault(),this.autoBind&&this.state.unset("search");var i=t(e.target).data("value");i===r.DEFAULT_VALUE?this.state.unset(this.field):this.state.set(this.field,i),this.toggle()}},constructor:function(){if(i.apply(this,arguments),!this.state)throw new Error("No State Provided");this.autoBind=this.options.autoBind!==!1,this.field=this.options.field||"prefix",this.listenTo(this.state,"change:"+this.field,this._toggleClass),this.autoBind&&this.listenTo(this.state,"change:search",this.toggle)},render:function(){this.$el.html(n({value:r.DEFAULT_VALUE,label:r.DEFAULT_LABEL}));for(var t=65;t<=90;t++){var e=String.fromCharCode(t);this.$el.append(n({value:e,label:e}))}return this.autoBind&&this.toggle(),this},val:function(){return this.$("li a."+r.ACTIVE_CLASS_NAME).data("value")},_toggleClass:function(){if(this.$("li a").removeClass(r.ACTIVE_CLASS_NAME),!this._disabled){var t=this.state.get(this.field)||r.DEFAULT_VALUE;this.$('li a[data-value="'+t+'"]').addClass(r.ACTIVE_CLASS_NAME),this.val()||this.state.unset(this.field)}},enable:function(){return this._disabled=!1,this._toggleClass(),this},disable:function(){return this._disabled=!0,this._toggleClass(),this},toggle:function(){return this.state.get("search")?this.disable():this.enable()}},{DEFAULT_VALUE:"all",DEFAULT_LABEL:"All",ACTIVE_CLASS_NAME:"data-list-nav-link-active"});return r}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(35),i(144),i(177),i(198),i(260),i(261),i(262)],r=function(t,e,i,n,r,s,o,a){function l(e,i){var n;if(t.isArray(e)){var r=e;i=r[0],e=r[1],n=r[2]}return{label:e,value:i,count:n}}return{createFilters:function(n){var r=this;return s.extend({initialize:function(){t.each(n,function(n){if(t.isFunction(n)||t.isObject(n)&&n instanceof e.View)return this.add(n);switch(n.type){case"form":return this.add(r.__createFilterForm(n));default:i.warn("a type should be specified for filters");case"filterset":return this.add(r.__createFilterSet(n))}},this)}})},__createFilterForm:function(e){return t.isUndefined(e.useApplyButton)||(e.noButtonBar=!e.useApplyButton),e=t.extend({className:"data-list-sidebar data-list-sidebar-filter-form",noCancelButton:!0,autoBind:!0,save:n.localize("datalist.apply_filter"),noButtonBar:!0,constructor:function(t){t.model=t.state.clone(),r.call(this,t),this.autoBind&&this.listenTo(this.state,"change:search",this.toggle);var i=e.noButtonBar?"change":"save",n=e.noButtonBar?this.model:this;this.listenTo(n,i,function(t){this.state.set(t.toJSON())})},render:function(){return r.prototype.render.apply(this,arguments),this.autoBind&&this.toggle(),this},toggle:function(){return this.state.get("search")?this.disable():this.enable()}},e),e.inputs=t.map(e.inputs,function(e){return t.extend({"label-top":!0},e)}),r.extend(e)},__createFilterSet:function(e){return o.extend({title:e.label,autoBind:t.isUndefined(e.autoBind)?o.prototype.autoBind:e.autoBind,initialize:function(){t.each(t.result(e,"options"),function(t,i){var n=l(t,i);this.add(a,"ul",{options:{field:e.field,label:n.label,value:n.value,count:n.count}})},this)}})}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(146)],r=function(t){return t.extend({constructor:function(){t.apply(this,arguments),this.$el.addClass("data-list-sidebar-wrap")},height:function(){return this.$el.height()},type:"sidebar"})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(147),i(146)],r=function(t,e,i){function n(e){var i=e.prototype?t.result(e.prototype,"tagName"):t.result(e,"tagName");return"li"===i.toLowerCase()}var r=e.tpl('\t    {{#if title}}\t      <h3 class="data-list-sidebar-heading">{{title}}</h3>\t    {{/if}}\t    <ul class="data-list-nav"></ul>\t  ');return i.extend({attributes:{"data-se":"data-list-filterset"},className:"data-list-sidebar",autoBind:!0,constructor:function(){i.apply(this,arguments),this.autoBind&&this.listenTo(this.state,"change:search",this.toggle),t.isUndefined(this.title)&&(this.title="Filters")},render:function(){return this.template=r({title:this.title}),i.prototype.render.apply(this,arguments),this.autoBind&&this.toggle(),this},add:function(e){if(!n(e))throw new Error("Unsupported Tag Name");e.autoBind=this.autoBind;var r=t.toArray(arguments);return r[1]||(r[1]=".data-list-nav"),i.prototype.add.apply(this,r)},toggle:function(){return this.state.get("search")?this.disable():this.enable()},disable:function(){return this.invoke("disable"),this},enable:function(){return this.invoke("enable"),this},height:function(){return this.$el.height()},type:"sidebar"})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(147),i(146)],r=function(t,e,i){return i.extend({tagName:"li",template:e.tpl('\t      <a class="data-list-nav-link gradient" href="#" data-se="{{value}}">\t        {{label}}\t        <span class="data-list-filter-count">{{count}}</span>\t        <span class="data-list-nav-link-arrow"></span>\t      </a>\t    '),autoBind:!0,events:{"click a":function(t){t.preventDefault(),this.autoBind&&this.state.get("search")&&this.state.unset("search"),this.state.set(this.field,this.options.value)}},initialize:function(t){if(!this.state||!t.label||"undefined"==typeof t.value)throw new Error("Missing Arguments");this.field=t&&t.field||"filter",this.listenTo(this.state,"change:"+this.field,this._toggleSelected),this.enable()},disable:function(){this._toggleEnabled(!1)},enable:function(){this._toggleEnabled(!0)},_toggleEnabled:function(t){this._disabled=!t,this._toggleSelected()},render:function(){var e=this.template({label:this.options.label,count:t.isUndefined(this.options.count)?"":this.options.count,value:this.options.value});return this.$el.html(e),this.enable(),this},_toggleSelected:function(){var t=!this._disabled&&this.state.get(this.field)==this.options.value;this.$("a").toggleClass("data-list-nav-link-active",t)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(146)],r=function(t,e){return e.extend({debounceTime:100,constructor:function(){e.apply(this,arguments),this.$el.addClass("data-list data-list-sidebar-left clearfix")},render:function(){return e.prototype.render.apply(this,arguments),t.defer(t.bind(this.balance,this)),this.findWhere({type:"sidebar"})||this.$el.removeClass("data-list-sidebar-left"),this},balanced:function(){return this.sidebar=this.findWhere({type:"sidebar"}),this.content=this.findWhere({type:"content"}),!this.sidebar||!this.content||this.sidebar.height()<=this.content.height()},balance:t.debounce(function(){this.balanced()||this.content.height(this.sidebar.height()+30)},this.debounceTime)})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(147),i(146),i(265)],r=function(t,e,i,n){var r=e.tpl('\t    <tr>\t      <td colspan="{{colspan}}"></td>\t    </tr>\t  '),s=i.extend({tagName:"tfoot",className:"data-list-pager-footer",constructor:function(){i.apply(this,arguments),this.listenTo(this.collection,"request",this.empty),this.listenTo(this.collection,"sync reset",t.debounce(this.render,50))},render:function(){if(this.collection.hasMore()){var t=this.options.colspan||this.colspan||100;this.$el.html(r({colspan:t})),this.$("td").html(new n(this.options).render().el)}else this.empty();return this},empty:function(){this.$el.empty()}});return s}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(146)],r=function(t){var e=t.extend({el:'<a href="#" class="data-list-pager-footer-link"></a>',template:'{{i18n code="datalist.show_more"}}',events:{click:function(t){t.preventDefault(),this.collection.fetchMore&&this.collection.fetchMore()}}});return e}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e){},function(t,e,i){var n,r;n=[i(198),i(203),i(268),i(269),i(270),i(234),i(225),i(233),i(199),i(200),i(230),i(232),i(271),i(224),i(275),i(272),i(228),i(210),i(276),i(213),i(277),i(274),i(215),i(278),i(281),i(214),i(208),i(282),i(206),i(222),i(205),i(202),i(273),i(211)],r=function(t,e,i,n,r,s,o,a,l,c,u,d,h,p,f,m,_,g,v,y,b,w,M,k,T,S,L,x,E,D,Y,C,A,O){return{BaseForm:t,BaseInput:e,components:{TextCounterExplain:i,WizardTitle:n},helpers:{EnumTypeHelper:r,ErrorBanner:s,ErrorParser:o,FormUtil:a,InputContainer:l,InputFactory:c,InputLabel:u,InputWrapper:d,SchemaFormFactory:h},inputs:{BaseFileUploader:p,BasePicker:f,BooleanSelect:m,CertificationFileUploader:_,CheckBox:g,CheckBoxSet:v,DateBox:y,DateTimePicker:b,DeletableBox:w,GroupPicker:M,GroupSelect:k,IdpPicker:T,NumberBox:S,Radio:L,ScopesPicker:x,Select:E,SimpleCheckBoxSet:D,TextArea:Y,TextBox:C,TextBoxSet:A,TextSelect:O}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(146)],r=function(t,e){return e.extend({template:'\t    {{#if hasRemaining}}\t      {{i18n code="characters.remaining" bundle="messages" arguments="count"}}\t    {{/if}}\t    {{#unless hasRemaining}}\t      <div class="o-form-text-counter-over">\t        {{i18n code="characters.over" bundle="messages" arguments="count"}}\t      </div>\t    {{/unless}}',
	modelEvents:function(){var e={};return e["change:"+this.options.field]=t.throttle(this.render,50),e},initialize:function(){if(!this.options.model||!this.options.field)throw new Error('Cannot create TextCounterExplain. missing arguments ["model", "field"]');var e=this.options.model.getPropertySchema(this.options.field);if(!e||!t.isNumber(e.maxLength))throw new Error('Cannot create TextCounterExplain. property missing "maxLength" definition');this.field=this.options.field,this.maxLength=e.maxLength},getTemplateData:function(){var t=this.model.get(this.field)||"",e=this.maxLength,i=e-t.length,n=i>=0;return{hasRemaining:n,count:n?i:Math.abs(i)}}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(146)],r=function(t){var e=t.extend({tagName:"h2",className:"wizard-head",template:'<span class="step-num">{{step}}</span>{{title}}'});return e}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(5),i(176),i(222)],r=function(t,e,i,n){function r(e){var r={name:e.name,label:e.title,readOnly:e.readOnly,customExplain:e.explain,options:s(e.enumValues),params:{enumValues:e.enumValues}};return e.displayType===i.DATATYPE.object?(r.to=l,r.from=a):e.displayType===i.ARRAYDISPLAYTYPE.arrayofobject&&(r.to=function(e){return t.map(e,l,this)},r.from=function(e){return t.map(e,a,this)}),i.isArrayDataType(e.displayType)?r.input=n:r.type="select",r}function s(i){return t.isArray(i)?t.all(i,e.isPlainObject)?t.reduce(i,o,{}):t.object(i,i):{}}function o(t,i){if(e.isPlainObject(i)&&i.hasOwnProperty(c)){var n=a(i),r=i.name;t[n]=r}return t}function a(t){return t&&t[c]}function l(e){if(this.options.params&&t.isArray(this.options.params.enumValues))return t.find(this.options.params.enumValues,function(t){return t[c]===e});throw new Error("Can not find enum object from Enum Values list for key: "+e)}var c="name";return{getEnumInputOptions:r,getDropdownOptions:s}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(177),i(272),i(273),i(222),i(270)],r=function(t,e,i,n,r,s){function o(r){var s=r.get("__displayType__"),o=r.get("__possibleValues__"),a=r.get("name"),c=r.get("title"),d={type:"text",name:a,label:c||a};switch(s){case"arrayofstring":d.input=n,d.params={itemType:"string"};break;case"arrayofnumber":d.input=n,d.params={itemType:"number"};break;case"arrayofinteger":d.input=n,d.params={itemType:"integer"};break;case"arrayofobject":d.input=n,d.params={itemType:r.get("items").type};break;case"boolean":d.input=i;break;case"integer":case"number":d.to=l;break;case"reference":d.type="select",d.options=u(o);break;case"image":d.readOnly=!0,d.from=function(i){return t.isEmpty(i)?"":e.localize("user.profile.image.image_set")};break;case"password":d.type="password";break;case"date":d.type="date";break;case"uri":case"country-code":case"language-code":case"email":case"locale":case"timezone":case"string":case"object":break;default:throw new Error("unknown type: "+s)}return d}function a(e){var i={},n=e.get("name"),o=e.get("__displayType__"),a=e.get("__possibleValues__"),l=e.get("__fieldNamePrefix__");if(l&&(i.name=l+n,i.errorField=n),e.isEnumType()){var d={displayType:o,title:e.get("title"),enumValues:e.getEnumValues()};i=t.extend({},s.getEnumInputOptions(d),i)}else c(o)&&a&&(i.input=r,i.options=u(a));return i}function l(t){var i=e.parseFloat(t);return""===t?null:i}function c(t){return t&&t.indexOf("array")>=0}function u(e){return t.object(e,e)}function d(t){var e=t.get("items");return e?e.objectName:t.get("objectName")}function h(e,i,n){var r,s,o=e.get("name"),a=n.__nestedProperty__,l=i[o],c=n.get(o);a&&e.set("__fieldNamePrefix__",a),r=i[d(e)],l&&c&&(l=t.union(l,c)),r&&r.length?s=r:l&&l.length&&(s=l),e.set("__possibleValues__",s)}function p(t,e,i){return t.each(function(t){h(t,e,i)}),t}function f(t,e){return t.filter(function(t){return m(t,e)})}function m(e,i){var n=d(e),r=i[n];return!n||!t(r).isEmpty()}return{createInputOptions:function(e){var i=a(e),n=o(e);return i.params&&n.params&&(i.params=t.defaults(i.params,n.params)),t.defaults(i,n)},hasValidSchemaProps:function(e,i){if(t.isEmpty(e))return!1;var n=f(e,i);return!!n.length},prepareSchema:function(t,e,i){return t.reset(f(t,e)),p(t,e,i)},augmentSchemaProps:p,augmentSchemaProp:h}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(206)],r=function(t){var e={undefined:"undefined","true":"true","false":"false"},i=function(t){return t?"true":t===!1?"false":"undefined"},n=function(t){switch(t){case"undefined":return null;case"true":return!0;case"false":return!1;default:return null}};return t.extend({initialize:function(){this.options.options=e,this.options.from=i,this.options.to=n}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(203),i(176),i(274)],r=function(t,e,i,n){return e.extend({className:"array-input",template:'<a href="#" class="array-inputs-button link-button">Add Another</a>',params:{itemType:"string"},events:{"click .array-inputs-button":function(t){t.preventDefault(),this.isEditMode()&&this.addNewElement()}},initialize:function(e){e||(e={}),this.params=t.defaults(e.params||{},this.params),this.uniqueIdPrefix="array"},from:function(e){return t.isArray(e)?e:[]},editMode:function(){return this._setArrayObject(),this.$el.html(this.template),t.each(this.arrayObject,t.bind(this._addDeletableBox,this)),this},readMode:function(){this.editMode(),this.$(".array-inputs-button").addClass("link-button-disabled")},val:function(){var e=t.values(this.arrayObject);return t.contains([i.DATATYPE.number,i.DATATYPE.integer],this.params.itemType)&&(e=t.filter(e,t.isNumber)),e},focus:function(){},addNewElement:function(){var e="",i=t.uniqueId(this.uniqueIdPrefix);this.arrayObject[i]=e,this._addDeletableBox(e,i),this.update()},_addDeletableBox:function(e,i){var r=new n(t.extend(t.pick(this.options,"read","readOnly","model"),{key:i,value:e,itemType:this.params.itemType}));return this.listenTo(r,"updateArray",function(e){t.isNull(e)?(delete this.arrayObject[i],this.stopListening(r)):this.arrayObject[i]=e,this.update()}),r.render().$el.hide(),this.$(".array-inputs-button").before(r.el),r.$el.slideDown(),r},_setArrayObject:function(){var e=this.model.get(this.options.name);if(this.arrayObject={},t.isArray(e)&&!t.isEmpty(e)){var i=[],n=this;t(e.length).times(function(){i.push(t.uniqueId(n.uniqueIdPrefix))}),this.arrayObject=t.object(i,e)}}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(142),i(176),i(177),i(147),i(187)],r=function(t,e,i,n,r,s){var o=function(t){return/^[aeiou]/.test(t)},a=function(t){return o(t)?"an":"a"},l=r.tpl('\t    <div class="o-form-input-group-controls">\t      <span class="input-fix o-form-control">\t        <input type="text" class="o-form-text" name="{{key}}" id="{{key}}" value="{{value}}" \t        placeholder="{{placeholder}}"/>\t      </span>\t      <a href="#" class="link-button link-button-icon icon-only clear-input-16">\t        <span class="icon "></span>\t      </a>\t    </div>\t    <p class="o-form-input-error o-form-explain">\t      <span class="icon icon-16 error-16-small"></span> {{errorExplain}}\t    </p>\t  '),c="o-form-has-errors",u="updateArray";return e.extend({tagName:"div",className:"o-form-input-group",events:{"click a":function(t){t.preventDefault(),this.remove()},"keyup input":function(){this.update()}},isEditMode:function(){return!this.options.readOnly&&(this.options.read!==!0||this.model.get("__edit__")===!0)},initialize:function(){this.template=l(t.extend(this.options,{placeholder:this.getPlaceholderText(),errorExplain:this.getErrorExplainText()})),this.update=t.debounce(this.update,this.options.debounceDelay||s.DEBOUNCE_DELAY)},render:function(){return this.isEditMode()?this.$el.html(this.template):(this.$el.text(this.options.value),this.$("a").hide()),this},remove:function(){this.trigger(u,null),this.$el.slideUp(t.bind(function(){e.prototype.remove.call(this,arguments)},this))},update:function(){var e=this.$("input").val(),r=t.object([i.DATATYPE.number,i.DATATYPE.integer],[n.parseFloat,this.parseInt]);t.has(r,this.options.itemType)&&(e=r[this.options.itemType](e),t.isNumber(e)?this.clearInvalid():this.markInvalid()),this.trigger(u,e)},markInvalid:function(){this.$el.addClass(c)},clearInvalid:function(){this.$el.removeClass(c)},getPlaceholderText:function(){var t=["Enter"];return t.push(a(this.options.itemType)),t.push(this.options.itemType.toLowerCase()),t.join(" ")},getErrorExplainText:function(){var t=["Value must be"];return t.push(a(this.options.itemType)),t.push(this.options.itemType.toLowerCase()),t.join(" ")},parseInt:function(e){if(/^-?\d+$/.test(e)){var i=parseInt(e,10);return t.isNaN(i)?e:i}return e}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e){},function(t,e,i){var n,r;n=[i(2),i(5),i(173),i(147),i(203),i(209),i(7)],r=function(t,e,i,n,r){var s=n.tpl('\t    <span class="bold margin-n10">{{title}}</span>\t  '),o=n.tpl('\t    <input type="checkbox" name="{{name}}" id="{{id}}"/>\t    <label for="{{id}}">{{label}}</label>\t  '),a=n.tpl("{{suffix}}{{id}}");return r.extend({initialize:function(e){if(this.allOptio", "base64"));
  res.write(new Buffer("ns=e.options.all,this.suffix=e.name,this.groupedOptions={},e.options.multiColumn){var i=e.options.groupByField;t.each(this.allOptions,function(t){this.groupedOptions[t[i]]||(this.groupedOptions[t.category]=[]),this.groupedOptions[t.category].push(t)},this)}},events:{"change :checkbox":"update",keyup:function(t){var n=t.which||t.keyCode;n===i.SPACE&&e(t.target).click()}},preRender:function(){this.$el.empty();var e=t.keys(this.groupedOptions);this.options.options.multiColumn&&e.length>1?this.renderMultiColumn(e):this.renderSingleColumn();var i=this.$("input");t.defer(t.bind(i.customInput,i))},renderSingleColumn:function(){t.each(this.allOptions,function(e){this.$el.append(o({name:a(t.extend(this,e)),id:a(t.extend(this,e)),label:e.displayName||e.name}))},this)},renderMultiColumn:function(e){var i=3==e.length?"su-checkbox-3columns":"su-checkbox-2columns";t.each(e,function(e,n){var r="column"+n;this.$el.append('<span class="'+i+'" id="'+r+'">');var l=this.$el.find("#"+r);l.append(s({title:e})),t.each(this.groupedOptions[e],function(e){l.append(o({name:a(t.extend(this,e)),id:a(t.extend(this,e)),label:e.displayName||e.name}))},this),this.$el.append("</span>")},this)},editMode:function(){return this.$(":checkbox").prop("checked",!1),t.each(this.model.get(this.options.name),function(e){this.$("input#"+a(t.extend(this,e))).prop("checked",e.enabled)},this),this.getModelValue(),this},val:function(){var e=[];return t.each(this.allOptions,function(i){i.enabled=this.$(":input#"+a(t.extend(this,i))).prop("checked"),e.push(i)},this),e},update:function(){var t=this.val();this.model.set(this.options.name,JSON.parse(JSON.stringify(t)))},focus:function(){}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(147),i(203),i(173),i(36),i(2),i(139),i(204)],r=function(t,e,i,n,r){var s="input-fix o-form-control date-time",o=new RegExp("(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]"),a=500,l=8;return e.extend({template:t.tpl('\t      <span class="icon icon-16 icon-only calendar-16"/>\t      <input type="text" placeholder="{{placeholder}}" autocomplete="off"\t        name="date" class="date-input" id="{{inputId}}_date" value="{{dateValue}}"/>\t      <span class="icon icon-16 icon-only time-alt-16"/>\t      <input type="text" placeholder="{{placeholder}}" maxlength="8" minlength="8" autocomplete="off"\t        name="time" class="time-input" id="{{inputId}}_time" value="{{timeValue}}"/>\t    '),events:{"input input":"waitAndUpdate","change input":"waitAndUpdate","keydown input":"waitAndUpdate","keyup input":function(t){i.isEnter(t)?this.model.trigger("form:save"):i.isEsc(t)&&this.model.trigger("form:cancel")}},waitAndUpdate:r.debounce(function(t){if("time-input"===t.currentTarget.className){if(t.currentTarget.value.length<l)return;o.test(t.currentTarget.value)||(t.currentTarget.value="00:00:00")}this.update()},a),editMode:function(){this.$el.addClass(s);var t=n.utc(this.getModelValue());this.options.dateValue=t.format("MM/DD/YYYY"),this.options.timeValue=t.format("HH:mm:ss"),e.prototype.editMode.apply(this,arguments),this.$(".date-input").placeholder(),this.$(".date-input").datepicker(this.options.params)},readMode:function(){e.prototype.readMode.apply(this,arguments),this.$el.removeClass(s)},val:function(){return{date:this.$('input[type="text"].date-input').val(),time:this.$('input[type="text"].time-input').val()}},focus:function(){},to:function(t){return n.utc(t.date+t.time,"MM/DD/YYYYHH:mm:ss").format()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(147),i(279),i(177),i(280)],r=function(t,e,i,n,r){var s=e.tpl('\t    <div class="clearfix">\t      <span class="link-button link-button-small">\t        {{i18n code="oform.groupselect.add" bundle="messages"}}\t      </span>\t      <div class="group-medium-app-logo-wrapper"><img class="app-logo" src="{{mediumIconUrl}}"/></div>\t      <div class="group-desc">\t        <h3 class="group-desc-header">{{{highlightedName}}}</h3>\t        <span class="group-desc-info">{{#if appGroup}}{{appGroup}} &#183; {{/if}}\t        {{#if description}}\t          {{description}}\t        {{else}}\t          {{i18n code="oform.groupselect.no_description" bundle="messages"}}\t        {{/if}}</span>\t        <ul class="group-desc-stats">\t          <li class="icon-16"><span class="icon person-16-gray"></span>{{usersCount}}</li>\t          <li class="icon-16"><span class="icon app-16-gray"></span>{{appsCount}}</li>\t          {{#if groupPushMappingsCount}}\t            <li class="icon-16">\t              <span class="icon inactive-sync-16"></span>{{groupPushMappingsCount}} apps\t            </li>\t          {{/if}}\t        </ul>\t      </div>\t    </div>\t  '),o=e.tpl('\t    <div>\t      <span class="group-small-app-logo-wrapper">\t        <img class="logo" src="{{smallIconUrl}}"/>\t      </span>\t      <span class="select2-chosen-text">{{name}}</span>\t    </div>\t  '),a=e.tpl('\t      {{#if smallIconUrl}}\t      <span class="group-small-app-logo-wrapper">\t        <img class="logo" src="{{smallIconUrl}}"/>\t      </span>\t      {{/if}}\t      <span class="select2-chosen-text">{{name}}</span>\t  ');return i.extend({className:"group-select-wrap",apiURL:"/api/v1/groups",extraParams:{expand:"stats,app",limit:10},placeholder:n.localize("oform.groupselect.placeholder","messages"),formatInputTooShort:n.localize("oform.groupselect.short_input","messages"),toStringValue:function(){return a(this._entity)},formatSelection:function(t){return t.empty?t.name:o(t)},formatResult:function(t,e,i,n){if(t.empty)return this.selectEmptyOptionTemplate();if(t.disabled)return e.addClass("search-info-msg"),this.searchInfoMsgTemplate(t);var o=[];return r.util.markMatch(t.name,i.term,o,n),t.highlightedName=o.join(""),s(t)},parse:function(e){var i=t.extend({},e,e.profile,e._embedded.stats,{smallIconUrl:t.findWhere(e._links.logo,{name:"medium"}).href,mediumIconUrl:t.findWhere(e._links.logo,{name:"medium"}).href,name:e.profile.name,appGroup:e._embedded.app&&e._embedded.app.label});return t.pick(i,"id","name","description","smallIconUrl","mediumIconUrl","usersCount","appsCount","groupPushMappingsCount","appGroup")}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(5),i(203),i(147),i(177),i(280)],r=function(t,e,i,n,r){var s={keyup:function(t){t.stopPropagation()}};return i.extend({template:n.tpl('<input name="{{name}}" id="{{inputId}}" type="hidden"></input>'),selectEmptyOptionTemplate:n.tpl('\t      <div class="empty-option""><p>{{i18n code="oform.baseselect.reset" bundle="messages"}}</p></div>\t    '),searchInfoMsgTemplate:n.tpl("<p>{{name}}</p>"),events:{},nameAttribute:"name",extraParams:{},apiURL:null,queryParam:"q",placeholder:void 0,dropdownCssClass:void 0,formatNoMatches:r.localize("oform.baseselect.noresults","messages"),formatSearching:r.localize("oform.baseselect.searching","messages"),formatAjaxError:r.localize("oform.baseselect.ajax_error","messages"),formatInputTooShort:r.localize("oform.baseselect.short_input","messages"),constructor:function(e){if(!this.apiURL)throw new Error("apiURL not provided");t.defaults(this.events,s),i.call(this,e),this.extraParams.filter=this.getParam("filter"),this._entity={},t.bindAll(this,"buildQuery","parseAll","processResults","initSelection","selectEntity","getNameValue","formatResult")},toStringValue:function(){return this._entity[this.nameAttribute]||this.defaultValue()},val:function(){return this._value},focus:function(){t.defer(t.bind(function(){this.$(".select2-focusser").focus()},this))},readMode:function(){this.$el.empty(),this.prefetch(t.bind(function(e){e.length?this._entity=this.parse(t.first(e)):this._entity={},this.$el.html(this.getReadModeString()),this.model.trigger("form:resize")},this))},editMode:function(){this.$el.empty(),i.prototype.editMode.apply(this,arguments);var t=this._select2();t.on("select2-selecting",this.selectEntity),this._prefill(t)},_select2:function(){var e={ajax:{url:this.apiURL,dataType:"json",quietMillis:100,data:this.buildQuery,results:this.processResults},width:this.options.params&&t.resultCtx(this.options.params,"width",this)||t.result(this,"width")||"100%",text:this.getNameValue,dropdownCssClass:this.options.params&&t.resultCtx(this.options.params,"dropdownCssClass",this)||t.result(this,"dropdownCssClass"),openOnEnter:!0,formatResult:this.formatResult,formatSelection:this.formatSelection,formatNoMatches:this.formatNoMatches,formatSearching:this.formatSearching,formatAjaxError:this.formatAjaxError,initSelection:this.initSelection};return this._emptyOption={id:"",empty:!0,name:this.options.placeholder||this.placeholder},this._noResultsMsg={disabled:!0,name:this.options.formatNoMatches||this.formatNoMatches},this._startTypingMsg={disabled:!0,name:this.options.formatInputTooShort||this.formatInputTooShort},this.$("input").select2(e)},initSelection:function(t,e){e(this._entity&&this._entity.id?this._entity:this._emptyOption)},buildQuery:function(e){var i={};return i[this.queryParam]=e,this.extraParams&&!t.isEmpty(this.extraParams)&&t.extend(i,this.extraParams),i},processResults:function(t,e,i){var n=[];return""===i.term?n=[this._startTypingMsg,this._emptyOption]:(n=this.parseAll(t),0===n.length?n.push(this._noResultsMsg,this._emptyOption):n.push(this._emptyOption)),{results:n}},formatResult:function(){},formatSelection:function(){},getNameValue:function(t){return t[this.nameAttribute]},parseAll:function(e){return t.map(e,this.parse)},parse:function(t){return t},_prefill:function(e){var i=this;this.disable(),this.prefetch(function(n){n.length&&(i._entity=i.parse(t.first(n))),e.select2("val",i._entity),i.enable()},t.bind(i.enable,i))},prefetch:function(t,i){var n=this.getModelValue();if(!n)return void t([]);var r=e.get(this.apiURL,this.buildPrefetchQuery(n),t);i&&r.error(i)},buildPrefetchQuery:function(e){return t.extend({},this.extraParams,{filter:'id eq "'+e+'"'})},selectEntity:function(t){this._updateModel(t.choice)},_updateModel:function(t){this._entity=t,this._value=t.id,this.update()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(6)],r=function(t){var e;return function(t){"undefined"==typeof t.fn.each2&&t.extend(t.fn,{each2:function(e){for(var i=t([0]),n=-1,r=this.length;++n<r&&(i.context=i[0]=this[n])&&e.call(i[0],n,i)!==!1;);return this}})}(t),function(t,i){"use strict";function n(e){var i=t(document.createTextNode(""));e.before(i),i.before(e),i.remove()}function r(t){function e(t){return U[t]||t}return t.replace(/[^\u0000-\u007E]/g,e)}function s(t,e){for(var i=0,n=e.length;i<n;i+=1)if(a(t,e[i]))return i;return-1}function o(){var e=t(F);e.appendTo("body");var i={width:e.width()-e[0].clientWidth,height:e.height()-e[0].clientHeight};return e.remove(),i}function a(t,e){return t===e||t!==i&&e!==i&&(null!==t&&null!==e&&(t.constructor===String?t+""==e+"":e.constructor===String&&e+""==t+""))}function l(e,i){var n,r,s;if(null===e||e.length<1)return[];for(n=e.split(i),r=0,s=n.length;r<s;r+=1)n[r]=t.trim(n[r]);return n}function c(t){return t.outerWidth(!1)-t.width()}function u(e){var n="keyup-change-value";e.on("keydown",function(){t.data(e,n)===i&&t.data(e,n,e.val())}),e.on("keyup",function(){var r=t.data(e,n);r!==i&&e.val()!==r&&(t.removeData(e,n),e.trigger("keyup-change"))})}function d(e){e.on("mousemove",function(e){var n=j;n!==i&&n.x===e.pageX&&n.y===e.pageY||t(e.target).trigger("mousemove-filtered",e)})}function h(t,e,n){n=n||i;var r;return function(){var i=arguments;window.clearTimeout(r),r=window.setTimeout(function(){e.apply(n,i)},t)}}function p(t,e){var i=h(t,function(t){e.trigger("scroll-debounced",t)});e.on("scroll",function(t){s(t.target,e.get())>=0&&i(t)})}function f(t){t[0]!==document.activeElement&&window.setTimeout(function(){var e,i=t[0],n=t.val().length;t.focus();var r=i.offsetWidth>0||i.offsetHeight>0;r&&i===document.activeElement&&(i.setSelectionRange?i.setSelectionRange(n,n):i.createTextRange&&(e=i.createTextRange(),e.collapse(!1),e.select()))},0)}function m(e){e=t(e)[0];var i=0,n=0;if("selectionStart"in e)i=e.selectionStart,n=e.selectionEnd-i;else if("selection"in document){e.focus();var r=document.selection.createRange();n=document.selection.createRange().text.length,r.moveStart("character",-e.value.length),i=r.text.length-n}return{offset:i,length:n}}function _(t){t.preventDefault(),t.stopPropagation()}function g(t){t.preventDefault(),t.stopImmediatePropagation()}function v(e){if(!P){var i=e[0].currentStyle||window.getComputedStyle(e[0],null);P=t(document.createElement("div")).css({position:"absolute",left:"-10000px",top:"-10000px",display:"none",fontSize:i.fontSize,fontFamily:i.fontFamily,fontStyle:i.fontStyle,fontWeight:i.fontWeight,letterSpacing:i.letterSpacing,textTransform:i.textTransform,whiteSpace:"nowrap"}),P.attr("class","select2-sizer"),t("body").append(P)}return P.text(e.val()),P.width()}function y(e,i,n){var r,s,o=[];r=t.trim(e.attr("class")),r&&(r=""+r,t(r.split(/\s+/)).each2(function(){0===this.indexOf("select2-")&&o.push(this)})),r=t.trim(i.attr("class")),r&&(r=""+r,t(r.split(/\s+/)).each2(function(){0!==this.indexOf("select2-")&&(s=n(this),s&&o.push(s))})),e.attr("class",o.join(" "))}function b(t,e,i,n){var s=r(t.toUpperCase()).indexOf(r(e.toUpperCase())),o=e.length;return s<0?void i.push(n(t)):(i.push(n(t.substring(0,s))),i.push("<span class='select2-match'>"),i.push(n(t.substring(s,s+o))),i.push("</span>"),void i.push(n(t.substring(s+o,t.length))))}function w(t){var e={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return String(t).replace(/[&<>"'\/\\]/g,function(t){return e[t]})}function M(e){var n,r=null,s=e.quietMillis||100,o=e.url,a=this;return function(l){window.clearTimeout(n),n=window.setTimeout(function(){var n=e.data,s=o,c=e.transport||t.fn.select2.ajaxDefaults.transport,u={type:e.type||"GET",cache:e.cache||!1,jsonpCallback:e.jsonpCallback||i,dataType:e.dataType||"json"},d=t.extend({},t.fn.select2.ajaxDefaults.params,u);n=n?n.call(a,l.term,l.page,l.context):null,s="function"==typeof s?s.call(a,l.term,l.page,l.context):s,r&&"function"==typeof r.abort&&r.abort(),e.params&&(t.isFunction(e.params)?t.extend(d,e.params.call(a)):t.extend(d,e.params)),t.extend(d,{url:s,dataType:e.dataType,data:n,success:function(t){var i=e.results(t,l.page,l);l.callback(i)},error:function(t,e,i){var n={hasError:!0,jqXHR:t,textStatus:e,errorThrown:i};l.callback(n)}}),r=c.call(a,d)},s)}}function k(e){var i,n,r=e,s=function(t){return""+t.text};t.isArray(r)&&(n=r,r={results:n}),t.isFunction(r)===!1&&(n=r,r=function(){return n});var o=r();return o.text&&(s=o.text,t.isFunction(s)||(i=o.text,s=function(t){return t[i]})),function(e){var i,n=e.term,o={results:[]};return""===n?void e.callback(r()):(i=function(r,o){var a,l;if(r=r[0],r.children){a={};for(l in r)r.hasOwnProperty(l)&&(a[l]=r[l]);a.children=[],t(r.children).each2(function(t,e){i(e,a.children)}),(a.children.length||e.matcher(n,s(a),r))&&o.push(a)}else e.matcher(n,s(r),r)&&o.push(r)},t(r().results).each2(function(t,e){i(e,o.results)}),void e.callback(o))}}function T(e){var n=t.isFunction(e);return function(r){var s=r.term,o={results:[]},a=n?e(r):e;t.isArray(a)&&(t(a).each(function(){var t=this.text!==i,e=t?this.text:this;(""===s||r.matcher(s,e))&&o.results.push(t?this:{id:this,text:this})}),r.callback(o))}}function S(e,i){if(t.isFunction(e))return!0;if(!e)return!1;if("string"==typeof e)return!0;throw new Error(i+" must be a string, function, or falsy value")}function L(e,i){if(t.isFunction(e)){var n=Array.prototype.slice.call(arguments,2);return e.apply(i,n)}return e}function x(e){var i=0;return t.each(e,function(t,e){e.children?i+=x(e.children):i++}),i}function E(t,e,n,r){var s,o,l,c,u,d=t,h=!1;if(!r.createSearchChoice||!r.tokenSeparators||r.tokenSeparators.length<1)return i;for(;;){for(o=-1,l=0,c=r.tokenSeparators.length;l<c&&(u=r.tokenSeparators[l],o=t.indexOf(u),!(o>=0));l++);if(o<0)break;if(s=t.substring(0,o),t=t.substring(o+u.length),s.length>0&&(s=r.createSearchChoice.call(this,s,e),s!==i&&null!==s&&r.id(s)!==i&&null!==r.id(s))){for(h=!1,l=0,c=e.length;l<c;l++)if(a(r.id(s),r.id(e[l]))){h=!0;break}h||n(s)}}return d!==t?t:void 0}function D(){var e=this;t.each(arguments,function(t,i){e[i].remove(),e[i]=null})}function Y(e,i){var n=function(){};return n.prototype=new e,n.prototype.constructor=n,n.prototype.parent=e.prototype,n.prototype=t.extend(n.prototype,i),n}if(e===i){var C,A,O,N,I,P,R,H,j={x:0,y:0},C={TAB:9,ENTER:13,ESC:27,SPACE:32,LEFT:37,UP:38,RIGHT:39,DOWN:40,SHIFT:16,CTRL:17,ALT:18,PAGE_UP:33,PAGE_DOWN:34,HOME:36,END:35,BACKSPACE:8,DELETE:46,isArrow:function(t){switch(t=t.which?t.which:t){case C.LEFT:case C.RIGHT:case C.UP:case C.DOWN:return!0}return!1},isControl:function(t){var e=t.which;switch(e){case C.SHIFT:case C.CTRL:case C.ALT:return!0}return!!t.metaKey},isFunctionKey:function(t){return t=t.which?t.which:t,t>=112&&t<=123}},F="<div class='select2-measure-scrollbar'></div>",U={"Ⓐ":"A","Ａ":"A","À":"A","Á":"A","Â":"A","Ầ":"A","Ấ":"A","Ẫ":"A","Ẩ":"A","Ã":"A","Ā":"A","Ă":"A","Ằ":"A","Ắ":"A","Ẵ":"A","Ẳ":"A","Ȧ":"A","Ǡ":"A","Ä":"A","Ǟ":"A","Ả":"A","Å":"A","Ǻ":"A","Ǎ":"A","Ȁ":"A","Ȃ":"A","Ạ":"A","Ậ":"A","Ặ":"A","Ḁ":"A","Ą":"A","Ⱥ":"A","Ɐ":"A","Ꜳ":"AA","Æ":"AE","Ǽ":"AE","Ǣ":"AE","Ꜵ":"AO","Ꜷ":"AU","Ꜹ":"AV","Ꜻ":"AV","Ꜽ":"AY","Ⓑ":"B","Ｂ":"B","Ḃ":"B","Ḅ":"B","Ḇ":"B","Ƀ":"B","Ƃ":"B","Ɓ":"B","Ⓒ":"C","Ｃ":"C","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","Ç":"C","Ḉ":"C","Ƈ":"C","Ȼ":"C","Ꜿ":"C","Ⓓ":"D","Ｄ":"D","Ḋ":"D","Ď":"D","Ḍ":"D","Ḑ":"D","Ḓ":"D","Ḏ":"D","Đ":"D","Ƌ":"D","Ɗ":"D","Ɖ":"D","Ꝺ":"D","Ǳ":"DZ","Ǆ":"DZ","ǲ":"Dz","ǅ":"Dz","Ⓔ":"E","Ｅ":"E","È":"E","É":"E","Ê":"E","Ề":"E","Ế":"E","Ễ":"E","Ể":"E","Ẽ":"E","Ē":"E","Ḕ":"E","Ḗ":"E","Ĕ":"E","Ė":"E","Ë":"E","Ẻ":"E","Ě":"E","Ȅ":"E","Ȇ":"E","Ẹ":"E","Ệ":"E","Ȩ":"E","Ḝ":"E","Ę":"E","Ḙ":"E","Ḛ":"E","Ɛ":"E","Ǝ":"E","Ⓕ":"F","Ｆ":"F","Ḟ":"F","Ƒ":"F","Ꝼ":"F","Ⓖ":"G","Ｇ":"G","Ǵ":"G","Ĝ":"G","Ḡ":"G","Ğ":"G","Ġ":"G","Ǧ":"G","Ģ":"G","Ǥ":"G","Ɠ":"G","Ꞡ":"G","Ᵹ":"G","Ꝿ":"G","Ⓗ":"H","Ｈ":"H","Ĥ":"H","Ḣ":"H","Ḧ":"H","Ȟ":"H","Ḥ":"H","Ḩ":"H","Ḫ":"H","Ħ":"H","Ⱨ":"H","Ⱶ":"H","Ɥ":"H","Ⓘ":"I","Ｉ":"I","Ì":"I","Í":"I","Î":"I","Ĩ":"I","Ī":"I","Ĭ":"I","İ":"I","Ï":"I","Ḯ":"I","Ỉ":"I","Ǐ":"I","Ȉ":"I","Ȋ":"I","Ị":"I","Į":"I","Ḭ":"I","Ɨ":"I","Ⓙ":"J","Ｊ":"J","Ĵ":"J","Ɉ":"J","Ⓚ":"K","Ｋ":"K","Ḱ":"K","Ǩ":"K","Ḳ":"K","Ķ":"K","Ḵ":"K","Ƙ":"K","Ⱪ":"K","Ꝁ":"K","Ꝃ":"K","Ꝅ":"K","Ꞣ":"K","Ⓛ":"L","Ｌ":"L","Ŀ":"L","Ĺ":"L","Ľ":"L","Ḷ":"L","Ḹ":"L","Ļ":"L","Ḽ":"L","Ḻ":"L","Ł":"L","Ƚ":"L","Ɫ":"L","Ⱡ":"L","Ꝉ":"L","Ꝇ":"L","Ꞁ":"L","Ǉ":"LJ","ǈ":"Lj","Ⓜ":"M","Ｍ":"M","Ḿ":"M","Ṁ":"M","Ṃ":"M","Ɱ":"M","Ɯ":"M","Ⓝ":"N","Ｎ":"N","Ǹ":"N","Ń":"N","Ñ":"N","Ṅ":"N","Ň":"N","Ṇ":"N","Ņ":"N","Ṋ":"N","Ṉ":"N","Ƞ":"N","Ɲ":"N","Ꞑ":"N","Ꞥ":"N","Ǌ":"NJ","ǋ":"Nj","Ⓞ":"O","Ｏ":"O","Ò":"O","Ó":"O","Ô":"O","Ồ":"O","Ố":"O","Ỗ":"O","Ổ":"O","Õ":"O","Ṍ":"O","Ȭ":"O","Ṏ":"O","Ō":"O","Ṑ":"O","Ṓ":"O","Ŏ":"O","Ȯ":"O","Ȱ":"O","Ö":"O","Ȫ":"O","Ỏ":"O","Ő":"O","Ǒ":"O","Ȍ":"O","Ȏ":"O","Ơ":"O","Ờ":"O","Ớ":"O","Ỡ":"O","Ở":"O","Ợ":"O","Ọ":"O","Ộ":"O","Ǫ":"O","Ǭ":"O","Ø":"O","Ǿ":"O","Ɔ":"O","Ɵ":"O","Ꝋ":"O","Ꝍ":"O","Ƣ":"OI","Ꝏ":"OO","Ȣ":"OU","Ⓟ":"P","Ｐ":"P","Ṕ":"P","Ṗ":"P","Ƥ":"P","Ᵽ":"P","Ꝑ":"P","Ꝓ":"P","Ꝕ":"P","Ⓠ":"Q","Ｑ":"Q","Ꝗ":"Q","Ꝙ":"Q","Ɋ":"Q","Ⓡ":"R","Ｒ":"R","Ŕ":"R","Ṙ":"R","Ř":"R","Ȑ":"R","Ȓ":"R","Ṛ":"R","Ṝ":"R","Ŗ":"R","Ṟ":"R","Ɍ":"R","Ɽ":"R","Ꝛ":"R","Ꞧ":"R","Ꞃ":"R","Ⓢ":"S","Ｓ":"S","ẞ":"S","Ś":"S","Ṥ":"S","Ŝ":"S","Ṡ":"S","Š":"S","Ṧ":"S","Ṣ":"S","Ṩ":"S","Ș":"S","Ş":"S","Ȿ":"S","Ꞩ":"S","Ꞅ":"S","Ⓣ":"T","Ｔ":"T","Ṫ":"T","Ť":"T","Ṭ":"T","Ț":"T","Ţ":"T","Ṱ":"T","Ṯ":"T","Ŧ":"T","Ƭ":"T","Ʈ":"T","Ⱦ":"T","Ꞇ":"T","Ꜩ":"TZ","Ⓤ":"U","Ｕ":"U","Ù":"U","Ú":"U","Û":"U","Ũ":"U","Ṹ":"U","Ū":"U","Ṻ":"U","Ŭ":"U","Ü":"U","Ǜ":"U","Ǘ":"U","Ǖ":"U","Ǚ":"U","Ủ":"U","Ů":"U","Ű":"U","Ǔ":"U","Ȕ":"U","Ȗ":"U","Ư":"U","Ừ":"U","Ứ":"U","Ữ":"U","Ử":"U","Ự":"U","Ụ":"U","Ṳ":"U","Ų":"U","Ṷ":"U","Ṵ":"U","Ʉ":"U","Ⓥ":"V","Ｖ":"V","Ṽ":"V","Ṿ":"V","Ʋ":"V","Ꝟ":"V","Ʌ":"V","Ꝡ":"VY","Ⓦ":"W","Ｗ":"W","Ẁ":"W","Ẃ":"W","Ŵ":"W","Ẇ":"W","Ẅ":"W","Ẉ":"W","Ⱳ":"W","Ⓧ":"X","Ｘ":"X","Ẋ":"X","Ẍ":"X","Ⓨ":"Y","Ｙ":"Y","Ỳ":"Y","Ý":"Y","Ŷ":"Y","Ỹ":"Y","Ȳ":"Y","Ẏ":"Y","Ÿ":"Y","Ỷ":"Y","Ỵ":"Y","Ƴ":"Y","Ɏ":"Y","Ỿ":"Y","Ⓩ":"Z","Ｚ":"Z","Ź":"Z","Ẑ":"Z","Ż":"Z","Ž":"Z","Ẓ":"Z","Ẕ":"Z","Ƶ":"Z","Ȥ":"Z","Ɀ":"Z","Ⱬ":"Z","Ꝣ":"Z","ⓐ":"a","ａ":"a","ẚ":"a","à":"a","á":"a","â":"a","ầ":"a","ấ":"a","ẫ":"a","ẩ":"a","ã":"a","ā":"a","ă":"a","ằ":"a","ắ":"a","ẵ":"a","ẳ":"a","ȧ":"a","ǡ":"a","ä":"a","ǟ":"a","ả":"a","å":"a","ǻ":"a","ǎ":"a","ȁ":"a","ȃ":"a","ạ":"a","ậ":"a","ặ":"a","ḁ":"a","ą":"a","ⱥ":"a","ɐ":"a","ꜳ":"aa","æ":"ae","ǽ":"ae","ǣ":"ae","ꜵ":"ao","ꜷ":"au","ꜹ":"av","ꜻ":"av","ꜽ":"ay","ⓑ":"b","ｂ":"b","ḃ":"b","ḅ":"b","ḇ":"b","ƀ":"b","ƃ":"b","ɓ":"b","ⓒ":"c","ｃ":"c","ć":"c","ĉ":"c","ċ":"c","č":"c","ç":"c","ḉ":"c","ƈ":"c","ȼ":"c","ꜿ":"c","ↄ":"c","ⓓ":"d","ｄ":"d","ḋ":"d","ď":"d","ḍ":"d","ḑ":"d","ḓ":"d","ḏ":"d","đ":"d","ƌ":"d","ɖ":"d","ɗ":"d","ꝺ":"d","ǳ":"dz","ǆ":"dz","ⓔ":"e","ｅ":"e","è":"e","é":"e","ê":"e","ề":"e","ế":"e","ễ":"e","ể":"e","ẽ":"e","ē":"e","ḕ":"e","ḗ":"e","ĕ":"e","ė":"e","ë":"e","ẻ":"e","ě":"e","ȅ":"e","ȇ":"e","ẹ":"e","ệ":"e","ȩ":"e","ḝ":"e","ę":"e","ḙ":"e","ḛ":"e","ɇ":"e","ɛ":"e","ǝ":"e","ⓕ":"f","ｆ":"f","ḟ":"f","ƒ":"f","ꝼ":"f","ⓖ":"g","ｇ":"g","ǵ":"g","ĝ":"g","ḡ":"g","ğ":"g","ġ":"g","ǧ":"g","ģ":"g","ǥ":"g","ɠ":"g","ꞡ":"g","ᵹ":"g","ꝿ":"g","ⓗ":"h","ｈ":"h","ĥ":"h","ḣ":"h","ḧ":"h","ȟ":"h","ḥ":"h","ḩ":"h","ḫ":"h","ẖ":"h","ħ":"h","ⱨ":"h","ⱶ":"h","ɥ":"h","ƕ":"hv","ⓘ":"i","ｉ":"i","ì":"i","í":"i","î":"i","ĩ":"i","ī":"i","ĭ":"i","ï":"i","ḯ":"i","ỉ":"i","ǐ":"i","ȉ":"i","ȋ":"i","ị":"i","į":"i","ḭ":"i","ɨ":"i","ı":"i","ⓙ":"j","ｊ":"j","ĵ":"j","ǰ":"j","ɉ":"j","ⓚ":"k","ｋ":"k","ḱ":"k","ǩ":"k","ḳ":"k","ķ":"k","ḵ":"k","ƙ":"k","ⱪ":"k","ꝁ":"k","ꝃ":"k","ꝅ":"k","ꞣ":"k","ⓛ":"l","ｌ":"l","ŀ":"l","ĺ":"l","ľ":"l","ḷ":"l","ḹ":"l","ļ":"l","ḽ":"l","ḻ":"l","ſ":"l","ł":"l","ƚ":"l","ɫ":"l","ⱡ":"l","ꝉ":"l","ꞁ":"l","ꝇ":"l","ǉ":"lj","ⓜ":"m","ｍ":"m","ḿ":"m","ṁ":"m","ṃ":"m","ɱ":"m","ɯ":"m","ⓝ":"n","ｎ":"n","ǹ":"n","ń":"n","ñ":"n","ṅ":"n","ň":"n","ṇ":"n","ņ":"n","ṋ":"n","ṉ":"n","ƞ":"n","ɲ":"n","ŉ":"n","ꞑ":"n","ꞥ":"n","ǌ":"nj","ⓞ":"o","ｏ":"o","ò":"o","ó":"o","ô":"o","ồ":"o","ố":"o","ỗ":"o","ổ":"o","õ":"o","ṍ":"o","ȭ":"o","ṏ":"o","ō":"o","ṑ":"o","ṓ":"o","ŏ":"o","ȯ":"o","ȱ":"o","ö":"o","ȫ":"o","ỏ":"o","ő":"o","ǒ":"o","ȍ":"o","ȏ":"o","ơ":"o","ờ":"o","ớ":"o","ỡ":"o","ở":"o","ợ":"o","ọ":"o","ộ":"o","ǫ":"o","ǭ":"o","ø":"o","ǿ":"o","ɔ":"o","ꝋ":"o","ꝍ":"o","ɵ":"o","ƣ":"oi","ȣ":"ou","ꝏ":"oo","ⓟ":"p","ｐ":"p","ṕ":"p","ṗ":"p","ƥ":"p","ᵽ":"p","ꝑ":"p","ꝓ":"p","ꝕ":"p","ⓠ":"q","ｑ":"q","ɋ":"q","ꝗ":"q","ꝙ":"q","ⓡ":"r","ｒ":"r","ŕ":"r","ṙ":"r","ř":"r","ȑ":"r","ȓ":"r","ṛ":"r","ṝ":"r","ŗ":"r","ṟ":"r","ɍ":"r","ɽ":"r","ꝛ":"r","ꞧ":"r","ꞃ":"r","ⓢ":"s","ｓ":"s","ß":"s","ś":"s","ṥ":"s","ŝ":"s","ṡ":"s","š":"s","ṧ":"s","ṣ":"s","ṩ":"s","ș":"s","ş":"s","ȿ":"s","ꞩ":"s","ꞅ":"s","ẛ":"s","ⓣ":"t","ｔ":"t","ṫ":"t","ẗ":"t","ť":"t","ṭ":"t","ț":"t","ţ":"t","ṱ":"t","ṯ":"t","ŧ":"t","ƭ":"t","ʈ":"t","ⱦ":"t","ꞇ":"t","ꜩ":"tz","ⓤ":"u","ｕ":"u","ù":"u","ú":"u","û":"u","ũ":"u","ṹ":"u","ū":"u","ṻ":"u","ŭ":"u","ü":"u","ǜ":"u","ǘ":"u","ǖ":"u","ǚ":"u","ủ":"u",
	"ů":"u","ű":"u","ǔ":"u","ȕ":"u","ȗ":"u","ư":"u","ừ":"u","ứ":"u","ữ":"u","ử":"u","ự":"u","ụ":"u","ṳ":"u","ų":"u","ṷ":"u","ṵ":"u","ʉ":"u","ⓥ":"v","ｖ":"v","ṽ":"v","ṿ":"v","ʋ":"v","ꝟ":"v","ʌ":"v","ꝡ":"vy","ⓦ":"w","ｗ":"w","ẁ":"w","ẃ":"w","ŵ":"w","ẇ":"w","ẅ":"w","ẘ":"w","ẉ":"w","ⱳ":"w","ⓧ":"x","ｘ":"x","ẋ":"x","ẍ":"x","ⓨ":"y","ｙ":"y","ỳ":"y","ý":"y","ŷ":"y","ỹ":"y","ȳ":"y","ẏ":"y","ÿ":"y","ỷ":"y","ẙ":"y","ỵ":"y","ƴ":"y","ɏ":"y","ỿ":"y","ⓩ":"z","ｚ":"z","ź":"z","ẑ":"z","ż":"z","ž":"z","ẓ":"z","ẕ":"z","ƶ":"z","ȥ":"z","ɀ":"z","ⱬ":"z","ꝣ":"z","Ά":"Α","Έ":"Ε","Ή":"Η","Ί":"Ι","Ϊ":"Ι","Ό":"Ο","Ύ":"Υ","Ϋ":"Υ","Ώ":"Ω","ά":"α","έ":"ε","ή":"η","ί":"ι","ϊ":"ι","ΐ":"ι","ό":"ο","ύ":"υ","ϋ":"υ","ΰ":"υ","ω":"ω","ς":"σ"};R=t(document),I=function(){var t=1;return function(){return t++}}(),A=Y(Object,{bind:function(t){var e=this;return function(){t.apply(e,arguments)}},init:function(e){var n,r,s=".select2-results";this.opts=e=this.prepareOpts(e),this.id=e.id,e.element.data("select2")!==i&&null!==e.element.data("select2")&&e.element.data("select2").destroy(),this.container=this.createContainer(),this.liveRegion=t(".select2-hidden-accessible"),0==this.liveRegion.length&&(this.liveRegion=t("<span>",{role:"status","aria-live":"polite"}).addClass("select2-hidden-accessible").appendTo(document.body)),this.containerId="s2id_"+(e.element.attr("id")||"autogen"+I()),this.containerEventName=this.containerId.replace(/([.])/g,"_").replace(/([;&,\-\.\+\*\~':"\!\^#$%@\[\]\(\)=>\|])/g,"\\$1"),this.container.attr("id",this.containerId),this.container.attr("title",e.element.attr("title")),this.body=t("body"),y(this.container,this.opts.element,this.opts.adaptContainerCssClass),this.container.attr("style",e.element.attr("style")),this.container.css(L(e.containerCss,this.opts.element)),this.container.addClass(L(e.containerCssClass,this.opts.element)),this.elementTabIndex=this.opts.element.attr("tabindex"),this.opts.element.data("select2",this).attr("tabindex","-1").before(this.container).on("click.select2",_),this.container.data("select2",this),this.dropdown=this.container.find(".select2-drop"),y(this.dropdown,this.opts.element,this.opts.adaptDropdownCssClass),this.dropdown.addClass(L(e.dropdownCssClass,this.opts.element)),this.dropdown.data("select2",this),this.dropdown.on("click",_),this.results=n=this.container.find(s),this.search=r=this.container.find("input.select2-input"),this.queryCount=0,this.resultsPage=0,this.context=null,this.initContainer(),this.container.on("click",_),d(this.results),this.dropdown.on("mousemove-filtered",s,this.bind(this.highlightUnderEvent)),this.dropdown.on("touchstart touchmove touchend",s,this.bind(function(t){this._touchEvent=!0,this.highlightUnderEvent(t)})),this.dropdown.on("touchmove",s,this.bind(this.touchMoved)),this.dropdown.on("touchstart touchend",s,this.bind(this.clearTouchMoved)),this.dropdown.on("click",this.bind(function(t){this._touchEvent&&(this._touchEvent=!1,this.selectHighlighted())})),p(80,this.results),this.dropdown.on("scroll-debounced",s,this.bind(this.loadMoreIfNeeded)),t(this.container).on("change",".select2-input",function(t){t.stopPropagation()}),t(this.dropdown).on("change",".select2-input",function(t){t.stopPropagation()}),t.fn.mousewheel&&n.mousewheel(function(t,e,i,r){var s=n.scrollTop();r>0&&s-r<=0?(n.scrollTop(0),_(t)):r<0&&n.get(0).scrollHeight-n.scrollTop()+r<=n.height()&&(n.scrollTop(n.get(0).scrollHeight-n.height()),_(t))}),u(r),r.on("keyup-change input paste",this.bind(this.updateResults)),r.on("focus",function(){r.addClass("select2-focused")}),r.on("blur",function(){r.removeClass("select2-focused")}),this.dropdown.on("mouseup",s,this.bind(function(e){t(e.target).closest(".select2-result-selectable").length>0&&(this.highlightUnderEvent(e),this.selectHighlighted(e))})),this.dropdown.on("click mouseup mousedown touchstart touchend focusin",function(t){t.stopPropagation()}),this.nextSearchTerm=i,t.isFunction(this.opts.initSelection)&&(this.initSelection(),this.monitorSource()),null!==e.maximumInputLength&&this.search.attr("maxlength",e.maximumInputLength);var a=e.element.prop("disabled");a===i&&(a=!1),this.enable(!a);var l=e.element.prop("readonly");l===i&&(l=!1),this.readonly(l),H=H||o(),this.autofocus=e.element.prop("autofocus"),e.element.prop("autofocus",!1),this.autofocus&&this.focus(),this.search.attr("placeholder",e.searchInputPlaceholder)},destroy:function(){var t=this.opts.element,e=t.data("select2"),n=this;this.close(),t.length&&t[0].detachEvent&&n._sync&&t.each(function(){this.detachEvent("onpropertychange",n._sync)}),this.propertyObserver&&(this.propertyObserver.disconnect(),this.propertyObserver=null),this._sync=null,e!==i&&(e.container.remove(),e.liveRegion.remove(),e.dropdown.remove(),t.removeClass("select2-offscreen").removeData("select2").off(".select2").prop("autofocus",this.autofocus||!1),this.elementTabIndex?t.attr({tabindex:this.elementTabIndex}):t.removeAttr("tabindex"),t.show()),D.call(this,"container","liveRegion","dropdown","results","search")},optionToData:function(t){return t.is("option")?{id:t.prop("value"),text:t.text(),element:t.get(),css:t.attr("class"),disabled:t.prop("disabled"),locked:a(t.attr("locked"),"locked")||a(t.data("locked"),!0)}:t.is("optgroup")?{text:t.attr("label"),children:[],element:t.get(),css:t.attr("class")}:void 0},prepareOpts:function(e){var n,r,s,o,c=this;if(n=e.element,"select"===n.get(0).tagName.toLowerCase()&&(this.select=r=e.element),r&&t.each(["id","multiple","ajax","query","createSearchChoice","initSelection","data","tags"],function(){if(this in e)throw new Error("Option '"+this+"' is not allowed for Select2 when attached to a <select> element.")}),e=t.extend({},{populateResults:function(n,r,s){var o,a=this.opts.id,l=this.liveRegion;(o=function(n,r,u){var d,h,p,f,m,_,g,v,y,b;n=e.sortResults(n,r,s);var w=[];for(d=0,h=n.length;d<h;d+=1)p=n[d],m=p.disabled===!0,f=!m&&a(p)!==i,_=p.children&&p.children.length>0,g=t("<li></li>"),g.addClass("select2-results-dept-"+u),g.addClass("select2-result"),g.addClass(f?"select2-result-selectable":"select2-result-unselectable"),m&&g.addClass("select2-disabled"),_&&g.addClass("select2-result-with-children"),g.addClass(c.opts.formatResultCssClass(p)),g.attr("role","presentation"),v=t(document.createElement("div")),v.addClass("select2-result-label"),v.attr("id","select2-result-label-"+I()),v.attr("role","option"),b=e.formatResult(p,v,s,c.opts.escapeMarkup),b!==i&&(v.html(b),g.append(v)),_&&(y=t("<ul></ul>"),y.addClass("select2-result-sub"),o(p.children,y,u+1),g.append(y)),g.data("select2-data",p),w.push(g[0]);r.append(w),l.text(e.formatMatches(n.length))})(r,n,0)}},t.fn.select2.defaults,e),"function"!=typeof e.id&&(s=e.id,e.id=function(t){return t[s]}),t.isArray(e.element.data("select2Tags"))){if("tags"in e)throw"tags specified as both an attribute 'data-select2-tags' and in options of Select2 "+e.element.attr("id");e.tags=e.element.data("select2Tags")}if(r?(e.query=this.bind(function(t){var e,r,s,o={results:[],more:!1},a=t.term;s=function(e,i){var n;e.is("option")?t.matcher(a,e.text(),e)&&i.push(c.optionToData(e)):e.is("optgroup")&&(n=c.optionToData(e),e.children().each2(function(t,e){s(e,n.children)}),n.children.length>0&&i.push(n))},e=n.children(),this.getPlaceholder()!==i&&e.length>0&&(r=this.getPlaceholderOption(),r&&(e=e.not(r))),e.each2(function(t,e){s(e,o.results)}),t.callback(o)}),e.id=function(t){return t.id}):"query"in e||("ajax"in e?(o=e.element.data("ajax-url"),o&&o.length>0&&(e.ajax.url=o),e.query=M.call(e.element,e.ajax)):"data"in e?e.query=k(e.data):"tags"in e&&(e.query=T(e.tags),e.createSearchChoice===i&&(e.createSearchChoice=function(e){return{id:t.trim(e),text:t.trim(e)}}),e.initSelection===i&&(e.initSelection=function(i,n){var r=[];t(l(i.val(),e.separator)).each(function(){var i={id:this,text:this},n=e.tags;t.isFunction(n)&&(n=n()),t(n).each(function(){if(a(this.id,i.id))return i=this,!1}),r.push(i)}),n(r)}))),"function"!=typeof e.query)throw"query function not defined for Select2 "+e.element.attr("id");if("top"===e.createSearchChoicePosition)e.createSearchChoicePosition=function(t,e){t.unshift(e)};else if("bottom"===e.createSearchChoicePosition)e.createSearchChoicePosition=function(t,e){t.push(e)};else if("function"!=typeof e.createSearchChoicePosition)throw"invalid createSearchChoicePosition option must be 'top', 'bottom' or a custom function";return e},monitorSource:function(){var e,n=this.opts.element,r=this;n.on("change.select2",this.bind(function(t){this.opts.element.data("select2-change-triggered")!==!0&&this.initSelection()})),this._sync=this.bind(function(){var t=n.prop("disabled");t===i&&(t=!1),this.enable(!t);var e=n.prop("readonly");e===i&&(e=!1),this.readonly(e),y(this.container,this.opts.element,this.opts.adaptContainerCssClass),this.container.addClass(L(this.opts.containerCssClass,this.opts.element)),y(this.dropdown,this.opts.element,this.opts.adaptDropdownCssClass),this.dropdown.addClass(L(this.opts.dropdownCssClass,this.opts.element))}),n.length&&n[0].attachEvent&&n.each(function(){this.attachEvent("onpropertychange",r._sync)}),e=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver,e!==i&&(this.propertyObserver&&(delete this.propertyObserver,this.propertyObserver=null),this.propertyObserver=new e(function(e){t.each(e,r._sync)}),this.propertyObserver.observe(n.get(0),{attributes:!0,subtree:!1}))},triggerSelect:function(e){var i=t.Event("select2-selecting",{val:this.id(e),object:e,choice:e});return this.opts.element.trigger(i),!i.isDefaultPrevented()},triggerChange:function(e){e=e||{},e=t.extend({},e,{type:"change",val:this.val()}),this.opts.element.data("select2-change-triggered",!0),this.opts.element.trigger(e),this.opts.element.data("select2-change-triggered",!1),this.opts.element.click(),this.opts.blurOnChange&&this.opts.element.blur()},isInterfaceEnabled:function(){return this.enabledInterface===!0},enableInterface:function(){var t=this._enabled&&!this._readonly,e=!t;return t!==this.enabledInterface&&(this.container.toggleClass("select2-container-disabled",e),this.close(),this.enabledInterface=t,!0)},enable:function(t){t===i&&(t=!0),this._enabled!==t&&(this._enabled=t,this.opts.element.prop("disabled",!t),this.enableInterface())},disable:function(){this.enable(!1)},readonly:function(t){t===i&&(t=!1),this._readonly!==t&&(this._readonly=t,this.opts.element.prop("readonly",t),this.enableInterface())},opened:function(){return!!this.container&&this.container.hasClass("select2-dropdown-open")},positionDropdown:function(){var e,i,n,r,s,o=this.dropdown,a=this.container,l=a.offset(),c=a.outerHeight(!1),u=a.outerWidth(!1),d=o.outerHeight(!1),h=t(window),p=h.width(),f=h.height(),m=h.scrollLeft()+p,_=h.scrollTop()+f,g=l.top+c,v=l.left,y=g+d<=_,b=l.top-d>=h.scrollTop(),w=o.outerWidth(!1),M=function(){return v+w<=m},k=function(){return l.left+m+a.outerWidth(!1)>w},T=o.hasClass("select2-drop-above");T?(i=!0,!b&&y&&(n=!0,i=!1)):(i=!1,!y&&b&&(n=!0,i=!0)),n&&(o.hide(),l=this.container.offset(),c=this.container.outerHeight(!1),u=this.container.outerWidth(!1),d=o.outerHeight(!1),m=h.scrollLeft()+p,_=h.scrollTop()+f,g=l.top+c,v=l.left,w=o.outerWidth(!1),o.show(),this.focusSearch()),this.opts.dropdownAutoWidth?(s=t(".select2-results",o)[0],o.addClass("select2-drop-auto-width"),o.css("width",""),w=o.outerWidth(!1)+(s.scrollHeight===s.clientHeight?0:H.width),w>u?u=w:w=u,d=o.outerHeight(!1)):this.container.removeClass("select2-drop-auto-width"),"static"!==this.body.css("position")&&(e=this.body.offset(),g-=e.top,v-=e.left),!M()&&k()&&(v=l.left+this.container.outerWidth(!1)-w),r={left:v,width:u},i?(r.top=l.top-d,r.bottom="auto",this.container.addClass("select2-drop-above"),o.addClass("select2-drop-above")):(r.top=g,r.bottom="auto",this.container.removeClass("select2-drop-above"),o.removeClass("select2-drop-above")),r=t.extend(r,L(this.opts.dropdownCss,this.opts.element)),o.css(r)},shouldOpen:function(){var e;return!this.opened()&&(this._enabled!==!1&&this._readonly!==!0&&(e=t.Event("select2-opening"),this.opts.element.trigger(e),!e.isDefaultPrevented()))},clearDropdownAlignmentPreference:function(){this.container.removeClass("select2-drop-above"),this.dropdown.removeClass("select2-drop-above")},open:function(){return!!this.shouldOpen()&&(this.opening(),R.on("mousemove.select2Event",function(t){j.x=t.pageX,j.y=t.pageY}),!0)},opening:function(){var e,i=this.containerEventName,r="scroll."+i,s="resize."+i,o="orientationchange."+i;this.container.addClass("select2-dropdown-open").addClass("select2-container-active"),this.clearDropdownAlignmentPreference(),this.dropdown[0]!==this.body.children().last()[0]&&this.dropdown.detach().appendTo(this.body),e=t("#select2-drop-mask"),0==e.length&&(e=t(document.createElement("div")),e.attr("id","select2-drop-mask").attr("class","select2-drop-mask"),e.hide(),e.appendTo(this.body),e.on("mousedown touchstart click",function(i){n(e);var r,s=t("#select2-drop");s.length>0&&(r=s.data("select2"),r.opts.selectOnBlur&&r.selectHighlighted({noFocus:!0}),r.close(),i.preventDefault(),i.stopPropagation())})),this.dropdown.prev()[0]!==e[0]&&this.dropdown.before(e),t("#select2-drop").removeAttr("id"),this.dropdown.attr("id","select2-drop"),e.show(),this.positionDropdown(),this.dropdown.show(),this.positionDropdown(),this.dropdown.addClass("select2-drop-active");var a=this;this.container.parents().add(window).each(function(){t(this).on(s+" "+r+" "+o,function(t){a.opened()&&a.positionDropdown()})})},close:function(){if(this.opened()){var e=this.containerEventName,i="scroll."+e,n="resize."+e,r="orientationchange."+e;this.container.parents().add(window).each(function(){t(this).off(i).off(n).off(r)}),this.clearDropdownAlignmentPreference(),t("#select2-drop-mask").hide(),this.dropdown.removeAttr("id"),this.dropdown.hide(),this.container.removeClass("select2-dropdown-open").removeClass("select2-container-active"),this.results.empty(),R.off("mousemove.select2Event"),this.clearSearch(),this.search.removeClass("select2-active"),this.opts.element.trigger(t.Event("select2-close"))}},externalSearch:function(t){this.open(),this.search.val(t),this.updateResults(!1)},clearSearch:function(){},getMaximumSelectionSize:function(){return L(this.opts.maximumSelectionSize,this.opts.element)},ensureHighlightVisible:function(){var e,i,n,r,s,o,a,l,c=this.results;if(i=this.highlight(),!(i<0)){if(0==i)return void c.scrollTop(0);e=this.findHighlightableChoices().find(".select2-result-label"),n=t(e[i]),l=(n.offset()||{}).top||0,r=l+n.outerHeight(!0),i===e.length-1&&(a=c.find("li.select2-more-results"),a.length>0&&(r=a.offset().top+a.outerHeight(!0))),s=c.offset().top+c.outerHeight(!0),r>s&&c.scrollTop(c.scrollTop()+(r-s)),o=l-c.offset().top,o<0&&"none"!=n.css("display")&&c.scrollTop(c.scrollTop()+o)}},findHighlightableChoices:function(){return this.results.find(".select2-result-selectable:not(.select2-disabled):not(.select2-selected)")},moveHighlight:function(e){for(var i=this.findHighlightableChoices(),n=this.highlight();n>-1&&n<i.length;){n+=e;var r=t(i[n]);if(r.hasClass("select2-result-selectable")&&!r.hasClass("select2-disabled")&&!r.hasClass("select2-selected")){this.highlight(n);break}}},highlight:function(e){var i,n,r=this.findHighlightableChoices();return 0===arguments.length?s(r.filter(".select2-highlighted")[0],r.get()):(e>=r.length&&(e=r.length-1),e<0&&(e=0),this.removeHighlight(),i=t(r[e]),i.addClass("select2-highlighted"),this.search.attr("aria-activedescendant",i.find(".select2-result-label").attr("id")),this.ensureHighlightVisible(),this.liveRegion.text(i.text()),n=i.data("select2-data"),void(n&&this.opts.element.trigger({type:"select2-highlight",val:this.id(n),choice:n})))},removeHighlight:function(){this.results.find(".select2-highlighted").removeClass("select2-highlighted")},touchMoved:function(){this._touchMoved=!0},clearTouchMoved:function(){this._touchMoved=!1},countSelectableResults:function(){return this.findHighlightableChoices().length},highlightUnderEvent:function(e){var i=t(e.target).closest(".select2-result-selectable");if(i.length>0&&!i.is(".select2-highlighted")){var n=this.findHighlightableChoices();this.highlight(n.index(i))}else 0==i.length&&this.removeHighlight()},loadMoreIfNeeded:function(){var t,e=this.results,i=e.find("li.select2-more-results"),n=this.resultsPage+1,r=this,s=this.search.val(),o=this.context;0!==i.length&&(t=i.offset().top-e.offset().top-e.height(),t<=this.opts.loadMorePadding&&(i.addClass("select2-active"),this.opts.query({element:this.opts.element,term:s,page:n,context:o,matcher:this.opts.matcher,callback:this.bind(function(t){r.opened()&&(r.opts.populateResults.call(this,e,t.results,{term:s,page:n,context:o}),r.postprocessResults(t,!1,!1),t.more===!0?(i.detach().appendTo(e).text(L(r.opts.formatLoadMore,r.opts.element,n+1)),window.setTimeout(function(){r.loadMoreIfNeeded()},10)):i.remove(),r.positionDropdown(),r.resultsPage=n,r.context=t.context,this.opts.element.trigger({type:"select2-loaded",items:t}))})})))},tokenize:function(){},updateResults:function(e){function n(){c.removeClass("select2-active"),h.positionDropdown(),u.find(".select2-no-results,.select2-selection-limit,.select2-searching").length?h.liveRegion.text(u.text()):h.liveRegion.text(h.opts.formatMatches(u.find(".select2-result-selectable").length))}function r(t){u.html(t),n()}var s,o,l,c=this.search,u=this.results,d=this.opts,h=this,p=c.val(),f=t.data(this.container,"select2-last-term");if((e===!0||!f||!a(p,f))&&(t.data(this.container,"select2-last-term",p),e===!0||this.showSearchInput!==!1&&this.opened())){l=++this.queryCount;var m=this.getMaximumSelectionSize();if(m>=1&&(s=this.data(),t.isArray(s)&&s.length>=m&&S(d.formatSelectionTooBig,"formatSelectionTooBig")))return void r("<li class='select2-selection-limit'>"+L(d.formatSelectionTooBig,d.element,m)+"</li>");if(c.val().length<d.minimumInputLength)return r(S(d.formatInputTooShort,"formatInputTooShort")?"<li class='select2-no-results'>"+L(d.formatInputTooShort,d.element,c.val(),d.minimumInputLength)+"</li>":""),void(e&&this.showSearch&&this.showSearch(!0));if(d.maximumInputLength&&c.val().length>d.maximumInputLength)return void r(S(d.formatInputTooLong,"formatInputTooLong")?"<li class='select2-no-results'>"+L(d.formatInputTooLong,d.element,c.val(),d.maximumInputLength)+"</li>":"");d.formatSearching&&0===this.findHighlightableChoices().length&&r("<li class='select2-searching'>"+L(d.formatSearching,d.element)+"</li>"),c.addClass("select2-active"),this.removeHighlight(),o=this.tokenize(),o!=i&&null!=o&&c.val(o),this.resultsPage=1,d.query({element:d.element,term:c.val(),page:this.resultsPage,context:null,matcher:d.matcher,callback:this.bind(function(s){var o;if(l==this.queryCount){if(!this.opened())return void this.search.removeClass("select2-active");if(s.hasError!==i&&S(d.formatAjaxError,"formatAjaxError"))return void r("<li class='select2-ajax-error'>"+L(d.formatAjaxError,d.element,s.jqXHR,s.textStatus,s.errorThrown)+"</li>");if(this.context=s.context===i?null:s.context,this.opts.createSearchChoice&&""!==c.val()&&(o=this.opts.createSearchChoice.call(h,c.val(),s.results),o!==i&&null!==o&&h.id(o)!==i&&null!==h.id(o)&&0===t(s.results).filter(function(){return a(h.id(this),h.id(o))}).length&&this.opts.createSearchChoicePosition(s.results,o)),0===s.results.length&&S(d.formatNoMatches,"formatNoMatches"))return void r("<li class='select2-no-results'>"+L(d.formatNoMatches,d.element,c.val())+"</li>");u.empty(),h.opts.populateResults.call(this,u,s.results,{term:c.val(),page:this.resultsPage,context:null}),s.more===!0&&S(d.formatLoadMore,"formatLoadMore")&&(u.append("<li class='select2-more-results'>"+d.escapeMarkup(L(d.formatLoadMore,d.element,this.resultsPage))+"</li>"),window.setTimeout(function(){h.loadMoreIfNeeded()},10)),this.postprocessResults(s,e),n(),this.opts.element.trigger({type:"select2-loaded",items:s})}})})}},cancel:function(){this.close()},blur:function(){this.opts.selectOnBlur&&this.selectHighlighted({noFocus:!0}),this.close(),this.container.removeClass("select2-container-active"),this.search[0]===document.activeElement&&this.search.blur(),this.clearSearch(),this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus")},focusSearch:function(){f(this.search)},selectHighlighted:function(t){if(this._touchMoved)return void this.clearTouchMoved();var e=this.highlight(),i=this.results.find(".select2-highlighted"),n=i.closest(".select2-result").data("select2-data");n?(this.highlight(e),this.onSelect(n,t)):t&&t.noFocus&&this.close()},getPlaceholder:function(){var t;return this.opts.element.attr("placeholder")||this.opts.element.attr("data-placeholder")||this.opts.element.data("placeholder")||this.opts.placeholder||((t=this.getPlaceholderOption())!==i?t.text():i)},getPlaceholderOption:function(){if(this.select){var e=this.select.children("option").first();if(this.opts.placeholderOption!==i)return"first"===this.opts.placeholderOption&&e||"function"==typeof this.opts.placeholderOption&&this.opts.placeholderOption(this.select);if(""===t.trim(e.text())&&""===e.val())return e}},initContainerWidth:function(){function e(){var e,n,r,s,o,a;if("off"===this.opts.width)return null;if("element"===this.opts.width)return 0===this.opts.element.outerWidth(!1)?"auto":this.opts.element.outerWidth(!1)+"px";if("copy"===this.opts.width||"resolve"===this.opts.width){if(e=this.opts.element.attr("style"),e!==i)for(n=e.split(";"),s=0,o=n.length;s<o;s+=1)if(a=n[s].replace(/\s/g,""),r=a.match(/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i),null!==r&&r.length>=1)return r[1];return"resolve"===this.opts.width?(e=this.opts.element.css("width"),e.indexOf("%")>0?e:0===this.opts.element.outerWidth(!1)?"auto":this.opts.element.outerWidth(!1)+"px"):null}return t.isFunction(this.opts.width)?this.opts.width():this.opts.width}var n=e.call(this);null!==n&&this.container.css("width",n)}}),O=Y(A,{createContainer:function(){var e=t(document.createElement("div")).attr({"class":"select2-container"}).html(["<a href='javascript:void(0)' class='select2-choice' tabindex='-1'>","   <span class='select2-chosen'>&#160;</span><abbr class='select2-search-choice-close'></abbr>","   <span class='select2-arrow' role='presentation'><b role='presentation'></b></span>","</a>","<label for='' class='select2-offscreen'></label>","<input class='select2-focusser select2-offscreen' type='text' aria-haspopup='true' role='button' />","<div class='select2-drop select2-display-none'>","   <div class='select2-search'>","       <label for='' class='select2-offscreen'></label>","       <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input' role='combobox' aria-expanded='true'","       aria-autocomplete='list' />","   </div>","   <ul class='select2-results' role='listbox'>","   </ul>","</div>"].join(""));return e},enableInterface:function(){this.parent.enableInterface.apply(this,arguments)&&this.focusser.prop("disabled",!this.isInterfaceEnabled())},opening:function(){var e,n,r;this.opts.minimumResultsForSearch>=0&&this.showSearch(!0),this.parent.opening.apply(this,arguments),this.showSearchInput!==!1&&this.search.val(this.focusser.val()),this.opts.shouldFocusInput(this)&&(this.search.focus(),e=this.search.get(0),e.createTextRange?(n=e.createTextRange(),n.collapse(!1),n.select()):e.setSelectionRange&&(r=this.search.val().length,e.setSelectionRange(r,r))),""===this.search.val()&&this.nextSearchTerm!=i&&(this.search.val(this.nextSearchTerm),this.search.select()),this.focusser.prop("disabled",!0).val(""),this.updateResults(!0),this.opts.element.trigger(t.Event("select2-open"))},close:function(){this.opened()&&(this.parent.close.apply(this,arguments),this.focusser.prop("disabled",!1),this.opts.shouldFocusInput(this)&&this.focusser.focus())},focus:function(){this.opened()?this.close():(this.focusser.prop("disabled",!1),this.opts.shouldFocusInput(this)&&this.focusser.focus())},isFocused:function(){return this.container.hasClass("select2-container-active")},cancel:function(){this.parent.cancel.apply(this,arguments),this.focusser.prop("disabled",!1),this.opts.shouldFocusInput(this)&&this.focusser.focus()},destroy:function(){t("label[for='"+this.focusser.attr("id")+"']").attr("for",this.opts.element.attr("id")),this.parent.destroy.apply(this,arguments),D.call(this,"selection","focusser")},initContainer:function(){var e,i,r=this.container,s=this.dropdown,o=I();this.opts.minimumResultsForSearch<0?this.showSearch(!1):this.showSearch(!0),this.selection=e=r.find(".select2-choice"),this.focusser=r.find(".select2-focusser"),e.find(".select2-chosen").attr("id","select2-chosen-"+o),this.focusser.attr("aria-labelledby","select2-chosen-"+o),this.results.attr("id","select2-results-"+o),this.search.attr("aria-owns","select2-results-"+o),this.focusser.attr("id","s2id_autogen"+o),i=t("label[for='"+this.opts.element.attr("id")+"']"),this.focusser.prev().text(i.text()).attr("for",this.focusser.attr("id"));var a=this.opts.element.attr("title");this.opts.element.attr("title",a||i.text()),this.focusser.attr("tabindex",this.elementTabIndex),this.search.attr("id",this.focusser.attr("id")+"_search"),this.search.prev().text(t("label[for='"+this.focusser.attr("id")+"']").text()).attr("for",this.search.attr("id")),this.search.on("keydown",this.bind(function(t){if(this.isInterfaceEnabled()&&229!=t.keyCode){if(t.which===C.PAGE_UP||t.which===C.PAGE_DOWN)return void _(t);switch(t.which){case C.UP:case C.DOWN:return this.moveHighlight(t.which===C.UP?-1:1),void _(t);case C.ENTER:return this.selectHighlighted(),void _(t);case C.TAB:return void this.selectHighlighted({noFocus:!0});case C.ESC:return this.cancel(t),void _(t)}}})),this.search.on("blur",this.bind(function(t){document.activeElement===this.body.get(0)&&window.setTimeout(this.bind(function(){this.opened()&&this.search.focus()}),0)})),this.focusser.on("keydown",this.bind(function(t){if(this.isInterfaceEnabled()&&t.which!==C.TAB&&!C.isControl(t)&&!C.isFunctionKey(t)&&t.which!==C.ESC){if(this.opts.openOnEnter===!1&&t.which===C.ENTER)return void _(t);if(t.which==C.DOWN||t.which==C.UP||t.which==C.ENTER&&this.opts.openOnEnter){if(t.altKey||t.ctrlKey||t.shiftKey||t.metaKey)return;return this.open(),void _(t)}return t.which==C.DELETE||t.which==C.BACKSPACE?(this.opts.allowClear&&this.clear(),void _(t)):void 0}})),u(this.focusser),this.focusser.on("keyup-change input",this.bind(function(t){if(this.opts.minimumResultsForSearch>=0){if(t.stopPropagation(),this.opened())return;this.open()}})),e.on("mousedown touchstart","abbr",this.bind(function(t){this.isInterfaceEnabled()&&(this.clear(),g(t),this.close(),this.selection.focus())})),e.on("mousedown touchstart",this.bind(function(i){n(e),this.container.hasClass("select2-container-active")||this.opts.element.trigger(t.Event("select2-focus")),this.opened()?this.close():this.isInterfaceEnabled()&&this.open(),_(i)})),s.on("mousedown touchstart",this.bind(function(){this.opts.shouldFocusInput(this)&&this.search.focus()})),e.on("focus",this.bind(function(t){_(t)})),this.focusser.on("focus",this.bind(function(){this.container.hasClass("select2-container-active")||this.opts.element.trigger(t.Event("select2-focus")),this.container.addClass("select2-container-active")})).on("blur",this.bind(function(){this.opened()||(this.container.removeClass("select2-container-active"),this.opts.element.trigger(t.Event("select2-blur")))})),this.search.on("focus",this.bind(function(){this.container.hasClass("select2-container-active")||this.opts.element.trigger(t.Event("select2-focus")),this.container.addClass("select2-container-active")})),this.initContainerWidth(),this.opts.element.addClass("select2-offscreen"),this.setPlaceholder()},clear:function(e){var i=this.selection.data("select2-data");if(i){var n=t.Event("select2-clearing");if(this.opts.element.trigger(n),n.isDefaultPrevented())return;var r=this.getPlaceholderOption();this.opts.element.val(r?r.val():""),this.selection.find(".select2-chosen").empty(),this.selection.removeData("select2-data"),this.setPlaceholder(),e!==!1&&(this.opts.element.trigger({type:"select2-removed",val:this.id(i),choice:i}),this.triggerChange({removed:i}))}},initSelection:function(){if(this.isPlaceholderOptionSelected())this.updateSelection(null),this.close(),this.setPlaceholder();else{var t=this;this.opts.initSelection.call(null,this.opts.element,function(e){e!==i&&null!==e&&(t.updateSelection(e),t.close(),t.setPlaceholder(),t.nextSearchTerm=t.opts.nextSearchTerm(e,t.search.val()))})}},isPlaceholderOptionSelected:function(){var t;return this.getPlaceholder()!==i&&((t=this.getPlaceholderOption())!==i&&t.prop("selected")||""===this.opts.element.val()||this.opts.element.val()===i||null===this.opts.element.val())},prepareOpts:function(){var e=this.parent.prepareOpts.apply(this,arguments),i=this;return"select"===e.element.get(0).tagName.toLowerCase()?e.initSelection=function(t,e){var n=t.find("option").filter(function(){return this.selected&&!this.disabled});e(i.optionToData(n))}:"data"in e&&(e.initSelection=e.initSelection||function(i,n){var r=i.val(),s=null;e.query({matcher:function(t,i,n){var o=a(r,e.id(n));return o&&(s=n),o},callback:t.isFunction(n)?function(){n(s)}:t.noop})}),e},getPlaceholder:function(){return this.select&&this.getPlaceholderOption()===i?i:this.parent.getPlaceholder.apply(this,arguments)},setPlaceholder:function(){var t=this.getPlaceholder();if(this.isPlaceholderOptionSelected()&&t!==i){if(this.select&&this.getPlaceholderOption()===i)return;this.selection.find(".select2-chosen").html(this.opts.escapeMarkup(t)),this.selection.addClass("select2-default"),this.container.removeClass("select2-allowclear")}},postprocessResults:function(t,e,i){var n=0,r=this;if(this.findHighlightableChoices().each2(function(t,e){if(a(r.id(e.data("select2-data")),r.opts.element.val()))return n=t,!1}),i!==!1&&(e===!0&&n>=0?this.highlight(n):this.highlight(0)),e===!0){var s=this.opts.minimumResultsForSearch;s>=0&&this.showSearch(x(t.results)>=s)}},showSearch:function(e){this.showSearchInput!==e&&(this.showSearchInput=e,this.dropdown.find(".select2-search").toggleClass("select2-search-hidden",!e),this.dropdown.find(".select2-search").toggleClass("select2-offscreen",!e),t(this.dropdown,this.container).toggleClass("select2-with-searchbox",e))},onSelect:function(t,e){if(this.triggerSelect(t)){var i=this.opts.element.val(),n=this.data();this.opts.element.val(this.id(t)),this.updateSelection(t),this.opts.element.trigger({type:"select2-selected",val:this.id(t),choice:t}),this.nextSearchTerm=this.opts.nextSearchTerm(t,this.search.val()),this.close(),e&&e.noFocus||!this.opts.shouldFocusInput(this)||this.focusser.focus(),a(i,this.id(t))||this.triggerChange({added:t,removed:n})}},updateSelection:function(t){var e,n,r=this.selection.find(".select2-chosen");this.selection.data("select2-data",t),r.empty(),null!==t&&(e=this.opts.formatSelection(t,r,this.opts.escapeMarkup)),e!==i&&r.append(e),n=this.opts.formatSelectionCssClass(t,r),n!==i&&r.addClass(n),this.selection.removeClass("select2-default"),this.opts.allowClear&&this.getPlaceholder()!==i&&this.container.addClass("select2-allowclear")},val:function(){var t,e=!1,n=null,r=this,s=this.data();if(0===arguments.length)return this.opts.element.val();if(t=arguments[0],arguments.length>1&&(e=arguments[1]),this.select)this.select.val(t).find("option").filter(function(){return this.selected}).each2(function(t,e){return n=r.optionToData(e),!1}),this.updateSelection(n),this.setPlaceholder(),e&&this.triggerChange({added:n,removed:s});else{if(!t&&0!==t)return void this.clear(e);if(this.opts.initSelection===i)throw new Error("cannot call val() if initSelection() is not defined");this.opts.element.val(t),this.opts.initSelection(this.opts.element,function(t){r.opts.element.val(t?r.id(t):""),r.updateSelection(t),r.setPlaceholder(),e&&r.triggerChange({added:t,removed:s})})}},clearSearch:function(){this.search.val(""),this.focusser.val("")},data:function(t){var e,n=!1;return 0===arguments.length?(e=this.selection.data("select2-data"),e==i&&(e=null),e):(arguments.length>1&&(n=arguments[1]),
	void(t?(e=this.data(),this.opts.element.val(t?this.id(t):""),this.updateSelection(t),n&&this.triggerChange({added:t,removed:e})):this.clear(n)))}}),N=Y(A,{createContainer:function(){var e=t(document.createElement("div")).attr({"class":"select2-container select2-container-multi"}).html(["<ul class='select2-choices'>","  <li class='select2-search-field'>","    <label for='' class='select2-offscreen'></label>","    <input type='text' autocomplete='off' autocorrect='off' autocapitalize='off' spellcheck='false' class='select2-input'>","  </li>","</ul>","<div class='select2-drop select2-drop-multi select2-display-none'>","   <ul class='select2-results'>","   </ul>","</div>"].join(""));return e},prepareOpts:function(){var e=this.parent.prepareOpts.apply(this,arguments),i=this;return"select"===e.element.get(0).tagName.toLowerCase()?e.initSelection=function(t,e){var n=[];t.find("option").filter(function(){return this.selected&&!this.disabled}).each2(function(t,e){n.push(i.optionToData(e))}),e(n)}:"data"in e&&(e.initSelection=e.initSelection||function(i,n){var r=l(i.val(),e.separator),s=[];e.query({matcher:function(i,n,o){var l=t.grep(r,function(t){return a(t,e.id(o))}).length;return l&&s.push(o),l},callback:t.isFunction(n)?function(){for(var t=[],i=0;i<r.length;i++)for(var o=r[i],l=0;l<s.length;l++){var c=s[l];if(a(o,e.id(c))){t.push(c),s.splice(l,1);break}}n(t)}:t.noop})}),e},selectChoice:function(t){var e=this.container.find(".select2-search-choice-focus");e.length&&t&&t[0]==e[0]||(e.length&&this.opts.element.trigger("choice-deselected",e),e.removeClass("select2-search-choice-focus"),t&&t.length&&(this.close(),t.addClass("select2-search-choice-focus"),this.opts.element.trigger("choice-selected",t)))},destroy:function(){t("label[for='"+this.search.attr("id")+"']").attr("for",this.opts.element.attr("id")),this.parent.destroy.apply(this,arguments),D.call(this,"searchContainer","selection")},initContainer:function(){var e,i=".select2-choices";this.searchContainer=this.container.find(".select2-search-field"),this.selection=e=this.container.find(i);var n=this;this.selection.on("click",".select2-container:not(.select2-container-disabled) .select2-search-choice:not(.select2-locked)",function(e){n.search[0].focus(),n.selectChoice(t(this))}),this.search.attr("id","s2id_autogen"+I()),this.search.prev().text(t("label[for='"+this.opts.element.attr("id")+"']").text()).attr("for",this.search.attr("id")),this.search.on("input paste",this.bind(function(){this.search.attr("placeholder")&&0==this.search.val().length||this.isInterfaceEnabled()&&(this.opened()||this.open())})),this.search.attr("tabindex",this.elementTabIndex),this.keydowns=0,this.search.on("keydown",this.bind(function(t){if(this.isInterfaceEnabled()){++this.keydowns;var i=e.find(".select2-search-choice-focus"),n=i.prev(".select2-search-choice:not(.select2-locked)"),r=i.next(".select2-search-choice:not(.select2-locked)"),s=m(this.search);if(i.length&&(t.which==C.LEFT||t.which==C.RIGHT||t.which==C.BACKSPACE||t.which==C.DELETE||t.which==C.ENTER)){var o=i;return t.which==C.LEFT&&n.length?o=n:t.which==C.RIGHT?o=r.length?r:null:t.which===C.BACKSPACE?this.unselect(i.first())&&(this.search.width(10),o=n.length?n:r):t.which==C.DELETE?this.unselect(i.first())&&(this.search.width(10),o=r.length?r:null):t.which==C.ENTER&&(o=null),this.selectChoice(o),_(t),void(o&&o.length||this.open())}if((t.which===C.BACKSPACE&&1==this.keydowns||t.which==C.LEFT)&&0==s.offset&&!s.length)return this.selectChoice(e.find(".select2-search-choice:not(.select2-locked)").last()),void _(t);if(this.selectChoice(null),this.opened())switch(t.which){case C.UP:case C.DOWN:return this.moveHighlight(t.which===C.UP?-1:1),void _(t);case C.ENTER:return this.selectHighlighted(),void _(t);case C.TAB:return this.selectHighlighted({noFocus:!0}),void this.close();case C.ESC:return this.cancel(t),void _(t)}if(t.which!==C.TAB&&!C.isControl(t)&&!C.isFunctionKey(t)&&t.which!==C.BACKSPACE&&t.which!==C.ESC){if(t.which===C.ENTER){if(this.opts.openOnEnter===!1)return;if(t.altKey||t.ctrlKey||t.shiftKey||t.metaKey)return}this.open(),t.which!==C.PAGE_UP&&t.which!==C.PAGE_DOWN||_(t),t.which===C.ENTER&&_(t)}}})),this.search.on("keyup",this.bind(function(t){this.keydowns=0,this.resizeSearch()})),this.search.on("blur",this.bind(function(e){this.container.removeClass("select2-container-active"),this.search.removeClass("select2-focused"),this.selectChoice(null),this.opened()||this.clearSearch(),e.stopImmediatePropagation(),this.opts.element.trigger(t.Event("select2-blur"))})),this.container.on("click",i,this.bind(function(e){this.isInterfaceEnabled()&&(t(e.target).closest(".select2-search-choice").length>0||(this.selectChoice(null),this.clearPlaceholder(),this.container.hasClass("select2-container-active")||this.opts.element.trigger(t.Event("select2-focus")),this.open(),this.focusSearch(),e.preventDefault()))})),this.container.on("focus",i,this.bind(function(){this.isInterfaceEnabled()&&(this.container.hasClass("select2-container-active")||this.opts.element.trigger(t.Event("select2-focus")),this.container.addClass("select2-container-active"),this.dropdown.addClass("select2-drop-active"),this.clearPlaceholder())})),this.initContainerWidth(),this.opts.element.addClass("select2-offscreen"),this.clearSearch()},enableInterface:function(){this.parent.enableInterface.apply(this,arguments)&&this.search.prop("disabled",!this.isInterfaceEnabled())},initSelection:function(){if(""===this.opts.element.val()&&""===this.opts.element.text()&&(this.updateSelection([]),this.close(),this.clearSearch()),this.select||""!==this.opts.element.val()){var t=this;this.opts.initSelection.call(null,this.opts.element,function(e){e!==i&&null!==e&&(t.updateSelection(e),t.close(),t.clearSearch())})}},clearSearch:function(){var t=this.getPlaceholder(),e=this.getMaxSearchWidth();t!==i&&0===this.getVal().length&&this.search.hasClass("select2-focused")===!1?(this.search.val(t).addClass("select2-default"),this.search.width(e>0?e:this.container.css("width"))):this.search.val("").width(10)},clearPlaceholder:function(){this.search.hasClass("select2-default")&&this.search.val("").removeClass("select2-default")},opening:function(){this.clearPlaceholder(),this.resizeSearch(),this.parent.opening.apply(this,arguments),this.focusSearch(),""===this.search.val()&&this.nextSearchTerm!=i&&(this.search.val(this.nextSearchTerm),this.search.select()),this.updateResults(!0),this.opts.shouldFocusInput(this)&&this.search.focus(),this.opts.element.trigger(t.Event("select2-open"))},close:function(){this.opened()&&this.parent.close.apply(this,arguments)},focus:function(){this.close(),this.search.focus()},isFocused:function(){return this.search.hasClass("select2-focused")},updateSelection:function(e){var i=[],n=[],r=this;t(e).each(function(){s(r.id(this),i)<0&&(i.push(r.id(this)),n.push(this))}),e=n,this.selection.find(".select2-search-choice").remove(),t(e).each(function(){r.addSelectedChoice(this)}),r.postprocessResults()},tokenize:function(){var t=this.search.val();t=this.opts.tokenizer.call(this,t,this.data(),this.bind(this.onSelect),this.opts),null!=t&&t!=i&&(this.search.val(t),t.length>0&&this.open())},onSelect:function(t,e){this.triggerSelect(t)&&""!==t.text&&(this.addSelectedChoice(t),this.opts.element.trigger({type:"selected",val:this.id(t),choice:t}),this.nextSearchTerm=this.opts.nextSearchTerm(t,this.search.val()),this.clearSearch(),this.updateResults(),!this.select&&this.opts.closeOnSelect||this.postprocessResults(t,!1,this.opts.closeOnSelect===!0),this.opts.closeOnSelect?(this.close(),this.search.width(10)):this.countSelectableResults()>0?(this.search.width(10),this.resizeSearch(),this.getMaximumSelectionSize()>0&&this.val().length>=this.getMaximumSelectionSize()?this.updateResults(!0):this.nextSearchTerm!=i&&(this.search.val(this.nextSearchTerm),this.updateResults(),this.search.select()),this.positionDropdown()):(this.close(),this.search.width(10)),this.triggerChange({added:t}),e&&e.noFocus||this.focusSearch())},cancel:function(){this.close(),this.focusSearch()},addSelectedChoice:function(e){var n,r,s=!e.locked,o=t("<li class='select2-search-choice'>    <div></div>    <a href='#' class='select2-search-choice-close' tabindex='-1'></a></li>"),a=t("<li class='select2-search-choice select2-locked'><div></div></li>"),l=s?o:a,c=this.id(e),u=this.getVal();n=this.opts.formatSelection(e,l.find("div"),this.opts.escapeMarkup),n!=i&&l.find("div").replaceWith("<div>"+n+"</div>"),r=this.opts.formatSelectionCssClass(e,l.find("div")),r!=i&&l.addClass(r),s&&l.find(".select2-search-choice-close").on("mousedown",_).on("click dblclick",this.bind(function(e){this.isInterfaceEnabled()&&(this.unselect(t(e.target)),this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus"),_(e),this.close(),this.focusSearch())})).on("focus",this.bind(function(){this.isInterfaceEnabled()&&(this.container.addClass("select2-container-active"),this.dropdown.addClass("select2-drop-active"))})),l.data("select2-data",e),l.insertBefore(this.searchContainer),u.push(c),this.setVal(u)},unselect:function(e){var i,n,r=this.getVal();if(e=e.closest(".select2-search-choice"),0===e.length)throw"Invalid argument: "+e+". Must ", "base64"));
  res.write(new Buffer("be .select2-search-choice";if(i=e.data("select2-data")){var o=t.Event("select2-removing");if(o.val=this.id(i),o.choice=i,this.opts.element.trigger(o),o.isDefaultPrevented())return!1;for(;(n=s(this.id(i),r))>=0;)r.splice(n,1),this.setVal(r),this.select&&this.postprocessResults();return e.remove(),this.opts.element.trigger({type:"select2-removed",val:this.id(i),choice:i}),this.triggerChange({removed:i}),!0}},postprocessResults:function(t,e,i){var n=this.getVal(),r=this.results.find(".select2-result"),o=this.results.find(".select2-result-with-children"),a=this;r.each2(function(t,e){var i=a.id(e.data("select2-data"));s(i,n)>=0&&(e.addClass("select2-selected"),e.find(".select2-result-selectable").addClass("select2-selected"))}),o.each2(function(t,e){e.is(".select2-result-selectable")||0!==e.find(".select2-result-selectable:not(.select2-selected)").length||e.addClass("select2-selected")}),this.highlight()==-1&&i!==!1&&a.highlight(0),!this.opts.createSearchChoice&&!r.filter(".select2-result:not(.select2-selected)").length>0&&(!t||t&&!t.more&&0===this.results.find(".select2-no-results").length)&&S(a.opts.formatNoMatches,"formatNoMatches")&&this.results.append("<li class='select2-no-results'>"+L(a.opts.formatNoMatches,a.opts.element,a.search.val())+"</li>")},getMaxSearchWidth:function(){return this.selection.width()-c(this.search)},resizeSearch:function(){var t,e,i,n,r,s=c(this.search);t=v(this.search)+10,e=this.search.offset().left,i=this.selection.width(),n=this.selection.offset().left,r=i-(e-n)-s,r<t&&(r=i-s),r<40&&(r=i-s),r<=0&&(r=t),this.search.width(Math.floor(r))},getVal:function(){var t;return this.select?(t=this.select.val(),null===t?[]:t):(t=this.opts.element.val(),l(t,this.opts.separator))},setVal:function(e){var i;this.select?this.select.val(e):(i=[],t(e).each(function(){s(this,i)<0&&i.push(this)}),this.opts.element.val(0===i.length?"":i.join(this.opts.separator)))},buildChangeDetails:function(t,e){for(var e=e.slice(0),t=t.slice(0),i=0;i<e.length;i++)for(var n=0;n<t.length;n++)a(this.opts.id(e[i]),this.opts.id(t[n]))&&(e.splice(i,1),i>0&&i--,t.splice(n,1),n--);return{added:e,removed:t}},val:function(e,n){var r,s=this;if(0===arguments.length)return this.getVal();if(r=this.data(),r.length||(r=[]),!e&&0!==e)return this.opts.element.val(""),this.updateSelection([]),this.clearSearch(),void(n&&this.triggerChange({added:this.data(),removed:r}));if(this.setVal(e),this.select)this.opts.initSelection(this.select,this.bind(this.updateSelection)),n&&this.triggerChange(this.buildChangeDetails(r,this.data()));else{if(this.opts.initSelection===i)throw new Error("val() cannot be called if initSelection() is not defined");this.opts.initSelection(this.opts.element,function(e){var i=t.map(e,s.id);s.setVal(i),s.updateSelection(e),s.clearSearch(),n&&s.triggerChange(s.buildChangeDetails(r,s.data()))})}this.clearSearch()},onSortStart:function(){if(this.select)throw new Error("Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead.");this.search.width(0),this.searchContainer.hide()},onSortEnd:function(){var e=[],i=this;this.searchContainer.show(),this.searchContainer.appendTo(this.searchContainer.parent()),this.resizeSearch(),this.selection.find(".select2-search-choice").each(function(){e.push(i.opts.id(t(this).data("select2-data")))}),this.setVal(e),this.triggerChange()},data:function(e,i){var n,r,s=this;return 0===arguments.length?this.selection.children(".select2-search-choice").map(function(){return t(this).data("select2-data")}).get():(r=this.data(),e||(e=[]),n=t.map(e,function(t){return s.opts.id(t)}),this.setVal(n),this.updateSelection(e),this.clearSearch(),i&&this.triggerChange(this.buildChangeDetails(r,this.data())),void 0)}}),t.fn.select2=function(){var n,r,o,a,l,c=Array.prototype.slice.call(arguments,0),u=["val","destroy","opened","open","close","focus","isFocused","container","dropdown","onSortStart","onSortEnd","enable","disable","readonly","positionDropdown","data","search"],d=["opened","isFocused","container","dropdown"],h=["val","data"],p={search:"externalSearch"};return this.each(function(){if(0===c.length||"object"==typeof c[0])n=0===c.length?{}:t.extend({},c[0]),n.element=t(this),"select"===n.element.get(0).tagName.toLowerCase()?l=n.element.prop("multiple"):(l=n.multiple||!1,"tags"in n&&(n.multiple=l=!0)),r=l?new e["class"].multi:new e["class"].single,r.init(n);else{if("string"!=typeof c[0])throw"Invalid arguments to select2 plugin: "+c;if(s(c[0],u)<0)throw"Unknown method: "+c[0];if(a=i,r=t(this).data("select2"),r===i)return;if(o=c[0],"container"===o?a=r.container:"dropdown"===o?a=r.dropdown:(p[o]&&(o=p[o]),a=r[o].apply(r,c.slice(1))),s(c[0],d)>=0||s(c[0],h)>=0&&1==c.length)return!1}}),a===i?this:a},t.fn.select2.defaults={width:"copy",loadMorePadding:0,closeOnSelect:!0,openOnEnter:!0,containerCss:{},dropdownCss:{},containerCssClass:"",dropdownCssClass:"",formatResult:function(t,e,i,n){var r=[];return b(this.text(t),i.term,r,n),r.join("")},formatSelection:function(t,e,n){return t?n(this.text(t)):i},sortResults:function(t,e,i){return t},formatResultCssClass:function(t){return t.css},formatSelectionCssClass:function(t,e){return i},minimumResultsForSearch:0,minimumInputLength:0,maximumInputLength:null,maximumSelectionSize:0,id:function(t){return t==i?null:t.id},text:function(e){return e&&this.data&&this.data.text?t.isFunction(this.data.text)?this.data.text(e):e[this.data.text]:e.text},matcher:function(t,e){return r(""+e).toUpperCase().indexOf(r(""+t).toUpperCase())>=0},separator:",",tokenSeparators:[],tokenizer:E,escapeMarkup:w,blurOnChange:!1,selectOnBlur:!1,adaptContainerCssClass:function(t){return t},adaptDropdownCssClass:function(t){return null},nextSearchTerm:function(t,e){return i},searchInputPlaceholder:"",createSearchChoicePosition:"top",shouldFocusInput:function(t){var e="ontouchstart"in window||navigator.msMaxTouchPoints>0;return!e||!(t.opts.minimumResultsForSearch<0)}},t.fn.select2.locales=[],t.fn.select2.locales.en={formatMatches:function(t){return 1===t?"One result is available, press enter to select it.":t+" results are available, use up and down arrow keys to navigate."},formatNoMatches:function(){return"No matches found"},formatAjaxError:function(t,e,i){return"Loading failed"},formatInputTooShort:function(t,e){var i=e-t.length;return"Please enter "+i+" or more character"+(1==i?"":"s")},formatInputTooLong:function(t,e){var i=t.length-e;return"Please delete "+i+" character"+(1==i?"":"s")},formatSelectionTooBig:function(t){return"You can only select "+t+" item"+(1==t?"":"s")},formatLoadMore:function(t){return"Loading more results…"},formatSearching:function(){return"Searching…"}},t.extend(t.fn.select2.defaults,t.fn.select2.locales.en),t.fn.select2.ajaxDefaults={transport:t.ajax,params:{type:"GET",cache:!1,dataType:"json"}},e={query:{ajax:M,local:k,tags:T},util:{debounce:h,markMatch:b,escapeMarkup:w,stripDiacritics:r},"class":{"abstract":A,single:O,multi:N}}}}(t),e}.apply(e,n),/*
		Copyright 2012 Igor Vaynberg

		Version: @@ver@@ Timestamp: @@timestamp@@

		This software is licensed under the Apache License, Version 2.0 (the "Apache License") or the GNU
		General Public License version 2 (the "GPL License"). You may choose either license to govern your
		use of this software only upon the condition that you accept all of the terms of either the Apache
		License or the GPL License.

		You may obtain a copy of the Apache License and the GPL License at:

		    http://www.apache.org/licenses/LICENSE-2.0
		    http://www.gnu.org/licenses/gpl-2.0.html

		Unless required by applicable law or agreed to in writing, software distributed under the
		Apache License or the GPL License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the Apache License and the GPL License for
		the specific language governing permissions and limitations under the Apache License and the GPL License.
		*/
	!(void 0!==r&&(t.exports=r))},function(t,e){},function(t,e){},function(t,e,i){var n,r;n=[i(185),i(184)],r=function(t,e){return{Tab:t,Tabs:e}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(285),i(286),i(287)],r=function(t,e,i){return{FileUpload:t,Uploader:e,UploadIframe:i}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(5),i(147),i(146)],r=function(t,e,i){var n=e.tpl('\t    <input type="file" name="file" class="m-file">\t    <div class="facade">\t      <input type="text" class="text-field-default" disabled>\t      {{{img src="/img/ui/button/file-browse-01.png" alt="Browse files..." class="browse"}}}\t    </div>\t    <input type="hidden" class="hide" name="_xsrfToken" value="{{token}}">\t  '),r=i.extend({template:n,className:"file-input-facade margin-top-10 margin-btm-10 clearfix",events:{"change .m-file":"updateDisplayVal"},updateDisplayVal:function(){var t=this.getFilename();t.match(/^C:\\fakepath/)&&(t=t.replace("C:\\fakepath\\","")),this.updateDisplay(t)},updateDisplay:function(t){this.$(".text-field-default").val(t)},getFilename:function(){return this.$(".m-file").val()},render:function(){var e=t("#_xsrfToken").text();return this.$el.html(this.template({token:e})),this}});return r}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(169),i(146),i(287),i(288)],r=function(t,e,i,n){var r=e.extend({className:"upload-holder",initialize:function(){return this.iframe=new i({name:this.cid}),this.add(this.iframe,null,!0),this.uploadForm=new n({target:this.cid,endpoint:this.options.endpoint}),this.add(this.uploadForm,null,!0),this.listenTo(this.iframe,t.UPLOAD_DONE,function(){this.uploadForm.uploadDone()}),this}});return r}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(169),i(146),i(7)],r=function(t,e){var i=e.extend({tagName:"iframe",className:"hide",attributes:function(){return{name:this.options.name,id:this.options.name}},events:{load:function(){try{var e=this.$el.contents().text();if(e)return void this.trigger(t.UPLOAD_DONE,JSON.parse(e))}catch(i){}this.trigger(t.UPLOAD_EMPTY_CONTENT)}}});return i}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(146),i(285),i(289)],r=function(t,e,i){var n=t.extend({tagName:"form",className:"clearfix padding-btm-10",attributes:function(){return{method:"post",enctype:"multipart/form-data",action:this.options.endpoint,target:this.options.target}},events:{submit:function(){this.submitBtn.disable(!0)}},initialize:function(){return this.fileUpload=new e,this.add(this.fileUpload),this.submitBtn=new i,this.add(this.submitBtn),this},uploadDone:function(){this.submitBtn.disable(!1)}});return n}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(146)],r=function(t){var e=t.extend({tagName:"input",className:"button",attributes:{type:"submit",value:"Upload Logo"},disable:function(t){this.$el.prop("disabled",t)}});return e}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(308),i(359),i(318),i(321),i(332),i(336),i(338),i(341),i(343),i(344),i(345),i(346),i(347),i(348),i(349),i(352),i(353),i(354),i(355),i(357),i(291),i(365),i(366),i(367),i(370),i(371),i(373),i(374),i(375),i(376),i(377),i(378),i(379),i(380),i(310),i(381),i(388),i(315),i(389)],r=function(t,e,i,n,r,s,o,a,l,c,u,d,h,p,f,m,_,g,v,y,b,w,M,k,T,S,L,x,E,D,Y,C,A,O,N,I,P,R,H){return t.extend({routes:{"":"primaryAuth",signin:"primaryAuth","signin/verify/duo/web":"verifyDuo","signin/verify/fido/webauthn":"verifyWindowsHello","signin/verify/fido/u2f":"verifyU2F","signin/verify/:provider/:factorType":"verify","signin/enroll":"enrollChoices","signin/enroll/duo/web":"enrollDuo","signin/enroll/okta/question":"enrollQuestion","signin/enroll/okta/sms":"enrollSms","signin/enroll/okta/call":"enrollCall","signin/enroll-activate/okta/sms":"enrollSms","signin/enroll/rsa/token":"enrollRsa","signin/enroll/del_oath/token":"enrollOnPrem","signin/enroll/symantec/token":"enrollSymantecVip","signin/enroll/yubico/token:hardware":"enrollYubikey","signin/enroll/fido/webauthn":"enrollWindowsHello","signin/enroll/fido/u2f":"enrollU2F","signin/enroll/:provider/:factorType":"enrollTotpFactor","signin/enroll-activate/okta/push":"scanBarcodePushFactor","signin/enroll-activate/okta/push/manual":"manualSetupPushFactor","signin/enroll-activate/okta/push/sent":"activationLinkSent","signin/enroll-activate/okta/token:software:totp/passcode":"enterPasscodeInPushEnrollmentFlow","signin/enroll-activate/:provider/:factorType":"scanBarcodeTotpFactor","signin/enroll-activate/:provider/:factorType/activate":"activateTotpFactor","signin/enroll-activate/:provider/:factorType/manual":"manualSetupTotpFactor","signin/password-expired":"passwordExpired","signin/custom-password-expired":"customPasswordExpired","signin/forgot-password":"forgotPassword","signin/recovery-challenge":"recoveryChallenge","signin/recovery-emailed":"recoveryEmailSent","signin/recovery-question":"recoveryQuestion","signin/password-reset":"passwordReset","signin/reset-password/:token":"recoveryLoading","signin/user-unlock/:token":"recoveryLoading","signin/recovery/:token":"recoveryLoading","signin/unlock-emailed":"unlockEmailSent","signin/unlock":"unlockAccount","signin/account-unlocked":"accountUnlocked","signin/refresh-auth-state(/:token)":"refreshAuthState","signin/register":"register","signin/register-complete":"registerComplete","*wildcard":"primaryAuth"},stateLessRouteHandlers:["primaryAuth","forgotPassword","recoveryLoading","unlockAccount","refreshAuthState","register","registerComplete"],primaryAuth:function(){this.render(e,{Beacon:R})},verifyDuo:function(){this.render(i,{provider:"DUO",factorType:"web",Beacon:H})},verifyWindowsHello:function(){this.render(r,{provider:"FIDO",factorType:"webauthn",Beacon:H})},verifyU2F:function(){this.render(s,{provider:"FIDO",factorType:"u2f",Beacon:H})},verify:function(t,e){this.render(n,{provider:t.toUpperCase(),factorType:e,Beacon:H})},enrollChoices:function(){this.render(o,{Beacon:R})},enrollDuo:function(){this.render(a,{provider:"DUO",factorType:"web",Beacon:H})},enrollQuestion:function(){this.render(l,{provider:"OKTA",factorType:"question",Beacon:H})},enrollSms:function(){this.render(u,{provider:"OKTA",factorType:"sms",Beacon:H})},enrollCall:function(){this.render(u,{provider:"OKTA",factorType:"call",Beacon:H})},enrollRsa:function(){this.render(d,{provider:"RSA",factorType:"token",Beacon:H})},enrollOnPrem:function(){this.render(d,{provider:"DEL_OATH",factorType:"token",Beacon:H})},enrollSymantecVip:function(){this.render(h,{provider:"SYMANTEC",factorType:"token",Beacon:H})},enrollYubikey:function(){this.render(p,{provider:"YUBICO",factorType:"token:hardware",Beacon:H})},enrollTotpFactor:function(t,e){this.render(f,{provider:t.toUpperCase(),factorType:e,Beacon:H})},enrollWindowsHello:function(){this.render(c,{provider:"FIDO",factorType:"webauthn",Beacon:H})},enrollU2F:function(){this.render(m,{provider:"FIDO",factorType:"u2f",Beacon:H})},scanBarcodeTotpFactor:function(t,e){this.render(_,{provider:t.toUpperCase(),factorType:e,Beacon:H})},scanBarcodePushFactor:function(){this.render(g,{provider:"OKTA",factorType:"push",Beacon:H})},activateTotpFactor:function(t,e){this.render(v,{provider:t.toUpperCase(),factorType:e,Beacon:H})},manualSetupTotpFactor:function(t,e){this.render(y,{provider:t.toUpperCase(),factorType:e,Beacon:H})},manualSetupPushFactor:function(){this.render(b,{provider:"OKTA",factorType:"push",Beacon:H})},activationLinkSent:function(){this.render(w,{provider:"OKTA",factorType:"push",Beacon:H})},enterPasscodeInPushEnrollmentFlow:function(){this.render(M,{provider:"OKTA",factorType:"token:software:totp",Beacon:H})},passwordExpired:function(){this.render(k,{Beacon:R})},customPasswordExpired:function(){this.render(T,{Beacon:R})},forgotPassword:function(){this.render(S)},recoveryChallenge:function(){this.render(L,{Beacon:R})},recoveryEmailSent:function(){this.render(x,{Beacon:R})},unlockEmailSent:function(){this.render(O,{Beacon:R})},recoveryQuestion:function(){this.render(E,{Beacon:R})},passwordReset:function(){this.render(D,{Beacon:R})},recoveryLoading:function(t){this.render(Y,{token:t,Beacon:R})},unlockAccount:function(){this.render(C)},accountUnlocked:function(){this.render(A,{Beacon:R})},refreshAuthState:function(t){this.render(N,{token:t,Beacon:R})},register:function(){this.render(I)},registerComplete:function(){this.render(P)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(292),i(294),i(295),i(296),i(299),i(304),i(305),i(306)],r=function(t,e,i,n,r,s,o,a,l){function c(t,e){var i=s.createActivateFactorUrl(t.options.appState.get("activatedFactorProvider"),t.options.appState.get("activatedFactorType"),e);t.options.appState.trigger("navigate",i)}function u(t){var e,i;"SMS"===t.model.get("activationType")&&(i=t.model.get("countryCode"),e=t.model.get("phoneNumber")),t.options.appState.set({factorActivationType:t.model.get("activationType"),userCountryCode:i,userPhoneNumber:e})}function d(t,e){return t.model.doTransaction(function(i){return i.prev().then(function(t){var i=h.findWhere(t.factors,{factorType:e,provider:"OKTA"});return i.enroll()}).then(function(e){var i,n,r,s=e.data;if(s&&s._embedded&&s._embedded.factor&&s._embedded.factor._embedded&&s._embedded.factor._embedded.activation){var o=s._embedded.factor;if(r=o._embedded.activation.sharedSecret,o._embedded.activation._links&&o._embedded.activation._links.send){var a=o._embedded.activation._links.send,l=h.findWhere(a,{name:"sms"});i=l?l.href:null;var c=h.findWhere(a,{name:"email"});n=c?c.href:null}}return t.model.set({SMS:i,EMAIL:n,sharedSecret:r}),e})})}var h=t._;return n.extend({className:"enroll-manual-push",Model:function(){return{local:{activationType:["string",!0,this.options.appState.get("factorActivationType")||"SMS"],countryCode:["string",!1,"US"],phoneNumber:"string",SMS:["string",!1,this.options.appState.get("textActivationLinkUrl")],EMAIL:["string",!1,this.options.appState.get("emailActivationLinkUrl")],sharedSecret:["string",!1,this.options.appState.get("sharedSecret")],__factorType__:["string",!1,this.options.factorType],__provider__:["string",!1,this.options.provider]},derived:{countryCallingCode:{deps:["countryCode"],fn:function(t){return"+"+e.getCallingCodeForCountry(t)}},fullPhoneNumber:{deps:["countryCallingCode","phoneNumber"],fn:function(t,e){return t+e}}}}},Form:{title:function(){var e=i.getFactorLabel(this.model.get("__provider__"),this.model.get("__factorType__"));return t.loc("enroll.totp.title","login",[e])},subtitle:h.partial(t.loc,"enroll.totp.cannotScanBarcode","login"),noButtonBar:!0,attributes:{"data-se":"step-manual-setup"},formChildren:function(){var i=[r.Input({name:"activationType",type:"select",wide:!0,options:{SMS:t.loc("enroll.totp.sendSms","login"),EMAIL:t.loc("enroll.totp.sendEmail","login"),MANUAL:t.loc("enroll.totp.setupManually","login")}}),r.Input({name:"countryCode",type:"select",wide:!0,options:e.getCountries(),showWhen:{activationType:"SMS"}}),r.Input({placeholder:t.loc("mfa.phoneNumber.placeholder","login"),className:"enroll-sms-phone",name:"phoneNumber",input:a,type:"text",showWhen:{activationType:"SMS"}}),r.View({View:'\t              <p class="okta-form-subtitle o-form-explain text-align-c">\t                {{i18n code="enroll.totp.sharedSecretInstructions" bundle="login"}}\t              </p>\t            ',showWhen:{activationType:"MANUAL"}}),r.Input({name:"sharedSecret",input:l,type:"text",disabled:!0,showWhen:{activationType:"MANUAL"},initialize:function(){this.listenTo(this.model,"change:sharedSecret",this.render)}}),r.View({View:'<div data-type="next-button-wrap"></div>',showWhen:{activationType:"MANUAL"}}),r.Button({title:t.loc("oform.next","login"),className:"button button-primary button-wide button-next",attributes:{"data-se":"next-button"},click:h.bind(function(){u(this),c(this,"passcode")},this)},'[data-type="next-button-wrap"]'),r.Toolbar({noCancelButton:!0,save:t.loc("oform.send","login"),showWhen:{activationType:function(t){return"SMS"===t||"EMAIL"===t}}})];return i}},Footer:o,initialize:function(){this.setInitialModel(),this.listenTo(this.form,"save",function(){var t=this;this.model.doTransaction(function(e){var i=this.get("activationType").toLowerCase(),n={};return"sms"===i&&(n.profile={phoneNumber:this.get("fullPhoneNumber")}),e.factor.activation.send(i,n).then(function(e){return u(t),h.defer(function(){c(t,"sent")}),e})})}),this.listenTo(this.model,"change:activationType",function(t,e){this.form.clearErrors(),"MANUAL"===e&&"token:software:totp"!==this.options.appState.get("activatedFactorType")?d(this,"token:software:totp"):"push"!==this.options.appState.get("activatedFactorType")&&d(this,"push")})},setInitialModel:function(){"SMS"===this.options.appState.get("factorActivationType")&&this.model.set({countryCode:this.options.appState.get("userCountryCode")||"US",phoneNumber:this.options.appState.get("userPhoneNumber")})},trapAuthResponse:function(){if(this.options.appState.get("isMfaEnrollActivate")||this.options.appState.get("isMfaEnroll"))return!0}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(178),i(293)],r=function(t,e,i){var n={};return n.getCountries=function(){var i=t.omit(e.country,"HM","BV","TF"),n=t.map(i,function(t,e){return{name:t,code:e}});n=t.sortBy(n,"name");var r={};return t.each(n,function(t){r[t.code]=t.name}),r},n.getCallingCodeForCountry=function(t){return i[t]},n}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){!(t.exports={US:"1",AG:"1",AI:"1",AS:"1",BB:"1",BM:"1",BS:"1",CA:"1",DM:"1",DO:"1",GD:"1",GU:"1",JM:"1",KN:"1",KY:"1",LC:"1",MP:"1",MS:"1",PR:"1",SX:"1",TC:"1",TT:"1",VC:"1",VG:"1",VI:"1",RU:"7",KZ:"7",EG:"20",ZA:"27",GR:"30",NL:"31",BE:"32",FR:"33",ES:"34",HU:"36",IT:"39",RO:"40",CH:"41",AT:"43",GB:"44",GG:"44",IM:"44",JE:"44",DK:"45",SE:"46",NO:"47",SJ:"47",PL:"48",DE:"49",PE:"51",MX:"52",CU:"53",AR:"54",BR:"55",CL:"56",CO:"57",VE:"58",MY:"60",AU:"61",CC:"61",CX:"61",ID:"62",PH:"63",NZ:"64",SG:"65",TH:"66",JP:"81",KR:"82",VN:"84",CN:"86",TR:"90",IN:"91",PK:"92",AF:"93",LK:"94",MM:"95",IR:"98",SS:"211",MA:"212",EH:"212",DZ:"213",TN:"216",LY:"218",GM:"220",SN:"221",MR:"222",ML:"223",GN:"224",CI:"225",BF:"226",NE:"227",TG:"228",BJ:"229",MU:"230",LR:"231",SL:"232",GH:"233",NG:"234",TD:"235",CF:"236",CM:"237",CV:"238",ST:"239",GQ:"240",GA:"241",CG:"242",CD:"243",AO:"244",GW:"245",IO:"246",AC:"247",SC:"248",SD:"249",RW:"250",ET:"251",SO:"252",DJ:"253",KE:"254",TZ:"255",UG:"256",BI:"257",MZ:"258",ZM:"260",MG:"261",RE:"262",YT:"262",ZW:"263",NA:"264",MW:"265",LS:"266",BW:"267",SZ:"268",KM:"269",SH:"290",TA:"290",ER:"291",AW:"297",FO:"298",GL:"299",GI:"350",PT:"351",LU:"352",IE:"353",IS:"354",AL:"355",MT:"356",CY:"357",FI:"358",AX:"358",BG:"359",LT:"370",LV:"371",EE:"372",MD:"373",AM:"374",BY:"375",AD:"376",MC:"377",SM:"378",VA:"379",UA:"380",RS:"381",ME:"382",HR:"385",SI:"386",BA:"387",MK:"389",CZ:"420",SK:"421",LI:"423",FK:"500",BZ:"501",GT:"502",SV:"503",HN:"504",NI:"505",CR:"506",PA:"507",PM:"508",HT:"509",GP:"590",BL:"590",MF:"590",BO:"591",GY:"592",EC:"593",GF:"594",PY:"595",MQ:"596",SR:"597",UY:"598",CW:"599",BQ:"599",TL:"670",NF:"672",BN:"673",NR:"674",PG:"675",TO:"676",SB:"677",VU:"678",FJ:"679",PW:"680",WF:"681",CK:"682",NU:"683",WS:"685",KI:"686",NC:"687",TV:"688",PF:"689",TK:"690",FM:"691",MH:"692","001":"979",KP:"850",HK:"852",MO:"853",KH:"855",LA:"856",BD:"880",TW:"886",MV:"960",LB:"961",JO:"962",SY:"963",IQ:"964",KW:"965",SA:"966",YE:"967",OM:"968",PS:"970",AE:"971",IL:"972",BH:"973",QA:"974",BT:"975",MN:"976",NP:"977",TJ:"992",TM:"993",AZ:"994",GE:"995",KG:"996",UZ:"998",GS:500,PN:64,AQ:672,UM:1,AN:599})},function(t,e,i){var n,r;n=[i(32),i(188)],r=function(t,e){var i=t._,n={},r={OKTA_VERIFY:{label:"factor.totpSoft.oktaVerify",description:"factor.totpSoft.description",iconClassName:"mfa-okta-verify",sortOrder:1},OKTA_VERIFY_PUSH:{label:"factor.oktaVerifyPush",description:"factor.push.description",iconClassName:"mfa-okta-verify",sortOrder:1},SMS:{label:"factor.sms",description:"factor.sms.description",iconClassName:"mfa-okta-sms",sortOrder:2},CALL:{label:"factor.call",description:"factor.call.description",iconClassName:"mfa-okta-call",sortOrder:3},WINDOWS_HELLO:{label:"factor.windowsHello",description:"factor.windowsHello.signin.description",iconClassName:"mfa-windows-hello",sortOrder:4},U2F:{label:"factor.u2f",description:"factor.u2f.description",iconClassName:"mfa-u2f",sortOrder:5},YUBIKEY:{label:"factor.totpHard.yubikey",description:"factor.totpHard.yubikey.description",iconClassName:"mfa-yubikey",sortOrder:6},DUO:{label:"factor.duo",description:"factor.duo.description",iconClassName:"mfa-duo",sortOrder:7},GOOGLE_AUTH:{label:"factor.totpSoft.googleAuthenticator",description:"factor.totpSoft.description",iconClassName:"mfa-google-auth",sortOrder:8},SYMANTEC_VIP:{label:"factor.totpHard.symantecVip",description:"factor.totpHard.description",iconClassName:"mfa-symantec",sortOrder:9},RSA_SECURID:{label:"factor.totpHard.rsaSecurId",description:"factor.totpHard.description",iconClassName:"mfa-rsa",sortOrder:10},ON_PREM:{label:"",description:"factor.totpHard.description",iconClassName:"mfa-onprem",sortOrder:10},EMAIL:{label:"factor.email",description:"",iconClassName:"mfa-okta-email",sortOrder:11},QUESTION:{label:"factor.securityQuestion",description:"factor.securityQuestion.description",iconClassName:"mfa-okta-security-question",sortOrder:12}};return n.getFactorName=function(t,e){return"OKTA"===t&&"token:software:totp"===e?"OKTA_VERIFY":"OKTA"===t&&"push"===e?"OKTA_VERIFY_PUSH":"GOOGLE"===t?"GOOGLE_AUTH":"SYMANTEC"===t&&"token"===e?"SYMANTEC_VIP":"RSA"===t&&"token"===e?"RSA_SECURID":"DEL_OATH"===t&&"token"===e?"ON_PREM":"DUO"===t&&"web"===e?"DUO":"YUBICO"===t&&"token:hardware"===e?"YUBIKEY":"OKTA"===t&&"sms"===e?"SMS":"OKTA"===t&&"call"===e?"CALL":"OKTA"===t&&"question"===e?"QUESTION":"FIDO"===t&&"webauthn"===e?"WINDOWS_HELLO":"FIDO"===t&&"u2f"===e?"U2F":"OKTA"===t&&"email"===e?"EMAIL":void 0},n.isOktaVerify=function(t,e){return"OKTA"===t&&("token:software:totp"===e||"push"===e)},n.getFactorLabel=function(e,i){var s=r[n.getFactorName(e,i)].label;return t.loc(s,"login")},n.getFactorDescription=function(e,i){var s=r[n.getFactorName(e,i)].description;return t.loc(s,"login")},n.getFactorIconClassName=function(t,e){return r[n.getFactorName(t,e)].iconClassName},n.getFactorSortOrder=function(t,e){return r[n.getFactorName(t,e)].sortOrder},n.getRememberDeviceValue=function(t){return t&&t.get("rememberDeviceByDefault")},n.getSecurityQuestionLabel=function(e){var i=t.loc("security."+e.question);return i.indexOf("L10N_ERROR")<0?i:e.questionText},n.getPasswordComplexityDescription=function(n){var r=[],s=function(e){var i;switch(e.unit){case"DAY":i="password.complexity.minAgeDays";break;case"HOUR":i="password.complexity.minAgeHours";break;case"MINUTE":i="password.complexity.minAgeMinutes"}return t.loc(i,"login",[e.time])};if(n.complexity){var o={minLength:{i18n:"password.complexity.length",args:!0},minLowerCase:{i18n:"password.complexity.lowercase"},minUpperCase:{i18n:"password.complexity.uppercase"},minNumber:{i18n:"password.complexity.number"},minSymbol:{i18n:"password.complexity.symbol"},excludeUsername:{i18n:"password.complexity.no_username"}},a=n.complexity,l=i.map(a,function(e,i){if(!(e<=0)){var n=o[i];return n.args?t.loc(n.i18n,"login",[e]):t.loc(n.i18n,"login")}});l=i.compact(l),l.length&&(l=i.reduce(l,function(e,i){return e?e+t.loc("password.complexity.list.element","login",[i]):i}),r.push(t.loc("password.complexity.description","login",[l])))}if(n.age&&n.age.historyCount>0&&r.push(t.loc("password.complexity.history","login",[n.age.historyCount])),n.age&&n.age.minAgeMinutes>0){var c=e.getTimeInHighestRelevantUnit(n.age.minAgeMinutes,"MINUTE"),u=s(c);r.push(u)}return r.join(" ")},n}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(296),i(236),i(233),i(297),i(298)],r=function(t,e,i,n,r,s){var o=t._,a=t.Form.extend({layout:"o-form-theme",noCancelButton:!0,constructor:function(r){t.Form.call(this,r),o.each(o.result(this,"formChildren")||[],function(r){switch(r.type){case e.INPUT:this.addInput(o.extend({label:!1,"label-top":!0},r.viewOptions));break;case e.BUTTON:this.add(t.createButton(o.extend({model:this.model},r.viewOptions)),r.addOptions),n.applyShowWhen(this.last(),r.viewOptions&&r.viewOptions.showWhen);break;case e.DIVIDER:this.addDivider(r.viewOptions);break;case e.TOOLBAR:this.add(i,{options:r.viewOptions}),n.applyShowWhen(this.last(),r.viewOptions&&r.viewOptions.showWhen);break;case e.VIEW:this.add(r.viewOptions.View,r.addOptions),n.applyShowWhen(this.last(),r.viewOptions.showWhen);break;default:throw new Error("Unrecognized child type: "+r.type)}},this)}});return r.extend({constructor:function(){var t=this.initialize;if(this.initialize=function(){},r.apply(this,arguments),this.Model&&this.Form){var e=s.extend(o.extend({parse:function(t){return this.settings=t.settings,this.appState=t.appState,o.omit(t,["settings","appState"])}},o.result(this,"Model")));this.model=new e({settings:this.settings,appState:this.options.appState},{parse:!0});var i=a.extend(o.result(this,"Form",this));this.form=new i(this.toJSON()),this.add(this.form)}this.Footer&&(this.footer=new this.Footer(this.toJSON()),this.add(this.footer)),this.addListeners(),t.apply(this,arguments)},toJSON:function(){var t=r.prototype.toJSON.apply(this,arguments);return o.extend(o.pick(this.options,"appState"),t)},back:function(){this.footer&&this.footer.back&&this.footer.back()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n;n=function(){function t(t){return function(e,i){return{type:t,viewOptions:e,addOptions:i}}}var e="INPUT",i="BUTTON",n="DIVIDER",r="TOOLBAR",s="VIEW";return{Input:t(e),Button:t(i),Divider:t(n),Toolbar:t(r),View:t(s),INPUT:e,BUTTON:i,DIVIDER:n,TOOLBAR:r,VIEW:s}}.call(e,i,e,t),!(void 0!==n&&(t.exports=n))},function(t,e,i){var n,r;n=[i(32),i(21)],r=function(t,e){function i(e){return n.find(e.getChildren(),function(e){return e instanceof t.Form})}var n=t._;return t.Controller.extend({addListeners:function(){var t=this.model.get("backupFactor");this.listenTo(this.model,"save",function(){var t=i(this),e=t.disableSubmitButton;e&&!t.disableSubmitButton()||this.toggleButtonState(!0)}),this.listenTo(this.model,"error",function(){this.toggleButtonState(!1)});var e=n.bind(function(t){this.options.appState.set("transaction",t)},this),r=n.bind(function(t){this.options.appState.set("transactionError",t)},this);this.listenTo(this.model,"setTransaction",e),this.listenTo(this.model,"setTransactionError",r),t&&(this.listenTo(t,"setTransaction",e),this.listenTo(t,"setTransactionError",r))},fetchInitialData:function(){return e()},trapAuthResponse:function(){return!1},toJSON:function(){var e=t.Controller.prototype.toJSON.apply(this,arguments);return n.extend(n.pick(this.options,"appState"),e)},toggleButtonState:function(t){var e=this.$el.find(".button");e.toggleClass("link-button-disabled",t).prop("disabled",t)},postRenderAnimation:function(){this.trigger("pageRendered",{page:this.className})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(21)],r=function(t,e){var i=t._,n=["OAuthError","AuthSdkError","AuthPollStopError","AuthApiError"];return t.Model.extend({doTransaction:function(t,e){var r=this;return t.call(this,this.appState.get("transaction")).then(function(t){return r.trigger("setTransaction",t),t}).fail(function(t){if("AuthPollStopError"!==t.name&&(r.trigger("setTransactionError",t),r.trigger("error",r,t.xhr),e||i.indexOf(n,t.name)===-1))throw t})},manageTransaction:function(t){var n=this,r=t.call(this,this.appState.get("transaction"),i.bind(this.setTransaction,this));return e.isPromise(r)&&r.fail(function(t){"AuthPollStopError"!==t.name&&(n.trigger("setTransactionError",t),n.trigger("error",n,t.xhr))}),e.resolve(r)},startTransaction:function(t){var i=this,n=t.call(this,this.settings.getAuthClient());return e.isPromise(n)?n.then(function(t){return i.trigger("setTransaction",t),t}).fail(function(t){throw i.trigger("setTransactionError",t),i.trigger("error",i,t.xhr),t}):e.resolve(n)},setTransaction:function(t){this.appState.set("transaction",t)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(190),i(300),i(301),i(182),i(302),i(303)],r=function(t,e,i,n,r,s,o){var a={},l=t.tpl("signin/verify/{{provider}}/{{factorType}}"),c=t.tpl("signin/enroll/{{provider}}/{{factorType}}"),u=t.tpl("signin/enroll-activate/{{provider}}/{{factorType}}{{#if step}}/{{step}}{{/if}}"),d=t.tpl("signin/recovery/{{recoveryToken}}"),h=t.tpl("signin/refresh-auth-state{{#if token}}/{{token}}{{/if}}"),p=t.tpl("{{baseUrl}}/login/sessionCookieRedirect?checkAccountSetupComplete=true&token={{{token}}}&redirectUrl={{{redirectUrl}}}");return a.createVerifyUrl=function(t,e){return l({provider:encodeURIComponent(t.toLowerCase()),factorType:encodeURIComponent(e)})},a.createEnrollFactorUrl=function(t,e){return c({provider:encodeURIComponent(t.toLowerCase()),factorType:encodeURIComponent(e)})},a.createActivateFactorUrl=function(t,e,i){return u({provider:encodeURIComponent(t.toLowerCase()),factorType:encodeURIComponent(e),step:!!i&&encodeURIComponent(i)})},a.createRecoveryUrl=function(t){return d({recoveryToken:encodeURIComponent(t)})},a.createRefreshUrl=function(t){var e=t?encodeURIComponent(t):null;return h({token:e})},a.routeAfterAuthStatusChange=function(l,c,u){if(c&&c.xhr&&r.corsIsNotEnabled(c.xhr))return void l.settings.callGlobalError(new s.UnsupportedBrowserError(t.loc("error.enabled.cors")));if(c&&c.errorCode===o.INVALID_TOKEN_EXCEPTION)return l.appState.set("flashError",t.loc("error.expired.session")),l.controller.state.set("navigateDir",n.DIRECTION_BACK),void l.navigate("",{trigger:!0});if(!c&&u&&u.status&&(l.appState.setAuthResponse(u),!l.controller||!l.controller.trapAuthResponse(u)))switch(u.status){case"SUCCESS":if(u.recoveryType===n.RECOVERY_TYPE_UNLOCK)return void l.navigate("signin/account-unlocked",{trigger:!0});if(l.settings.get("oauth2Enabled"))return void i.getTokens(l.settings,{sessionToken:u.sessionToken},l.controller);var d={user:u._embedded.user,type:u.type};if(u.type===n.SESSION_STEP_UP){var h=u._links&&u._links.next&&u._links.next.href;d.stepUp={url:h,finish:function(){e.redirect(h)}}}else d.type=n.SESSION_SSO,d.session={token:u.sessionToken,setCookieAndRedirect:function(t){e.redirect(p({baseUrl:l.settings.get("baseUrl"),token:encodeURIComponent(u.sessionToken),redirectUrl:encodeURIComponent(t)}))}};return void l.settings.callGlobalSuccess(n.SUCCESS,d);case"MFA_REQUIRED":var f=l.appState.get("factors").getDefaultFactor(),m=a.createVerifyUrl(f.get("provider"),f.get("factorType"));return void l.navigate(m,{trigger:!0});case"MFA_CHALLENGE":return void l.appState.get("transaction").prev().then(function(t){l.appState.set("transaction",t)}).done();case"MFA_ENROLL":return void l.navigate("signin/enroll",{trigger:!0});case"MFA_ENROLL_ACTIVATE":var _=a.createActivateFactorUrl(l.appState.get("activatedFactorProvider"),l.appState.get("activatedFactorType"));return void l.navigate(_,{trigger:!0});case"PASSWORD_WARN":case"PASSWORD_EXPIRED":return void(l.settings.get("features.customExpiredPassword")&&!l.appState.get("isPwdManagedByOkta")?l.navigate("signin/custom-password-expired",{trigger:!0}):l.navigate("signin/password-expired",{trigger:!0}));case"RECOVERY_CHALLENGE":var g=u.factorType.toLowerCase()===n.RECOVERY_FACTOR_TYPE_EMAIL.toLowerCase(),v=u.recoveryType===n.RECOVERY_TYPE_PASSWORD,y=u.recoveryType===n.RECOVERY_TYPE_UNLOCK;return void(v&&g?l.navigate("signin/recovery-emailed",{trigger:!0}):y&&g?l.navigate("signin/unlock-emailed",{trigger:!0}):l.navigate("signin/recovery-challenge",{trigger:!0}));case"RECOVERY":return void l.navigate("signin/recovery-question",{trigger:!0});case"PASSWORD_RESET":return void l.navigate("signin/password-reset",{trigger:!0});case"LOCKED_OUT":return void(l.settings.get("features.selfServiceUnlock")?l.navigate("signin/unlock",{trigger:!0}):l.controller.model.trigger("error",l.controller.model,{responseJSON:{errorCauses:[],errorSummary:t.loc("error.auth.lockedOut","login")}}));case"UNAUTHENTICATED":return void l.navigate("signin",{trigger:!0});default:throw new Error("Unknown status: "+u.status)}},a}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(301),i(302)],r=function(t,e,i){function n(t,e){return s.isArray(t.responseType)?s.contains(t.responseType,e):e===t.responseType}var r={},s=t._;return r.getTokens=function(r,o,a){function l(t){r.callGlobalSuccess(e.SUCCESS,t)}function c(t){"access_denied"===t.errorCode?(a.model.trigger("error",a.model,{responseJSON:t}),a.model.appState.trigger("removeLoading")):r.callGlobalError(new i.OAuthError(t.message))}var u=r.getAuthClient(),d=r.toJSON({verbose:!0}),h={},p={};s.extend(h,s.pick(d,"clientId","redirectUri"),s.pick(d.authParams,"responseType","responseMode","display","scopes","state","nonce"),o),p.popupTitle=t.loc("socialauth.popup.title","login"),p.timeout=d.oAuthTimeout,s.extend(p,s.pick(d.authParams,"issuer","authorizeUrl")),"page"===h.display||n(h,"code")?u.token.getWithRedirect(h,p):h.sessionToken?u.token.getWithoutPrompt(h,p).then(l).fail(c).done():u.token.getWithPopup(h,p).then(l).fail(c).done()},r}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){!(t.exports={DIRECTION_BACK:"DIRECTION_BACK",RECOVERY_TYPE_PASSWORD:"PASSWORD",RECOVERY_TYPE_UNLOCK:"UNLOCK",RECOVERY_FACTOR_TYPE_SMS:"SMS",RECOVERY_FACTOR_TYPE_EMAIL:"EMAIL",RECOVERY_FACTOR_TYPE_CALL:"CALL",SUCCESS:"SUCCESS",FORGOT_PASSWORD_EMAIL_SENT:"FORGOT_PASSWORD_EMAIL_SENT",UNLOCK_ACCOUNT_EMAIL_SENT:"UNLOCK_ACCOUNT_EMAIL_SENT",CONFIG_ERROR:"CONFIG_ERROR",UNSUPPORTED_BROWSER_ERROR:"UNSUPPORTED_BROWSER_ERROR",OAUTH_ERROR:"OAUTH_ERROR",ALL_OPTIONAL_NONE_ENROLLED:"ALL_OPTIONAL_NONE_ENROLLED",ALL_OPTIONAL_SOME_ENROLLED:"ALL_OPTIONAL_SOME_ENROLLED",HAS_REQUIRED_NONE_ENROLLED:"HAS_REQUIRED_NONE_ENROLLED",HAS_REQUIRED_SOME_REQUIRED_ENROLLED:"HAS_REQUIRED_SOME_REQUIRED_ENROLLED",HAS_REQUIRED_ALL_REQUIRED_ENROLLED:"HAS_REQUIRED_ALL_REQUIRED_ENROLLED",PRIMARY_AUTH:"PRIMARY_AUTH",FORGOT_PASSWORD:"FORGOT_PASSWORD",UNLOCK_ACCOUNT:"UNLOCK_ACCOUNT",SESSION_SSO:"SESSION_SSO",SESSION_STEP_UP:"SESSION_STEP_UP"})},function(t,e,i){var n,r;n=[i(32),i(301)],r=function(t,e){function i(i){this.name=e.CONFIG_ERROR,this.message=i||t.loc("error.config")}function n(i){this.name=e.UNSUPPORTED_BROWSER_ERROR,this.message=i||t.loc("error.unsupported.browser")}function r(t){this.name=e.OAUTH_ERROR,this.message=t}return i.prototype=new Error,n.prototype=new Error,r.prototype=new Error,{ConfigError:i,UnsupportedBrowserError:n,OAuthError:r}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){!(t.exports={INVALID_TOKEN_EXCEPTION:"E0000011"})},function(t,e,i){var n,r;n=[i(32),i(299)],r=function(t,e){function i(t){var i=e.createActivateFactorUrl(t.get("activatedFactorProvider"),t.get("activatedFactorType"));t.trigger("navigate",i)}var n=t._;return t.View.extend({template:'\t      <a href="#" class="link help js-back" data-se="back-link">\t        {{i18n code="mfa.backToFactors" bundle="login"}}\t      </a>\t      <a href="#" class="link help goto js-goto" data-se="goto-link">\t        {{i18n code="mfa.scanBarcode" bundle="login"}}\t      </a>\t    ',className:"auth-footer",events:{"click .js-back":function(t){t.preventDefault(),this.back()},"click .js-goto":function(t){t.preventDefault();var e=n.partial(i,this.options.appState);this.options.appState.unset("factorActivationType"),"push"!==this.options.appState.get("activatedFactorType")?this.model.doTransaction(function(t){return t.prev().then(function(t){var e=n.findWhere(t.factors,{factorType:"push",provider:"OKTA"});return e.enroll()})}).then(e):this.model.startTransaction(function(t){return t.tx.resume()}).then(function(){setTimeout(e)})}},back:function(){var t=this;t.options.appState.unset("factorActivationType"),t.options.appState.get("prevLink")?this.model.doTransaction(function(t){return t.prev()}).then(function(){t.options.appState.trigger("navigate","signin/enroll");
	}):t.options.appState.trigger("navigate","signin/enroll")}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(202)],r=function(t,e){var i=t._;return e.extend({template:t.Handlebars.compile('\t      <span class="okta-form-label-inline o-form-label-inline">{{countryCallingCode}}</span>\t      <span class="okta-form-input-field input-fix o-form-control">\t        <input type="{{type}}" placeholder="{{placeholder}}" name="{{name}}" \t          id="{{inputId}}" value="{{value}}" autocomplete="off"/>\t      </span>\t    '),initialize:function(){this.listenTo(this.model,"change:countryCallingCode",function(){this.$(".o-form-label-inline").text(this.model.get("countryCallingCode"))})},preRender:function(){this.options.countryCallingCode=this.model.get("countryCallingCode")},postRender:function(){this.$el.removeClass("input-fix o-form-control"),i.defer(i.bind(function(){this.$el.parent().addClass("o-form-input-group")},this))}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(5),i(307),i(182),i(202),i(231)],r=function(t,e,i,n){function r(t){var e=t.title,i=t.text;return!(!e||!i||e===i)}function s(t){return r(t)?t:{text:t.text||t}}return n.extend({template:e.compile('\t      {{#if params}}\t        {{#if params.innerTooltip}}\t          <span class="input-tooltip icon form-help-16"></span>\t        {{/if}}\t        {{#if params.icon}}\t          <span class="icon input-icon {{params.icon}}"></span>\t        {{/if}}\t      {{/if}}\t      <input type="{{type}}" placeholder="{{placeholder}}" aria-label="{{placeholder}}"\t        name="{{name}}" id="{{inputId}}" value="{{value}}" autocomplete="off"/>\t    '),postRender:function(){var e,i=this.options.params;if("number"===this.options.type){var n=this.$("input");n.attr({pattern:"[0-9]*",inputmode:"numeric"})}i&&i.innerTooltip&&(e=s(i.innerTooltip),this.$(".input-tooltip").qtip({content:e,style:{classes:"okta-sign-in-tooltip qtip-custom qtip-shadow"},position:{my:"bottom left",target:"mouse",adjust:{method:"flip",mouse:!0,y:-5,x:5},viewport:t("body")}}))},focus:function(){if(!i.isIE())return n.prototype.focus.apply(this,arguments)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(4),i(2),i(5),i(177),i(139),i(36)],r=function(t,e,i,n,r,s){function o(t,e){return s.utc(e).zone("-07:00").format(t)}function a(t){return t&&t.replace(/^\s+|\s+$/g,"")}function l(t){return 0===t.indexOf(c)?t:c+t}var c="/assets";return t.registerHelper("i18n",function(t){var i,r=a(t.hash.code),s=a(t.hash.bundle),o=a(t.hash.arguments);return o&&(i=e.map(a(o).split(";"),function(t){t=a(t);var i,n=this;return e.each(t.split("."),function(t){i=i?i[t]:n[t]}),i},this)),n.localize(r,s,i)}),t.registerHelper("xsrfTokenInput",function(){return'<input type="hidden" class="hide" name="_xsrfToken" value="'+i("#_xsrfToken").text()+'">'}),t.registerHelper("img",function(t){var i="undefined"!=typeof okta&&okta.cdnUrlHostname||"",n=e.pick(t.hash,["src","alt","width","height","class","title"]);n.src=""+i+l(n.src);var r=e.map(n,function(t,i){return i+'="'+e.escape(t)+'"'});return"<img "+r.join(" ")+"/>"}),t.registerHelper("shortDate",e.partial(o,"MMM DD")),t.registerHelper("mediumDate",e.partial(o,"MMMM DD, YYYY")),t.registerHelper("longDate",e.partial(o,"MMMM DD, YYYY, h:mma")),t.registerHelper("formatDate",o),t.registerHelper("markdown",function(e){return r(t,e)}),t}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(35),i(182),i(310),i(311),i(312),i(315),i(309),i(316),i(299),i(313),i(302),i(178)],r=function(t,e,i,n,r,s,o,a,l,c,u,d,h){function p(t,e){return _.find(t.stateLessRouteHandlers,function(i){return e===t[i]})}function f(t,e){return!!t&&(t!==o||e.get("features.securityImage"))}function m(t,e,i,n){var r=setTimeout(function(){t.trigger("loading",!0)},200);return h.loadLanguage(t.get("languageCode"),e,{baseUrl:i,rewrite:n}).then(function(){clearTimeout(r),t.trigger("loading",!1)})}var _=t._,g=t.$;return t.Router.extend({Events:e.Events,initialize:function(e){this.settings=new r(_.omit(e,"el","authClient"),{parse:!0}),this.settings.setAuthClient(e.authClient),e.el||this.settings.callGlobalError(new d.ConfigError(t.loc("error.required.el"))),g("body > div").on("click",function(){}),this.appState=new l({baseUrl:this.settings.get("baseUrl"),settings:this.settings},{parse:!0});var i=new a({appState:this.appState});t.$(e.el).append(i.render().$el),this.el="#okta-sign-in",this.header=new s({el:this.el,appState:this.appState,settings:this.settings}),this.listenTo(this.appState,"change:transactionError",function(t,e){c.routeAfterAuthStatusChange(this,e)}),this.listenTo(this.appState,"change:transaction",function(t,e){c.routeAfterAuthStatusChange(this,null,e.data)}),this.listenTo(this.appState,"navigate",function(t){this.navigate(t,{trigger:!0})})},execute:function(t,e){var i=this.settings.get("recoveryToken");if(i)return this.settings.unset("recoveryToken"),void this.navigate(c.createRecoveryUrl(i),{trigger:!0});var n=this.settings.get("stateToken");if(n)return this.settings.unset("stateToken"),void this.navigate(c.createRefreshUrl(n),{trigger:!0});var r=this.appState.get("transaction");return r&&r.data||p(this,t)?void t.apply(this,e):this.settings.getAuthClient().tx.exists()?void this.navigate(c.createRefreshUrl(),{trigger:!0}):void this.navigate("",{trigger:!0})},navigate:function(i,n){return this.settings.get("features.router")?t.Router.prototype.navigate.apply(this,arguments):n&&n.trigger?e.history.loadUrl(i):void 0},render:function(t,e){e||(e={});var i=e.Beacon,n=_.extend({settings:this.settings,appState:this.appState},_.omit(e,"Beacon"));if(this.header.rendered()||(this.el=this.header.render().getContentEl()),!h.isLoaded(this.appState.get("languageCode")))return m(this.appState,this.settings.get("i18n"),this.settings.get("assets.baseUrl"),this.settings.get("assets.rewrite")).then(_.bind(this.render,this,t,e)).done();var r=this.controller;this.controller=new t(n),this.listenTo(this.controller,"all",this.trigger),this.controller.fetchInitialData().then(_.bind(function(){return f(i,this.settings)||(i=null),this.header.setBeacon(i,n),this.controller.render(),r?u.swapPages({$parent:this.el,$oldRoot:r.$el,$newRoot:this.controller.$el,dir:r.state.get("navigateDir"),ctx:this,success:function(){var t=this.appState.get("flashError"),e=this.controller.model;r.remove(),r.$el.remove(),this.controller.postRenderAnimation(),t&&(e.trigger("error",e,{responseJSON:{errorSummary:t}}),this.appState.unset("flashError"))}}):(this.el.append(this.controller.el),void this.controller.postRenderAnimation())},this)).fail(function(){r&&(r.remove(),r.$el.remove())}).done()},start:function(){var e=!1;window.addEventListener&&(window.addEventListener("popstate",_.bind(function(t){this.controller.back&&(t.preventDefault(),t.stopImmediatePropagation(),this.controller.back())},this)),e=i.supportsPushState()),t.Router.prototype.start.call(this,{pushState:e})},hide:function(){this.header.$el.hide()},show:function(){this.header.$el.show()},remove:function(){this.controller.remove(),this.header.$el.remove(),e.history.stop()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32)],r=function(t){var e="can-remove-beacon";return t.View.extend({className:"auth-container main-container",id:"okta-sign-in",attributes:{"data-se":"auth-container"},initialize:function(t){this.listenTo(t.appState,"change:beaconType",function(t,i){this.$el.toggleClass(e,"security"===i)})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295)],r=function(t,e){return e.extend({className:"refresh-auth-state",Model:{},Form:{noButtonBar:!0},preRender:function(){var t=this.options.token,e=this.options.appState;this.model.startTransaction(function(i){return t?(e.trigger("loading",!0),i.tx.resume({stateToken:t})):i.tx.exists()?(e.trigger("loading",!0),i.tx.resume()):void e.trigger("navigate","")})},remove:function(){return this.options.appState.trigger("loading",!1),e.prototype.remove.apply(this,arguments)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(21),i(302),i(182),i(31),i(181),i(300),i(1)],r=function(t,e,i,n,r,s,o,a){var l="en",c=["facebook","google","linkedin","microsoft"],u=["token","id_token","code"],d=t.tpl("{{origin}}"),h=t._,p=i.ConfigError,f=i.UnsupportedBrowserError,m=t.tpl("https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/{{version}}");return t.Model.extend({flat:!0,authClient:void 0,local:{baseUrl:["string",!0],recoveryToken:["string",!1,void 0],stateToken:["string",!1,void 0],username:["string",!1],signOutLink:["string",!1],transformUsername:["function",!1],globalSuccessFn:"function",globalErrorFn:"function",processCreds:"function",logo:"string",logoText:["string",!1],helpSupportNumber:"string","features.router":["boolean",!0,!1],"features.securityImage":["boolean",!0,!1],"features.rememberMe":["boolean",!0,!0],"features.autoPush":["boolean",!0,!1],"features.smsRecovery":["boolean",!0,!1],"features.callRecovery":["boolean",!0,!1],"features.windowsVerify":["boolean",!0,!1],"features.selfServiceUnlock":["boolean",!0,!1],"features.multiOptionalFactorEnroll":["boolean",!0,!1],"features.preventBrowserFromSavingOktaPassword":["boolean",!0,!0],"features.deviceFingerprinting":["boolean",!1,!1],"features.hideSignOutLinkInMFA":["boolean",!1,!1],"features.customExpiredPassword":["boolean",!0,!1],"features.registration":["boolean",!1,!1],language:["any",!1],i18n:["object",!1],"assets.baseUrl":["string",!1],"assets.rewrite":{type:"function",value:h.identity},authScheme:["string",!1,"OAUTH2"],"authParams.display":{type:"string",values:["none","popup","page"]},"authParams.responseMode":{type:"string",values:["query","fragment","form_post","okta_post_message"]},"authParams.responseType":["any",!1,"id_token"],"authParams.scopes":["array",!1],"authParams.issuer":["string",!1],"authParams.authorizeUrl":["string",!1],"authParams.state":["string",!1],"authParams.nonce":["string",!1],clientId:"string",redirectUri:"string",idps:["array",!1,[]],idpDisplay:{type:"string",values:["PRIMARY","SECONDARY"],value:"SECONDARY"},oAuthTimeout:["number",!1],"helpLinks.help":"string","helpLinks.forgotPassword":"string","helpLinks.unlock":"string","helpLinks.custom":"array",customButtons:["array",!1,[]],"registration.click":"function"},derived:{supportedLanguages:{deps:["i18n"],fn:function(t){return h.union(a.supportedLanguages,h.keys(t))},cache:!0},languageCode:{deps:["language","supportedLanguages"],fn:function(t,e){var i,s=n.getUserLanguages(),o=h.clone(s),a=r.toLower(e);h.isString(t)?o.unshift(t):h.isFunction(t)&&o.unshift(t(e,s)),o.push(l),i=r.toLower(r.expandLanguages(o));var c,u;for(c=0;c<i.length;c++)if(u=a.indexOf(i[c]),u>-1)return e[u]}},oauth2Enabled:{deps:["clientId","authScheme","authParams.responseType"],fn:function(t,e,i){if(!t)return!1;if("oauth2"!==e.toLowerCase())return!1;var n=h.isArray(i)?i:[i];return h.intersection(n,u).length>0},cache:!0},oauthRedirectUri:{deps:["redirectUri"],fn:function(t){if(t)return t;var e=window.location.origin;if(!e){var i=window.location.href,n=window.location.pathname;""!==n&&(e=i.substring(0,i.lastIndexOf(n)))}return d({origin:e})}},configuredSocialIdps:{deps:["idps"],fn:function(t){return h.filter(t,function(t){return h.contains(c,t.type.toLowerCase())})},cache:!0},socialAuthPositionTop:{deps:["configuredSocialIdps","idpDisplay"],fn:function(t,e){return!h.isEmpty(t)&&"PRIMARY"===e.toUpperCase()},cache:!0},configuredButtons:{deps:["configuredSocialIdps","customButtons"],fn:function(e,i){var n=this,r=[];return h.each(e,function(e){var i=e.type.toLowerCase(),s="social-auth-"+i+"-button",a={id:e.id,type:e.type,dataAttr:s,className:"social-auth-button "+s,title:e.title=t.loc("socialauth."+i+".label"),click:function(t){t.preventDefault(),o.getTokens(n,{idp:e.id})}};r.push(a)}),h.isArray(i)&&h.each(i,function(t){var e={title:t.title,className:t.className+" default-custom-button",click:t.click};r.push(e)}),r},cache:!0},hasConfiguredButtons:{deps:["configuredButtons"],fn:function(t){return!h.isEmpty(t)},cache:!0}},initialize:function(e){e.baseUrl?e.globalSuccessFn?n.corsIsNotSupported()&&this.callGlobalError(new f(t.loc("error.unsupported.cors"))):this.callGlobalError(new p(t.loc("error.required.success"))):this.callGlobalError(new p(t.loc("error.required.baseUrl")))},setAuthClient:function(t){this.authClient=t},getAuthClient:function(){return this.authClient},set:function(){try{return t.Model.prototype.set.apply(this,arguments)}catch(e){var i=e.message?e.message:e;this.callGlobalError(new p(i))}},callGlobalSuccess:function(t,e){var i=h.extend(e,{status:t});h.defer(h.partial(this.get("globalSuccessFn"),i))},callGlobalError:function(t){var e=this.get("globalErrorFn")||this.options.globalErrorFn;if(!e)throw t;e(t)},transformUsername:function(t,e){var i=this.get("transformUsername");return i&&h.isFunction(i)?i(t,e):t},processCreds:function(t){var i=this.get("processCreds");return e.Promise(function(e){h.isFunction(i)?2===i.length?i(t,e):(i(t),e()):e()})},parse:function(t){if(t.authParams&&t.authParams.scope&&(s.deprecate('Use "scopes" instead of "scope"'),t.authParams.scopes=t.authParams.scope,delete t.authParams.scope),t.labels||t.country){s.deprecate('Use "i18n" instead of "labels" and "country"');var e=t.labels||{};h.each(t.country,function(t,i){e["country."+i]=t}),t.i18n={},h.each(a.supportedLanguages,function(i){t.i18n[i]=e}),delete t.labels,delete t.country}t.assets||(t.assets={});var i=t.assets.baseUrl;return i?"/"===i[i.length-1]&&(t.assets.baseUrl=i.substring(0,i.length-1)):t.assets.baseUrl=m({version:a.version}),t}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(313),i(314)],r=function(t,e,i){function n(t){return t&&t.equals(i)}function r(t){t.currentBeacon&&(t.currentBeacon.remove(),t.currentBeacon=null)}function s(t,e,i,n){t.add(e,{selector:i,options:n}),t.currentBeacon=t.first()}function o(t,e,i){return t||e?!t&&i.loading?"load":t&&n(t)?e?"swap":"unload":t&&t.equals(e,i)?"same":!t&&e?"add":t&&!e?"remove":t instanceof e?"fade":"swap":"none"}var a="no-beacon",l="beacon-small beacon-loading";return t.View.extend({currentBeacon:null,template:'\t      <div class="okta-sign-in-header auth-header">\t        {{#if logo}}\t        <img src="{{logo}}" class="auth-org-logo" alt="{{logoText}}"/>\t        {{/if}}\t        <div data-type="beacon-container" class="beacon-container"></div>\t      </div>\t      <div class="auth-content"><div class="auth-content-inner"></div></div>\t    ',initialize:function(t){t.settings.get("features.securityImage")||(this.$el.addClass(a),this.listenTo(t.appState,"loading",this.setLoadingBeacon),this.listenTo(t.appState,"removeLoading",this.removeLoadingBeacon))},setBeacon:function(t,i){var c='[data-type="beacon-container"]',u=this.$(c),d=o(this.currentBeacon,t,i),h=this;switch(d){case"none":return void this.$el.addClass(a);case"same":return;case"add":return this.$el.removeClass(a),s(this,t,c,i),e.explode(u);case"remove":return this.$el.addClass(a),e.implode(u).then(function(){r(h)}).done();case"fade":if(!this.currentBeacon.fadeOut)throw new Error('The current beacon is missing the "fadeOut" method');return i.animate=!0,this.currentBeacon.fadeOut().then(function(){r(h),s(h,t,c,i)}).done();case"swap":return e.swapBeacons({$el:u,swap:function(){var e=n(h.currentBeacon);r(h),e&&(u.removeClass(l),h.$el.removeClass(a)),s(h,t,c,i)}}).done();case"load":return u.addClass(l),s(h,t,c,i),e.explode(u);case"unload":return this.removeLoadingBeacon();default:throw new Error('the "'+d+'" is not recognized')}},setLoadingBeacon:function(t){t&&!n(this.currentBeacon)&&this.setBeacon(i,{loading:!0})},removeLoadingBeacon:function(){var t=this,i=this.$('[data-type="beacon-container"]');return e.implode(i).then(function(){r(t),i.removeClass(l)}).done()},getTemplateData:function(){return this.settings.toJSON({verbose:!0})},getContentEl:function(){return this.$(".auth-content-inner")}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(21),i(301)],r=function(t,e){function i(e,i,n){var r=t.defer();return e.animate({"text-indent":1},{duration:200,easing:"swing",step:function(t,r){r.start=i,r.end=n,e.css("transform","scale("+t+", "+t+")")},always:function(){r.resolve(e)}}),r.promise}function n(e,i,n){var r=t.defer();return e.animate({"text-indent":1},{duration:150,easing:"swing",step:function(t,r){r.start=i,r.end=n,e.css("transform","rotate("+t+"deg)")},always:function(){r.resolve(e)}}),r.promise}var r=200,s={};return s.swapPages=function(i){var n=t.defer(),s=i.$parent,o=i.$oldRoot,a=i.$newRoot,l=i.success,c=i.ctx,u="transition-from-right";return i.dir&&i.dir===e.DIRECTION_BACK&&(u="transition-from-left"),a.addClass(u),s.append(a),s.addClass("animation-container-overflow"),a.animate({left:"0px",top:"0px",opacity:1},r,function(){s.removeClass("animation-container-overflow"),a.removeClass(u),a.removeAttr("style"),l.call(c),n.resolve()}),o.animate({height:a.height(),opacity:0},.8*r),n.promise},s.swapBeacons=function(t){var e=t.$el,i=t.swap,n=t.ctx;return this.implode(e).then(function(){return i.call(n),e}).then(this.explode)},s.explode=function(t){return i(t,0,1)},s.implode=function(t){return i(t,1,0)},s.radialProgressBar=function(t){var e=t.$el,i=t.swap,r=e.children();return n(r,0,180).then(function(){e.css({clip:"auto"})}).then(function(){var t=r.eq(0);return i(),n(t,180,360)}).then(function(){e.css({clip:"rect(0px, 96px, 96px, 48px)"}),r.css({transform:"rotate(0deg)","text-indent":"1px"})})},s}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32)],r=function(t){return t.View.extend({template:'\t      <div class="beacon-blank"/>\t      <div class="bg-helper auth-beacon auth-beacon-security" data-se="loading-beacon">\t      <div class="okta-sign-in-beacon-border auth-beacon-border js-auth-beacon-border"/>\t      </div>\t    ',equals:function(t){return t&&this instanceof t}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(313)],r=function(t,e){function i(t,e){var i=e.get("securityImage"),n=e.get("securityImageDescription"),r=e.get("isUndefinedUser"),s=e.get("isNewUser"),a=!r&&!s;return t.css("background-image",""),t.removeClass("new-user undefined-user"),s?void t.addClass("new-user"):r?void t.addClass("undefined-user"):a?(t.removeAttr("aria-describedby"),t.find(".accessibility-text").text(n),void t.css("background-image","url("+o.escape(i)+")")):void 0}function n(e,i){a(window).on("resize.securityBeaconQtip",o.debounce(function(){e.is(":visible")&&e.qtip("show")},300)),e.qtip({prerender:!0,content:{text:t.loc("primaryauth.newUser.tooltip","login",[o.escape(i)]),button:t.loc("primaryauth.newUser.tooltip.close","login")},style:{classes:"okta-security-image-tooltip security-image-qtip qtip-custom qtip-shadow qtip-rounded",tip:{height:12,width:16}},position:{my:"top center",at:"center",target:a(".auth-beacon-security"),adjust:{method:"flip",scroll:!1,resize:!0},effect:!1},hide:{event:!1,fixed:!0},show:{event:!1,delay:200},events:{move:function(t,e){e.elements.target.is(":visible")||(e.set("hide.effect",!1),e.hide(),e.set("hide.effect",!0))}}}),e.qtip("toggle",e.is(":visible"))}function r(t){t.qtip("destroy"),a(window).off("resize.securityBeaconQtip")}function s(t,s,o){var a=t.find(".auth-beacon-security"),l=t.find(".js-auth-beacon-border"),c=!s.get("isUndefinedUser"),u=s.get("isNewUser"),d=t.find(".radial-progress-bar"),h=s.get("baseUrl").match(/https?:\/\/(.[^\/]+)/)[1],p=200;return o?(r(a),void(c?(l.removeClass("auth-beacon-border"),e.radialProgressBar({$el:d,swap:function(){a.fadeOut(p,function(){i(a,s),a.fadeIn(p)})}}).then(function(){l.addClass("auth-beacon-border")}).then(function(){u&&n(a,h)})):a.fadeOut(p,function(){i(a,s),l.removeClass("auth-beacon-border"),a.fadeIn(p)}))):(i(a,s),void l.toggleClass("auth-beacon-border",c))}var o=t._,a=t.$;return t.View.extend({template:'\t    <div class="beacon-blank">\t      <div class="radial-progress-bar">\t        <div class="circle left"></div>\t        <div class="circle right"></div>\t      </div>\t    </div>\t    <div aria-live="polite" role="image" class="bg-helper auth-beacon auth-beacon-security" data-se="security-beacon">\t      <span class="accessibility-text"></span>\t      <div class="okta-sign-in-beacon-border auth-beacon-border js-auth-beacon-border">\t      </div>\t    </div>\t    ',className:"js-security-beacon",initialize:function(t){this.update=o.partial(s,this.$el,t.appState),this.listenTo(t.appState,"change:securityImage",this.update),this.listenTo(t.appState,"loading",function(t){this.$el.toggleClass("beacon-loading",t),this.removeAntiPhishingMessage()}),this.options.appState.set("beaconType","security"),this.listenTo(t.appState,"navigate",this.removeAntiPhishingMessage)},postRender:function(){this.update(!1)},equals:function(t){return t&&this instanceof t},removeAntiPhishingMessage:function(){var t=this.$el.find(".auth-beacon-security");t.qtip("destroy")}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(21),i(317),i(182),i(302)],r=function(t,e,i,n,r){function s(t,i){var n=_({baseUrl:t,username:i});return a.isEmpty(i)||a.isUndefined(i)?e({securityImage:d,securityImageDescription:f}):e(l.get(n)).then(function(t){return t.pwdImg===u?{securityImage:h,securityImageDescription:p}:{securityImage:t.pwdImg,securityImageDescription:t.imageDescription||m}})}function o(e){if(e>60&&e<=1440){var i=e/60;return t.loc("hours","login",[i])}if(e>1440){var n=e/1440;return t.loc("days","login",[n])}return 1===e?t.loc("minutes.oneMinute","login"):t.loc("minutes","login",[e])}var a=t._,l=t.$,c=t.Handlebars.compile,u="/img/security/unknown.png",d="/img/security/default.png",h="/img/security/unknown-device.png",p="",f="",m="",_=c("{{baseUrl}}/login/getimage?username={{username}}");return t.Model.extend({initialize:function(){if(this.settings.get("features.securityImage")){var e=this;this.listenTo(this,"change:username",function(i,o){s(this.get("baseUrl"),o).then(function(t){i.set("securityImage",t.securityImage),i.set("securityImageDescription",t.securityImageDescription)}).fail(function(i){if(!n.corsIsNotEnabled(i))throw i;e.settings.callGlobalError(new r.UnsupportedBrowserError(t.loc("error.enabled.cors")))}).done()})}},local:{baseUrl:"string",lastAuthResponse:["object",!0,{}],transaction:"object",transactionError:"object",username:"string",factors:"object",policy:"object",securityImage:["string",!0,d],securityImageDescription:["string",!0,f],userCountryCode:"string",userPhoneNumber:"string",factorActivationType:"string",flashError:"object",beaconType:"string",languageCode:["string",!0]},setAuthResponse:function(t){var e=this;if(t._embedded&&t._embedded.policy&&this.set("policy",t._embedded.policy),t._embedded&&t._embedded.factors){var n=this.settings,r=a.map(t._embedded.factors,function(t){return t.settings=n,t.appState=e,t});this.set("factors",new i.Collection(r,{parse:!0}))}this.set("lastAuthResponse",t)},derived:{isSuccessResponse:{deps:["lastAuthResponse"],fn:function(t){return"SUCCESS"===t.status}},isMfaRequired:{deps:["lastAuthResponse"],fn:function(t){return"MFA_REQUIRED"===t.status}},isMfaEnroll:{deps:["lastAuthResponse"],fn:function(t){return"MFA_ENROLL"===t.status}},isMfaChallenge:{deps:["lastAuthResponse"],fn:function(t){return"MFA_CHALLENGE"===t.status}},isUnauthenticated:{deps:["lastAuthResponse"],fn:function(t){return"UNAUTHENTICATED"===t.status}},isMfaRejectedByUser:{deps:["lastAuthResponse"],fn:function(t){return"REJECTED"===t.factorResult}},isMfaTimeout:{deps:["lastAuthResponse"],fn:function(t){return"TIMEOUT"===t.factorResult}},isMfaEnrollActivate:{deps:["lastAuthResponse"],fn:function(t){return"MFA_ENROLL_ACTIVATE"===t.status}},isWaitingForActivation:{deps:["isMfaEnrollActivate","lastAuthResponse"],fn:function(t,e){return t&&"WAITING"===e.factorResult}},hasMfaRequiredOptions:{deps:["lastAuthResponse","factors"],fn:function(t,e){return("MFA_REQUIRED"===t.status||"MFA_CHALLENGE"===t.status)&&(e&&e.length>1)}},userId:{deps:["lastAuthResponse"],fn:function(t){return t._embedded&&t._embedded.user?t._embedded.user.id:null}},isPwdExpiringSoon:{deps:["lastAuthResponse"],fn:function(t){return"PASSWORD_WARN"===t.status}},passwordExpireDays:{deps:["lastAuthResponse"],fn:function(t){return t._embedded&&t._embedded.policy&&t._embedded.policy.expiration?t._embedded.policy.expiration.passwordExpireDays:null}},isPwdManagedByOkta:{deps:["lastAuthResponse"],fn:function(t){return!(t._links&&t._links.next&&t._links.next.title)}},passwordExpiredWebsiteName:{deps:["lastAuthResponse"],fn:function(t){return t._links&&t._links.next&&t._links.next.title?t._links.next.title:null}},passwordExpiredLinkUrl:{deps:["lastAuthResponse"],fn:function(t){return t._links&&t._links.next&&t._links.next.title&&t._links.next.href?t._links.next.href:null}},recoveryType:{deps:["lastAuthResponse"],fn:function(t){return t.recoveryType}},factorType:{deps:["lastAuthResponse"],fn:function(t){return t.factorType}},factor:{deps:["lastAuthResponse"],fn:function(t){return t._embedded&&t._embedded.factor?t._embedded.factor:null}},activatedFactorId:{deps:["factor"],fn:function(t){return t?t.id:null}},activatedFactorType:{deps:["factor"],fn:function(t){return t?t.factorType:null}},activatedFactorProvider:{deps:["factor"],fn:function(t){return t?t.provider:null}},qrcode:{deps:["factor"],fn:function(t){try{return t._embedded.activation._links.qrcode.href}catch(e){return null}}},activationSendLinks:{deps:["factor"],fn:function(t){var e;try{e=t._embedded.activation._links.send}catch(i){e=[]", "base64"));
  res.write(new Buffer("}return e}},textActivationLinkUrl:{deps:["activationSendLinks"],fn:function(t){var e=a.findWhere(t,{name:"sms"});return e?e.href:null}},emailActivationLinkUrl:{deps:["activationSendLinks"],fn:function(t){var e=a.findWhere(t,{name:"email"});return e?e.href:null}},sharedSecret:{deps:["factor"],fn:function(t){try{return t._embedded.activation.sharedSecret}catch(e){return null}}},duoEnrollActivation:{deps:["factor"],fn:function(t){return t&&t._embedded&&t._embedded.activation?t._embedded.activation:null}},prevLink:{deps:["lastAuthResponse"],fn:function(t){return t._links&&t._links.prev?t._links.prev.href:null}},user:{deps:["lastAuthResponse"],fn:function(t){return t._embedded&&t._embedded.user?t._embedded.user:null}},recoveryQuestion:{deps:["user"],fn:function(t){return t&&t.recovery_question?t.recovery_question.question:null}},userProfile:{deps:["user"],fn:function(t){return t&&t.profile?t.profile:null}},userEmail:{deps:["userProfile"],fn:function(t){return t&&t.login?t.login:null}},userFullName:{deps:["userProfile"],fn:function(t){return t&&(t.firstName||t.lastName)?t.firstName+" "+t.lastName:""}},hasExistingPhones:{deps:["lastAuthResponse"],fn:function(t){if(!t._embedded||!t._embedded.factors)return!1;var e=t._embedded.factors,i=a.findWhere(e,{factorType:"sms",provider:"OKTA"});return!(!i||!i._embedded)&&!!i._embedded.phones.length}},hasExistingPhonesForCall:{deps:["lastAuthResponse"],fn:function(t){if(!t._embedded||!t._embedded.factors)return!1;var e=t._embedded.factors,i=a.findWhere(e,{factorType:"call",provider:"OKTA"});return!(!i||!i._embedded)&&!!i._embedded.phones.length}},isUndefinedUser:{deps:["securityImage"],fn:function(t){return t===d}},isNewUser:{deps:["securityImage"],fn:function(t){return t===h}},allowRememberDevice:{deps:["policy"],fn:function(t){return t&&t.allowRememberDevice}},rememberDeviceLabel:{deps:["policy"],fn:function(e){if(e&&e.rememberDeviceLifetimeInMinutes>0){var i=o(e.rememberDeviceLifetimeInMinutes);return t.loc("rememberDevice.timebased","login",[i])}return e&&0===e.rememberDeviceLifetimeInMinutes?t.loc("rememberDevice.devicebased","login"):t.loc("rememberDevice","login")}},rememberDeviceByDefault:{deps:["policy"],fn:function(t){return t&&t.rememberDeviceByDefault}}},parse:function(t){return this.settings=t.settings,a.extend(a.omit(t,"settings"),{languageCode:this.settings.get("languageCode")})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(21),i(294),i(298)],r=function(t,e,i,n){var r=t._,s=6e3,o=n.extend({extraProperties:!0,flat:!1,props:{id:"string",factorType:{type:"string",values:["sms","call","email","token","token:software:totp","token:hardware","question","push","u2f"]},provider:{type:"string",values:["OKTA","RSA","DEL_OATH","SYMANTEC","GOOGLE","YUBICO","FIDO"]},enrollment:{type:"string",values:["OPTIONAL","REQUIRED"]},status:{type:"string",values:["NOT_SETUP","ACTIVE"]},profile:["object"],vendorName:"string"},local:{answer:"string",backupFactor:"object",showAnswer:"boolean",rememberDevice:"boolean",autoPush:["boolean",!0,!1]},derived:{isOktaFactor:{deps:["provider"],fn:function(t){return"OKTA"===t}},factorName:{deps:["provider","factorType"],fn:i.getFactorName},factorLabel:{deps:["provider","factorType","vendorName"],fn:function(t,e,n){return"DEL_OATH"===t?n:i.getFactorLabel(t,e)}},factorDescription:{deps:["provider","factorType"],fn:i.getFactorDescription},sortOrder:{deps:["provider","factorType"],fn:i.getFactorSortOrder},iconClassName:{deps:["provider","factorType"],fn:i.getFactorIconClassName},securityQuestion:{deps:["profile","factorType"],fn:function(t,e){return"question"!==e?null:t&&i.getSecurityQuestionLabel(t)}},phoneNumber:{deps:["profile","factorType"],fn:function(t,e){return r.contains(["sms","call"],e)?t&&t.phoneNumber:null}},email:{deps:["profile","factorType"],fn:function(t,e){return"email"===e?t&&t.email:null}},deviceName:{deps:["profile","factorType"],fn:function(t,e){return"push"!==e?null:t&&t.name}},enrolled:{deps:["status"],fn:function(t){return"ACTIVE"===t}},required:{deps:["enrollment"],fn:function(t){return"REQUIRED"===t}},canUseResend:{deps:["provider","factorType"],fn:function(t,e){return"OKTA"===t&&r.contains(["push","sms","call","email"],e)}},isSMSCallorEmail:{deps:["factorType"],fn:function(t){return r.contains(["sms","call","email"],t)}}},parse:function(t){return this.settings=t.settings,this.appState=t.appState,t.rememberDevice=i.getRememberDeviceValue(this.appState),r.omit(t,["settings","appState"])},validate:function(){if(this.get("isSMSCallorEmail")&&!this.get("answer"))return{answer:t.loc("model.validation.field.blank")}},save:function(){var t=!!this.get("rememberDevice");return this.doTransaction(function(i){var n={rememberDevice:t};"question"===this.get("factorType")?n.answer=this.get("answer"):n.passCode=this.get("answer");var o;if("MFA_REQUIRED"===i.status){var a=r.findWhere(i.factors,{id:this.get("id")});o=a.verify(n)}else if(this.get("canUseResend")&&!this.get("answer")&&i.resend){var l=i.data._links.resend[0];o=i.resend(l.name)}else o=i.verify(n);return this.trigger("save"),o.then(function(t){return"MFA_CHALLENGE"===t.status&&t.poll?e.delay(s).then(function(){return t.poll(s)}):t}).fail(function(t){throw t})})}}),a=t.Collection.extend({model:o,comparator:"sortOrder",parse:function(t){this.lastUsedFactor=t[0];var e=r.findWhere(t,{provider:"OKTA",factorType:"push"});if(!e)return t;var i=r.findWhere(t,{provider:"OKTA",factorType:"token:software:totp"}),n=i===t[0],s=r.reduce(t,function(t,n){var r="OKTA"===n.provider,s=r&&"token:software:totp"===n.factorType,a=r&&"push"===n.factorType,l="ACTIVE"!==n.status,c=s&&(l||"ACTIVE"===e.status),u=a&&l&&"ACTIVE"===i.status;return c||u?t:(a&&(n.backupFactor=new o(i,{parse:!0})),t.push(n),t)},[]);return n&&(this.lastUsedFactor=e),s},getDefaultFactor:function(){var t=r.pick(this.lastUsedFactor,"factorType","provider");return this.findWhere(t)},getFirstUnenrolledRequiredFactor:function(){return this.findWhere({required:!0,enrolled:!1})}});return{Model:o,Collection:a}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(319),i(21),i(294),i(295),i(301),i(296),i(320)],r=function(t,e,i,n,r,s,o,a){var l=t.$,c=t._;return r.extend({className:"mfa-verify-duo duo-form",Model:{props:{host:"string",signature:"string",postAction:"string",factorId:"string",stateToken:"string",rememberDevice:"boolean"},initialize:function(){var t=n.getRememberDeviceValue(this.appState);this.set("rememberDevice",t);
	},getInitOptions:function(){var t=!!this.get("rememberDevice");return this.doTransaction(function(e){var i={rememberDevice:t},n=c.findWhere(e.factors,{provider:"DUO",factorType:"web"});return n.verify(i).fail(function(t){throw t})})},verify:function(t){var e=this.get("postAction"),n=this.get("factorId"),r=this,s={id:n,stateToken:this.get("stateToken"),sig_response:t},o=this.get("rememberDevice");return i(l.post(e,s)).then(function(){return r.doTransaction(function(t){var e;return o&&(e={rememberDevice:o}),t.poll(e)})}).fail(function(t){r.trigger("error",r,t.xhr)})}},Form:{autoSave:!0,noButtonBar:!0,title:c.partial(t.loc,"factor.duo"),attributes:{"data-se":"factor-duo"},postRender:function(){this.add('<iframe frameborder="0" title="'+this.title()+'"></iframe>'),this.options.appState.get("allowRememberDevice")&&this.addInput({label:!1,"label-top":!0,placeholder:this.options.appState.get("rememberDeviceLabel"),className:"margin-btm-0",name:"rememberDevice",type:"checkbox"}),e.init({host:this.model.get("host"),sig_request:this.model.get("signature"),iframe:this.$("iframe").get(0),post_action:c.bind(this.model.verify,this.model)})}},Footer:a,fetchInitialData:function(){var t=this;return this.model.getInitOptions().then(function(e){var i=e.data;if(!(i._embedded&&i._embedded.factor&&i._embedded.factor._embedded&&i._embedded.factor._embedded.verification))throw new Error("Response does not have duo verification options");var n=i._embedded.factor._embedded.verification;t.model.set({host:n.host,signature:n.signature,postAction:n._links.complete.href,factorId:i._embedded.factor.id,stateToken:i.stateToken})})},trapAuthResponse:function(){if(this.options.appState.get("isMfaChallenge"))return!0},back:function(){}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n;n=function(){function t(t,e){throw new Error("Duo Web SDK error: "+t+(e?"\nSee "+e+" for more information":""))}function e(t){return t.replace(/([a-z])([A-Z])/,"$1-$2").toLowerCase()}function i(t,i){return"dataset"in t?t.dataset[i]:t.getAttribute("data-"+e(i))}function n(t,e,i,n){"addEventListener"in window?t.addEventListener(e,n,!1):t.attachEvent(i,n)}function r(t,e,i,n){"removeEventListener"in window?t.removeEventListener(e,n,!1):t.detachEvent(i,n)}function s(t){n(document,"DOMContentLoaded","onreadystatechange",t)}function o(t){r(document,"DOMContentLoaded","onreadystatechange",t)}function a(t){n(window,"message","onmessage",t)}function l(t){r(window,"message","onmessage",t)}function c(e){if(e){0===e.indexOf("ERR|")&&t(e.split("|")[1]),e.indexOf(":")!==-1&&2===e.split(":").length||t("Duo was given a bad token.  This might indicate a configuration problem with one of Duo's client libraries.","https://www.duosecurity.com/docs/duoweb#first-steps");var i=e.split(":");return g=e,v=i[0],y=i[1],{sigRequest:e,duoSig:i[0],appSig:i[1]}}}function u(){if(b=document.getElementById(k),!b)throw new Error('This page does not contain an iframe for Duo to use.Add an element like <iframe id="duo_iframe"></iframe> to this page.  See https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe for more information.');f(),o(u)}function d(t){return Boolean(t.origin==="https://"+_&&"string"==typeof t.data&&(t.data.match(w)||t.data.match(M)))}function h(t){t&&(t.host&&(_=t.host),t.sig_request&&c(t.sig_request),t.post_action&&(T=t.post_action),t.post_argument&&(S=t.post_argument),t.iframe&&("tagName"in t.iframe?b=t.iframe:"string"==typeof t.iframe&&(k=t.iframe))),b?f():(b=document.getElementById(k),b?f():s(u)),o(h)}function p(t){d(t)&&(m(t.data),l(p))}function f(){_||(_=i(b,"host"),_||t("No API hostname is given for Duo to use.  Be sure to pass a `host` parameter to Duo.init, or through the `data-host` attribute on the iframe element.","https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe")),v&&y||(c(i(b,"sigRequest")),v&&y||t("No valid signed request is given.  Be sure to give the `sig_request` parameter to Duo.init, or use the `data-sig-request` attribute on the iframe element.","https://www.duosecurity.com/docs/duoweb#3.-show-the-iframe")),""===T&&(T=i(b,"postAction")||T),"sig_response"===S&&(S=i(b,"postArgument")||S),b.src=["https://",_,"/frame/web/v1/auth?tx=",v,"&parent=",document.location.href].join(""),a(p)}function m(t){T(t+":"+y)}var _,g,v,y,b,w=/^(?:AUTH|ENROLL)+\|[A-Za-z0-9\+\/=]+\|[A-Za-z0-9\+\/=]+$/,M=/^ERR\|[\w\s\.\(\)]+$/,k="duo_iframe",T="",S="sig_response";return s(h),{init:h,_parseSigRequest:c,_isDuoMessage:d}}.call(e,i,e,t),/**
		 * Duo Web SDK v2
		 * Copyright 2015, Duo Security
		 */
	!(void 0!==n&&(t.exports=n))},function(t,e,i){var n,r;n=[i(32),i(301),i(190)],r=function(t,e,i){var n=t._;return t.View.extend({template:'\t      <a href="#" class="link {{linkClassName}}" data-se="signout-link">\t        {{linkText}}\t      </a>\t    ',className:"auth-footer clearfix",events:{"click a":function(t){t.preventDefault();var n=this;this.model.doTransaction(function(t){return t.cancel()}).then(function(){n.settings.get("signOutLink")?i.redirect(n.settings.get("signOutLink")):(n.state.set("navigateDir",e.DIRECTION_BACK),n.options.appState.trigger("navigate",""))})}},getTemplateData:function(){return{linkClassName:n.isUndefined(this.options.linkClassName)?"goto":this.options.linkClassName,linkText:this.options.linkText||t.loc("signout","login")}}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(210),i(297),i(324),i(327),i(328),i(322),i(329),i(330),i(331),i(320)],r=function(t,e,i,n,r,s,o,a,l,c,u){return i.extend({className:"mfa-verify",initialize:function(i){var n,d=i.appState.get("factors"),h=i.factorType,p=i.provider;switch(h){case"question":n=o;break;case"sms":case"call":case"email":n=a;break;case"token":case"token:software:totp":n=r;break;case"token:hardware":n=s;break;case"push":n=l;break;default:throw new Error("Unrecognized factor type")}if(this.model=d.findWhere({provider:p,factorType:h}),!this.model)throw new Error("Unrecognized factor/provider");this.addListeners(),this.add(new n(this.toJSON())),"push"===h&&this.model.get("isOktaFactor")&&(this.add(c,{options:{model:this.model.get("backupFactor")}}),this.settings.get("features.autoPush")&&this.add(e,{options:{model:this.model,name:"autoPush",placeholder:t.loc("autoPush","login"),label:!1,"label-top":!1,className:"margin-btm-0"}}),this.options.appState.get("allowRememberDevice")&&this.add(e,{options:{model:this.model,name:"rememberDevice",placeholder:this.options.appState.get("rememberDeviceLabel"),label:!1,"label-top":!0,className:"margin-btm-0"}}),this.listenTo(this.model,"change:rememberDevice",function(t,e){t.get("backupFactor").set("rememberDevice",e)})),this.settings.get("features.hideSignOutLinkInMFA")||this.add(new u(this.toJSON()))},trapAuthResponse:function(){return!(!this.options.appState.get("isMfaChallenge")&&!this.options.appState.get("isMfaRequired"))||("push"==this.options.factorType&&(this.settings.get("features.autoPush")&&this.model.get("autoPush")?n.setAutoPushCookie(this.options.appState.get("userId")):n.removeAutoPushCookie(this.options.appState.get("userId"))),!1)},back:function(){}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(323)],r=function(t,e){var i=t._;return t.Form.extend({className:"mfa-verify-question",autoSave:!0,noCancelButton:!0,save:i.partial(t.loc,"mfa.challenge.verify","login"),scrollOnError:!1,layout:"o-form-theme",attributes:{"data-se":"factor-question"},initialize:function(){this.title=this.model.get("factorLabel"),this.addInput({label:this.model.get("securityQuestion"),"label-top":!0,placeholder:t.loc("mfa.challenge.answer.placeholder","login"),className:"auth-passcode",name:"answer",type:"password",input:e}),this.options.appState.get("allowRememberDevice")&&this.addInput({label:!1,"label-top":!0,placeholder:this.options.appState.get("rememberDeviceLabel"),className:"margin-btm-0",name:"rememberDevice",type:"checkbox"})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(306)],r=function(t,e){return e.extend({template:t.tpl('\t      <input type="password" placeholder="{{placeholder}}" name="{{name}}" id="{{inputId}}" value="{{value}}"/>\t      <span class="password-toggle">\t        <span class="button button-dark button-show">\t          {{i18n code="mfa.challenge.answer.showAnswer" bundle="login"}}</span>\t        <span class="button button-hide">{{i18n code="mfa.challenge.answer.hideAnswer" bundle="login"}}</span>\t      </span>'),initialize:function(){this.events["click .password-toggle .button-show"]="_showPassword",this.events["click .password-toggle .button-hide"]="_hidePassword",this.delegateEvents()},changeType:function(t){e.prototype.changeType.apply(this,arguments),this.$(".password-toggle").toggleClass("password-toggle-on","password"!==t)},_showPassword:function(){this.changeType("text")},_hidePassword:function(){this.changeType("password")}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(325),i(326)],r=function(t,e){function i(t){s.removeCookie(t,{path:"/"})}function n(t,e){s.cookie(t,e,{expires:l,path:"/"})}function r(t){return a+e.getStringHash(t)}var s=t.$,o="ln",a="auto_push_",l=365,c={};return c.getCookieUsername=function(){return s.cookie(o)},c.setUsernameCookie=function(t){n(o,t)},c.removeUsernameCookie=function(){i(o)},c.isAutoPushEnabled=function(t){return void 0!==t&&"true"===s.cookie(r(t))},c.setAutoPushCookie=function(t){void 0!==t&&n(r(t),!0)},c.removeAutoPushCookie=function(t){void 0!==t&&i(r(t))},c}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n;n=function(){var t={};return t.getStringHash=function(t){for(var e=5381,i=t.length;i;)e=33*e^t.charCodeAt(--i);return e>>>0},t}.call(e,i,e,t),!(void 0!==n&&(t.exports=n))},function(t,e,i){var n,r,s;/*!
		 * jQuery Cookie Plugin v1.4.1
		 * https://github.com/carhartl/jquery-cookie
		 *
		 * Copyright 2013 Klaus Hartl
		 * Released under the MIT license
		 */
	!function(o){r=[i(6)],n=o,s="function"==typeof n?n.apply(e,r):n,!(void 0!==s&&(t.exports=s))}(function(t){function e(t){return a.raw?t:encodeURIComponent(t)}function i(t){return a.raw?t:decodeURIComponent(t)}function n(t){return e(a.json?JSON.stringify(t):String(t))}function r(t){0===t.indexOf('"')&&(t=t.slice(1,-1).replace(/\\"/g,'"').replace(/\\\\/g,"\\"));try{return t=decodeURIComponent(t.replace(o," ")),a.json?JSON.parse(t):t}catch(e){}}function s(e,i){var n=a.raw?e:r(e);return t.isFunction(i)?i(n):n}var o=/\+/g,a=t.cookie=function(r,o,l){if(void 0!==o&&!t.isFunction(o)){if(l=t.extend({},a.defaults,l),"number"==typeof l.expires){var c=l.expires,u=l.expires=new Date;u.setTime(+u+864e5*c)}return document.cookie=[e(r),"=",n(o),l.expires?"; expires="+l.expires.toUTCString():"",l.path?"; path="+l.path:"",l.domain?"; domain="+l.domain:"",l.secure?"; secure":""].join("")}for(var d=r?void 0:{},h=document.cookie?document.cookie.split("; "):[],p=0,f=h.length;p<f;p++){var m=h[p].split("="),_=i(m.shift()),g=m.join("=");if(r&&r===_){d=s(g,o);break}r||void 0===(g=s(g))||(d[_]=g)}return d};a.defaults={},t.removeCookie=function(e,i){return void 0!==t.cookie(e)&&(t.cookie(e,"",t.extend({},i,{expires:-1})),!t.cookie(e))}})},function(t,e,i){var n,r;n=[i(32),i(306)],r=function(t,e){var i=t._;return t.Form.extend({className:"mfa-verify-totp",autoSave:!0,noCancelButton:!0,save:i.partial(t.loc,"mfa.challenge.verify","login"),scrollOnError:!1,layout:"o-form-theme",attributes:{"data-se":"factor-totp"},initialize:function(){var i=this.model.get("factorLabel"),n="RSA"===this.model.get("provider")||"DEL_OATH"===this.model.get("provider");this.title=i,this.subtitle=t.loc("mfa.challenge.title","login",[i]),this.addInput({label:!1,"label-top":!0,placeholder:t.loc("mfa.challenge.enterCode.placeholder","login"),className:"o-form-fieldset o-form-label-top auth-passcode",name:"answer",input:e,type:n?"password":"text"}),this.options.appState.get("allowRememberDevice")&&this.addInput({label:!1,"label-top":!0,placeholder:this.options.appState.get("rememberDeviceLabel"),className:"margin-btm-0",name:"rememberDevice",type:"checkbox"})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(306)],r=function(t,e){var i=t._;return t.Form.extend({className:"mfa-verify-yubikey",autoSave:!0,noCancelButton:!0,save:i.partial(t.loc,"mfa.challenge.verify","login"),scrollOnError:!1,layout:"o-form-theme",attributes:{"data-se":"factor-yubikey"},initialize:function(){var i=this.model.get("factorLabel");this.title=i,this.subtitle=t.loc("factor.totpHard.yubikey.description","login"),this.addInput({label:!1,"label-top":!0,className:"o-form-fieldset o-form-label-top auth-passcode",name:"answer",input:e,type:"password",placeholder:t.loc("factor.totpHard.yubikey.placeholder","login")}),this.options.appState.get("allowRememberDevice")&&this.addInput({label:!1,"label-top":!0,className:"margin-btm-0",placeholder:this.options.appState.get("rememberDeviceLabel"),name:"rememberDevice",type:"checkbox"})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(21),i(306)],r=function(t,e,i){function n(e){switch(e){case"sms":return{buttonDataSe:"sms-send-code",buttonClassName:"sms-request-button",formSubmit:t.loc("mfa.sendCode","login"),formRetry:t.loc("mfa.resendCode","login"),formSubmitted:t.loc("mfa.sent","login"),subtitle:r({subtitle:this.model.get("phoneNumber")})};case"call":return{buttonDataSe:"make-call",buttonClassName:"call-request-button",formSubmit:t.loc("mfa.call","login"),formRetry:t.loc("mfa.redial","login"),formSubmitted:t.loc("mfa.calling","login"),subtitle:r({subtitle:this.model.get("phoneNumber")})};case"email":return{buttonDataSe:"email-send-code",buttonClassName:"email-request-button",formSubmit:t.loc("mfa.sendEmail","login"),formRetry:t.loc("mfa.resendEmail","login"),formSubmitted:t.loc("mfa.sent","login"),subtitle:r({subtitle:this.model.get("email")})};default:return{buttonDataSe:"",buttonClassName:"",formSubmit:"",formRetry:"",formSubmitted:""}}}var r=t.Handlebars.compile("({{subtitle}})"),s=t._,o=3e4;return t.Form.extend({className:"mfa-verify-passcode",autoSave:!0,noCancelButton:!0,save:s.partial(t.loc,"mfa.challenge.verify","login"),scrollOnError:!1,layout:"o-form-theme",disableSubmitButton:function(){return this.model.appState.get("isMfaChallenge")&&this.model.get("answer")},initialize:function(){var r=this;this.title=this.model.get("factorLabel");var a=this.model.get("factorType"),l=n.call(this,a);this.$el.attr("data-se","factor-"+a),this.subtitle=l.subtitle,this.listenTo(this.model,"error",function(){this.clearErrors()}),this.add(t.createButton({attributes:{"data-se":l.buttonDataSe},className:"button "+l.buttonClassName,title:l.formSubmit,click:function(){r.clearErrors(),this.disable(),this.options.title=l.formSubmitted,this.render(),this.model.set("answer",""),this.model.save().then(function(){return r.getInputs().first().render().focus(),e.delay(o)}).then(s.bind(function(){this.options.title=l.formRetry,this.enable(),this.render()},this))}})),this.addInput({label:!1,"label-top":!0,placeholder:t.loc("mfa.challenge.enterCode.placeholder","login"),className:"o-form-fieldset o-form-label-top auth-passcode",name:"answer",input:i,type:"text"}),this.options.appState.get("allowRememberDevice")&&this.addInput({label:!1,"label-top":!0,placeholder:this.options.appState.get("rememberDeviceLabel"),className:"margin-btm-0",name:"rememberDevice",type:"checkbox"})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(324),i(31)],r=function(t,e,i){var n=t._,r=t.Handlebars.compile("{{factorName}} ({{{deviceName}}})"),s=3e4,o='<div class="okta-form-infobox-warning infobox infobox-warning">\t                           <span class="icon warning-16"></span>\t                           <p>{{warning}}</p>\t                         </div>';return t.Form.extend({className:"mfa-verify-push",autoSave:!0,noCancelButton:!0,save:n.partial(t.loc,"oktaverify.send","login"),scrollOnError:!1,layout:"o-form-theme",attributes:{"data-se":"factor-push"},events:{submit:"submit"},initialize:function(){this.enabled=!0,this.listenTo(this.options.appState,"change:isMfaRejectedByUser",function(e,i){this.setSubmitState(i),i&&this.showError(t.loc("oktaverify.rejected","login"))}),this.listenTo(this.options.appState,"change:isMfaTimeout",function(e,i){this.setSubmitState(i),i&&this.showError(t.loc("oktaverify.timeout","login"))}),this.listenTo(this.options.appState,"change:isMfaRequired",function(t,e){e&&(this.clearErrors(),this.clearWarnings())}),this.title=r({factorName:this.model.get("factorLabel"),deviceName:this.model.get("deviceName")})},setSubmitState:function(e){var i=this.$el.find(".button");this.enabled=e,e?(i.removeClass("link-button-disabled"),i.prop("value",t.loc("oktaverify.send","login")),i.prop("disabled",!1)):(i.addClass("link-button-disabled"),i.prop("value",t.loc("oktaverify.sent","login")),i.prop("disabled",!0))},submit:function(t){void 0!==t&&t.preventDefault(),this.enabled&&(this.setSubmitState(!1),this.doSave())},postRender:function(){this.settings.get("features.autoPush")&&e.isAutoPushEnabled(this.options.appState.get("userId"))&&(this.model.set("autoPush",!0),n.defer(n.bind(this.submit,this)))},doSave:function(){var e;this.clearErrors(),this.clearWarnings(),this.model.isValid()&&(this.listenToOnce(this.model,"error",function(){this.setSubmitState(!0),this.clearWarnings(),clearTimeout(e)}),this.trigger("save",this.model),e=i.callAfterTimeout(n.bind(function(){this.showWarning(t.loc("oktaverify.warning","login"))},this),s))},showError:function(t){this.clearWarnings(),this.model.trigger("error",this.model,{responseJSON:{errorSummary:t}})},showWarning:function(t){this.clearWarnings(),this.add(o,".o-form-error-container",{options:{warning:t}})},clearWarnings:function(){this.$(".okta-form-infobox-warning").remove()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(306)],r=function(t,e){function i(i){i.addDivider(),i.addInput({label:!1,"label-top":!0,placeholder:t.loc("mfa.challenge.enterCode.placeholder","login"),className:"o-form-fieldset o-form-label-top inline-input auth-passcode",name:"answer",input:e,type:"text"}),i.add(t.createButton({attributes:{"data-se":"inline-totp-verify"},className:"button inline-totp-verify",title:t.loc("mfa.challenge.verify","login"),click:function(){i.model.manageTransaction(function(t,e){return"MFA_CHALLENGE"===t.status&&t.prev?t.prev().then(function(t){e(t),i.model.save()}):void i.model.save()})}})),i.at(1).focus()}return t.Form.extend({autoSave:!0,noButtonBar:!0,scrollOnError:!1,layout:"o-form-theme",className:"mfa-verify-totp-inline",attributes:{"data-se":"factor-inline-totp"},initialize:function(){var e=this;this.listenTo(this.model,"error",function(){this.clearErrors()}),this.add(t.createButton({className:"link",attributes:{"data-se":"inline-totp-add"},title:t.loc("mfa.challenge.orEnterCode","login"),click:function(){this.remove(),i(e)}}))}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295),i(296),i(333),i(334),i(320),i(335)],r=function(t,e,i,n,r,s,o){var a=t._;return e.extend({className:"mfa-verify verify-windows-hello",Model:{local:{__autoTriggered__:"boolean"},save:function(){if(n.isAvailable()){this.trigger("request");var t=this;return this.doTransaction(function(e){var i=a.findWhere(e.factors,{factorType:"webauthn",provider:"FIDO"});return i.verify().then(function(r){var s=r.factor;return n.getAssertion(s.challenge.nonce,[{id:s.profile.credentialId}]).then(function(t){return i.verify({authenticatorData:t.authenticatorData,clientData:t.clientData,signatureData:t.signature})}).then(function(e){return t.trigger("sync"),t.trigger("signIn"),e}).fail(function(i){switch(i.message){case"AbortError":case"NotFoundError":case"NotSupportedError":return t.trigger("abort",i.message),e}throw i})})})}}},Form:{autoSave:!0,hasSavingState:!1,title:a.partial(t.loc,"factor.windowsHello","login"),subtitle:function(){return n.isAvailable()?t.loc("verify.windowsHello.subtitle","login"):""},save:a.partial(t.loc,"verify.windowsHello.save","login"),customSavingState:{stop:"abort"},modelEvents:function(){return n.isAvailable()?{request:"_startEnrollment",error:"_stopEnrollment",abort:"_stopEnrollment",signIn:"_successEnrollment"}:{}},noButtonBar:function(){return!n.isAvailable()},formChildren:function(){var e=[];return n.isAvailable()||e.push(i.View({View:new o({message:t.loc("enroll.windowsHello.error.notWindows","login")})},{selector:".o-form-error-container"})),e.push(i.View({View:new r({model:this.model,visible:!1})})),e},postRender:function(){1!==this.options.appState.get("factors").length||this.model.get("__autoTriggered__")||(this.model.set("__autoTriggered__",!0),this.model.save())},_startEnrollment:function(){this.subtitle=t.loc("verify.windowsHello.subtitle.loading","login"),this.model.trigger("spinner:show"),this._resetErrorMessage(),this.render(),this.$(".o-form-button-bar").addClass("hide")},_stopEnrollment:function(e){this.subtitle=t.loc("verify.windowsHello.subtitle","login"),this.model.trigger("spinner:hide"),this.$(".o-form-button-bar").removeClass("hide");var i;switch(e){case"NotFoundError":i=this.options.appState.get("factors").length>1?t.loc("verify.windowsHello.error.notFound.selectAnother","login"):t.loc("verify.windowsHello.error.notFound","login");break;case"NotSupportedError":i=t.loc("enroll.windowsHello.error.notConfiguredHtml","login")}if(this._resetErrorMessage(),i){var n=new o({message:i});this.$(".o-form-error-container").addClass("o-form-has-errors"),this.add(n,{selector:".o-form-error-container"}),this._errorMessageView=this.last()}this.render()},_successEnrollment:function(){this.subtitle=t.loc("verify.windowsHello.subtitle.signingIn","login"),this.render(),this.$(".o-form-button-bar").addClass("hide")},_resetErrorMessage:function(){this._errorMessageView&&this._errorMessageView.remove(),this._errorMessageView=void 0,this.clearErrors()}},back:function(){},Footer:s})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(21)],r=function(t,e){function i(t){return new e(t)}function n(t,e,n){e=e.map(function(t){return{type:"FIDO_2_0",algorithm:t.algorithm}});var r=window.msCredentials.makeCredential(t,e,n).then(function(t){return Object.freeze({credential:{id:t.id},publicKey:JSON.parse(t.publicKey),attestation:t.attestation})});return i(r)}function r(t,e){var n=e.map(function(t){return{type:"FIDO_2_0",id:t.id}}),r={accept:n},s=window.msCredentials.getAssertion(t,r).then(function(t){var e=t.signature;return Object.freeze({credential:{id:t.id},clientData:e.clientData,authenticatorData:e.authnrData,signature:e.signature})});return i(s)}return{makeCredential:n,getAssertion:r,isAvailable:function(){return window.hasOwnProperty("msCredentials")}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32)],r=function(t){return t.View.extend({className:"okta-waiting-spinner",attributes:{"data-se":"o-form-okta-waiting-spinner"},modelEvents:{"spinner:show":"show","spinner:hide":"hide"},initialize:function(t){t&&t.visible===!1&&this.hide()},show:function(){this.$el.removeClass("hide")},hide:function(){this.$el.addClass("hide")}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(146)],r=function(t,e){var i='\t    <span class="icon error-24"></span>\t    <h4><strong>{{{message}}}</strong></h4>\t  ';return e.extend({template:i,className:"okta-infobox-error infobox infobox-error infobox-md margin-btm-25",attributes:{"data-se":"o-form-error-html"},message:"",initialize:function(t){t&&t.message&&(this.message=t.message)},getTemplateData:function(){return{message:this.message}}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295),i(296),i(320),i(21),i(335),i(182),i(337)],r=function(t,e,i,n,r,s,o){function a(t,e){switch(t){case 1:return e?"u2f.error.other.oneFactor":"u2f.error.other";case 2:case 3:return e?"u2f.error.badRequest.oneFactor":"u2f.error.badRequest";case 4:return e?"u2f.error.unsupported.oneFactor":"u2f.error.unsupported";case 5:return"u2f.error.timeout"}}var l=t._;return e.extend({className:"verify-u2f",Model:{save:function(){return this.trigger("request"),this.doTransaction(function(e){var i=l.findWhere(e.factors,{factorType:"u2f",provider:"FIDO"}),n=this;return i.verify().then(function(e){var s=e.factor,o=s.profile.appId,l=[{version:s.profile.version,keyHandle:s.profile.credentialId}];n.trigger("request");var c=r.defer();return u2f.sign(o,s.challenge.nonce,l,function(e){if(n.trigger("errors:clear"),!e.errorCode||0===e.errorCode)return i.verify({clientData:e.clientData,signatureData:e.signatureData}).then(c.resolve);var r=1===n.options.appState.get("factors").length;c.reject({xhr:{responseJSON:{errorSummary:t.loc(a(e.errorCode,r),"login")}}})}),c.promise})})}},Form:{autoSave:!0,hasSavingState:!1,title:l.partial(t.loc,"factor.u2f","login"),className:"verify-u2f-form",noCancelButton:!0,save:l.partial(t.loc,"verify.u2f.retry","login"),noButtonBar:function(){return!window.hasOwnProperty("u2f")},modelEvents:{request:"_startEnrollment",error:"_stopEnrollment"},formChildren:function(){var e=[];if(window.hasOwnProperty("u2f"))e.push(i.View({View:'\t            <div class="u2f-verify-text">\t              <p>{{i18n code="verify.u2f.instructions" bundle="login"}}</p>\t              <p>{{i18n code="verify.u2f.instructionsBluetooth" bundle="login"}}</p>\t              <div data-se="u2f-waiting" class="okta-waiting-spinner"></div>\t            </div>'}));else{var n="u2f.error.notSupportedBrowser";o.isFirefox()?n="u2f.error.noFirefoxExtension":1===this.options.appState.get("factors").length&&(n="u2f.error.notSupportedBrowser.oneFactor"),e.push(i.View({View:new s({message:t.loc(n,"login")})},{selector:".o-form-error-container"}))}return e},postRender:function(){l.defer(l.bind(function(){window.hasOwnProperty("u2f")?this.model.save():this.$('[data-se="u2f-waiting"]').addClass("hide")},this))},_startEnrollment:function(){this.$(".okta-waiting-spinner").removeClass("hide"),this.$(".o-form-button-bar").hide()},_stopEnrollment:function(){this.$(".okta-waiting-spinner").addClass("hide"),this.$(".o-form-button-bar").show()}},back:function(){},Footer:n})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e){
	//Copyright 2014-2015 Google Inc. All rights reserved.
	//license that can be found in the LICENSE file or at
	//https://developers.google.com/open-source/licenses/bsd
	"use strict";!function(){if(!("u2f"in window)&&"chrome"in window){var t,e=window.u2f={};e.EXTENSION_ID="kmendfapggjehodndflmmgagdbamhnfd",e.MessageTypes={U2F_REGISTER_REQUEST:"u2f_register_request",U2F_REGISTER_RESPONSE:"u2f_register_response",U2F_SIGN_REQUEST:"u2f_sign_request",U2F_SIGN_RESPONSE:"u2f_sign_response",U2F_GET_API_VERSION_REQUEST:"u2f_get_api_version_request",U2F_GET_API_VERSION_RESPONSE:"u2f_get_api_version_response"},e.ErrorCodes={OK:0,OTHER_ERROR:1,BAD_REQUEST:2,CONFIGURATION_UNSUPPORTED:3,DEVICE_INELIGIBLE:4,TIMEOUT:5},e.U2fRequest,e.U2fResponse,e.Error,e.Transport,e.Transports,e.SignRequest,e.SignResponse,e.RegisterRequest,e.RegisterResponse,e.RegisteredKey,e.GetJsApiVersionResponse,e.getMessagePort=function(t){if("undefined"!=typeof chrome&&chrome.runtime){var i={type:e.MessageTypes.U2F_SIGN_REQUEST,signRequests:[]};chrome.runtime.sendMessage(e.EXTENSION_ID,i,function(){chrome.runtime.lastError?e.getIframePort_(t):e.getChromeRuntimePort_(t)})}else e.isAndroidChrome_()?e.getAuthenticatorPort_(t):e.isIosChrome_()?e.getIosPort_(t):e.getIframePort_(t)},e.isAndroidChrome_=function(){var t=navigator.userAgent;return t.indexOf("Chrome")!=-1&&t.indexOf("Android")!=-1},e.isIosChrome_=function(){return $.inArray(navigator.platform,["iPhone","iPad","iPod"])>-1},e.getChromeRuntimePort_=function(t){var i=chrome.runtime.connect(e.EXTENSION_ID,{includeTlsChannelId:!0});setTimeout(function(){t(new e.WrappedChromeRuntimePort_(i))},0)},e.getAuthenticatorPort_=function(t){setTimeout(function(){t(new e.WrappedAuthenticatorPort_)},0)},e.getIosPort_=function(t){setTimeout(function(){t(new e.WrappedIosPort_)},0)},e.WrappedChromeRuntimePort_=function(t){this.port_=t},e.formatSignRequest_=function(i,n,r,s,o){if(void 0===t||t<1.1){for(var a=[],l=0;l<r.length;l++)a[l]={version:r[l].version,challenge:n,keyHandle:r[l].keyHandle,appId:i};return{type:e.MessageTypes.U2F_SIGN_REQUEST,signRequests:a,timeoutSeconds:s,requestId:o}}return{type:e.MessageTypes.U2F_SIGN_REQUEST,appId:i,challenge:n,registeredKeys:r,timeoutSeconds:s,requestId:o}},e.formatRegisterRequest_=function(i,n,r,s,o){if(void 0===t||t<1.1){for(var a=0;a<r.length;a++)r[a].appId=i;for(var l=[],a=0;a<n.length;a++)l[a]={version:n[a].version,challenge:r[0],keyHandle:n[a].keyHandle,appId:i};return{type:e.MessageTypes.U2F_REGISTER_REQUEST,signRequests:l,registerRequests:r,timeoutSeconds:s,requestId:o}}return{type:e.MessageTypes.U2F_REGISTER_REQUEST,appId:i,registerRequests:r,registeredKeys:n,timeoutSeconds:s,requestId:o}},e.WrappedChromeRuntimePort_.prototype.postMessage=function(t){this.port_.postMessage(t)},e.WrappedChromeRuntimePort_.prototype.addEventListener=function(t,e){var i=t.toLowerCase();"message"==i||"onmessage"==i?this.port_.onMessage.addListener(function(t){e({data:t})}):console.error("WrappedChromeRuntimePort only supports onMessage")},e.WrappedAuthenticatorPort_=function(){this.requestId_=-1,this.requestObject_=null},e.WrappedAuthenticatorPort_.prototype.postMessage=function(t){var i=e.WrappedAuthenticatorPort_.INTENT_URL_BASE_+";S.request="+encodeURIComponent(JSON.stringify(t))+";end";document.location=i},e.WrappedAuthenticatorPort_.prototype.getPortType=function(){return"WrappedAuthenticatorPort_"},e.WrappedAuthenticatorPort_.prototype.addEventListener=function(t,e){var i=t.toLowerCase();if("message"==i){var n=this;window.addEventListener("message",n.onRequestUpdate_.bind(n,e),!1)}else console.error("WrappedAuthenticatorPort only supports message")},e.WrappedAuthenticatorPort_.prototype.onRequestUpdate_=function(t,e){var i=JSON.parse(e.data),n=(i.intentURL,i.errorCode,null);i.hasOwnProperty("data")&&(n=JSON.parse(i.data)),t({data:n})},e.WrappedAuthenticatorPort_.INTENT_URL_BASE_="intent:#Intent;action=com.google.android.apps.authenticator.AUTHENTICATE",e.WrappedIosPort_=function(){},e.WrappedIosPort_.prototype.postMessage=function(t){var e=JSON.stringify(t),i="u2f://auth?"+encodeURI(e);location.replace(i)},e.WrappedIosPort_.prototype.getPortType=function(){return"WrappedIosPort_"},e.WrappedIosPort_.prototype.addEventListener=function(t,e){var i=t.toLowerCase();"message"!==i&&console.error("WrappedIosPort only supports message")},e.getIframePort_=function(t){var i="chrome-extension://"+e.EXTENSION_ID,n=document.createElement("iframe");n.src=i+"/u2f-comms.html",n.setAttribute("style","display:none"),document.body.appendChild(n);var r=new MessageChannel,s=function(e){"ready"==e.data?(r.port1.removeEventListener("message",s),t(r.port1)):console.error('First event on iframe port was not "ready"')};r.port1.addEventListener("message",s),r.port1.start(),n.addEventListener("load",function(){n.contentWindow.postMessage("init",i,[r.port2])})},e.EXTENSION_TIMEOUT_SEC=30,e.port_=null,e.waitingForPort_=[],e.reqCounter_=0,e.callbackMap_={},e.getPortSingleton_=function(t){e.port_?t(e.port_):(0==e.waitingForPort_.length&&e.getMessagePort(function(t){for(e.port_=t,e.port_.addEventListener("message",e.responseHandler_);e.waitingForPort_.length;)e.waitingForPort_.shift()(e.port_)}),e.waitingForPort_.push(t))},e.responseHandler_=function(t){var i=t.data,n=i.requestId;if(!n||!e.callbackMap_[n])return void console.error("Unknown or missing requestId in response.");var r=e.callbackMap_[n];delete e.callbackMap_[n],r(i.responseData)},e.sign=function(i,n,r,s,o){void 0===t?e.getApiVersion(function(a){t=void 0===a.js_api_version?0:a.js_api_version,console.log("Extension JS API Version: ",t),e.sendSignRequest(i,n,r,s,o)}):e.sendSignRequest(i,n,r,s,o)},e.sendSignRequest=function(t,i,n,r,s){e.getPortSingleton_(function(o){var a=++e.reqCounter_;e.callbackMap_[a]=r;var l="undefined"!=typeof s?s:e.EXTENSION_TIMEOUT_SEC,c=e.formatSignRequest_(t,i,n,l,a);o.postMessage(c)})},e.register=function(i,n,r,s,o){void 0===t?e.getApiVersion(function(a){t=void 0===a.js_api_version?0:a.js_api_version,console.log("Extension JS API Version: ",t),e.sendRegisterRequest(i,n,r,s,o)}):e.sendRegisterRequest(i,n,r,s,o)},e.sendRegisterRequest=function(t,i,n,r,s){e.getPortSingleton_(function(o){var a=++e.reqCounter_;e.callbackMap_[a]=r;var l="undefined"!=typeof s?s:e.EXTENSION_TIMEOUT_SEC,c=e.formatRegisterRequest_(t,n,i,l,a);o.postMessage(c)})},e.getApiVersion=function(t,i){e.getPortSingleton_(function(n){if(n.getPortType){var r;switch(n.getPortType()){case"WrappedIosPort_":case"WrappedAuthenticatorPort_":r=1.1;break;default:r=0}return void t({js_api_version:r})}var s=++e.reqCounter_;e.callbackMap_[s]=t;var o={type:e.MessageTypes.U2F_GET_API_VERSION_REQUEST,timeoutSeconds:"undefined"!=typeof i?i:e.EXTENSION_TIMEOUT_SEC,requestId:s};n.postMessage(o)})}}}()},function(t,e,i){var n,r;n=[i(32),i(295),i(301),i(299),i(236),i(339),i(340)],r=function(t,e,i,n,r,s,o){var a=t._;return e.extend({className:"enroll-choices",state:{pageType:null},Model:{},Form:{noCancelButton:!0,title:a.partial(t.loc,"enroll.choices.title","login"),noButtonBar:function(){return this.state.get("pageType")===i.ALL_OPTIONAL_NONE_ENROLLED},subtitle:function(){switch(this.state.get("pageType")){case i.ALL_OPTIONAL_SOME_ENROLLED:case i.HAS_REQUIRED_ALL_REQUIRED_ENROLLED:return t.loc("enroll.choices.optional","login");default:return t.loc("enroll.choices.description","login")}},save:function(){switch(this.state.get("pageType")){case i.ALL_OPTIONAL_SOME_ENROLLED:case i.HAS_REQUIRED_ALL_REQUIRED_ENROLLED:return t.loc("enroll.choices.submit.finish","login");case i.HAS_REQUIRED_NONE_ENROLLED:return t.loc("enroll.choices.submit.configure","login");case i.HAS_REQUIRED_SOME_REQUIRED_ENROLLED:return t.loc("enroll.choices.submit.next","login");default:return""}},initialize:function(t){this.listenTo(this,"save",function(){var e;switch(this.state.get("pageType")){case i.HAS_REQUIRED_NONE_ENROLLED:case i.HAS_REQUIRED_SOME_REQUIRED_ENROLLED:e=t.appState.get("factors").getFirstUnenrolledRequiredFactor(),t.appState.trigger("navigate",n.createEnrollFactorUrl(e.get("provider"),e.get("factorType")));break;default:return this.model.doTransaction(function(t){return t.skip()})}})},preRender:function(){var e=this.options.appState.get("factors");switch(this.state.get("pageType")){case i.HAS_REQUIRED_NONE_ENROLLED:case i.HAS_REQUIRED_SOME_REQUIRED_ENROLLED:this.add(new o({minimize:!0,collection:new t.Collection(e.where({required:!0})),appState:this.options.appState}));break;case i.HAS_REQUIRED_ALL_REQUIRED_ENROLLED:case i.ALL_OPTIONAL_SOME_ENROLLED:case i.ALL_OPTIONAL_NONE_ENROLLED:var n,r=e.where({enrolled:!0}),a=e.where({enrolled:!1});r.length>0&&(n=t.loc("enroll.choices.list.optional","login"),this.add(new s({listTitle:t.loc("enroll.choices.list.enrolled","login"),minimize:!0,collection:new t.Collection(r),appState:this.options.appState}))),this.add(new s({listTitle:n,collection:new t.Collection(a),appState:this.options.appState}))}}},initialize:function(t){var e,n,r=0,s=0,o=0,a=0;t.appState.get("factors").each(function(t){var e=t.get("required"),i=t.get("enrolled");e&&i?r++:e&&!i?s++:!e&&i?o++:e||i||a++}),e=r>0||s>0,e&&0===r?n=i.HAS_REQUIRED_NONE_ENROLLED:e&&s>0?n=i.HAS_REQUIRED_SOME_REQUIRED_ENROLLED:e&&a>0?n=i.HAS_REQUIRED_ALL_REQUIRED_ENROLLED:0===o&&a>0?n=i.ALL_OPTIONAL_NONE_ENROLLED:a>0?n=i.ALL_OPTIONAL_SOME_ENROLLED:this.model.doTransaction(function(t){return t.skip()}),this.state.set("pageType",n)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(299)],r=function(t,e){var i=t._,n=t.View.extend({className:"enroll-factor-row clearfix",template:'\t      <div class="enroll-factor-icon-container">\t        <div class="factor-icon enroll-factor-icon {{iconClassName}}">\t        </div>\t      </div>\t      <div class="enroll-factor-description">\t        <h3 class="enroll-factor-label">{{factorLabel}}</h3>\t        {{#if factorDescription}}\t          <p>{{factorDescription}}</p>\t        {{/if}}\t        <div class="enroll-factor-button"></div>\t      </div>\t    ',attributes:function(){return{"data-se":this.model.get("factorName")}},children:function(){return this.model.get("enrolled")?[['<span class="icon success-16-green"></span>',".enroll-factor-label"]]:"REQUIRED"===this.model.get("enrollment")?[['<span class="icon success-16-gray"></span>',".enroll-factor-label"]]:[[t.createButton({className:"button",title:t.loc("enroll.choices.setup","login"),click:function(){this.options.appState.trigger("navigate",e.createEnrollFactorUrl(this.model.get("provider"),this.model.get("factorType")))}}),".enroll-factor-button"]]},minimize:function(){this.$el.addClass("enroll-factor-row-min")},maximize:function(){this.$el.removeClass("enroll-factor-row-min")}});return t.ListView.extend({className:"enroll-factor-list",item:n,itemSelector:".list-content",template:'\t      {{#if listSubtitle}}\t        <div class="list-subtitle">{{listSubtitle}}</div>\t      {{/if}}\t      {{#if listTitle}}\t        <div class="list-title">{{listTitle}}</div>\t      {{/if}}\t      <div class="list-content"></div>\t    ',getTemplateData:function(){var e=t.ListView.prototype.getTemplateData.call(this);return i.extend(e,this),e},postRender:function(){this.options.minimize&&this.invoke("minimize")}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(339)],r=function(t,e){var i=t._;return e.extend({listTitle:i.partial(t.loc,"enroll.choices.list.setup","login"),className:function(){return e.prototype.className+" enroll-required-factor-list"},initialize:function(){var e=this.collection.length,i=this.collection.where({enrolled:!0}).length,n=i+1;this.listSubtitle=t.loc("enroll.choices.step","login",[n,e])},postRender:function(){var t,i;e.prototype.postRender.apply(this,arguments),t=this.options.appState.get("factors").getFirstUnenrolledRequiredFactor(),i=this.find(function(e){return e.model===t}),i.maximize()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(319),i(21),i(295),i(342)],r=function(t,e,i,n,r){var s=t.$,o=t._;return n.extend({className:"enroll-duo duo-form",Model:{props:{host:"string",signature:"string",postAction:"string",factorId:"string",stateToken:"string"},getInitOptions:function(){return this.doTransaction(function(t){var e=o.findWhere(t.factors,{factorType:"web",provider:"DUO"});return e.enroll()})},activate:function(t){var e=this.get("postAction"),n=this.get("factorId"),r=this,o={id:n,stateToken:this.get("stateToken"),sig_response:t};return i(s.post(e,o)).then(function(){return r.doTransaction(function(t){return t.poll()})}).fail(function(t){r.trigger("error",r,t.xhr)})}},Form:{autoSave:!0,noButtonBar:!0,title:o.partial(t.loc,"enroll.duo.title","login"),postRender:function(){this.add('<iframe frameborder="0" title="'+this.title()+'"></iframe>'),e.init({host:this.model.get("host"),sig_request:this.model.get("signature"),iframe:this.$("iframe").get(0),post_action:o.bind(this.model.activate,this.model)})}},Footer:r,fetchInitialData:function(){var t=this;return this.model.getInitOptions(this.options.appState).then(function(e){var i=e.data;if(!(i&&i._embedded&&i._embedded.factor&&i._embedded.factor._embedded&&i._embedded.factor._embedded.activation))throw new Error("Response does not have duo activation options");var n=i._embedded.factor,r=n._embedded.activation;t.model.set({host:r.host,signature:r.signature,postAction:r._links.complete.href,factorId:n.id,stateToken:i.stateToken})})},trapAuthResponse:function(){if(this.options.appState.get("isMfaEnrollActivate"))return!0}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(301)],r=function(t,e){return t.View.extend({template:'\t      <a href="#" class="link help js-back" data-se="back-link">\t        {{i18n code="mfa.backToFactors" bundle="login"}}\t      </a>\t    ',className:"auth-footer",events:{"click .js-back":function(t){t.preventDefault(),this.back()}},back:function(){this.state.set("navigateDir",e.DIRECTION_BACK),this.options.appState.get("prevLink")?this.model.doTransaction(function(t){return t.prev()}):this.options.appState.trigger("navigate","signin/enroll")}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295),i(294),i(342),i(306)],r=function(t,e,i,n,r){var s=t._;return e.extend({className:"enroll-question",Model:{props:{question:"string",answer:["string",!0]},local:{securityQuestions:"object"},save:function(){return this.doTransaction(function(t){var e=s.findWhere(t.factors,{factorType:"question",provider:"OKTA"});return e.enroll({profile:{question:this.get("question"),answer:this.get("answer")}})})}},Form:{autoSave:!0,title:s.partial(t.loc,"enroll.securityQuestion.setup","login"),inputs:function(){return[{label:!1,"label-top":!0,name:"question",type:"select",wide:!0,options:function(){return this.model.get("securityQuestions")},params:{searchThreshold:25}},{label:!1,"label-top":!0,placeholder:t.loc("mfa.challenge.answer.placeholder","login"),className:"o-form-fieldset o-form-label-top auth-passcode",name:"answer",input:r,type:"text",params:{innerTooltip:t.loc("mfa.challenge.answer.tooltip","login")}}]}},Footer:n,fetchInitialData:function(){var t=this;return this.model.manageTransaction(function(t){var e=s.findWhere(t.factors,{factorType:"question",provider:"OKTA"});return e.questions()}).then(function(e){var n={};s.each(e,function(t){n[t.question]=i.getSecurityQuestionLabel(t)}),t.model.set("securityQuestions",n)})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295),i(296),i(333),i(334),i(342),i(335)],r=function(t,e,i,n,r,s,o){var a=t._;return e.extend({className:"enroll-windows-hello",Model:{local:{__isEnrolled__:"boolean"},save:function(){if(n.isAvailable())return this.trigger("request"),this.get("__isEnrolled__")?this.activate():this.doTransaction(function(t){return this._enroll(t)})},_enroll:function(t){var e=a.findWhere(t.factors,{factorType:"webauthn",provider:"FIDO"});return e.enroll()},activate:function(){return this.set("__isEnrolled__",!0),this.doTransaction(function(t){var e=t.factor.activation,i=t.user,r=this,s={rpDisplayName:e.rpDisplayName,userDisplayName:i.profile.displayName,accountName:i.profile.login,userId:i.id},o=[{algorithm:e.algorithm}],a=e.nonce;return n.makeCredential(s,o,a).then(function(e){return t.activate({credentialId:e.credential.id,publicKey:e.publicKey,attestation:null})}).fail(function(e){switch(e.message){case"AbortError":case"NotFoundError":case"NotSupportedError":return r.trigger("abort",e.message),t}throw e})})}},Form:{autoSave:!0,hasSavingState:!1,title:a.partial(t.loc,"enroll.windowsHello.title","login"),subtitle:function(){return n.isAvailable()?t.loc("enroll.windowsHello.subtitle","login"):""},save:a.partial(t.loc,"enroll.windowsHello.save","login"),customSavingState:{stop:"abort"},modelEvents:function(){return n.isAvailable()?{request:"_startEnrollment",error:"_stopEnrollment",abort:"_stopEnrollment"}:{}},noButtonBar:function(){return!n.isAvailable()},formChildren:function(){var e=[];return n.isAvailable()||e.push(i.View({View:new o({message:t.loc("enroll.windowsHello.error.notWindows","login")})},{selector:".o-form-error-container"})),e.push(i.View({View:new r({model:this.model,visible:!1})})),e},_startEnrollment:function(){this.subtitle=t.loc("enroll.windowsHello.subtitle.loading","login"),this.model.trigger("spinner:show"),this._resetErrorMessage(),this.render(),this.$(".o-form-button-bar").addClass("hide")},_stopEnrollment:function(e){this.subtitle=t.loc("enroll.windowsHello.subtitle","login"),this.model.trigger("spinner:hide"),this.$(".o-form-button-bar").removeClass("hide");var i;switch(e){case"NotSupportedError":i=t.loc("enroll.windowsHello.error.notConfiguredHtml","login")}if(this._resetErrorMessage(),i){var n=new o({message:i});this.$(".o-form-error-container").addClass("o-form-has-errors"),this.add(n,{selector:".o-form-error-container"}),this._errorMessageView=this.last()}this.render()},_resetErrorMessage:function(){this._errorMessageView&&this._errorMessageView.remove(),this._errorMessageView=void 0,this.clearErrors()}},Footer:s,trapAuthResponse:function(){if(this.options.appState.get("isMfaEnrollActivate"))return this.model.activate(),!0}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295),i(342),i(305),i(306),i(292),i(296),i(173)],r=function(t,e,i,n,r,s,o,a){function l(t){return"call"===t}function c(t){return l(t)?"enroll-call":"enroll-sms"}function u(t){a.isEnter(t)&&(t.stopPropagation(),t.preventDefault(),"keyup"===t.type&&t.data&&t.data.model&&t.data.model.sendCode())}var d=t._,h=3e4,p={factorId:function(t){return!d.isUndefined(t)}};return e.extend({className:function(){return c(this.options.factorType)},Model:{props:{countryCode:["string",!0,"US"],phoneNumber:["string",!0],phoneExtension:["string",!1],lastEnrolledPhoneNumber:"string",passCode:["string",!0],factorId:"string"},local:{hasExistingPhones:"boolean",trapEnrollment:"boolean",ableToResend:"boolean",factorType:"string",skipPhoneValidation:"boolean"},derived:{countryCallingCode:{deps:["countryCode"],fn:function(t){return"+"+s.getCallingCodeForCountry(t)}},fullPhoneNumber:{deps:["countryCallingCode","phoneNumber"],fn:function(t,e){return e?t+e:""}},enrolled:{deps:["lastEnrolledPhoneNumber","fullPhoneNumber"],fn:function(t,e){return t===e}}},limitResending:function(){this.set({ableToResend:!1}),d.delay(d.bind(this.set,this),h,{ableToResend:!0})},sendCode:function(){var e=this,i=this.get("fullPhoneNumber"),n=this.get("phoneExtension");return e.trigger("errors:clear"),i.length?this.doTransaction(function(r){var s="MFA_ENROLL"===r.status,o={phoneNumber:i,updatePhone:!s||e.get("hasExistingPhones")};l(e.get("factorType"))&&(o.phoneExtension=n),e.get("skipPhoneValidation")&&(o.validatePhone=!1);var a=function(i){var n=d.findWhere(i.factors,{factorType:e.get("factorType"),provider:"OKTA"});return n.enroll({profile:o}).fail(function(i){throw"E0000098"===i.errorCode&&(e.set("skipPhoneValidation",!0),i.xhr.responseJSON.errorSummary=t.loc("enroll.sms.try_again","login")),i})};return s?a(r):(e.set("trapEnrollment",!0),r.prev().then(a).then(function(t){return e.set("trapEnrollment",!1),t}))},!0).then(function(){e.set("lastEnrolledPhoneNumber",i),e.limitResending()}).fail(function(){e.set("ableToResend",!0),e.set("trapEnrollment",!1)}):void e.trigger("invalid",e,{phoneNumber:"model.validation.field.blank"})},resendCode:function(){return this.trigger("errors:clear"),this.limitResending(),this.doTransaction(function(t){return t.resend(this.get("factorType"))})},save:function(){return this.doTransaction(function(t){return t.activate({passCode:this.get("passCode")})})}},Form:function(){var e=this.options.factorType,i=l(e),a=t.loc(i?"enroll.call.setup":"enroll.sms.setup","login"),d=t.loc(i?"mfa.call":"mfa.sendCode","login"),h=t.loc(i?"mfa.redial":"mfa.resendCode","login"),f=t.loc(i?"mfa.calling":"mfa.sent","login"),m=i?"enroll-call-phone":"enroll-sms-phone",_=i?"call-request-button":"sms-request-button",g=[o.Input({name:"countryCode",type:"select",wide:!0,options:s.getCountries()}),o.Input({placeholder:t.loc("mfa.phoneNumber.placeholder","login"),className:m,name:"phoneNumber",input:n,type:"text",render:function(){this.$('input[name="phoneNumber"]').off("keydown keyup",u).keydown(u).keyup({model:this.model},u)}})];return i&&g.push(o.Input({placeholder:t.loc("mfa.phoneNumber.ext.placeholder","login"),className:"enroll-call-extension",name:"phoneExtension",input:r,type:"text"})),g.push(o.Button({title:d,attributes:{"data-se":_},className:"button button-primary js-enroll-phone "+_,click:function(){this.model.sendCode()}}),o.Button({title:h,attributes:{"data-se":_},className:"button js-enroll-phone "+_,click:function(){this.model.resendCode()},initialize:function(){this.$el.css({display:"none"}),this.listenTo(this.model,"change:ableToResend",function(t,e){e?(this.options.title=h,this.enable()):(this.options.title=f,this.disable()),this.render()})}}),o.Divider({showWhen:p}),o.Input({placeholder:t.loc("mfa.challenge.enterCode.placeholder","login"),name:"passCode",input:r,type:"number",params:{innerTooltip:t.loc("mfa.challenge.enterCode.tooltip","login")},showWhen:p}),o.Toolbar({noCancelButton:!0,save:t.loc("mfa.challenge.verify","login"),showWhen:p})),{title:a,noButtonBar:!0,autoSave:!0,className:c(e),initialize:function(){this.listenTo(this.model,"error errors:clear",function(){this.clearErrors()}),this.listenTo(this.model,"change:enrolled",function(){this.$(".js-enroll-phone").toggle()})},formChildren:g}},Footer:i,trapAuthResponse:function(){return this.options.appState.get("isMfaEnrollActivate")?(this.model.set("factorId",this.options.appState.get("activatedFactorId")),!0):!(!this.options.appState.get("isMfaEnroll")||!this.model.get("trapEnrollment"))||void 0},initialize:function(){l(this.options.factorType)?this.model.set("hasExistingPhones",this.options.appState.get("hasExistingPhonesForCall")):this.model.set("hasExistingPhones",this.options.appState.get("hasExistingPhones")),this.model.set("factorType",this.options.factorType)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(296),i(295),i(342),i(306)],r=function(t,e,i,n,r){function s(t){return"RSA"===t}function o(t){return s(t)?"enroll-rsa":"enroll-onprem"}var a=t._;return i.extend({className:function(){return o(this.options.provider)},Model:function(){var t=this.options.provider,e=this.options.appState.get("factors"),i=e.findWhere(a.pick(this.options,"provider","factorType")),n=i.get("profile"),r=n&&n.credentialId?n.credentialId:"";return{props:{credentialId:["string",!0,r],passCode:["string",!0],factorId:"string"},save:function(){return this.doTransaction(function(e){var i=a.findWhere(e.factors,{factorType:"token",provider:t});return i.enroll({passCode:this.get("passCode"),profile:{credentialId:this.get("credentialId")}})})}}},Form:function(){var i=this.options.provider,n=this.options.appState.get("factors"),l=n.findWhere(a.pick(this.options,"provider","factorType")),c=l.get("vendorName"),u=s(i)?t.loc("factor.totpHard.rsaSecurId","login"):c;return{title:u,noButtonBar:!0,autoSave:!0,className:o(i),formChildren:[e.Input({name:"credentialId",input:r,type:"text",placeholder:t.loc("enroll.onprem.username.placeholder","login",[c]),params:{innerTooltip:t.loc("enroll.onprem.username.tooltip","login",[c])}}),e.Input({name:"passCode",input:r,type:"password",placeholder:t.loc("enroll.onprem.passcode.placeholder","login",[c]),params:{innerTooltip:t.loc("enroll.onprem.passcode.tooltip","login",[c])}}),e.Toolbar({noCancelButton:!0,save:t.loc("mfa.challenge.verify","login")})]}},Footer:n})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(296),i(295),i(342),i(306)],r=function(t,e,i,n,r){var s=t._;return i.extend({className:"enroll-symantec",Model:{props:{credentialId:["string",!0],passCode:["string",!0],nextPassCode:["string",!0],factorId:"string"},save:function(){return this.doTransaction(function(t){var e=s.findWhere(t.factors,{factorType:"token",provider:"SYMANTEC"});return e.enroll({passCode:this.get("passCode"),nextPassCode:this.get("nextPassCode"),profile:{credentialId:this.get("credentialId")}})})}},Form:{title:s.partial(t.loc,"factor.totpHard.symantecVip","login"),subtitle:s.partial(t.loc,"enroll.symantecVip.subtitle","login"),noButtonBar:!0,autoSave:!0,className:"enroll-symantec",formChildren:function(){return[e.Input({name:"credentialId",input:r,type:"text",placeholder:t.loc("enroll.symantecVip.credentialId.placeholder","login"),params:{innerTooltip:t.loc("enroll.symantecVip.credentialId.tooltip","login")}}),e.Input({name:"passCode",input:r,type:"text",placeholder:t.loc("enroll.symantecVip.passcode1.placeholder","login"),params:{innerTooltip:t.loc("enroll.symantecVip.passcode1.tooltip","login")}}),e.Input({name:"nextPassCode",input:r,type:"text",placeholder:t.loc("enroll.symantecVip.passcode2.placeholder","login"),params:{innerTooltip:t.loc("enroll.symantecVip.passcode2.tooltip","login")}}),e.Toolbar({noCancelButton:!0,save:t.loc("mfa.challenge.verify","login")})]}},Footer:n})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(296),i(295),i(342),i(306)],r=function(t,e,i,n,r){var s=t._;return i.extend({className:"enroll-yubikey",Model:{props:{passCode:["string",!0],factorId:"string"},save:function(){return this.doTransaction(function(t){var e=s.findWhere(t.factors,{factorType:"token:hardware",provider:"YUBICO"});return e.enroll({passCode:this.get("passCode")})})}},Form:{title:s.partial(t.loc,"enroll.yubikey.title","login"),subtitle:s.partial(t.loc,"enroll.yubikey.subtitle","login"),noCancelButton:!0,save:s.partial(t.loc,"mfa.challenge.verify","login"),autoSave:!0,className:"enroll-yubikey",formChildren:[e.View({View:'<div class="yubikey-demo" data-type="yubikey-example"></div>'}),e.Input({name:"passCode",input:r,type:"password"})]},Footer:n})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(294),i(295),i(296),i(299),i(350),i(351),i(342)],r=function(t,e,i,n,r,s,o,a){var l=t._,c={__deviceType__:function(t){return void 0!==t}},u=t.View.extend({attributes:{"data-se":"app-download-instructions"},className:"app-download-instructions",template:'\t      <p class="instructions-title">{{title}}</p>\t      <span class="app-logo {{appIcon}}"></span>\t      <p class="instructions">{{{appStoreLinkText}}}</p>\t    ',initialize:function(){this.listenTo(this.model,"change:__deviceType__",this.render)},getTemplateData:function(){var i,n,r,o=e.getFactorLabel(this.model.get("__provider__"),this.model.get("__factorType__"));return r=s.STORE[this.model.get("__deviceType__")],"GOOGLE"===this.model.get("__provider__")?(i=s.GOOGLE[this.model.get("__deviceType__")],n="google-auth-38"):(i=s.OKTA[this.model.get("__deviceType__")],n="okta-verify-38"),{title:t.loc("enroll.totp.installApp","login",[o]),appStoreLinkText:t.loc("enroll.totp.downloadApp","login",[i,o,r]),appIcon:n}}}),d=i.extend({className:"enroll-totp",Model:function(){return{local:{__deviceType__:"string",__factorType__:["string",!1,this.options.factorType],__provider__:["string",!1,this.options.provider]},save:function(){return this.doTransaction(function(t){var e=l.findWhere(t.factors,{factorType:this.get("__factorType__"),provider:this.get("__provider__")});return e.enroll()})}}},Form:{title:function(){var i=e.getFactorLabel(this.model.get("__provider__"),this.model.get("__factorType__"));return t.loc("enroll.totp.title","login",[i])},subtitle:l.partial(t.loc,"enroll.totp.selectDevice","login"),autoSave:!0,noButtonBar:!0,attributes:{"data-se":"step-device-type"},formChildren:function(){var e={APPLE:"",ANDROID:""};this.settings.get("features.windowsVerify")&&"OKTA"===this.model.get("__provider__")?e.WINDOWS="":"GOOGLE"===this.model.get("__provider__")&&(e.BLACKBERRY="");var i=[n.Input({name:"__deviceType__",type:"radio",options:e,className:"device-type-input"}),n.Divider({showWhen:c}),n.View({View:u,showWhen:c}),n.Toolbar({noCancelButton:!0,save:t.loc("oform.next","login"),showWhen:c})];return i}},Footer:a});return d}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){!(t.exports={OKTA:{APPLE:"https://itunes.apple.com/us/app/okta-verify/id490179405",ANDROID:"https://play.google.com/store/apps/details?id=com.okta.android.auth",WINDOWS:"http://www.windowsphone.com/en-us/store/app/okta-verify/9df0e2c4-7301-411f-80e5-62fcf6679666"},GOOGLE:{APPLE:"https://itunes.apple.com/us/app/google-authenticator/id388497605",ANDROID:"https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2",BLACKBERRY:"https://support.google.com/accounts/answer/1066447"},STORE:{APPLE:"App Store",ANDROID:"Google Play Store",WINDOWS:"Windows Store",BLACKBERRY:"Blackberry World Store"}})},function(t,e,i){var n,r;n=[i(32),i(294),i(299)],r=function(t,e,i){var n=t._;return t.View.extend({className:"scan-instructions clearfix",template:'\t      <div class="scan-instructions-details-wrapper">\t          <div class="scan-instructions-details">\t              <p>{{instructions}}</p>\t          </div>\t      </div>\t      <div class="scan-instructions-qrcode-wrapper">\t          <div class="qrcode-wrap">\t              <img data-se="qrcode" class="qrcode-image" src="{{qrcode}}">\t              <div data-se="qrcode-success" class="qrcode-success"></div>\t              <div data-se="qrcode-error" class="qrcode-error"></div>\t          </div>\t          <a href="#" data-type="manual-setup" data-se="manual-setup" class="link manual-setup">\t            {{i18n code="enroll.totp.cannotScan" bundle="login"}}\t          </a>\t          <a href="#" data-type="refresh-qrcode" data-se="refresh-qrcode" class="link refresh-qrcode">\t            {{i18n code="enroll.totp.refreshBarcode" bundle="login"}}\t          </a>\t      </div>\t    ',events:{'click [data-type="manual-setup"]':function(t){t.preventDefault();var e=i.createActivateFactorUrl(this.model.get("__provider__"),this.model.get("__factorType__"),"manual");this.options.appState.trigger("navigate",e)},'click [data-type="refresh-qrcode"]':function(t){t.preventDefault(),this.model.trigger("errors:clear");var e=this;this.model.doTransaction(function(t){return this.appState.get("isWaitingForActivation")?t.poll():t.activate()}).then(function(t){var i=t.data;"MFA_ENROLL_ACTIVATE"===i.status&&"WAITING"===i.factorResult&&n.defer(n.bind(e.render,e))})}},initialize:function(){this.listenTo(this.options.appState,"change:lastAuthResponse",function(){this.options.appState.get("isMfaEnrollActivate")?this.$el.toggleClass("qrcode-expired",!this.options.appState.get("isWaitingForActivation")):this.options.appState.get("isSuccessResponse")&&this.$el.addClass("qrcode-success")}),this.listenTo(this.model,"error",function(){this.options.appState.get("isMfaEnrollActivate")&&this.$el.toggleClass("qrcode-expired",!0)})},getTemplateData:function(){var i,n=e.getFactorLabel(this.model.get("__provider__"),this.model.get("__factorType__"));return i="GOOGLE"===this.model.get("__provider__")?t.loc("enroll.totp.setupGoogleAuthApp","login",[n]):t.loc("enroll.totp.setupApp","login",[n]),{instructions:i,qrcode:this.options.appState.get("qrcode")}}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;
	n=[i(32),i(296),i(295),i(342),i(21),i(335),i(182),i(337)],r=function(t,e,i,n,r,s,o){function a(t){switch(t){default:case 1:return"u2f.error.other";case 2:case 3:return"u2f.error.badRequest";case 4:return"u2f.error.unsupported";case 5:return"u2f.error.timeout"}}var l=t._;return i.extend({className:"enroll-u2f",Model:{local:{__enrolled__:"boolean"},save:function(){return this.trigger("request"),this.get("__enrolled__")?this.activate():this.doTransaction(function(t){var e=l.findWhere(t.factors,{factorType:"u2f",provider:"FIDO"});return e.enroll()})},activate:function(){return this.set("__enrolled__",!0),this.trigger("errors:clear"),this.doTransaction(function(e){", "base64"));
  res.write(new Buffer("var i=e.factor.activation,n=i.appId,s=[{version:i.version,challenge:i.nonce}],o=this,l=r.defer();return u2f.register(n,s,[],function(i){o.trigger("errors:clear"),i.errorCode&&0!==i.errorCode?l.reject({xhr:{responseJSON:{errorSummary:t.loc(a(i.errorCode),"login")}}}):l.resolve(e.activate({registrationData:i.registrationData,version:i.version,challenge:i.challenge,clientData:i.clientData}))}),l.promise})}},Form:{title:l.partial(t.loc,"enroll.u2f.title","login"),save:l.partial(t.loc,"enroll.u2f.save","login"),noCancelButton:!0,hasSavingState:!1,autoSave:!0,className:"enroll-u2f-form",noButtonBar:function(){return!window.hasOwnProperty("u2f")},modelEvents:{request:"_startEnrollment",error:"_stopEnrollment"},formChildren:function(){var i=[];if(window.hasOwnProperty("u2f"))i.push(e.View({View:'<div class="u2f-instructions"><ol>\t          <li>{{i18n code="enroll.u2f.general1" bundle="login"}}</li>\t          <li>{{{i18n code="enroll.u2f.general2" bundle="login"}}}</li>\t          <li>{{i18n code="enroll.u2f.general3" bundle="login"}}</li>\t          </ol></div>'})),i.push(e.View({View:'\t          <div class="u2f-enroll-text hide">\t            <p>{{i18n code="enroll.u2f.instructions" bundle="login"}}</p>\t            <p>{{i18n code="enroll.u2f.instructionsBluetooth" bundle="login"}}</p>\t            <div data-se="u2f-devices" class="u2f-devices-images">\t              <div class="u2f-usb"></div>\t              <div class="u2f-bluetooth"></div>\t            </div>\t            <div data-se="u2f-waiting" class="okta-waiting-spinner"></div>\t          </div>'}));else{var n="u2f.error.notSupportedBrowser";o.isFirefox()&&(n="u2f.error.noFirefoxExtension"),i.push(e.View({View:new s({message:t.loc(n,"login")})},{selector:".o-form-error-container"}))}return i},_startEnrollment:function(){this.$(".u2f-instructions").addClass("hide"),this.$(".u2f-enroll-text").removeClass("hide"),this.$(".o-form-button-bar").hide()},_stopEnrollment:function(){this.$(".u2f-instructions").removeClass("hide"),this.$(".u2f-enroll-text").addClass("hide"),this.$(".o-form-button-bar").show()}},Footer:n,trapAuthResponse:function(){if(this.options.appState.get("isMfaEnrollActivate"))return this.model.activate(),!0}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(294),i(295),i(296),i(299),i(351),i(342)],r=function(t,e,i,n,r,s,o){var a=t._;return i.extend({className:"barcode-totp",Model:function(){return{local:{__factorType__:["string",!1,this.options.factorType],__provider__:["string",!1,this.options.provider]}}},Form:{title:function(){var i=e.getFactorLabel(this.model.get("__provider__"),this.model.get("__factorType__"));return t.loc("enroll.totp.title","login",[i])},subtitle:a.partial(t.loc,"mfa.scanBarcode","login"),save:a.partial(t.loc,"oform.next","login"),noCancelButton:!0,attributes:{"data-se":"step-scan"},className:"barcode-scan",formChildren:[n.View({View:s})]},Footer:o,initialize:function(){this.listenTo(this.form,"save",function(){var t=r.createActivateFactorUrl(this.model.get("__provider__"),this.model.get("__factorType__"),"activate");this.options.appState.trigger("navigate",t)})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(294),i(295),i(296),i(299),i(351),i(342)],r=function(t,e,i,n,r,s,o){var a=t._,l=6e3;return i.extend({className:"barcode-push",Model:function(){return{local:{__factorType__:["string",!1,this.options.factorType],__provider__:["string",!1,this.options.provider]}}},Form:{title:function(){var i=e.getFactorLabel(this.model.get("__provider__"),this.model.get("__factorType__"));return t.loc("enroll.totp.title","login",[i])},subtitle:a.partial(t.loc,"mfa.scanBarcode","login"),noButtonBar:!0,attributes:{"data-se":"step-scan"},className:"barcode-scan",initialize:function(){this.listenTo(this.model,"error errors:clear",function(){this.clearErrors()})},formChildren:[n.View({View:s})]},Footer:o,initialize:function(){this.pollForEnrollment()},pollForEnrollment:function(){return this.model.doTransaction(function(t){return t.poll(l)})},trapAuthResponse:function(){if(this.options.appState.get("isMfaEnrollActivate"))return!0}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295),i(356),i(342)],r=function(t,e,i,n){return e.extend({className:"activate-totp",Model:function(){return{props:{factorId:["string",!0,this.options.appState.get("activatedFactorId")],passCode:["string",!0]},local:{__factorType__:["string",!1,this.options.factorType],__provider__:["string",!1,this.options.provider]},save:function(){return this.doTransaction(function(t){return t.activate({passCode:this.get("passCode")})})}}},Form:i,Footer:n})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(294),i(296),i(306)],r=function(t,e,i,n){var r=t._,s={title:function(){var i=e.getFactorLabel(this.model.get("__provider__"),this.model.get("__factorType__"));return t.loc("enroll.totp.title","login",[i])},subtitle:r.partial(t.loc,"enroll.totp.enterCode","login"),autoSave:!0,noButtonBar:!0,attributes:{"data-se":"step-sendcode"},formChildren:function(){return[i.Input({name:"passCode",input:n,type:"number",placeholder:t.loc("mfa.challenge.enterCode.placeholder","login"),params:{innerTooltip:t.loc("mfa.challenge.enterCode.tooltip","login")}}),i.Toolbar({noCancelButton:!0,save:t.loc("oform.verify","login")})]}};return s}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(294),i(295),i(296),i(299),i(358),i(306)],r=function(t,e,i,n,r,s,o){var a=t._;return i.extend({className:"enroll-manual-totp",Model:function(){return{local:{sharedSecret:["string",!1,this.options.appState.get("sharedSecret")],__factorType__:["string",!1,this.options.factorType],__provider__:["string",!1,this.options.provider]}}},Form:{title:function(){var i=e.getFactorLabel(this.model.get("__provider__"),this.model.get("__factorType__"));return t.loc("enroll.totp.title","login",[i])},subtitle:a.partial(t.loc,"enroll.totp.cannotScanBarcode","login"),noButtonBar:!0,attributes:{"data-se":"step-manual-setup"},formChildren:function(){return[n.View({View:'\t            <p class="okta-form-subtitle o-form-explain text-align-c">\t              {{i18n code="enroll.totp.manualSetupInstructions" bundle="login"}}\t            </p>\t          '}),n.Input({name:"sharedSecret",input:o,type:"text",disabled:!0}),n.Toolbar({noCancelButton:!0,save:t.loc("oform.next","login")})]}},Footer:s,initialize:function(){this.listenTo(this.form,"save",function(){var t=r.createActivateFactorUrl(this.model.get("__provider__"),this.model.get("__factorType__"),"activate");this.options.appState.trigger("navigate",t)})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(299),i(301)],r=function(t,e,i){return t.View.extend({template:'\t      <a href="#" class="link help js-back" data-se="back-link">\t        {{i18n code="mfa.backToFactors" bundle="login"}}\t      </a>\t      <a href="#" class="link help goto js-goto" data-se="goto-link">\t        {{i18n code="mfa.scanBarcode" bundle="login"}}\t      </a>\t    ',className:"auth-footer",events:{"click .js-back":function(t){t.preventDefault(),this.back()},"click .js-goto":function(t){t.preventDefault(),this.model.startTransaction(function(t){return t.tx.resume()})}},back:function(){this.state.set("navigateDir",i.DIRECTION_BACK),this.options.appState.get("prevLink")?this.model.doTransaction(function(t){return t.prev()}):this.options.appState.trigger("navigate","signin/enroll")}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(360),i(362),i(363),i(364),i(190),i(297)],r=function(t,e,i,n,r,s,o){var a=t.Handlebars.compile,l=t._,c=t.$,u=t.View.extend({template:'\t      <a href="#" data-se="needhelp" class="link help js-help">\t      {{i18n code="needhelp" bundle="login"}}\t      </a>\t      <ul class="help-links js-help-links">\t        <li>\t        <a href="#" data-se="forgot-password" class="link js-forgot-password">\t        {{i18n code="forgotpassword" bundle="login"}}\t        </a>\t        </li>\t        {{#if features.selfServiceUnlock}}\t          <li>\t          <a href="#" data-se="unlock" class="link js-unlock">\t          {{i18n code="unlockaccount" bundle="login"}}\t          </a>\t          </li>\t        {{/if}}\t        {{#each helpLinks.custom}}\t          <li>\t          <a href="{{href}}" class="link js-custom">{{text}}</a></li>\t        {{/each}}\t        <li>\t        <a href="{{helpLinkUrl}}" data-se="help-link" class="link js-help-link" target="_blank">\t        {{i18n code="help" bundle="login"}}\t        </a>\t        </li>\t      </ul>\t    ',className:"auth-footer",initialize:function(){this.listenTo(this.state,"change:enabled",function(t,e){this.$(":link").toggleClass("o-form-disabled",!e)})},getTemplateData:function(){var t,e=this.settings.get("helpLinks.help");return t=e?e:a("{{baseUrl}}/help/login")({baseUrl:this.settings.get("baseUrl")}),l.extend(this.settings.toJSON({verbose:!0}),{helpLinkUrl:t})},postRender:function(){this.$(".js-help-links").hide()},toggleLinks:function(t){t.preventDefault(),this.$(".js-help-links").slideToggle(200)},events:{"click .js-help":function(t){t.preventDefault(),this.state.get("enabled")&&this.toggleLinks(t)},"click .js-forgot-password":function(t){if(t.preventDefault(),this.state.get("enabled")){var e=this.settings.get("helpLinks.forgotPassword");e?s.redirect(e):this.options.appState.trigger("navigate","signin/forgot-password")}},"click .js-unlock":function(t){if(t.preventDefault(),this.state.get("enabled")){var e=this.settings.get("helpLinks.unlock");e?s.redirect(e):this.options.appState.trigger("navigate","signin/unlock")}}}});return o.extend({className:"primary-auth",state:{enabled:!0},View:e,constructor:function(t){var e;t.appState.unset("username"),this.model=new r({multiOptionalFactorEnroll:t.settings.get("features.multiOptionalFactorEnroll"),settings:t.settings,appState:t.appState},{parse:!0}),o.apply(this,arguments),this.addListeners(),t.settings.get("hasConfiguredButtons")&&this.add(i,{prepend:t.settings.get("socialAuthPositionTop")}),this.add(new u(this.toJSON({appState:t.appState}))),t.settings.get("features.registration")&&this.add(new n({settings:this.settings,appState:t.appState})),e=this.model.get("username"),e&&this.options.appState.set("username",e)},events:{"focusout input[name=username]":function(){this.options.appState.set("username",this.model.get("username"))},"focusin input":function(t){c(t.target.parentElement).addClass("focused-input")},"focusout input":function(t){c(t.target.parentElement).removeClass("focused-input")}},initialize:function(){this.listenTo(this.model,"change:username",function(t,e){e||this.options.appState.set("username","")}),this.listenTo(this.model,"save",function(){this.state.set("enabled",!1)}),this.listenTo(this.model,"error",function(){this.state.set("enabled",!0)})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(306),i(361)],r=function(t,e,i){var n=t._;return t.Form.extend({className:"primary-auth-form",noCancelButton:!0,save:n.partial(t.loc,"primaryauth.submit","login"),saveId:"okta-signin-submit",layout:"o-form-theme",title:function(){var e=t.loc("primaryauth.title","login");return this.settings.get("socialAuthPositionTop")&&(e=""),e},initialize:function(){this.listenTo(this,"save",function(){var t=this,e={username:this.model.get("username"),password:this.model.get("password")};this.settings.processCreds(e).then(function(){if(t.settings.get("features.deviceFingerprinting"))return i.generateDeviceFingerprint(t.settings.get("baseUrl"),t.$el).then(function(e){t.model.set("deviceFingerprint",e)}).fail(function(){})}).then(n.bind(this.model.save,this.model))}),this.listenTo(this.state,"change:enabled",function(t,e){e?this.enable():this.disable()})},inputs:function(){var i=[{label:!1,"label-top":!0,placeholder:t.loc("primaryauth.username.placeholder","login"),name:"username",input:e,inputId:"okta-signin-username",type:"text",params:{innerTooltip:{title:t.loc("primaryauth.username.placeholder","login"),text:t.loc("primaryauth.username.tooltip","login")},icon:"person-16-gray"}},{label:!1,"label-top":!0,placeholder:t.loc("primaryauth.password.placeholder","login"),name:"password",input:e,inputId:"okta-signin-password",type:"password",params:{innerTooltip:{title:t.loc("primaryauth.password.placeholder","login"),text:t.loc("primaryauth.password.tooltip","login")},icon:"remote-lock-16"}}];return this.settings.get("features.rememberMe")&&i.push({label:!1,placeholder:t.loc("remember","login"),name:"remember",type:"checkbox","label-top":!0,className:"margin-btm-0",initialize:function(){this.listenTo(this.model,"change:remember",function(t,e){this.$(":checkbox").prop("checked",e).trigger("updateState")})}}),i},focus:function(){this.model.get("username")?this.getInputs().toArray()[1].focus():this.getInputs().first().focus()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(21),i(5)],r=function(t,e){return{generateDeviceFingerprint:function(i,n){function r(){c.off(),c.remove(),window.removeEventListener("message",o,!1)}function s(t){r(),l.reject(t)}function o(t){if(!t||!t.data||t.origin!=i)return void s("no data");try{var e=JSON.parse(t.data);e&&"FingerprintServiceReady"===e.type?a({type:"GetFingerprint"}):e&&"FingerprintAvailable"===e.type?(r(),l.resolve(e.fingerprint)):s("no data")}catch(n){}}function a(t){var e=c[0].contentWindow;e&&e.postMessage(JSON.stringify(t),i)}var l=t.defer(),c=e("<iframe>",{style:"display: none;"});return c.appendTo(n),window.addEventListener("message",o,!1),c.attr("src",i+"/auth/services/devicefingerprint"),l.promise}}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32)],r=function(t){var e=t._,i=t.tpl('<div class="auth-divider">\t      <span class="auth-divider-text">{{text}}</span>\t    </div>'),n=t.tpl('<h2 data-se="o-form-head" class="okta-form-title o-form-head">{{title}}</h2>');return t.View.extend({className:"primary-auth-container",children:function(){var r=[],s=this.settings.get("configuredButtons"),o=i({text:t.loc("socialauth.divider.text","login")});return e.each(s,function(t){r.push(this._createButton(t))},this),this.settings.get("socialAuthPositionTop")?(r.unshift(n({title:t.loc("primaryauth.title","login")})),r.push(o)):r.unshift(o),r},_createButton:function(e){return t.createButton({attributes:{"data-se":e.dataAttr},className:e.className,title:e.title,click:e.click})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32)],r=function(t){return t.View.extend({template:'\t        <div class="content">\t          <span class="registration-label">{{label}}</span>\t          <a title="{{text}}" aria-label="{{text}}" class="registration-link" href="#">{{text}}</a>\t        </div>\t        ',className:"registration-container",events:{"click a.registration-link":"handleClickEvent"},handleClickEvent:function(){var t=this.settings.get("registration.click");return t&&t(),!1},getTemplateData:function(){var e={label:t.loc("registration.signup.label","login"),text:t.loc("registration.signup.text","login")};return e}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(298),i(324),i(301)],r=function(t,e,i,n){var r=t._;return e.extend({props:function(){var e,n=this.settings&&this.settings.get("username"),s=i.getCookieUsername(),o=!1;return n?(e=n,o=e===s):s&&(e=s,o=!0),{username:{type:"string",validate:function(e){if(r.isEmpty(e))return t.loc("error.username.required","login")},value:e},lastUsername:["string",!1,s],password:{type:"string",validate:function(e){if(r.isEmpty(e))return t.loc("error.password.required","login")}},context:["object",!1],remember:["boolean",!0,o],multiOptionalFactorEnroll:["boolean",!0]}},local:{deviceFingerprint:["string",!1]},constructor:function(e){this.settings=e&&e.settings,this.appState=e&&e.appState,t.Model.apply(this,arguments),this.listenTo(this,"change:username",function(t,e){this.set({remember:e===this.get("lastUsername")})})},parse:function(t){return r.omit(t,["settings","appState"])},save:function(){var t=this.settings.transformUsername(this.get("username"),n.PRIMARY_AUTH),e=this.get("password"),s=this.get("remember"),o=this.get("lastUsername"),a=this.get("multiOptionalFactorEnroll"),l=this.settings.get("features.deviceFingerprinting");s||o!==t?s&&i.setUsernameCookie(t):i.removeUsernameCookie(),this.trigger("save"),this.appState.trigger("loading",!0);var c,u={username:t,password:e,options:{warnBeforePasswordExpired:!0,multiOptionalFactorEnroll:a}};return c=this.appState.get("isUnauthenticated")?this.doTransaction(function(t){var e=this.appState.settings.authClient;return this.doPrimaryAuth(e,l,u,t.authenticate)}):this.startTransaction(function(t){return this.doPrimaryAuth(t,l,u,r.bind(t.signIn,t))}),c.fail(r.bind(function(){this.trigger("error"),this.appState.trigger("removeLoading"),i.removeUsernameCookie()},this)).fin(r.bind(function(){this.appState.trigger("loading",!1)},this))},doPrimaryAuth:function(t,e,i,n){return e&&(t.options.headers["X-Device-Fingerprint"]=this.get("deviceFingerprint")),n(i).fin(function(){e&&delete t.options.headers["X-Device-Fingerprint"]})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(292),i(295),i(296),i(299)],r=function(t,e,i,n,r){var s=t._,o=6e3,a=t.View.extend({template:'\t      <a href="#" class="link help js-back" data-se="back-link">\t        {{i18n code="oform.back" bundle="login"}}\t      </a>\t    ',className:"auth-footer",events:{"click .js-back":function(t){t.preventDefault(),this.back()}},back:function(){var t=r.createActivateFactorUrl(this.options.appState.get("activatedFactorProvider"),this.options.appState.get("activatedFactorType"),"manual");this.options.appState.trigger("navigate",t)}}),l={title:s.partial(t.loc,"enroll.totp.enrollViaEmail.title","login"),noButtonBar:!0,attributes:{"data-se":"sent-email-activation-link"},formChildren:[n.View({View:t.View.extend({template:'\t            <p>{{i18n code="enroll.totp.enrollViaEmail.msg" bundle="login"}}</p>\t            <p class="email-address">{{email}}</p>\t          ',getTemplateData:function(){return{email:this.options.appState.get("userEmail")}}})})]},c={title:s.partial(t.loc,"enroll.totp.enrollViaSms.title","login"),noButtonBar:!0,attributes:{"data-se":"sent-sms-activation-link"},formChildren:[n.View({View:t.View.extend({template:'\t            <p>{{i18n code="enroll.totp.enrollViaSms.msg" bundle="login"}}</p>\t            <p class="phone-number">{{phoneNumber}}</p>\t          ',getTemplateData:function(){return{phoneNumber:this.model.get("fullPhoneNumber")}}})})]};return i.extend({className:"enroll-activation-link-sent",Model:function(){return{local:{countryCode:["string",!1,this.options.appState.get("userCountryCode")],phoneNumber:["string",!1,this.options.appState.get("userPhoneNumber")],__factorType__:["string",!1,this.options.factorType],__provider__:["string",!1,this.options.provider]},derived:{countryCallingCode:{deps:["countryCode"],fn:function(t){return"+"+e.getCallingCodeForCountry(t)}},fullPhoneNumber:{deps:["countryCallingCode","phoneNumber"],fn:function(t,e){return t+e}}}}},Form:function(){var t=this.options.appState.get("factorActivationType");switch(t){case"SMS":return c;case"EMAIL":return l;default:throw new Error("Unknown activation option: "+t)}},Footer:a,initialize:function(){this.pollForEnrollment()},remove:function(){return i.prototype.remove.apply(this,arguments)},pollForEnrollment:function(){return this.model.doTransaction(function(t){return t.poll(o)})},trapAuthResponse:function(){if(this.options.appState.get("isWaitingForActivation"))return this.pollForEnrollment(),!0}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295),i(299),i(356)],r=function(t,e,i,n){var r=t.View.extend({template:'\t      <a href="#" class="link help js-back" data-se="back-link">\t        {{i18n code="oform.back" bundle="login"}}\t      </a>\t    ',className:"auth-footer",events:{"click .js-back":function(t){t.preventDefault(),this.back()}},back:function(){var t=i.createActivateFactorUrl(this.options.appState.get("activatedFactorProvider"),"push","manual");this.options.appState.trigger("navigate",t)}});return e.extend({className:"activate-push",Model:function(){return{props:{factorId:["string",!0,this.options.appState.get("activatedFactorId")],passCode:["string",!0]},local:{__factorType__:["string",!1,this.options.factorType],__provider__:["string",!1,this.options.provider]},save:function(){return this.doTransaction(function(t){return t.activate({passCode:this.get("passCode")})})}}},Form:n,Footer:r})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295),i(301),i(296),i(368),i(294),i(369),i(306)],r=function(t,e,i,n,r,s,o,a){var l=t._;return e.extend({className:"password-expired",Model:{props:{oldPassword:["string",!0],newPassword:["string",!0],confirmPassword:["string",!0]},validate:function(){return r.validatePasswordMatch(this)},save:function(){return this.doTransaction(function(t){return t.changePassword({oldPassword:this.get("oldPassword"),newPassword:this.get("newPassword")})})}},Form:{save:l.partial(t.loc,"password.expired.submit","login"),title:function(){var e=this.options.appState.get("isPwdExpiringSoon"),i=this.options.appState.get("passwordExpireDays");return e&&i>0?t.loc("password.expiring.title","login",[i]):e&&0===i?t.loc("password.expiring.today","login"):t.loc("password.expired.title","login")},subtitle:function(){if(this.options.appState.get("isPwdExpiringSoon"))return t.loc("password.expiring.subtitle","login");var e=this.options.appState.get("policy");if(e)return s.getPasswordComplexityDescription(e)},formChildren:function(){return[n.Input({"label-top":!0,label:!1,placeholder:t.loc("password.oldPassword.placeholder","login"),name:"oldPassword",input:a,type:"password",params:{innerTooltip:t.loc("password.oldPassword.tooltip","login"),icon:"credentials-16"}}),n.Divider(),n.Input({"label-top":!0,label:!1,placeholder:t.loc("password.newPassword.placeholder","login"),name:"newPassword",input:a,type:"password",params:{innerTooltip:t.loc("password.newPassword.tooltip","login"),icon:"credentials-16"}}),n.Input({"label-top":!0,label:!1,placeholder:t.loc("password.confirmPassword.placeholder","login"),name:"confirmPassword",input:a,type:"password",params:{innerTooltip:t.loc("password.confirmPassword.tooltip","login"),icon:"credentials-16"}})]}},Footer:o,initialize:function(){this.listenTo(this.form,"save",function(){var t={username:this.options.appState.get("userEmail"),password:this.model.get("newPassword")};this.settings.processCreds(t).then(l.bind(this.model.save,this.model))})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32)],r=function(t){var e={};return e.validateUsername=function(e){var i=e.get("username");if(i&&i.length>256)return{username:t.loc("model.validation.field.username","login")}},e.validatePasswordMatch=function(e){if(e.get("newPassword")!==e.get("confirmPassword"))return{confirmPassword:t.loc("password.error.match","login")}},e}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(301),i(190)],r=function(t,e,i){return t.View.extend({template:'\t      {{#if passwordWarn}}\t        <a href="#" class="link help js-skip" data-se="skip-link">\t          {{i18n code="password.expiring.later" bundle="login"}}\t        </a>\t      {{/if}}\t      <a href="#" class="link help goto js-signout" data-se="signout-link">{{i18n code="signout" bundle="login"}}</a>\t    ',className:"auth-footer clearfix",events:{"click .js-signout":function(t){t.preventDefault();var n=this;this.model.doTransaction(function(t){return t.cancel()}).then(function(){n.settings.get("signOutLink")?i.redirect(n.settings.get("signOutLink")):(n.state.set("navigateDir",e.DIRECTION_BACK),n.options.appState.trigger("navigate",""))})},"click .js-skip":function(t){t.preventDefault(),this.model.doTransaction(function(t){return t.skip()})}},getTemplateData:function(){return{passwordWarn:this.options.appState.get("isPwdExpiringSoon")}}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295),i(296),i(369),i(190)],r=function(t,e,i,n,r){var s=t._;return e.extend({className:"custom-password-expired",Model:{},Form:{noButtonBar:!0,title:function(){var e=this.options.appState.get("isPwdExpiringSoon"),i=this.options.appState.get("passwordExpireDays");return e&&i>0?t.loc("password.expiring.title","login",[i]):e&&0===i?t.loc("password.expiring.today","login"):t.loc("password.expired.title","login")},subtitle:function(){return this.options.appState.get("isPwdExpiringSoon")?t.loc("password.expiring.subtitle","login")+" "+t.loc("password.expired.custom.subtitle","login"):t.loc("password.expired.custom.subtitle","login")},formChildren:function(){return[i.Button({title:s.partial(t.loc,"password.expired.custom.submit","login",[this.options.appState.get("passwordExpiredWebsiteName")]),className:"button button-primary button-wide",attributes:{"data-se":"custom-button"},click:function(){r.redirect(this.options.appState.get("passwordExpiredLinkUrl"))}})]}},Footer:n})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295),i(301),i(296),i(368),i(372),i(306)],r=function(t,e,i,n,r,s,o){var a=t._,l=t.View.extend({template:'\t      <a href="#" class="link help js-back" data-se="back-link">\t        {{i18n code="goback" bundle="login"}}\t      </a>\t      {{#if helpSupportNumber}}\t      <a href="#" class="link goto js-contact-support">\t        {{i18n code="mfa.noAccessToEmail" bundle="login"}}\t      </a>\t      {{/if}}\t    ',className:"auth-footer",events:{"click .js-back":function(t){t.preventDefault(),this.back()},"click .js-contact-support":function(t){t.preventDefault(),this.state.trigger("contactSupport"),this.$(".js-contact-support").hide()}},getTemplateData:function(){return this.settings.pick("helpSupportNumber")},back:function(){this.state.set("navigateDir",i.DIRECTION_BACK),this.options.appState.trigger("navigate","")}});return e.extend({className:"forgot-password",Model:{props:{username:["string",!0],factorType:["string",!0,i.RECOVERY_FACTOR_TYPE_EMAIL]},validate:function(){return r.validateUsername(this)},save:function(){var t=this;this.startTransaction(function(e){return e.forgotPassword({username:t.settings.transformUsername(t.get("username"),i.FORGOT_PASSWORD),factorType:t.get("factorType")})}).fail(function(){t.set("factorType",i.RECOVERY_FACTOR_TYPE_EMAIL)})}},Form:{autoSave:!0,save:a.partial(t.loc,"password.forgot.sendEmail","login"),title:a.partial(t.loc,"password.reset","login"),formChildren:function(){var e=[n.Input({placeholder:t.loc("password.forgot.email.or.username.placeholder","login"),name:"username",input:o,type:"text",params:{innerTooltip:t.loc("password.forgot.email.or.username.tooltip","login"),icon:"person-16-gray"}})],i=this.settings.get("features.smsRecovery"),r=this.settings.get("features.callRecovery");return(i||r)&&e.push(n.View({View:t.View.extend({template:'\t                <p class="mobile-recovery-hint">\t                  {{i18n code="recovery.mobile.hint" bundle="login" arguments="mobileFactors"}}\t                </p>',getTemplateData:function(){var e;return e=i&&r?t.loc("recovery.smsOrCall"):r?t.loc("recovery.call"):t.loc("recovery.sms"),{mobileFactors:e}}})})),e},initialize:function(){var t=this;this.settings.get("features.callRecovery")&&(this.$el.addClass("forgot-password-call-enabled"),this.addRecoveryFactorButton("call-button","password.forgot.call",i.RECOVERY_FACTOR_TYPE_CALL,t)),this.settings.get("features.smsRecovery")&&(this.$el.addClass("forgot-password-sms-enabled"),this.addRecoveryFactorButton("sms-button","password.forgot.sendText",i.RECOVERY_FACTOR_TYPE_SMS,t)),this.listenTo(this.state,"contactSupport",function(){this.add(s,".o-form-error-container")}),this.listenTo(this,"save",function(){this.options.appState.set("username",this.model.get("username"))})},addRecoveryFactorButton:function(e,i,n,r){this.addButton({attributes:{"data-se":e},type:"button",className:"button-primary "+e,text:t.loc(i,"login"),action:function(){r.clearErrors(),this.model.isValid()&&(this.model.set("factorType",n),r.trigger("save",this.model))}},{prepend:!0})}},Footer:l,initialize:function(){this.options.appState.unset("username")}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32)],r=function(t){return t.View.extend({template:'\t      <div class="infobox">\t        <span class="icon info-16"></span>\t        <p>{{i18n code="contact.support" bundle="login" arguments="helpSupportNumber"}}</p>\t      </div>',className:"contact-support",getTemplateData:function(){return this.settings.pick("helpSupportNumber")}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295),i(296),i(301),i(320),i(306)],r=function(t,e,i,n,r,s){var o=t._,a=3e4;return e.extend({className:"recovery-challenge",Model:{props:{passCode:["string",!0]},local:{ableToResend:"boolean"},resendCode:function(){return this.limitResending(),this.doTransaction(function(t){return t.resend()})},limitResending:function(){this.set({ableToResend:!1}),o.delay(o.bind(this.set,this),a,{ableToResend:!0})},save:function(){return this.doTransaction(function(t){return t.verify({passCode:this.get("passCode")})})}},Form:{autoSave:!0,save:o.partial(t.loc,"mfa.challenge.verify","login"),title:function(){return this.options.appState.get("factorType")===n.RECOVERY_FACTOR_TYPE_CALL?t.loc("recoveryChallenge.call.title","login"):t.loc("recoveryChallenge.sms.title","login")},className:"recovery-challenge",initialize:function(){this.listenTo(this.model,"error",function(){this.clearErrors()})},formChildren:function(){return[i.Button({title:t.loc("mfa.resendCode","login"),attributes:{"data-se":"resend-button"},className:"button sms-request-button",click:function(){this.model.resendCode()},initialize:function(){this.listenTo(this.model,"change:ableToResend",function(e,i){i?(this.options.title=t.loc("mfa.resendCode","login"),this.enable(),this.render()):(this.options.title=t.loc("mfa.sent","login"),this.disable(),this.render())})}}),i.Input({placeholder:t.loc("mfa.challenge.enterCode.placeholder","login"),className:"enroll-sms-phone",name:"passCode",input:s,type:"text"})]}},events:{"click .send-email-link":function(t){t.preventDefault();var e=this.model.settings,i=this.options.appState.get("username"),r=this.options.appState.get("recoveryType");this.model.startTransaction(function(t){switch(r){case n.RECOVERY_TYPE_PASSWORD:return t.forgotPassword({username:e.transformUsername(i,n.FORGOT_PASSWORD),factorType:n.RECOVERY_FACTOR_TYPE_EMAIL});case n.RECOVERY_TYPE_UNLOCK:return t.unlockAccount({username:e.transformUsername(i,n.UNLOCK_ACCOUNT),factorType:n.RECOVERY_FACTOR_TYPE_EMAIL});default:return}})}},initialize:function(){var e,i=this.options.appState.get("recoveryType");switch(i){case n.RECOVERY_TYPE_PASSWORD:e='\t          <a href="#" class="link send-email-link" data-se="send-email-link">\t            {{i18n code="password.forgot.code.notReceived" bundle="login"}}\t          </a>';break;case n.RECOVERY_TYPE_UNLOCK:e='\t          <a href="#" class="link send-email-link" data-se="send-email-link">\t            {{i18n code="account.unlock.sms.notReceived" bundle="login"}}\t          </a>'}e&&this.add(e),
	this.add(new r(o.extend(this.toJSON(),{linkText:t.loc("goback","login"),linkClassName:""})))},postRender:function(){this.model.limitResending()}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(301),i(295),i(296)],r=function(t,e,i,n){var r=t._;return i.extend({className:"password-reset-email-sent",Model:function(){return{local:{userFullName:["string",!1,this.options.appState.get("userFullName")]}}},Form:{title:r.partial(t.loc,"password.forgot.emailSent.title","login"),subtitle:function(){var e=this.options.appState.get("username");return t.loc("password.forgot.emailSent.desc","login",[e])},noButtonBar:!0,attributes:{"data-se":"pwd-reset-email-sent"},formChildren:function(){return[n.View({View:t.View.extend({template:'\t              <span class="accessibility-text" role="status">{{alert}}</span>\t              ',getTemplateData:function(){return{alert:t.loc("password.forgot.emailSent.title","login")}}})}),n.Button({title:t.loc("goback","login"),className:"button button-primary button-wide",attributes:{"data-se":"back-button"},click:function(){var t=this;return this.model.doTransaction(function(t){return t.cancel()}).then(function(){t.state.set("navigateDir",e.DIRECTION_BACK),t.options.appState.trigger("navigate","")})}})]}},initialize:function(t){this.settings.callGlobalSuccess(e.FORGOT_PASSWORD_EMAIL_SENT,{username:t.appState.get("username")})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295),i(296),i(320),i(306)],r=function(t,e,i,n,r){return e.extend({className:"recovery-question",Model:{props:{answer:["string",!0],showAnswer:"boolean"},save:function(){return this.doTransaction(function(t){return t.answer({answer:this.get("answer")})})}},Form:{autoSave:!0,save:function(){switch(this.options.appState.get("recoveryType")){case"PASSWORD":return t.loc("password.forgot.question.submit","login");case"UNLOCK":return t.loc("account.unlock.question.submit","login");default:return t.loc("mfa.challenge.verify","login")}},title:function(){switch(this.options.appState.get("recoveryType")){case"PASSWORD":return t.loc("password.forgot.question.title","login");case"UNLOCK":return t.loc("account.unlock.question.title","login");default:return""}},formChildren:function(){return[i.Input({label:this.options.appState.get("recoveryQuestion"),placeholder:t.loc("mfa.challenge.answer.placeholder","login"),name:"answer",input:r,type:"password",initialize:function(){this.listenTo(this.model,"change:showAnswer",function(){var t=this.model.get("showAnswer")?"text":"password";this.getInputs()[0].changeType(t)})}}),i.Input({label:!1,"label-top":!0,placeholder:t.loc("mfa.challenge.answer.showAnswer","login"),className:"recovery-question-show margin-btm-0",name:"showAnswer",type:"checkbox"})]}},Footer:n})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295),i(296),i(368),i(294),i(320),i(306)],r=function(t,e,i,n,r,s,o){var a=t._;return e.extend({className:"password-reset",Model:{props:{newPassword:["string",!0],confirmPassword:["string",!0]},validate:function(){return n.validatePasswordMatch(this)},save:function(){this.trigger("save");var t=this;return this.doTransaction(function(e){return e.resetPassword({newPassword:t.get("newPassword")})})}},Form:{save:a.partial(t.loc,"password.reset","login"),title:a.partial(t.loc,"password.reset.title","login"),subtitle:function(){var t=this.options.appState.get("policy");if(t)return r.getPasswordComplexityDescription(t)},formChildren:function(){return[i.Input({placeholder:t.loc("password.newPassword.placeholder","login"),name:"newPassword",input:o,type:"password",params:{innerTooltip:t.loc("password.newPassword.tooltip","login"),icon:"credentials-16"}}),i.Input({placeholder:t.loc("password.confirmPassword.placeholder","login"),name:"confirmPassword",input:o,type:"password",params:{innerTooltip:t.loc("password.confirmPassword.tooltip","login"),icon:"credentials-16"}})]}},Footer:s,initialize:function(){this.listenTo(this.form,"save",function(){var t={username:this.options.appState.get("userEmail"),password:this.model.get("newPassword")};this.settings.processCreds(t).then(a.bind(this.model.save,this.model))})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295)],r=function(t,e){return e.extend({className:"recovery-loading",Model:{},Form:{noButtonBar:!0},initialize:function(t){var e=this;return this.model.startTransaction(function(e){return e.verifyRecoveryToken({recoveryToken:t.token})}).fail(function(){e.options.appState.trigger("loading",!1)})},preRender:function(){this.options.appState.trigger("loading",!0)},trapAuthResponse:function(){return this.options.appState.trigger("loading",!1),!1}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(295),i(301),i(296),i(368),i(372),i(306)],r=function(t,e,i,n,r,s,o){var a=t._,l=t.View.extend({template:'\t      <a href="#" class="link help js-back" data-se="back-link">\t        {{i18n code="goback" bundle="login"}}\t      </a>\t      {{#if helpSupportNumber}}\t      <a href="#" class="link goto js-contact-support">\t        {{i18n code="mfa.noAccessToEmail" bundle="login"}}\t      </a>\t      {{/if}}\t    ',className:"auth-footer",events:{"click .js-back":function(t){t.preventDefault(),this.back()},"click .js-contact-support":function(t){t.preventDefault(),this.state.trigger("contactSupport"),this.$(".js-contact-support").hide()}},getTemplateData:function(){return this.settings.pick("helpSupportNumber")},back:function(){this.state.set("navigateDir",i.DIRECTION_BACK),this.options.appState.trigger("navigate","")}});return e.extend({className:"account-unlock",Model:{props:{username:["string",!0],factorType:["string",!0,i.RECOVERY_FACTOR_TYPE_EMAIL]},validate:function(){return r.validateUsername(this)},save:function(){var t=this;return this.startTransaction(function(e){return e.unlockAccount({username:t.settings.transformUsername(t.get("username"),i.UNLOCK_ACCOUNT),factorType:t.get("factorType")})}).fail(function(){t.set("factorType",i.RECOVERY_FACTOR_TYPE_EMAIL)})}},Form:{autoSave:!0,save:a.partial(t.loc,"account.unlock.sendEmail","login"),title:a.partial(t.loc,"account.unlock.title","login"),formChildren:function(){var e=[n.Input({placeholder:t.loc("account.unlock.email.or.username.placeholder","login"),name:"username",input:o,type:"text",params:{innerTooltip:t.loc("account.unlock.email.or.username.tooltip","login"),icon:"person-16-gray"}})];return this.settings.get("features.smsRecovery")&&e.push(n.View({View:'\t            <p class="sms-hint">\t              {{i18n code="recovery.sms.hint" bundle="login"}}\t            </p>\t          '})),e},initialize:function(){var e=this;this.listenTo(this,"save",function(){this.options.appState.set("username",this.model.get("username"))}),this.settings.get("features.smsRecovery")&&(this.$el.addClass("forgot-password-sms-enabled"),this.addButton({attributes:{"data-se":"sms-button"},type:"button",className:"button-primary sms-button",text:t.loc("account.unlock.sendText","login"),action:function(){e.clearErrors(),this.model.isValid()&&(this.model.set("factorType",i.RECOVERY_FACTOR_TYPE_SMS),e.trigger("save",this.model))}},{prepend:!0})),this.listenTo(this.state,"contactSupport",function(){this.add(s,".o-form-error-container")})}},Footer:l})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(301),i(295),i(296)],r=function(t,e,i,n){var r=t._;return i.extend({className:"account-unlocked",Model:function(){return{local:{userFullName:["string",!1,this.options.appState.get("userFullName")]}}},Form:{title:r.partial(t.loc,"account.unlock.unlocked.title","login"),subtitle:r.partial(t.loc,"account.unlock.unlocked.desc","login"),noButtonBar:!0,attributes:{"data-se":"account-unlocked"},formChildren:function(){return[n.Button({title:t.loc("goback","login"),className:"button button-primary button-wide",attributes:{"data-se":"back-button"},click:function(){this.state.set("navigateDir",e.DIRECTION_BACK),this.options.appState.trigger("navigate","")}})]}}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(301),i(295),i(296)],r=function(t,e,i,n){var r=t._;return i.extend({className:"account-unlock-email-sent",Model:function(){return{local:{userFullName:["string",!1,this.options.appState.get("userFullName")]}}},Form:{title:r.partial(t.loc,"account.unlock.emailSent.title","login"),subtitle:function(){var e=this.options.appState.get("username");return t.loc("account.unlock.emailSent.desc","login",[e])},noButtonBar:!0,attributes:{"data-se":"unlock-email-sent"},formChildren:function(){return[n.Button({title:t.loc("goback","login"),className:"button button-primary button-wide",attributes:{"data-se":"back-button"},click:function(){this.state.set("navigateDir",e.DIRECTION_BACK),this.options.appState.trigger("navigate","")}})]}},initialize:function(t){this.settings.callGlobalSuccess(e.UNLOCK_ACCOUNT_EMAIL_SENT,{username:t.appState.get("username")})}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(382),i(297),i(301),i(383),i(386),i(387)],r=function(t,e,i,n,r,s,o){var a=t._,l=t.View.extend({template:'\t      <a href="#" class="link help" data-se="back-link">\t        {{i18n code="goback" bundle="login"}}\t      </a>\t    ',className:"auth-footer",events:{"click .help":function(t){t.preventDefault(),this.back()}},back:function(){this.state.set("navigateDir",n.DIRECTION_BACK),this.options.appState.trigger("navigate","")}}),c=t.Form.extend({layout:"o-form-theme",autoSave:!0,noCancelButton:!0,title:t.loc("registration.form.title","login"),save:t.loc("registration.form.submit","login")});return i.extend({className:"registration",initialize:function(){var i=e.extend({url:"api/v1/schema"}),n=new i({schema:{properties:{firstName:{type:"string",description:"First Name","default":"Enter your first name",maxLength:255},lastName:{type:"string",description:"Last Name","default":"Enter your last name",maxLength:255},login:{type:"string",description:"Email Address",format:"email","default":"Enter your email",maxLength:255},accountLevel:{type:"string",description:"Account Level","enum":["Free","Premium","Platinum"]},referrer:{type:"string",description:"How did you hear about us?",maxLength:1024},password:{type:"string",description:"Password"}},required:["firstName","lastName","login","password","accountLevel"],fieldOrder:["login","password","firstName","lastName","accountLevel","referrer"]},passwordComplexity:{minLength:8,minLowerCase:1,minUpperCase:1,minNumber:1,minSymbol:0,excludeUsername:!0}},{parse:!0}),l=n.properties,u=l.createModelProperties(),d=t.Model.extend({settings:this.settings,appState:this.options.appState,props:u,save:function(){this.appState.set("username",this.get("email")),this.appState.trigger("navigate","signin/register-complete")}});this.model=new d;var h=function(e,i){var s=e.get("password")||"";a.each(n.passwordComplexity.enabledComplexities,function(n){var o=t.$("#password-complexity-"+n),a=this.get(n);o.removeClass("password-complexity-satisfied password-complexity-unsatisfied password-complexity-error"),r.complexities[n].doesComplexityMeet(a,s,e)?o.addClass("password-complexity-satisfied"):i?o.addClass("password-complexity-error"):o.addClass("password-complexity-unsatisfied")},n.passwordComplexity)},p=new c(this.toJSON());l.each(function(t){var e=s.createInputOptions(t),i=t.get("name");"password"!==i&&"login"!==i||(e.events={input:function(){h(this.model)}}),"password"===i&&(e.events.focusout=function(){h(this.model,!0)}),p.addInput(e)}),p.add(o.extend({passwordComplexity:n.passwordComplexity})),this.add(p),this.footer=new this.Footer(this.toJSON()),this.add(this.footer),this.addListeners()},Footer:l})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(383),i(384),i(385)],r=function(t,e,i,n){var r=t._,s=t.Model.extend({props:e.modelProps,parse:function(i){var n=t.Model.prototype.parse.apply(this,[i]);return this.enabledComplexities=[],r.map(n,function(t,i){e.complexities[i].isEnabled(t)&&this.enabledComplexities.push(i)},this),n}}),o=n.Collection.extend({createModelProperties:function(){var t=n.Collection.prototype.createModelProperties.apply(this);return r.each(t,function(t,e){t.required=!!this.get(e).get("required")},this),t}});return i.Model.extend({expand:["schema"],constructor:function(){this.properties=new o,t.BaseModel.apply(this,arguments)},parse:function(t){var e=i.Model.prototype.parse.apply(this,[t]),n=t.schema.required;r.isArray(n)&&r.each(n,function(t){var e=this.properties.get(t);e&&e.set("required",!0)},this);var o=t.schema.fieldOrder;return r.isArray(o)&&(r.each(o,function(t,e){var i=this.properties.get(t);i&&i.set("sortOrder",e)},this),this.properties.comparator="sortOrder",this.properties.sort()),r.isObject(t.passwordComplexity)?(this.passwordComplexity=new s(t.passwordComplexity,{parse:!0}),e=r.omit(e,"passwordComplexity")):this.passwordComplexity=new s({},{parse:!0}),e}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32)],r=function(t){var e=t._,i=function(t){return t>0},n=function(t,e,i){var n=i.match(t);return n=null!=n?n.length:0,n>=e},r={minLength:{modelProp:["number",!1,8],isEnabled:i,doesComplexityMeet:function(t,e){return e.length>=t},getI18nMessage:function(e){return t.loc("registration.passwordComplexity.minLength","login",[e])}},minLowerCase:{modelProp:["number",!1,1],isEnabled:i,doesComplexityMeet:e.partial(n,/[a-z]/g),getI18nMessage:function(e){return t.loc("registration.passwordComplexity.minLowerCase","login",[e])}},minUpperCase:{modelProp:["number",!1,1],isEnabled:i,doesComplexityMeet:e.partial(n,/[A-Z]/g),getI18nMessage:function(e){return t.loc("registration.passwordComplexity.minUpperCase","login",[e])}},minNumber:{modelProp:["number",!1,1],isEnabled:i,doesComplexityMeet:e.partial(n,/\d/g),getI18nMessage:function(e){return t.loc("registration.passwordComplexity.minNumber","login",[e])}},minSymbol:{modelProp:["number",!1,1],isEnabled:i,doesComplexityMeet:e.partial(n,/[^a-z\u00E0-\u00FC\d]/gi),getI18nMessage:function(e){return t.loc("registration.passwordComplexity.minSymbol","login",[e])}},excludeUsername:{modelProp:["boolean",!1,!0],isEnabled:function(t){return!!t},doesComplexityMeet:function(t,i,n){if(e.isEmpty(i))return!1;var r=n.get("login");return!e.isEmpty(r)&&i.indexOf(r)===-1},getI18nMessage:function(){return t.loc("registration.passwordComplexity.excludeUsername","login")}}};return{modelProps:e.mapObject(r,function(t){return t.modelProp}),complexities:r}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(138),i(33),i(385)],r=function(t,e,i,n){var r=function(e){var i=t.pick(e,"id","name","displayName"),n=t.map(e.schema.properties,function(e,i){return t({name:i}).chain().extend(e).omit("__metadata").value()});return t.each(n,function(t){t.__schemaMeta__=i}),n},s=e.extend({defaults:{id:void 0,displayName:void 0,name:void 0},constructor:function(){this.properties=new n.Collection,e.apply(this,arguments)},getProperties:function(){return this.properties},clone:function(){var t=e.prototype.clone.apply(this,arguments);return t.getProperties().set(this.getProperties().toJSON({verbose:!0})),t},parse:function(e){var i=r(e);return this.properties.set(i,{parse:!0}),t.omit(e,"schema")},trimProperty:function(e){return t.omit(e,"name")},toJSON:function(){var t=e.prototype.toJSON.apply(this,arguments);return t.schema={properties:{}},this.getProperties().each(function(e){var i=e.toJSON();t.schema.properties[i.name]=this.trimProperty(i)},this),t},save:function(){return this.getProperties().each(function(t){t.cleanup()}),e.prototype.save.apply(this,arguments)}}),o=i.extend({model:s});return{parseProperties:r,Model:s,Collection:o}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(2),i(34),i(138),i(144),i(176)],r=function(t,e,i,n,r){var s=r.STRING,o=r.NUMBER,a=r.INTEGER,l=function(t,e){return t+"of"+e},c=i.extend({constraintHandlers:{between:"_checkBetweenConstraints",greaterThan:"_checkGreaterThanConstraint",lessThan:"_checkLessThanConstraint",equals:"_checkEqualsConstraint"},idAttribute:"name",defaults:{name:"",title:void 0,type:void 0,description:void 0,required:!1,format:void 0,union:void 0,settings:{permissions:{SELF:r.PERMISSION.READ_ONLY}},__isSensitive__:i.ComputedProperty(["settings"],function(t){return!(!t||!t.sensitive)}),__userPermission__:r.PERMISSION.READ_ONLY,__displayType__:void 0,__displayTypeLabel__:i.ComputedProperty(["__displayType__"],function(t){return r.DATATYPE[t]||t}),__supportsMinMax__:!1,__isReadOnly__:i.ComputedProperty(["mutability"],function(t){return t===r.MUTABILITY.READONLY}),__isWriteOnly__:i.ComputedProperty(["mutability"],function(t){return t===r.MUTABILITY.WRITEONLY}),__displayScope__:void 0,__isScopeSelf__:i.ComputedProperty(["scope"],function(t){return t===r.SCOPE.SELF}),__isNoneScopeArrayType__:i.ComputedProperty(["__isScopeSelf__","__displayType__"],function(t,e){return!t&&r.isArrayDataType(e)}),__isImported__:i.ComputedProperty(["externalName"],function(t){return!!t}),__isFromBaseSchema__:i.ComputedProperty(["__schemaMeta__"],function(t){return t&&"base"===t.name})},initialize:function(){i.prototype.initialize.apply(this,arguments),this.listenTo(this,"change:__displayType__",this._updateTypeFormatConstraints),this.listenTo(this,"change:type change:format change:items",this._updateDisplayType),this.listenTo(this,"change:__minVal__ change:__maxVal__",this._updateMinMax),this.listenTo(this,"change:__equals__",this._convertEqualsToMinMax),this.listenTo(this,"change:__constraint__",this._setConstraintText),this._setConstraintText()},parse:function(e){return e=t.clone(e),"object"===e.type&&"image"===e.extendedType&&(e.type="image"),e.__displayType__=r.getDisplayType(e.type,e.format,e.items?e.items.type:void 0),this._setRangeConstraints(e),e.__supportsMinMax__=r.SUPPORTSMINMAX.indexOf(e.__displayType__)!=-1,e.__displayScope__=r.DISPLAYSCOPE[e.scope]||r.DISPLAYSCOPE.NA,e.settings&&e.settings.permissions&&e.settings.permissions.SELF&&(e.__userPermission__=e.settings.permissions.SELF),this._setMasterOverride(e),e},validate:function(){if(this.get("__supportsMinMax__")&&this.get("__constraint__")){var e=this.get("__constraint__"),i=this[this.constraintHandlers[e]];return t.isFunction(i)?i.call(this):void n.warn("No constraint handler found for: "+e)}},_checkBetweenConstraints:function(){var t=this.get("__minVal__"),e=this.get("__maxVal__");if(t||e){if(!t)return{__minVal__:"Min value is required"};if(!e)return{__maxVal__:"Max value is required"};var i=this._checkIntegerConstraints("__minVal__","Min value");return i?i:(i=this._checkIntegerConstraints("__maxVal__","Max value"),i?i:+t>=+e?{__maxVal__:"Max val must be greater than min val"}:void 0)}},_checkGreaterThanConstraint:function(){var t=this.get("__minVal__");if(t){var e=this._checkIntegerConstraints("__minVal__","Min value");return e?e:void 0}},_checkLessThanConstraint:function(){var t=this.get("__maxVal__");if(t){var e=this._checkIntegerConstraints("__maxVal__","Max value");return e?e:void 0}},_checkEqualsConstraint:function(){var t=this.get("__equals__");if(t){var e=this._checkIntegerConstraints("__equals__","Constraint");return e?e:void 0}},_checkIntegerConstraints:function(t,e){var i=this.get(t),n={};return isNaN(i)?(n[t]=e+" must be a number",n):+i<0?(n[t]=e+" must be greater than 0",n):void 0},_setMasterOverride:function(e){if(e.settings&&e.settings.masterOverride&&e.settings.masterOverride){var i=e.settings.masterOverride.value;t.isArray(i)&&!t.isEmpty(i)?(e.__masterOverrideType__="OVERRIDE",e.__masterOverrideValue__=i||[]):e.__masterOverrideType__=e.settings.masterOverride.type}else e.__masterOverrideType__="INHERIT"},_setRangeConstraints:function(t){t.__displayType__==s?(t.__minVal__=t.minLength,t.__maxVal__=t.maxLength):t.__displayType__!=a&&t.__displayType__!=o||(t.__minVal__=t.minimum,t.__maxVal__=t.maximum),t.__minVal__&&t.__maxVal__?t.__minVal__===t.__maxVal__?(t.__constraint__="equals",t.__equals__=t.__minVal__):t.__constraint__="between":!t.__minVal__&&t.__maxVal__?t.__constraint__="lessThan":!t.__maxVal__&&t.__minVal__&&(t.__constraint__="greaterThan")},_updateDisplayType:function(){var t=this.get("type");if(t===s&&this.get("format"))this.set("__displayType__",r.FORMATDISPLAYTYPE[this.get("format")]);else{var e=this.get("items")?this.get("items").type:void 0;t&&e?this.set("__displayType__",r.ARRAYDISPLAYTYPE[l(t,e)]):this.set("__displayType__",t)}},toJSON:function(){var t=i.prototype.toJSON.apply(this,arguments);return t.settings={permissions:{}},t.settings.permissions.SELF=this.get("__userPermission__"),this.get("__isSensitive__")&&(t.settings.sensitive=this.get("__isSensitive__")),"image"===this.get("type")&&(t.type="object",t.extendedType="image"),t=this._attributeOverrideToJson(t),t=this._normalizeUnionValue(t)},_attributeOverrideToJson:function(i){var n=this.get("__masterOverrideType__"),r=this.get("__masterOverrideValue__");return"OKTA_MASTERED"===n?i.settings.masterOverride={type:"OKTA_MASTERED"}:"OVERRIDE"===n&&(i.settings.masterOverride={type:"ORDERED_LIST",value:[]},r instanceof e?t.each(r.toJSON(),function(t){i.settings.masterOverride.value.push(t.id)}):r instanceof Array&&(i.settings.masterOverride.value=r),t.isEmpty(i.settings.masterOverride.value)&&delete i.settings.masterOverride),"INHERIT"===n&&delete i.settings.masterOverride,i},_normalizeUnionValue:function(t){return this.get("__isNoneScopeArrayType__")||(t.union=void 0),t},_updateTypeFormatConstraints:function(){var t=this.get("__displayType__");this.unset("format",{silent:!0}),this.unset("items",{silent:!0}),this.set(r.DISPLAYTYPES[t]),t!=o&&t!=a&&(this.unset("minimum"),this.unset("maximum")),t!=s&&(this.unset("minLength"),this.unset("maxLength")),this.unset("__minVal__"),this.unset("__maxVal__"),this.unset("__equals__"),this.set("__supportsMinMax__",r.SUPPORTSMINMAX.indexOf(this.get("__displayType__"))!=-1)},_updateMinMax:function(){var t,e,i=this.get("__displayType__");i===s?(t="minLength",e="maxLength"):i!=a&&i!=o||(t="minimum",e="maximum"),this.get("__minVal__")?this.set(t,parseInt(this.get("__minVal__"),10)):this.unset(t),this.get("__maxVal__")?this.set(e,parseInt(this.get("__maxVal__"),10)):this.unset(e)},_convertEqualsToMinMax:function(){var t=this.get("__equals__");t&&(this.set("__minVal__",t),this.set("__maxVal__",t))},_setConstraintText:function(){var t=this.get("__constraint__"),e=this.get("__minVal__"),i=this.get("__maxVal__"),n=this.get("__equals__");switch(t){case"between":this.set("__constraintText__","Between "+e+" and "+i);break;case"greaterThan":this.set("__constraintText__","Greater than "+e);break;case"lessThan":this.set("__constraintText__","Less than "+i);break;case"equals":this.set("__constraintText__","Equals "+n);break;default:this.set("__constraintText__","")}},cleanup:function(){"lessThan"===this.get("__constraint__")?this.unset("__minVal__"):"greaterThan"===this.get("__constraint__")&&this.unset("__maxVal__"),this.get("scope")!==r.SCOPE.SYSTEM&&(this.get("__isScopeSelf__")===!0?this.set({scope:r.SCOPE.SELF},{silent:!0}):this.unset("scope"))},isEnumType:function(){return!!this.getEnumValues()},getEnumValues:function(){return this.get("enum")||this.get("items")&&this.get("items")["enum"]}}),u=e.extend({model:c,clone:function(){return new this.constructor(this.toJSON({verbose:!0}),{parse:!0})},areAllReadOnly:function(){return t.all(this.pluck("__isReadOnly__"))},createModelProperties:function(){return this.reduce(function(e,i){var n=i.get("type");return e[i.id]=t.clone(r.DISPLAYTYPES[n]),r.SUPPORTSMINMAX.indexOf(n)!=-1&&(e[i.id].minLength=i.get("minLength"),e[i.id].maxLength=i.get("maxLength")),"string"===n&&(e[i.id].format=i.get("format")),e},{})}});return{Model:c,Collection:u}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(271),i(306)],r=function(t,e,i){var n=t._,r=function(t){var r=e.createInputOptions(t);switch(r="select"===r.type?n.extend(r,{label:t.get("description")}):n.extend(r,{label:!1,"label-top":!0,placeholder:t.get("description")}),t.get("name")){case"login":r.input=i,r.params={icon:"person-16-gray"};break;case"password":r.type="password",r.input=i,r.params={icon:"remote-lock-16"}}return r};return{createInputOptions:r}}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(383)],r=function(t,e){var i=t._,n=t.View.extend({name:"",message:"",id:function(){return"password-complexity-"+this.name},className:"password-complexity-unsatisfied",template:'\t      <p>\t        <span class="icon icon-16 error-16-small"/>\t        {{message}}\t      </p>\t    ',getTemplateData:function(){return{message:this.message}}});return t.View.extend({className:"password-complexity",children:function(){return i.map(this.passwordComplexity.enabledComplexities,function(t){var i=this.get(t),r=e.complexities[t].getI18nMessage(i);return n.extend({name:t,message:r})},this.passwordComplexity)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(301),i(295),i(296)],r=function(t,e,i,n){var r=t._;return i.extend({className:"registration-complete",Model:function(){},Form:{title:r.partial(t.loc,"registration.complete.title","login"),noButtonBar:!0,formChildren:function(){return[n.View({View:t.View.extend({template:"\t              <span>{{desc}}</span>\t              ",getTemplateData:function(){var e=this.options.appState.get("username");return{desc:t.loc("registration.complete.desc","login",[e])}}})})]}}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(21),i(294),i(390),i(317)],r=function(t,e,i,n,r){var s=t._;return t.View.extend({template:'\t      <div class="beacon-blank auth-beacon">\t        <div class="beacon-blank js-blank-beacon-border auth-beacon-border"></div>\t      </div>\t      <div class="bg-helper auth-beacon auth-beacon-factor {{className}}" data-se="factor-beacon">\t        <div class="okta-sign-in-beacon-border auth-beacon-border"></div>\t      </div>\t      <div data-type="factor-types-dropdown" class="factors-dropdown-wrap"></div>\t    ',events:{"click .auth-beacon-factor":function(t){t.preventDefault(),t.stopPropagation(),this.$(".dropdown .options").toggle()}},initialize:function(){this.options.appState.set("beaconType","factor")},getTemplateData:function(){var t,e,i=this.options.appState.get("factors");return t=i?i.findWhere(s.pick(this.options,"provider","factorType")):new r.Model(this.options.appState.get("factor"),this.toJSON()),e=t.get("iconClassName"),{className:e||""}},postRender:function(){this.options.animate&&this.$(".auth-beacon-factor").fadeIn(200);var t=this.options.appState;t.get("hasMfaRequiredOptions")&&this.add(n,'[data-type="factor-types-dropdown"]')},fadeOut:function(){var t=e.defer();return this.$(".auth-beacon-factor").fadeOut(200,function(){t.resolve()}),t.promise},equals:function(t,e){return t&&this instanceof t&&e.provider===this.options.provider&&(e.factorType===this.options.factorType||i.isOktaVerify(e.provider,e.factorType)&&i.isOktaVerify(this.options.provider,this.options.factorType))}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(391),i(196)],r=function(t,e,i){var n=t._,r=t.$;return r(document).click(function(t){var e=r(t.target),i=e.closest(".option-selected").length>0&&e.closest(".dropdown").length>0;i||r(".dropdown .options").hide()}),i.extend({className:"bg-helper icon-button",events:{"click a.option-selected":function(t){t.preventDefault(),n.result(this,"disabled")?t.stopPropagation():this.$(".options").toggle()},"click .dropdown-disabled":function(t){t.preventDefault(),t.stopPropagation()}},initialize:function(){this.addOption(e.getDropdownOption("TITLE")),this.options.appState.get("factors").each(function(t){this.addOption(e.getDropdownOption(t.get("factorName")),{model:t}),this.listenTo(this.last(),"options:toggle",function(){this.$(".options").hide()})},this)}})}.apply(e,n),!(void 0!==r&&(t.exports=r))},function(t,e,i){var n,r;n=[i(32),i(299)],r=function(t,e){var i=t._,n=function(t){var i=e.createVerifyUrl(t.get("provider"),t.get("factorType")),n=this;this.model.manageTransaction(function(t,e){return"MFA_CHALLENGE"===t.status&&t.prev?t.prev().then(function(t){n.trigger("options:toggle"),e(t),n.options.appState.trigger("navigate",i)}):(n.trigger("options:toggle"),void n.options.appState.trigger("navigate",i))})},r={TITLE:{title:i.partial(t.loc,"mfa.factors.dropdown.title","login"),className:"dropdown-list-title"},OKTA_VERIFY:{icon:"factor-icon mfa-okta-verify-30",title:function(){return this.model.get("factorLabel")},action:function(){n.call(this,this.model)}},OKTA_VERIFY_PUSH:{icon:"factor-icon mfa-okta-verify-30",title:function(){return this.model.get("factorLabel")},action:function(){n.call(this,this.model)}},GOOGLE_AUTH:{icon:"factor-icon mfa-google-auth-30",title:function(){return this.model.get("factorLabel")},action:function(){n.call(this,this.model)}},SYMANTEC_VIP:{icon:"factor-icon mfa-symantec-30",title:function(){return this.model.get("factorLabel")},action:function(){n.call(this,this.model)}},RSA_SECURID:{icon:"factor-icon mfa-rsa-30",title:i.partial(t.loc,"factor.totpHard.rsaSecurId","login"),action:function(){n.call(this,this.model)}},ON_PREM:{icon:"factor-icon mfa-onprem-30",title:function(){return this.model.get("factorLabel")},action:function(){n.call(this,this.model)}},DUO:{icon:"factor-icon mfa-duo-30",title:function(){return this.model.get("factorLabel")},action:function(){n.call(this,this.model)}},DUO_PUSH:{icon:"duo-push-16",className:"suboption",title:i.partial(t.loc,"mfa.duoSecurity.push","login",["XXX-XXX-7890"])},DUO_SMS:{icon:"duo-sms-16",className:"suboption",title:i.partial(t.loc,"mfa.duoSecurity.sms","login",["XXX-XXX-7890"])},DUO_CALL:{icon:"duo-call-16",className:"suboption",title:i.partial(t.loc,"mfa.duoSecurity.call","login",["XXX-XXX-7890"])},YUBIKEY:{icon:"factor-icon mfa-yubikey-30",title:function(){return this.model.get("factorLabel")},action:function(){n.call(this,this.model)}},SMS:{icon:"factor-icon mfa-sms-30",title:function(){return this.model.get("factorLabel")},action:function(){n.call(this,this.model)}},CALL:{icon:"factor-icon mfa-call-30",title:function(){return this.model.get("factorLabel")},action:function(){n.call(this,this.model)}},QUESTION:{icon:"factor-icon mfa-question-30",title:function(){return this.model.get("factorLabel")},action:function(){n.call(this,this.model)}},WINDOWS_HELLO:{icon:"factor-icon mfa-windows-hello-30",title:function(){return this.model.get("factorLabel")},action:function(){n.call(this,this.model)}},U2F:{icon:"factor-icon mfa-u2f-30",title:function(){return this.model.get("factorLabel")},action:function(){n.call(this,this.model)}},EMAIL:{icon:"factor-icon mfa-email-30",title:function(){return this.model.get("factorLabel")},action:function(){n.call(this,this.model)}}};return{getDropdownOption:function(t){return r[t]}}}.apply(e,n),!(void 0!==r&&(t.exports=r))}])});

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v1.12.1
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-02-22T19:07Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var deletedIds = [];

	var document = window.document;

	var slice = deletedIds.slice;

	var concat = deletedIds.concat;

	var push = deletedIds.push;

	var indexOf = deletedIds.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "1.12.1",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1, IE<9
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the", "base64"));
  res.write(new Buffer(" new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: deletedIds.sort,
		splice: deletedIds.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var src, copyIsArray, copy, name, options, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}

		// extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		// See test/unit/core.js for details concerning isFunction.
		// Since version 1.3, DOM methods and functions like alert
		// aren't supported. They return false on IE (#2968).
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},

		isArray: Array.isArray || function( obj ) {
			return jQuery.type( obj ) === "array";
		},

		isWindow: function( obj ) {
			/* jshint eqeqeq: false */
			return obj != null && obj == obj.window;
		},

		isNumeric: function( obj ) {

			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		isPlainObject: function( obj ) {
			var key;

			// Must be an Object.
			// Because of IE, we also have to check the presence of the constructor property.
			// Make sure that DOM nodes and window objects don't pass through, as well
			if ( !obj || jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			try {

				// Not own constructor property must be Object
				if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
					return false;
				}
			} catch ( e ) {

				// IE8,9 Will throw exceptions on certain host objects #9897
				return false;
			}

			// Support: IE<9
			// Handle iteration over inherited properties before own properties.
			if ( !support.ownFirst ) {
				for ( key in obj ) {
					return hasOwn.call( obj, key );
				}
			}

			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own.
			for ( key in obj ) {}

			return key === undefined || hasOwn.call( obj, key );
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},

		// Workarounds based on findings by Jim Driscoll
		// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
		globalEval: function( data ) {
			if ( data && jQuery.trim( data ) ) {

				// We use execScript on Internet Explorer
				// We use an anonymous function so that context is window
				// rather than jQuery in Firefox
				( window.execScript || function( data ) {
					window[ "eval" ].call( window, data ); // jscs:ignore requireDotNotation
				} )( data );
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1, IE<9
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			var len;

			if ( arr ) {
				if ( indexOf ) {
					return indexOf.call( arr, elem, i );
				}

				len = arr.length;
				i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

				for ( ; i < len; i++ ) {

					// Skip accessing in sparse arrays
					if ( i in arr && arr[ i ] === elem ) {
						return i;
					}
				}
			}

			return -1;
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			while ( j < len ) {
				first[ i++ ] = second[ j++ ];
			}

			// Support: IE<9
			// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
			if ( len !== len ) {
				while ( second[ j ] !== undefined ) {
					first[ i++ ] = second[ j++ ];
				}
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var args, proxy, tmp;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: function() {
			return +( new Date() );
		},

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = deletedIds[ Symbol.iterator ];
	}
	/* jshint ignore: end */

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
		", "base64"));
  res.write(new Buffer("			i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( jQuery.inArray( elem, qualifier ) > -1 ) !== not;
		} );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				ret = [],
				self = this,
				len = self.length;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// init accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector.charAt( 0 ) === "<" &&
					selector.charAt( selector.length - 1 ) === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {

							// Handle the case where IE and Opera return items
							// by name instead of ID
							if ( elem.id !== match[ 2 ] ) {
								return rootjQuery.find( selector );
							}

							// Otherwise, we inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return typeof root.ready !== "undefined" ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var i,
				targets = jQuery( target, this ),
				len = targets.length;

			return this.filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within
		// the matched set of elements
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// index in selector
			if ( typeof elem === "string" ) {
				return jQuery.inArray( this[ 0 ], jQuery( elem ) );
			}

			// Locate the position of the desired element
			return jQuery.inArray(

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem, this );
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		do {
			cur = cur[ dir ];
		} while ( cur && cur.nodeType !== 1 );

		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return jQuery.nodeName( elem, "iframe" ) ?
				elem.contentDocument || elem.contentWindow.document :
				jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var ret = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				ret = jQuery.filter( selector, ret );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					ret = jQuery.uniqueSort( ret );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					ret = ret.reverse();
				}
			}

			return this.pushStack( ret );
		};
	} );
	var rnotwhite = ( /\S+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = true;
					if ( !memory ) {
						self.disable();
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];

								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add( function() {

						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );

						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}

			// if we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	} );


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {

		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );

	/**
	 * Clean-up method for dom ready events
	 */
	function detach() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed );
			window.removeEventListener( "load", completed );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	}

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener ||
			window.event.type === "load" ||
			document.readyState === "complete" ) {

			detach();
			jQuery.ready();
		}
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE6-10
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );

			// Standards-based browsers support DOMContentLoaded
			} else if ( document.addEventListener ) {

				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );

			// If IE event model is used
			} else {

				// Ensure firing before onload, maybe late but safe also for iframes
				document.attachEvent( "onreadystatechange", completed );

				// A fallback to window.onload, that will always work
				window.attachEvent( "onload", completed );

				// If IE and not a frame
				// continually check to see if the document is ready
				var top = false;

				try {
					top = window.frameElement == null && document.documentElement;
				} catch ( e ) {}

				if ( top && top.doScroll ) {
					( function doScrollCheck() {
						if ( !jQuery.isReady ) {

							try {

								// Use the trick by Diego Perini
								// http://javascript.nwbox.com/IEContentLoaded/
								top.doScroll( "left" );
							} catch ( e ) {
								return window.setTimeout( doScrollCheck, 50 );
							}

							// detach all dom ready events
							detach();

							// and execute any waiting functions
							jQuery.ready();
						}
					} )();
				}
			}
		}
		return readyList.promise( obj );
	};

	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();




	// Support: IE<9
	// Iteration over object's inherited properties before its own
	var i;
	for ( i in jQuery( support ) ) {
		break;
	}
	support.ownFirst = i === "0";

	// Note: most support tests are defined in their respective modules.
	// false until the test is run
	support.inlineBlockNeedsLayout = false;

	// Execute ASAP in case we need to set body.style.zoom
	jQuery( function() {

		// Minified: var a,b,c,d
		var val, div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {

			// Return for frameset docs that don't have a body
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		if ( typeof div.style.zoom !== "undefined" ) {

			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

			support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
			if ( val ) {

				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );
	} );


	( function() {
		var div = document.createElement( "div" );

		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch ( e ) {
			support.deleteExpando = false;
		}

		// Null elements to avoid leaks in IE.
		div = null;
	} )();
	var acceptData = function( elem ) {
		var noData = jQuery.noData[ ( elem.nodeName + " " ).toLowerCase() ],
			nodeType = +elem.nodeType || 1;

		// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
		return nodeType !== 1 && nodeType !== 9 ?
			false :

			// Nodes accept data unless otherwise specified; rejection can be conditional
			!noData || noData !== true && elem.getAttribute( "classid" ) === noData;
	};




	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /([A-Z])/g;

	function dataAttr( elem, key, data ) {

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {

			var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :

						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				jQuery.data( elem, key, data );

			} else {
				data = undefined;
			}
		}

		return data;
	}

	// checks a cache object for emptiness
	function isEmptyDataObject( obj ) {
		var name;
		for ( name in obj ) {

			// if the public data object is empty, the private is still empty
			if ( name === "data" && jQuery.isEmptyObject( obj[ name ] ) ) {
				continue;
			}
			if ( name !== "toJSON" ) {
				return false;
			}
		}

		return true;
	}

	function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !acceptData( elem ) ) {
			return;
		}

		var ret, thisCache,
			internalKey = jQuery.expando,

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( ( !id || !cache[ id ] || ( !pvt && !cache[ id ].data ) ) &&
			data === undefined && typeof name === "string" ) {
			return;
		}

		if ( !id ) {

			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {

			// Avoid exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( typeof name === "string" ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	}

	function internalRemoveData( elem, name, pvt ) {
		if ( !acceptData( elem ) ) {
			return;
		}

		var thisCache, i,
			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,
			id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split( " " );
						}
					}
				} else {

					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = name.concat( jQuery.map( name, jQuery.camelCase ) );
				}

				i = name.length;
				while ( i-- ) {
					delete thisCache[ name[ i ] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( pvt ? !isEmptyDataObject( thisCache ) : !jQuery.isEmptyObject( thisCache ) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject( cache[ id ] ) ) {
				return;
			}
		}

		// Destroy the cache
		if ( isNode ) {
			jQuery.cleanData( [ elem ], true );

		// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
		/* jshint eqeqeq: false */
		} else if ( support.deleteExpando || cache != cache.window ) {
			/* jshint eqeqeq: true */
			delete cache[ id ];

		// When all else fails, undefined
		} else {
			cache[ id ] = undefined;
		}
	}

	jQuery.extend( {
		cache: {},

		// The following elements (space-suffixed to avoid Object.prototype collisions)
		// throw uncatchable exceptions if you attempt to set expando properties
		noData: {
			"applet ": true,
			"embed ": true,

			// ...but Flash objects (which have this classid) *can* handle expandos
			"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
		},

		hasData: function( elem ) {
			elem = elem.nodeType ? jQuery.cache[ elem[ jQuery.expando ] ] : elem[ jQuery.expando ];
			return !!elem && !isEmptyDataObject( elem );
		},

		data: function( elem, name, data ) {
			return internalData( elem, name, data );
		},

		removeData: function( elem, name ) {
			return internalRemoveData( elem, name );
		},

		// For internal use only.
		_data: function( elem, name, data ) {
			return internalData( elem, name, data, true );
		},

		_removeData: function( elem, name ) {
			return internalRemoveData( elem, name, true );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Special expections of .data basically thwart jQuery.access,
			// so implement the relevant behavior ourselves

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = jQuery.data( elem );

					if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						jQuery._data( elem, "parsedAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					jQuery.data( this, key );
				} );
			}

			return arguments.length > 1 ?

				// Sets one value
				this.each( function() {
					jQuery.data( this, key, value );
				} ) :

				// Gets one value
				// Try to fetch any internally stored data first
				elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
		},

		removeData: function( key ) {
			return this.each( function() {
				jQuery.removeData( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = jQuery._data( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = jQuery._data( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// not intended for public consumption - generates a queueHooks object,
		// or returns the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return jQuery._data( elem, key ) || jQuery._data( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					jQuery._removeData( elem, type + "queue" );
					jQuery._removeData( elem, key );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = jQuery._data( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );


	( function() {
		var shrinkWrapBlocksVal;

		support.shrinkWrapBlocks = function() {
			if ( shrinkWrapBlocksVal != null ) {
				return shrinkWrapBlocksVal;
			}

			// Will be changed later if needed.
			shrinkWrapBlocksVal = false;

			// Minified: var b,c,d
			var div, body, container;

			body = document.getElementsByTagName( "body" )[ 0 ];
			if ( !body || !body.style ) {

				// Test fired too early or in an unsupported environment, exit.
				return;
			}

			// Setup
			div = document.createElement( "div" );
			container = document.createElement( "div" );
			container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
			body.appendChild( container ).appendChild( div );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			if ( typeof div.style.zoom !== "undefined" ) {

				// Reset CSS: box-sizing; display; margin; border
				div.style.cssText =

					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;" +
					"padding:1px;width:1px;zoom:1";
				div.appendChild( document.createElement( "div" ) ).style.width = "5px";
				shrinkWrapBlocksVal = div.offsetWidth !== 3;
			}

			body.removeChild( container );

			return shrinkWrapBlocksVal;
		};

	} )();
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {

			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};



	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );

			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}


	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn(
						elems[ i ],
						key,
						raw ? value : value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([\w:-]+)/ );

	var rscriptType = ( /^$|\/(?:java|ecma)script/i );

	var rleadingWhitespace = ( /^\s+/ );

	var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|" +
			"details|dialog|figcaption|figure|footer|header|hgroup|main|" +
			"mark|meter|nav|output|picture|progress|section|summary|template|time|video";



	function createSafeFragment( document ) {
		var list = nodeNames.split( "|" ),
			safeFrag = document.createDocumentFragment();

		if ( safeFrag.createElement ) {
			while ( list.length ) {
				safeFrag.createElement(
					list.pop()
				);
			}
		}
		return safeFrag;
	}


	( function() {
		var div = document.createElement( "div" ),
			fragment = document.createDocumentFragment(),
			input = document.createElement( "input" );

		// Setup
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

		// IE strips leading whitespace when .innerHTML is used
		support.leadingWhitespace = div.firstChild.nodeType === 3;

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		support.tbody = !div.getElementsByTagName( "tbody" ).length;

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		support.html5Clone =
			document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

		// Check if a disconnected checkbox will retain its checked
		// value of true after appended to the DOM (IE6/7)
		input.type = "checkbox";
		input.checked = true;
		fragment.appendChild( input );
		support.appendChecked = input.checked;

		// Make sure textarea (and checkbox) defaultValue is properly cloned
		// Support: IE6-IE11+
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

		// #11217 - WebKit loses check when the name is after the checked attribute
		fragment.appendChild( div );

		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input = document.createElement( "input" );
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
		// old WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<9
		// Cloned elements keep attachEvent handlers, we use addEventListener on IE9+
		support.noCloneEvent = !!div.addEventListener;

		// Support: IE<9
		// Since attributes and properties are the same in IE,
		// cleanData must set properties to undefined rather than use removeAttribute
		div[ jQuery.expando ] = 1;
		support.attributes = !div.getAttribute( jQuery.expando );
	} )();


	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],

		// Support: IE8
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>" ]
	};

	// Support: IE8-IE9
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {
		var elems, elem,
			i = 0,
			found = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
					undefined;

		if ( !found ) {
			for ( found = [], elems = context.childNodes || context;
				( elem = elems[ i ] ) != null;
				i++
			) {
				if ( !tag || jQuery.nodeName( elem, tag ) ) {
					found.push( elem );
				} else {
					jQuery.merge( found, getAll( elem, tag ) );
				}
			}
		}

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], found ) :
			found;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var elem,
			i = 0;
		for ( ; ( elem = elems[ i ] ) != null; i++ ) {
			jQuery._data(
				elem,
				"globalEval",
				!refElements || jQuery._data( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/,
		rtbody = /<tbody/i;

	function fixDefaultChecked( elem ) {
		if ( rcheckableType.test( elem.type ) ) {
			elem.defaultChecked = elem.checked;
		}
	}

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[ 0 ] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[ 1 ] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( ( tbody = elem.childNodes[ j ] ), "tbody" ) &&
								!tbody.childNodes.length ) {

								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}

				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	}


	( function() {
		var i, eventName,
			div = document.createElement( "div" );

		// Support: IE<9 (lack submit/change bubble), Firefox (lack focus(in | out) events)
		for ( i in { submit: true, change: true, focusin: true } ) {
			eventName = "on" + i;

			if ( !( support[ i ] = eventName in window ) ) {

				// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
				div.setAttribute( eventName, "t" );
				support[ i ] = div.attributes[ eventName ].expando === false;
			}
		}

		// Null elements to avoid leaks in IE.
		div = null;
	} )();


	var rformElems = /^(?:input|select|textarea)$/i,
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {
			var tmp, events, t, handleObjIn,
				special, eventHandle, handleObj,
				handlers, type, namespaces, origType,
				elemData = jQuery._data( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" &&
						( !e || jQuery.event.triggered !== e.type ) ?
						jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
						undefined;
				};

				// Add elem as a property of the handle fn to prevent a memory leak
				// with IE non-native events
				eventHandle.elem = elem;
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise ", "base64"));
  res.write(new Buffer("given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener/attachEvent if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						// Bind the global event handler to the element
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle, false );

						} else if ( elem.attachEvent ) {
							elem.attachEvent( "on" + type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

			// Nullify elem to prevent memory leaks in IE
			elem = null;
		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
			var j, handleObj, tmp,
				origCount, t, events,
				special, handlers, type,
				namespaces, origType,
				elemData = jQuery.hasData( elem ) && jQuery._data( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				delete elemData.handle;

				// removeData also checks for emptiness and clears the expando if empty
				// so use it instead of delete
				jQuery._removeData( elem, "events" );
			}
		},

		trigger: function( event, data, elem, onlyHandlers ) {
			var handle, ontype, cur,
				bubbleType, special, tmp, i,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] &&
					jQuery._data( cur, "handle" );

				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if (
					( !special._default ||
					 special._default.apply( eventPath.pop(), data ) === false
					) && acceptData( elem )
				) {

					// Call a native DOM method on the target with the same name name as the event.
					// Can't use an .isFunction() check here because IE6/7 fails that test.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						try {
							elem[ type ]();
						} catch ( e ) {

							// IE<9 dies on focus/blur to hidden element (#1486,#12518)
							// only reproducible on winXP IE8 native, not IE9 in IE8 mode
						}
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {

				/* jshint eqeqeq: false */
				for ( ; cur != this; cur = cur.parentNode || this ) {
					/* jshint eqeqeq: true */

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: IE<9
			// Fix target property (#1925)
			if ( !event.target ) {
				event.target = originalEvent.srcElement || document;
			}

			// Support: Safari 6-8+
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			// Support: IE<9
			// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
			event.metaKey = !!event.metaKey;

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: ( "button buttons clientX clientY fromElement offsetX offsetY " +
				"pageX pageY screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var body, eventDoc, doc,
					button = original.button,
					fromElement = original.fromElement;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add relatedTarget, if necessary
				if ( !event.relatedTarget && fromElement ) {
					event.relatedTarget = fromElement === event.target ?
						original.toElement :
						fromElement;
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						try {
							this.focus();
							return false;
						} catch ( e ) {

							// Support: IE<9
							// If we error on focus to hidden element (#1486, #12518),
							// let .trigger() run the handlers
						}
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		},

		// Piggyback on a donor event to simulate a different one
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true

					// Previously, `originalEvent: {}` was set here, so stopPropagation call
					// would not be triggered on donor event, since in our own
					// jQuery.event.stopPropagation function we had a check for existence of
					// originalEvent.stopPropagation method, so, consequently it would be a noop.
					//
					// Guard for simulated events was moved to jQuery.event.stopPropagation function
					// since `originalEvent` should point to the original event for the
					// constancy with other events and for more focused logic
				}
			);

			jQuery.event.trigger( e, null, elem );

			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}
	};

	jQuery.removeEvent = document.removeEventListener ?
		function( elem, type, handle ) {

			// This "if" is needed for plain objects
			if ( elem.removeEventListener ) {
				elem.removeEventListener( type, handle );
			}
		} :
		function( elem, type, handle ) {
			var name = "on" + type;

			if ( elem.detachEvent ) {

				// #8545, #7054, preventing memory leaks for custom events in IE6-8
				// detachEvent needed property on element, by name of that event,
				// to properly expose it to GC
				if ( typeof elem[ name ] === "undefined" ) {
					elem[ name ] = null;
				}

				elem.detachEvent( name, handle );
			}
		};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: IE < 9, Android < 4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;
			if ( !e ) {
				return;
			}

			// If preventDefault exists, run it on the original event
			if ( e.preventDefault ) {
				e.preventDefault();

			// Support: IE
			// Otherwise set the returnValue property of the original event to false
			} else {
				e.returnValue = false;
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( !e || this.isSimulated ) {
				return;
			}

			// If stopPropagation exists, run it on the original event
			if ( e.stopPropagation ) {
				e.stopPropagation();
			}

			// Support: IE
			// Set the cancelBubble property of the original event to true
			e.cancelBubble = true;
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && e.stopImmediatePropagation ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	// IE submit delegation
	if ( !support.submit ) {

		jQuery.event.special.submit = {
			setup: function() {

				// Only need this for delegated form submit events
				if ( jQuery.nodeName( this, "form" ) ) {
					return false;
				}

				// Lazy-add a submit handler when a descendant form may potentially be submitted
				jQuery.event.add( this, "click._submit keypress._submit", function( e ) {

					// Node name check avoids a VML-related crash in IE (#9807)
					var elem = e.target,
						form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ?

							// Support: IE <=8
							// We use jQuery.prop instead of elem.form
							// to allow fixing the IE8 delegated submit issue (gh-2332)
							// by 3rd party polyfills/workarounds.
							jQuery.prop( elem, "form" ) :
							undefined;

					if ( form && !jQuery._data( form, "submit" ) ) {
						jQuery.event.add( form, "submit._submit", function( event ) {
							event._submitBubble = true;
						} );
						jQuery._data( form, "submit", true );
					}
				} );

				// return undefined since we don't need an event listener
			},

			postDispatch: function( event ) {

				// If form was submitted by the user, bubble the event up the tree
				if ( event._submitBubble ) {
					delete event._submitBubble;
					if ( this.parentNode && !event.isTrigger ) {
						jQuery.event.simulate( "submit", this.parentNode, event );
					}
				}
			},

			teardown: function() {

				// Only need this for delegated form submit events
				if ( jQuery.nodeName( this, "form" ) ) {
					return false;
				}

				// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
				jQuery.event.remove( this, "._submit" );
			}
		};
	}

	// IE change delegation and checkbox/radio fix
	if ( !support.change ) {

		jQuery.event.special.change = {

			setup: function() {

				if ( rformElems.test( this.nodeName ) ) {

					// IE doesn't fire change on a check/radio until blur; trigger it on click
					// after a propertychange. Eat the blur-change in special.change.handle.
					// This still fires onchange a second time for check/radio after blur.
					if ( this.type === "checkbox" || this.type === "radio" ) {
						jQuery.event.add( this, "propertychange._change", function( event ) {
							if ( event.originalEvent.propertyName === "checked" ) {
								this._justChanged = true;
							}
						} );
						jQuery.event.add( this, "click._change", function( event ) {
							if ( this._justChanged && !event.isTrigger ) {
								this._justChanged = false;
							}

							// Allow triggered, simulated change events (#11500)
							jQuery.event.simulate( "change", this, event );
						} );
					}
					return false;
				}

				// Delegated event; lazy-add a change handler on descendant inputs
				jQuery.event.add( this, "beforeactivate._change", function( e ) {
					var elem = e.target;

					if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "change" ) ) {
						jQuery.event.add( elem, "change._change", function( event ) {
							if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
								jQuery.event.simulate( "change", this.parentNode, event );
							}
						} );
						jQuery._data( elem, "change", true );
					}
				} );
			},

			handle: function( event ) {
				var elem = event.target;

				// Swallow native change events from checkbox/radio, we already triggered them above
				if ( this !== elem || event.isSimulated || event.isTrigger ||
					( elem.type !== "radio" && elem.type !== "checkbox" ) ) {

					return event.handleObj.handler.apply( this, arguments );
				}
			},

			teardown: function() {
				jQuery.event.remove( this, "._change" );

				return !rformElems.test( this.nodeName );
			}
		};
	}

	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = jQuery._data( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = jQuery._data( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						jQuery._removeData( doc, fix );
					} else {
						jQuery._data( doc, fix, attaches );
					}
				}
			};
		} );
	}

	jQuery.fn.extend( {

		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		},

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	var rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
		rnoshimcache = new RegExp( "<(?:" + nodeNames + ")[\\s/>]", "i" ),
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,

		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
		safeFragment = createSafeFragment( document ),
		fragmentDiv = safeFragment.appendChild( document.createElement( "div" ) );

	// Support: IE<8
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( jQuery.find.attr( elem, "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
			return;
		}

		var type, i, l,
			oldData = jQuery._data( src ),
			curData = jQuery._data( dest, oldData ),
			events = oldData.events;

		if ( events ) {
			delete curData.handle;
			curData.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}

		// make the cloned public data object a copy from the original
		if ( curData.data ) {
			curData.data = jQuery.extend( {}, curData.data );
		}
	}

	function fixCloneNodeIssues( src, dest ) {
		var nodeName, e, data;

		// We do not need to do anything for non-Elements
		if ( dest.nodeType !== 1 ) {
			return;
		}

		nodeName = dest.nodeName.toLowerCase();

		// IE6-8 copies events bound via attachEvent when using cloneNode.
		if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
			data = jQuery._data( dest );

			for ( e in data.events ) {
				jQuery.removeEvent( dest, e, data.handle );
			}

			// Event data gets referenced instead of copied if the expando gets copied too
			dest.removeAttribute( jQuery.expando );
		}

		// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
		if ( nodeName === "script" && dest.text !== src.text ) {
			disableScript( dest ).text = src.text;
			restoreScript( dest );

		// IE6-10 improperly clones children of object elements using classid.
		// IE10 throws NoModificationAllowedError if parent is null, #12132.
		} else if ( nodeName === "object" ) {
			if ( dest.parentNode ) {
				dest.outerHTML = src.outerHTML;
			}

			// This path appears unavoidable for IE9. When cloning an object
			// element in IE9, the outerHTML strategy above is not sufficient.
			// If the src has innerHTML and the destination does not,
			// copy the src.innerHTML into the dest.innerHTML. #10324
			if ( support.html5Clone && ( src.innerHTML && !jQuery.trim( dest.innerHTML ) ) ) {
				dest.innerHTML = src.innerHTML;
			}

		} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {

			// IE6-8 fails to persist the checked state of a cloned checkbox
			// or radio button. Worse, IE6-7 fail to give the cloned element
			// a checked appearance if the defaultChecked value isn't also set

			dest.defaultChecked = dest.checked = src.checked;

			// IE6-7 get confused and end up setting the value of a cloned
			// checkbox/radio button to an empty string instead of "on"
			if ( dest.value !== src.value ) {
				dest.value = src.value;
			}

		// IE6-8 fails to return the selected option to the default selected
		// state when cloning options
		} else if ( nodeName === "option" ) {
			dest.defaultSelected = dest.selected = src.defaultSelected;

		// IE6-8 fails to set the defaultValue to the correct value when
		// cloning other types of input fields
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval(
									( node.text || node.textContent || node.innerHTML || "" )
										.replace( rcleanScript, "" )
								);
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			elems = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = elems[ i ] ) != null; i++ ) {

			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var destElements, node, clone, i, srcElements,
				inPage = jQuery.contains( elem.ownerDocument, elem );

			if ( support.html5Clone || jQuery.isXMLDoc( elem ) ||
				!rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {

				clone = elem.cloneNode( true );

			// IE<=8 does not properly clone detached, unknown element nodes
			} else {
				fragmentDiv.innerHTML = elem.outerHTML;
				fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
			}

			if ( ( !support.noCloneEvent || !support.noCloneChecked ) &&
					( elem.nodeType === 1 || elem.nodeType === 11 ) && !jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				// Fix all IE cloning issues
				for ( i = 0; ( node = srcElements[ i ] ) != null; ++i ) {

					// Ensure that the destination node is not null; Fixes #9587
					if ( destElements[ i ] ) {
						fixCloneNodeIssues( node, destElements[ i ] );
					}
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0; ( node = srcElements[ i ] ) != null; i++ ) {
						cloneCopyEvent( node, destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			destElements = srcElements = node = null;

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems, /* internal */ forceAcceptData ) {
			var elem, type, id, data,
				i = 0,
				internalKey = jQuery.expando,
				cache = jQuery.cache,
				attributes = support.attributes,
				special = jQuery.event.special;

			for ( ; ( elem = elems[ i ] ) != null; i++ ) {
				if ( forceAcceptData || acceptData( elem ) ) {

					id = elem[ internalKey ];
					data = id && cache[ id ];

					if ( data ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Remove cache only if it was not already removed by jQuery.event.remove
						if ( cache[ id ] ) {

							delete cache[ id ];

							// Support: IE<9
							// IE does not allow us to delete expando properties from nodes
							// IE creates expando attributes along with the property
							// IE does not have a removeAttribute function on Document nodes
							if ( !attributes && typeof elem.removeAttribute !== "undefined" ) {
								elem.removeAttribute( internalKey );

							// Webkit & Blink performance suffers when deleting properties
							// from DOM nodes, so set to undefined instead
							// https://code.google.com/p/chromium/issues/detail?id=378607
							} else {
								elem[ internalKey ] = undefined;
							}

							deletedIds.push( id );
						}
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {

		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,

		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().append(
						( this[ 0 ] && this[ 0 ].ownerDocument || document ).createTextNode( value )
					);
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {

				// Remove element nodes and prevent memory leaks
				if ( elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem, false ) );
				}

				// Remove any remaining nodes
				while ( elem.firstChild ) {
					elem.removeChild( elem.firstChild );
				}

				// If this is a select, ensure that it displays empty (#12336)
				// Support: IE<9
				if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
					elem.options.length = 0;
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined ) {
					return elem.nodeType === 1 ?
						elem.innerHTML.replace( rinlinejQuery, "" ) :
						undefined;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
					( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {

							// Remove element nodes and prevent memory leaks
							elem = this[ i ] || {};
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				i = 0,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );


	var iframe,
		elemdisplay = {

			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */

	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			display = jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}
	var rmargin = ( /^margin/ );

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var documentElement = document.documentElement;



	( function() {
		var pixelPositionVal, pixelMarginRightVal, boxSizingReliableVal,
			reliableHiddenOffsetsVal, reliableMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		div.style.cssText = "float:left;opacity:.5";

		// Support: IE<9
		// Make sure that element opacity exists (as opposed to filter)
		support.opacity = div.style.opacity === "0.5";

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		support.cssFloat = !!div.style.cssFloat;

		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container = document.createElement( "div" );
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		div.innerHTML = "";
		container.appendChild( div );

		// Support: Firefox<29, Android 2.3
		// Vendor-prefix box-sizing
		support.boxSizing = div.style.boxSizing === "" || div.style.MozBoxSizing === "" ||
			div.style.WebkitBoxSizing === "";

		jQuery.extend( support, {
			reliableHiddenOffsets: function() {
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return reliableHiddenOffsetsVal;
			},

			boxSizingReliable: function() {

				// We're checking for pixelPositionVal here instead of boxSizingReliableVal
				// since that compresses better and they're computed together anyway.
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},

			pixelMarginRight: function() {

				// Support: Android 4.0-4.3
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},

			pixelPosition: function() {
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return pixelPositionVal;
			},

			reliableMarginRight: function() {

				// Support: Android 2.3
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return reliableMarginRightVal;
			},

			reliableMarginLeft: function() {

				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			}
		} );

		function computeStyleTests() {
			var contents, divStyle,
				documentElement = document.documentElement;

			// Setup
			documentElement.appendChild( container );

			div.style.cssText =

				// Support: Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";

			// Support: IE<9
			// Assume reasonable values in the absence of getComputedStyle
			pixelPositionVal = boxSizingReliableVal = reliableMarginLeftVal = false;
			pixelMarginRightVal = reliableMarginRightVal = true;

			// Check for getComputedStyle so that this code is not run in IE<9.
			if ( window.getComputedStyle ) {
				divStyle = window.getComputedStyle( div );
				pixelPositionVal = ( divStyle || {} ).top !== "1%";
				reliableMarginLeftVal = ( divStyle || {} ).marginLeft === "2px";
				boxSizingReliableVal = ( divStyle || { width: "4px" } ).width === "4px";

				// Support: Android 4.0 - 4.3 only
				// Some styles come back with percentage values, even though they shouldn't
				div.style.marginRight = "50%";
				pixelMarginRightVal = ( divStyle || { marginRight: "4px" } ).marginRight === "4px";

				// Support: Android 2.3 only
				// Div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				contents = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				contents.style.cssText = div.style.cssText =

					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				contents.style.marginRight = contents.style.width = "0";
				div.style.width = "1px";

				reliableMarginRightVal =
					!parseFloat( ( window.getComputedStyle( contents ) || {} ).marginRight );

				div.removeChild( contents );
			}

			// Support: IE6-8
			// First check that getClientRects works as expected
			// Check if table cells still have offsetWidth/Height when they are set
			// to display:none and there are still other visible table cells in a
			// table row; if so, offsetWidth/Height are not reliable for use when
			// determining if an element has been hidden directly using
			// display:none (it is still safe to use offsets if a parent element is
			// hidden; don safety goggles and see bug #4512 for more information).
			div.style.display = "none";
			reliableHiddenOffsetsVal = div.getClientRects().length === 0;
			if ( reliableHiddenOffsetsVal ) {
				div.style.display = "";
				div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
				contents = div.getElementsByTagName( "td" );
				contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
				reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
				if ( reliableHiddenOffsetsVal ) {
					contents[ 0 ].style.display = "";
					contents[ 1 ].style.display = "none";
					reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
				}
			}

			// Teardown
			documentElement.removeChild( container );
		}

	} )();


	var getStyles, curCSS,
		rposition = /^(top|right|bottom|left)$/;

	if ( window.getComputedStyle ) {
		getStyles = function( elem ) {

			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

		curCSS = function( elem, name, computed ) {
			var width, minWidth, maxWidth, ret,
				style = elem.style;

			computed = computed || getStyles( elem );

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

			// Support: Opera 12.1x only
			// Fall back to style even without computed
			// computed is undefined for elems on document fragments
			if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			if ( computed ) {

				// A tribute to the "awesome hack by Dean Edwards"
				// Chrome < 17 and Safari 5.0 uses "computed value"
				// instead of "used value" for margin-right
				// Safari 5.1.7 (at least) returns percentage for a larger set of values,
				// but width seems to be reliably pixels
				// this is against the CSSOM draft spec:
				// http://dev.w3.org/csswg/cssom/#resolved-values
				if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

					// Remember the original values
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;

					// Put in the new values to get a computed value out
					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;

					// Revert the changed values
					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth;
				}
			}

			// Support: IE
			// IE returns zIndex value as an integer.
			return ret === undefined ?
				ret :
				ret + "";
		};
	} else if ( documentElement.currentStyle ) {
		getStyles = function( elem ) {
			return elem.currentStyle;
		};

		curCSS = function( elem, name, computed ) {
			var left, rs, rsLeft, ret,
				style = elem.style;

			computed = computed || getStyles( elem );
			ret = computed ? computed[ name ] : undefined;

			// Avoid setting ret to empty string here
			// so we don't default to auto
			if ( ret == null && style && style[ name ] ) {
				ret = style[ name ];
			}

			// From the awesome hack by Dean Edwards
			// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

			// If we're not dealing with a regular pixel number
			// but a number that has a weird ending, we need to convert it to pixels
			// but not position css attributes, as those are
			// proportional to the parent element instead
			// and we can't measure the parent instead because it
			// might trigger a "stacking dolls" problem
			if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

				// Remember the original values
				left = style.left;
				rs = elem.runtimeStyle;
				rsLeft = rs && rs.left;

				// Put in the new values to get a computed value out
				if ( rsLeft ) {
					rs.left = elem.currentStyle.left;
				}
				style.left = name === "fontSize" ? "1em" : ret;
				ret = style.pixelLeft + "px";

				// Revert the changed values
				style.left = left;
				if ( rsLeft ) {
					rs.left = rsLeft;
				}
			}

			// Support: IE
			// IE returns zIndex value as an integer.
			return ret === undefined ?
				ret :
				ret + "" || "auto";
		};
	}




	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

			ralpha = /alpha\([^)]*\)/i,
		ropacity = /opacity\s*=\s*([^)]*)/i,

		// swappable if display is none or starts with table except
		// "table", "table-cell", or "table-caption"
		// see here for display values:
		// https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;


	// return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// check for vendor prefixed names
		var capName = name.charAt( 0 ).toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = jQuery._data( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {

				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] =
						jQuery._data( elem, "olddisplay", defaultDisplay( elem.nodeName ) );
				}
			} else {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	function setPositiveNumber( elem, value, subtract ) {
		var matches = rnumsplit.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?

			// If we already have the right measurement, avoid augmentation
			4 :

			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {

			// both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {

				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// at this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {

				// at this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// at this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = support.boxSizing &&
				jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Support: IE11 only
		// In IE 11 fullscreen elements inside of an iframe have
		// 100x too small dimensions (gh-1764).
		if ( document.msFullscreenElement && window.top !== window ) {

			// Support: IE11 only
			// Running getBoundingClientRect on a disconnected node
			// in IE throws an error.
			if ( elem.getClientRects().length ) {
				val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );
			}
		}

		// some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {

			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}

			// we need the check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {

			// normalize float css property
			"float": support.cssFloat ? "cssFloat" : "styleFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set. See: #7116
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
				// but it would mean to define eight
				// (for every problematic property) identical functions
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					// Support: IE
					// Swallow errors from 'invalid' CSS values (#5509)
					try {
						style[ name ] = value;
					} catch ( e ) {}
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

	", "base64"));
  res.write(new Buffer("	css: function( elem, name, extra, styles ) {
			var num, val, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			//convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Return, converting to number if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// certain elements can have dimension info if we invisibly show them
					// however, it must have a current display style that would benefit from this
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var styles = extra && getStyles( elem );
				return setPositiveNumber( elem, value, extra ?
					augmentWidthOrHeight(
						elem,
						name,
						extra,
						support.boxSizing &&
							jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					) : 0
				);
			}
		};
	} );

	if ( !support.opacity ) {
		jQuery.cssHooks.opacity = {
			get: function( elem, computed ) {

				// IE uses filters for opacity
				return ropacity.test( ( computed && elem.currentStyle ?
					elem.currentStyle.filter :
					elem.style.filter ) || "" ) ?
						( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
						computed ? "1" : "";
			},

			set: function( elem, value ) {
				var style = elem.style,
					currentStyle = elem.currentStyle,
					opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
					filter = currentStyle && currentStyle.filter || style.filter || "";

				// IE has trouble with opacity if it does not have layout
				// Force it by setting the zoom level
				style.zoom = 1;

				// if setting opacity to 1, and no other filters exist -
				// attempt to remove filter attribute #6652
				// if value === "", then remove inline opacity #12685
				if ( ( value >= 1 || value === "" ) &&
						jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
						style.removeAttribute ) {

					// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
					// if "filter:" is present at all, clearType is disabled, we want to avoid this
					// style.removeAttribute is IE Only, but so apparently is this code path...
					style.removeAttribute( "filter" );

					// if there is no filter style applied in a css rule
					// or unset inline opacity, we are done
					if ( value === "" || currentStyle && !currentStyle.filter ) {
						return;
					}
				}

				// otherwise, set new filter values
				style.filter = ralpha.test( filter ) ?
					filter.replace( ralpha, opacity ) :
					filter + " " + opacity;
			}
		};
	}

	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return (
					parseFloat( curCSS( elem, "marginLeft" ) ) ||

					// Support: IE<=11+
					// Running getBoundingClientRect on a disconnected node in IE throws an error
					// Support: IE8 only
					// getClientRects() errors on disconnected elems
					( jQuery.contains( elem.ownerDocument, elem ) ?
						elem.getBoundingClientRect().left -
							swap( elem, { marginLeft: 0 }, function() {
								return elem.getBoundingClientRect().left;
							} ) :
						0
					)
				) + "px";
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails
				// so, simple values such as "10px" are parsed to Float.
				// complex values such as "rotate(1rad)" are returned as is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// use step hook for back compat - use cssHook if its there - use .style if its
				// available and use plain properties where available
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9
	// Panic based approach to setting things on disconnected nodes

	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			attrs = { height: type },
			i = 0;

		// if we include width, step value is 1 to do all cssExpand values,
		// if we don't include width, step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// we're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = jQuery._data( elem, "fxshow" );

		// handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// doing this makes sure that the complete handler will be called
				// before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {

			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE does not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

				// inline-level elements accept inline-block;
				// block-level elements need to be inline with layout
				if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
					style.display = "inline-block";
				} else {
					style.zoom = 1;
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			if ( !support.shrinkWrapBlocks() ) {
				anim.always( function() {
					style.overflow = opts.overflow[ 0 ];
					style.overflowX = opts.overflow[ 1 ];
					style.overflowY = opts.overflow[ 2 ];
				} );
			}
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = jQuery._data( elem, "fxshow", {} );
			}

			// store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;
				jQuery._removeData( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// not quite $.extend, this wont overwrite keys already present.
				// also - reusing 'index' from above because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// if we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// resolve when we played the last frame
					// otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || jQuery._data( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = jQuery._data( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// start the next in the queue if the last step wasn't forced
				// timers currently will call their complete callbacks, which will dequeue
				// but only if they were gotoEnd
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = jQuery._data( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// enable finishing flag on private data
				data.finish = true;

				// empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			timers = jQuery.timers,
			i = 0;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;

	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		window.clearInterval( timerId );
		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var a,
			input = document.createElement( "input" ),
			div = document.createElement( "div" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		// Setup
		div = document.createElement( "div" );
		div.setAttribute( "className", "t" );
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
		a = div.getElementsByTagName( "a" )[ 0 ];

		// Support: Windows Web Apps (WWA)
		// `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "checkbox" );
		div.appendChild( input );

		a = div.getElementsByTagName( "a" )[ 0 ];

		// First batch of tests.
		a.style.cssText = "top:1px";

		// Test setAttribute on camelCase class.
		// If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		support.getSetAttribute = div.className !== "t";

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		support.style = /top/.test( a.getAttribute( "style" ) );

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		support.hrefNormalized = a.getAttribute( "href" ) === "/a";

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		support.checkOn = !!input.value;

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		support.optSelected = opt.selected;

		// Tests for enctype support on a form (#6743)
		support.enctype = !!document.createElement( "form" ).enctype;

		// Make sure that the options inside disabled selects aren't marked as disabled
		// (WebKit marks them as disabled)
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE8 only
		// Check if we can trust getAttribute("value")
		input = document.createElement( "input" );
		input.setAttribute( "value", "" );
		support.input = input.getAttribute( "value" ) === "";

		// Check if an input maintains its value after becoming a radio
		input.value = "t";
		input.setAttribute( "type", "radio" );
		support.radioValue = input.value === "t";
	} )();


	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if (
						hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?

						// handle most common string cases
						ret.replace( rreturn, "" ) :

						// handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
				} else if ( typeof val === "number" ) {
					val += "";
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						jQuery.trim( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// oldIE doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled :
									option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

							// Support: IE6
							// When new option element is added to select box we need to
							// force reflow of newly added node in order to workaround delay
							// of initialization properties
							try {
								option.selected = optionSet = true;

							} catch ( _ ) {

								// Will be executed only in IE6
								option.scrollHeight;
							}

						} else {
							option.selected = false;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}

					return options;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	var nodeHook, boolHook,
		attrHandle = jQuery.expr.attrHandle,
		ruseDefault = /^(?:checked|selected)$/i,
		getSetAttribute = support.getSetAttribute,
		getSetInput = support.input;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {

						// Setting the type on a radio button after the value resets the value in IE8-9
						// Reset value to default in case type is set after value during creation
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {

						// Set corresponding property to false
						if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
							elem[ propName ] = false;

						// Support: IE<9
						// Also clear defaultChecked/defaultSelected (if appropriate)
						} else {
							elem[ jQuery.camelCase( "default-" + name ) ] =
								elem[ propName ] = false;
						}

					// See #9699 for explanation of this approach (setting first, then removal)
					} else {
						jQuery.attr( elem, name, "" );
					}

					elem.removeAttribute( getSetAttribute ? name : propName );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {

				// IE<8 needs the *property* name
				elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

			} else {

				// Support: IE<9
				// Use defaultChecked and defaultSelected for oldIE
				elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
			}
			return name;
		}
	};

	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			attrHandle[ name ] = function( elem, name, isXML ) {
				var ret, handle;
				if ( !isXML ) {

					// Avoid an infinite loop by temporarily removing this function from the getter
					handle = attrHandle[ name ];
					attrHandle[ name ] = ret;
					ret = getter( elem, name, isXML ) != null ?
						name.toLowerCase() :
						null;
					attrHandle[ name ] = handle;
				}
				return ret;
			};
		} else {
			attrHandle[ name ] = function( elem, name, isXML ) {
				if ( !isXML ) {
					return elem[ jQuery.camelCase( "default-" + name ) ] ?
						name.toLowerCase() :
						null;
				}
			};
		}
	} );

	// fix oldIE attroperties
	if ( !getSetInput || !getSetAttribute ) {
		jQuery.attrHooks.value = {
			set: function( elem, value, name ) {
				if ( jQuery.nodeName( elem, "input" ) ) {

					// Does not return so that setAttribute is also used
					elem.defaultValue = value;
				} else {

					// Use nodeHook if defined (#1954); otherwise setAttribute is fine
					return nodeHook && nodeHook.set( elem, value, name );
				}
			}
		};
	}

	// IE6/7 do not support getting/setting some attributes with get/setAttribute
	if ( !getSetAttribute ) {

		// Use this for any attribute in IE6/7
		// This fixes almost every IE6/7 issue
		nodeHook = {
			set: function( elem, value, name ) {

				// Set the existing or create a new attribute node
				var ret = elem.getAttributeNode( name );
				if ( !ret ) {
					elem.setAttributeNode(
						( ret = elem.ownerDocument.createAttribute( name ) )
					);
				}

				ret.value = value += "";

				// Break association with cloned elements by also using setAttribute (#9646)
				if ( name === "value" || value === elem.getAttribute( name ) ) {
					return value;
				}
			}
		};

		// Some attributes are constructed with empty-string values when not defined
		attrHandle.id = attrHandle.name = attrHandle.coords =
			function( elem, name, isXML ) {
				var ret;
				if ( !isXML ) {
					return ( ret = elem.getAttributeNode( name ) ) && ret.value !== "" ?
						ret.value :
						null;
				}
			};

		// Fixing value retrieval on a button requires this module
		jQuery.valHooks.button = {
			get: function( elem, name ) {
				var ret = elem.getAttributeNode( name );
				if ( ret && ret.specified ) {
					return ret.value;
				}
			},
			set: nodeHook.set
		};

		// Set contenteditable to false on removals(#10429)
		// Setting to empty string throws an error as an invalid value
		jQuery.attrHooks.contenteditable = {
			set: function( elem, value, name ) {
				nodeHook.set( elem, value === "" ? false : value, name );
			}
		};

		// Set width and height to auto instead of 0 on empty string( Bug #8150 )
		// This is for removals
		jQuery.each( [ "width", "height" ], function( i, name ) {
			jQuery.attrHooks[ name ] = {
				set: function( elem, value ) {
					if ( value === "" ) {
						elem.setAttribute( name, "auto" );
						return value;
					}
				}
			};
		} );
	}

	if ( !support.style ) {
		jQuery.attrHooks.style = {
			get: function( elem ) {

				// Return undefined in the case of empty string
				// Note: IE uppercases css property names, but if we were to .toLowerCase()
				// .cssText, that would destroy case sensitivity in URL's, like in "background"
				return elem.style.cssText || undefined;
			},
			set: function( elem, value ) {
				return ( elem.style.cssText = value + "" );
			}
		};
	}




	var rfocusable = /^(?:input|select|textarea|button|object)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			name = jQuery.propFix[ name ] || name;
			return this.each( function() {

				// try/catch handles cases where IE balks (such as removing a property on window)
				try {
					this[ name ] = undefined;
					delete this[ name ];
				} catch ( e ) {}
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Some attributes require a special call on IE
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !support.hrefNormalized ) {

		// href/src property should get the full normalized URL (#10299/#12915)
		jQuery.each( [ "href", "src" ], function( i, name ) {
			jQuery.propHooks[ name ] = {
				get: function( elem ) {
					return elem.getAttribute( name, 4 );
				}
			};
		} );
	}

	// Support: Safari, IE9+
	// mis-reports the default selected property of an option
	// Accessing the parent's selectedIndex property fixes it
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;

				if ( parent ) {
					parent.selectedIndex;

					// Make sure that it also works with optgroups, see #5701
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
				return null;
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );

	// IE6/7 call enctype encoding
	if ( !support.enctype ) {
		jQuery.propFix.enctype = "encoding";
	}




	var rclass = /[\t\r\n\f]/g;

	function getClass( elem ) {
		return jQuery.attr( elem, "class" ) || "";
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							jQuery.attr( elem, "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];

				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							jQuery.attr( elem, "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( type === "string" ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// store className if set
						jQuery._data( this, "__className__", className );
					}

					// If the element has a class name or if we're passed "false",
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					jQuery.attr( this, "class",
						className || value === false ?
						"" :
						jQuery._data( this, "__className__" ) || ""
					);
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}

			return false;
		}
	} );




	// Return jQuery for attributes-only inclusion


	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );


	var location = window.location;

	var nonce = jQuery.now();

	var rquery = ( /\?/ );



	var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

	jQuery.parseJSON = function( data ) {

		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {

			// Support: Android 2.3
			// Workaround failure to string-cast null input
			return window.JSON.parse( data + "" );
		}

		var requireNonComma,
			depth = null,
			str = jQuery.trim( data + "" );

		// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
		// after removing valid tokens
		return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

			// Force termination if we see a misplaced comma
			if ( requireNonComma && comma ) {
				depth = 0;
			}

			// Perform no more replacements after returning to outermost depth
			if ( depth === 0 ) {
				return token;
			}

			// Commas must not follow "[", "{", or ","
			requireNonComma = open || comma;

			// Determine new depth
			// array/object open ("[" or "{"): depth += true - false (increment)
			// array/object close ("]" or "}"): depth += false - true (decrement)
			// other cases ("," or primitive): depth += true - true (numeric cast)
			depth += !close - !open;

			// Remove this token
			return "";
		} ) ) ?
			( Function( "return " + str ) )() :
			jQuery.error( "Invalid JSON: " + data );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new window.DOMParser();
				xml = tmp.parseFromString( data, "text/xml" );
			} else { // IE
				xml = new window.ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch ( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,

		// IE leaves an \r character at EOL
		rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
		rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Document location
		ajaxLocation = location.href,

		// Segment location into parts
		ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType.charAt( 0 ) === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var deep, key,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
		var firstDataType, ct, finalDataType, type,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s[ "throws" ] ) { // jscs:ignore requireDotNotation
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: ajaxLocation,
			type: "GET",
			isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var

				// Cross-domain detection vars
				parts,

				// Loop variable
				i,

				// URL without anti-cache param
				cacheURL,

				// Response headers as string
				responseHeadersString,

				// timeout handle
				timeoutTimer,

				// To know if global events are to be dispatched
				fireGlobals,

				transport,

				// Response headers
				responseHeaders,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// The jqXHR state
				state = 0,

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {

									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || ajaxLocation ) + "" )
				.replace( rhash, "" )
				.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when we have a protocol:host:port mismatch
			if ( s.crossDomain == null ) {
				parts = rurl.exec( s.url.toLowerCase() );
				s.crossDomain = !!( parts &&
					( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
						( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
							( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
				);
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None", "base64"));
  res.write(new Buffer("-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );

					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// We extract error from statusText
					// then normalize statusText and status for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}

			if ( this[ 0 ] ) {

				// The elements to wrap the target around
				var wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
						elem = elem.firstChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );


	function getDisplay( elem ) {
		return elem.style && elem.style.display || jQuery.css( elem, "display" );
	}

	function filterHidden( elem ) {
		while ( elem && elem.nodeType === 1 ) {
			if ( getDisplay( elem ) === "none" || elem.type === "hidden" ) {
				return true;
			}
			elem = elem.parentNode;
		}
		return false;
	}

	jQuery.expr.filters.hidden = function( elem ) {

		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return support.reliableHiddenOffsets() ?
			( elem.offsetWidth <= 0 && elem.offsetHeight <= 0 &&
				!elem.getClientRects().length ) :
				filterHidden( elem );
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {

				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is(":disabled") so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	// Create the request object
	// (This is still attached to ajaxSettings for backward compatibility)
	jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?

		// Support: IE6-IE8
		function() {

			// XHR cannot access local files, always use ActiveX for that case
			if ( this.isLocal ) {
				return createActiveXHR();
			}

			// Support: IE 9-11
			// IE seems to error on cross-domain PATCH requests when ActiveX XHR
			// is used. In IE 9+ always use the native XHR.
			// Note: this condition won't catch Edge as it doesn't define
			// document.documentMode but it also doesn't support ActiveX so it won't
			// reach this code.
			if ( document.documentMode > 8 ) {
				return createStandardXHR();
			}

			// Support: IE<9
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			return /^(get|post|head|put|delete|options)$/i.test( this.type ) &&
				createStandardXHR() || createActiveXHR();
		} :

		// For all other browsers, use the standard XMLHttpRequest object
		createStandardXHR;

	var xhrId = 0,
		xhrCallbacks = {},
		xhrSupported = jQuery.ajaxSettings.xhr();

	// Support: IE<10
	// Open requests must be manually aborted on unload (#5280)
	// See https://support.microsoft.com/kb/2856746 for more info
	if ( window.attachEvent ) {
		window.attachEvent( "onunload", function() {
			for ( var key in xhrCallbacks ) {
				xhrCallbacks[ key ]( undefined, true );
			}
		} );
	}

	// Determine support properties
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	xhrSupported = support.ajax = !!xhrSupported;

	// Create transport if the browser can provide an xhr
	if ( xhrSupported ) {

		jQuery.ajaxTransport( function( options ) {

			// Cross domain only allowed if supported through XMLHttpRequest
			if ( !options.crossDomain || support.cors ) {

				var callback;

				return {
					send: function( headers, complete ) {
						var i,
							xhr = options.xhr(),
							id = ++xhrId;

						// Open the socket
						xhr.open(
							options.type,
							options.url,
							options.async,
							options.username,
							options.password
						);

						// Apply custom fields if provided
						if ( options.xhrFields ) {
							for ( i in options.xhrFields ) {
								xhr[ i ] = options.xhrFields[ i ];
							}
						}

						// Override mime type if needed
						if ( options.mimeType && xhr.overrideMimeType ) {
							xhr.overrideMimeType( options.mimeType );
						}

						// X-Requested-With header
						// For cross-domain requests, seeing as conditions for a preflight are
						// akin to a jigsaw puzzle, we simply never set it to be sure.
						// (it can always be set on a per-request basis or even using ajaxSetup)
						// For same-domain requests, won't change header if already provided.
						if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
							headers[ "X-Requested-With" ] = "XMLHttpRequest";
						}

						// Set headers
						for ( i in headers ) {

							// Support: IE<9
							// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
							// request header to a null-value.
							//
							// To keep consistent with other XHR implementations, cast the value
							// to string and ignore `undefined`.
							if ( headers[ i ] !== undefined ) {
								xhr.setRequestHeader( i, headers[ i ] + "" );
							}
						}

						// Do send the request
						// This may raise an exception which is actually
						// handled in jQuery.ajax (so no try/catch here)
						xhr.send( ( options.hasContent && options.data ) || null );

						// Listener
						callback = function( _, isAbort ) {
							var status, statusText, responses;

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Clean up
								delete xhrCallbacks[ id ];
								callback = undefined;
								xhr.onreadystatechange = jQuery.noop;

								// Abort manually if needed
								if ( isAbort ) {
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;

									// Support: IE<10
									// Accessing binary-data responseText throws an exception
									// (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch ( e ) {

										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && options.isLocal && !options.crossDomain ) {
										status = responses.text ? 200 : 404;

									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}

							// Call complete if needed
							if ( responses ) {
								complete( status, statusText, responses, xhr.getAllResponseHeaders() );
							}
						};

						// Do send the request
						// `xhr.send` may raise an exception, but it will be
						// handled in jQuery.ajax (so no try/catch here)
						if ( !options.async ) {

							// If we're in sync mode we fire the callback
							callback();
						} else if ( xhr.readyState === 4 ) {

							// (IE6 & IE7) if it's in cache and has been
							// retrieved directly we need to fire the callback
							window.setTimeout( callback );
						} else {

							// Register the callback, but delay it in case `xhr.send` throws
							// Add to the list of active xhr callbacks
							xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
						}
					},

					abort: function() {
						if ( callback ) {
							callback( undefined, true );
						}
					}
				};
			}
		} );
	}

	// Functions to create xhrs
	function createStandardXHR() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	}

	function createActiveXHR() {
		try {
			return new window.ActiveXObject( "Microsoft.XMLHTTP" );
		} catch ( e ) {}
	}




	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );

	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and global
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
			s.global = false;
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {

			var script,
				head = document.head || jQuery( "head" )[ 0 ] || document.documentElement;

			return {

				send: function( _, callback ) {

					script = document.createElement( "script" );

					script.async = true;

					if ( s.scriptCharset ) {
						script.charset = s.scriptCharset;
					}

					script.src = s.url;

					// Attach handlers for all browsers
					script.onload = script.onreadystatechange = function( _, isAbort ) {

						if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

							// Handle memory leak in IE
							script.onload = script.onreadystatechange = null;

							// Remove the script
							if ( script.parentNode ) {
								script.parentNode.removeChild( script );
							}

							// Dereference the script
							script = null;

							// Callback if not abort
							if ( !isAbort ) {
								callback( 200, "success" );
							}
						}
					};

					// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					head.insertBefore( script, head.firstChild );
				},

				abort: function() {
					if ( script ) {
						script.onload( undefined, true );
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8+
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		if ( !document.implementation.createHTMLDocument ) {
			return false;
		}
		var doc = document.implementation.createHTMLDocument( "" );
		doc.body.innerHTML = "<form></form><form></form>";
		return doc.body.childNodes.length === 2;
	} )();


	// data: string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		// document.implementation stops scripts or inline event handlers from
		// being executed immediately
		context = context || ( support.createHTMLDocument ?
			document.implementation.createHTMLDocument( "" ) :
			document );

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off, url.length ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( self, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};





	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ?
			elem :
			elem.nodeType === 9 ?
				elem.defaultView || elem.parentWindow :
				false;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				jQuery.inArray( "auto", [ curCSSTop, curCSSLeft ] ) > -1;

			// need to be able to calculate position if either top or left
			// is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );
			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var docElem, win,
				box = { top: 0, left: 0 },
				elem = this[ 0 ],
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			// If we don't have gBCR, just use 0,0 rather than error
			// BlackBerry 5, iOS 3 (original iPhone)
			if ( typeof elem.getBoundingClientRect !== "undefined" ) {
				box = elem.getBoundingClientRect();
			}
			win = getWindow( doc );
			return {
				top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
				left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				parentOffset = { top: 0, left: 0 },
				elem = this[ 0 ];

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// we assume that getBoundingClientRect is available when computed position is fixed
				offset = elem.getBoundingClientRect();
			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}

			// Subtract parent offsets and element margins
			// note: when an element has margin: auto the offsetLeft and marginLeft
			// are the same in Safari causing offset.left to incorrectly be 0
			return {
				top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) &&
					jQuery.css( offsetParent, "position" ) === "static" ) ) {
					offsetParent = offsetParent.offsetParent;
				}
				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = /Y/.test( prop );

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? ( prop in win ) ? win[ prop ] :
						win.document.documentElement[ method ] :
						elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : jQuery( win ).scrollLeft(),
						top ? val : jQuery( win ).scrollTop()
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length, null );
		};
	} );

	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// if curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

			// margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {

						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						// unfortunately, this causes bug #3838 in IE6/8 only,
						// but there is currently no good, small way to fix it.
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );


	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );

	// The number of elements contained in the matched element set
	jQuery.fn.size = function() {
		return this.length;
	};

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}



	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in
	// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
	}));


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	/* eslint max-statements: [2, 23] complexity: [2, 7] */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(6), __webpack_require__(10), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Handlebars, Cookie, cachebustMap) {

	  var tpl = Handlebars.compile;
	  var formTpl = tpl('<form method="POST" action="{{action}}"></form>');
	  var inputTpl = tpl('<input type="hidden" name="{{name}}" value="{{value}}" />');

	  var Util = {};

	  var jammerTemplate = {
	    'chrome': '<input style="opacity: 0; width: 0; height: 0;" id="okta_hidden_username_chrome_sequence_no" \
	                type="text" autocomplete="off" />\
	                <input style="opacity: 0; width: 0; height: 0;" id="okta_hidden_pass_chrome_sequence_no"\
	                type="password" autocomplete="off" />',

	    'safari': '<input style="opacity: 0; width: 0; height: 0;" id="okta_hidden_pass_safari_sequence_no" \
	                  type="password" autocomplete="off" />',

	    'mozilla': '<input style="display:none" type="password" id="okta_hidden_pass_firefox_sequence_no" \
	                  autocomplete="off" value="test" />',

	    'msie': '<input id="okta_hidden_pass_ie_sequence_no" type="password" autocomplete="off"\
	              style="display:none" value = "test_sequence_no"/>'
	  };

	  var clearBeenToHomePage = function clearBeenToHomePage() {
	    Cookie.removeCookie('ao', { path: '/' });
	  };

	  var resetAutoLaunch = function resetAutoLaunch() {
	    Cookie.removeCookie('autolaunch_triggered', { path: '/' });
	  };

	  var isPostSamlEmbedUrl = function isPostSamlEmbedUrl(url) {
	    // APP_SAML_FOR_INSTANCE is /app/{app}/{key}/sso/saml
	    return url.search(/\/app\/[^/]+\/[^/]+\/sso\/saml.*\?/i) !== -1;
	  };

	  // Posts to a given url, converting any query params to post params. This is
	  // done by creating a form on the page, parsing the params from the url, and
	  // submitting it.
	  // $el is an element to append the form to.
	  var postToUrl = function postToUrl(url, $el) {
	    var parts = url.split('?'),
	        baseUrl = parts[0],
	        queryString = parts[1],
	        queryParams,
	        form;
	    form = $(formTpl({ action: baseUrl }));
	    if (queryString) {
	      queryParams = queryString.split('&');
	      $.each(queryParams, function (i, param) {
	        var tokens = param.split('=');
	        form.append(inputTpl({
	          name: tokens[0],
	          value: decodeURIComponent(tokens[1])
	        }));
	      });
	    }
	    $el.append(form);
	    form.submit();
	  };

	  var addPasswordJammers = function addPasswordJammers($el) {
	    var hiddenInput, browser, totalRepetitions;

	    if ($.browser.chrome) {
	      hiddenInput = passwordJammerFactory('chrome', 3);
	      $el.prepend(hiddenInput);
	      return;
	    }
	    if ($.browser.safari) {
	      browser = 'safari';
	      totalRepetitions = 2;
	    } else if ($.browser.mozilla) {
	      browser = 'mozilla';
	      totalRepetitions = 3;
	    } else {
	      browser = 'msie';
	      totalRepetitions = 2;
	    }
	    hiddenInput = passwordJammerFactory(browser, totalRepetitions);
	    $el.append(hiddenInput);
	  };

	  function passwordJammerFactory(browser, totalRepetitions) {

	    var currentTemplate = jammerTemplate[browser],
	        result = '',
	        i;

	    for (i = 0; i < totalRepetitions; i++) {
	      result = result.concat(currentTemplate.replace(/sequence_no/g, i + 1));
	    }
	    return result;
	  }

	  // Rewrites the default Sign-in Widget asset bundle paths to handle our
	  // internal i18n jsonp files:
	  // 1. Add cachebust sha
	  // 2. Replace .jsonp with .js
	  var pathRe = new RegExp('/([^/]*)\.jsonp$');

	  function assetRewrite(path) {
	    var matches = pathRe.exec(path);
	    if (!matches || !cachebustMap[matches[1]]) {
	      return path;
	    }
	    return '/' + cachebustMap[matches[1]] + '.js';
	  }

	  // OKTA-101509: There are embedded browsers that have pushState, but throw
	  // an error when it's called. So, we actually call replaceState in a try/catch
	  // to see if it hits this condition.
	  function supportsRouter() {
	    var supportsPush = !!(window.history && window.history.pushState),
	        supportsReplace = supportsPush && window.history.replaceState;
	    if (!supportsPush || !supportsReplace) {
	      return false;
	    }
	    try {
	      window.history.replaceState({}, document.title, location.href);
	      return true;
	    } catch (e) {
	      return false;
	    }
	  }

	  // Hack for OKTA-102217 : Given a base url, create another base url
	  // by removing/adding port number that is functionally the same but avoids a Microsoft double-request bug.
	  function baseUrlWithPortAddedOrRemoved(baseUrl) {

	    var baseUrlHostname;
	    var hostname;
	    var protocol;
	    var hostAndPath;
	    var noProtocolFound = false;

	    // Split out protocol and hostname
	    if (baseUrl.indexOf('://') > -1) {
	      protocol = baseUrl.split('://')[0];
	      // second half of URL is hostname + path components
	      hostAndPath = baseUrl.split('://')[1];
	      // first element is hostname, rest of them are path components
	      baseUrlHostname = hostAndPath.split('/')[0];
	    } else {
	      noProtocolFound = true;
	      protocol = 'https';
	      baseUrlHostname = baseUrl.split('/')[0];
	    }

	    // If there is a port number, remove it
	    if (baseUrlHostname.indexOf(':') > -1) {
	      var port = baseUrlHostname.split(':')[1];
	      // https port with no protocol
	      if (port == '443' && noProtocolFound) {
	        protocol = 'https';
	        // standard port, so remove it
	      } else if (port === '80' || port === '443') {
	        hostname = baseUrlHostname.split(':')[0];
	        // Non-standard port eg for rain, so leave it be
	      } else {
	        return baseUrl;
	      }
	    } else {
	      // If there is no port number, add one
	      if (protocol === 'https') {
	        hostname = baseUrlHostname + ':443';
	      } else {
	        hostname = baseUrlHostname + ':80';
	      }
	    }

	    return protocol + '://' + hostname;
	  }

	  function userAgentIsIos10(userAgent) {
	    return userAgent.indexOf('AppleWebKit') > -1 && userAgent.indexOf('Mobile') > -1 && userAgent.indexOf('10_') > -1;
	  }

	  // Borrowed from okta-auth-js
	  function toQueryParams(obj) {
	    var str = [];

	    if (obj === null) {
	      return '';
	    }
	    for (var key in obj) {
	      if (obj.hasOwnProperty(key) && obj[key] !== undefined && obj[key] !== null) {
	        str.push(key + '=' + encodeURIComponent(obj[key]));
	      }
	    }

	    if (str.length) {
	      return '?' + str.join('&');
	    } else {
	      return '';
	    }
	  }

	  function adjustUrlPath(redirecUrl) {
	    window.history.pushState('', document.title, redirecUrl);
	  }

	  function isLoginUrlStale(loginPageUrlRedirect, href) {
	    return !!(loginPageUrlRedirect && loginPageUrlRedirect !== href);
	  }

	  Util = {
	    clearBeenToHomePage: clearBeenToHomePage,
	    resetAutoLaunch: resetAutoLaunch,
	    isPostSamlEmbedUrl: isPostSamlEmbedUrl,
	    postToUrl: postToUrl,
	    addPasswordJammers: addPasswordJammers,
	    assetRewrite: assetRewrite,
	    supportsRouter: supportsRouter,
	    baseUrlWithPortAddedOrRemoved: baseUrlWithPortAddedOrRemoved,
	    userAgentIsIos10: userAgentIsIos10,
	    toQueryParams: toQueryParams,
	    adjustUrlPath: adjustUrlPath,
	    isLoginUrlStale: isLoginUrlStale
	  };

	  return Util;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v1.11.3
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-04-28T16:19Z
	 */

	(function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper window is present,
			// execute the factory and get jQuery
			// For environments that do not inherently posses a window with a document
			// (such as Node.js), expose a jQuery-making factory as module.exports
			// This accentuates the need for the creation of a real window
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Can't do this because several apps including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	// Support: Firefox 18+
	//

	var deletedIds = [];

	var slice = deletedIds.slice;

	var concat = deletedIds.concat;

	var push = deletedIds.push;

	var indexOf = deletedIds.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var support = {};



	var
		version = "1.11.3",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android<4.1, IE<9
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,

		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};

	jQuery.fn = jQuery.prototype = {
		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// Start with an empty selector
		selector: "",

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?

				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :

				// Return all the elements in a clean array
				slice.call( this );
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		// (You can seed the arguments with an array of args, but this is
		// only used internally.)
		each: function( callback, args ) {
			return jQuery.each( this, callback, args );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map(this, function( elem, i ) {
				return callback.call( elem, i, elem );
			}));
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor(null);
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: deletedIds.sort,
		splice: deletedIds.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var src, copyIsArray, copy, name, options, clone,
			target = arguments[0] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
			target = {};
		}

		// extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {
			// Only deal with non-null/undefined values
			if ( (options = arguments[ i ]) != null ) {
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray(src) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		// See test/unit/core.js for details concerning isFunction.
		// Since version 1.3, DOM methods and functions like alert
		// aren't supported. They return false on IE (#2968).
		isFunction: function( obj ) {
			return jQuery.type(obj) === "function";
		},

		isArray: Array.isArray || function( obj ) {
			return jQuery.type(obj) === "array";
		},

		isWindow: function( obj ) {
			/* jshint eqeqeq: false */
			return obj != null && obj == obj.window;
		},

		isNumeric: function( obj ) {
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
		},

		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},

		isPlainObject: function( obj ) {
			var key;

			// Must be an Object.
			// Because of IE, we also have to check the presence of the constructor property.
			// Make sure that DOM nodes and window objects don't pass through, as well
			if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}

			try {
				// Not own constructor property must be Object
				if ( obj.constructor &&
					!hasOwn.call(obj, "constructor") &&
					!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
					return false;
				}
			} catch ( e ) {
				// IE8,9 Will throw exceptions on certain host objects #9897
				return false;
			}

			// Support: IE<9
			// Handle iteration over inherited properties before own properties.
			if ( support.ownLast ) {
				for ( key in obj ) {
					return hasOwn.call( obj, key );
				}
			}

			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own.
			for ( key in obj ) {}

			return key === undefined || hasOwn.call( obj, key );
		},

		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call(obj) ] || "object" :
				typeof obj;
		},

		// Evaluates a script in a global context
		// Workarounds based on findings by Jim Driscoll
		// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
		globalEval: function( data ) {
			if ( data && jQuery.trim( data ) ) {
				// We use execScript on Internet Explorer
				// We use an anonymous function so that context is window
				// rather than jQuery in Firefox
				( window.execScript || function( data ) {
					window[ "eval" ].call( window, data );
				} )( data );
			}
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},

		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},

		// args is for internal usage only
		each: function( obj, callback, args ) {
			var value,
				i = 0,
				length = obj.length,
				isArray = isArraylike( obj );

			if ( args ) {
				if ( isArray ) {
					for ( ; i < length; i++ ) {
						value = callback.apply( obj[ i ], args );

						if ( value === false ) {
							break;
						}
					}
				} else {
					for ( i in obj ) {
						value = callback.apply( obj[ i ], args );

						if ( value === false ) {
							break;
						}
					}
				}

			// A special, fast, case for the most common use of each
			} else {
				if ( isArray ) {
					for ( ; i < length; i++ ) {
						value = callback.call( obj[ i ], i, obj[ i ] );

						if ( value === false ) {
							break;
						}
					}
				} else {
					for ( i in obj ) {
						value = callback.call( obj[ i ], i, obj[ i ] );

						if ( value === false ) {
							break;
						}
					}
				}
			}

			return obj;
		},

		// Support: Android<4.1, IE<9
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArraylike( Object(arr) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			var len;

			if ( arr ) {
				if ( indexOf ) {
					return indexOf.call( arr, elem, i );
				}

				len = arr.length;
				i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

				for ( ; i < len; i++ ) {
					// Skip accessing in sparse arrays
					if ( i in arr && arr[ i ] === elem ) {
						return i;
					}
				}
			}

			return -1;
		},

		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			while ( j < len ) {
				first[ i++ ] = second[ j++ ];
			}

			// Support: IE<9
			// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
			if ( len !== len ) {
				while ( second[j] !== undefined ) {
					first[ i++ ] = second[ j++ ];
				}
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var value,
				i = 0,
				length = elems.length,
				isArray = isArraylike( elems ),
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var args, proxy, tmp;

			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}

			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: function() {
			return +( new Date() );
		},

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	});

	function isArraylike( obj ) {

		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = "length" in obj && obj.length,
			type = jQuery.type( obj );

		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.nodeType === 1 && length ) {
			return true;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.0-pre
	 * http://sizzlejs.com/
	 *
	 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2014-12-16
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
		// http://www.w3.org/TR/css3-syntax/#characters
		characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

		// Loosely modeled on CSS identifier characters
		// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
		// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = characterEncoding.replace( "w", "w#" ),

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + characterEncoding + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + characterEncoding + ")" ),
			"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
			"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,
		rescape = /'|\\/g,

		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means n", "base64"));
  res.write(new Buffer("on-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var match, elem, m, nodeType,
			// QSA vars
			i, groups, old, nid, newContext, newSelector;

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}

		context = context || document;
		results = results || [];
		nodeType = context.nodeType;

		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		if ( !seed && documentIsHTML ) {

			// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
				// Speed-up: Sizzle("#ID")
				if ( (m = match[1]) ) {
					if ( nodeType === 9 ) {
						elem = context.getElementById( m );
						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document (jQuery #6963)
						if ( elem && elem.parentNode ) {
							// Handle the case where IE, Opera, and Webkit return items
							// by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}
					} else {
						// Context is not a document
						if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
							contains( context, elem ) && elem.id === m ) {
							results.push( elem );
							return results;
						}
					}

				// Speed-up: Sizzle("TAG")
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Speed-up: Sizzle(".CLASS")
				} else if ( (m = match[3]) && support.getElementsByClassName ) {
					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// QSA path
			if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
				nid = old = expando;
				newContext = context;
				newSelector = nodeType !== 1 && selector;

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					groups = tokenize( selector );

					if ( (old = context.getAttribute("id")) ) {
						nid = old.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", nid );
					}
					nid = "[id='" + nid + "'] ";

					i = groups.length;
					while ( i-- ) {
						groups[i] = nid + toSelector( groups[i] );
					}
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
					newSelector = groups.join(",");
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch(qsaError) {
					} finally {
						if ( !old ) {
							context.removeAttribute("id");
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");

		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = attrs.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// If no document and documentElement is available, return
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Set our document
		document = doc;
		docElem = doc.documentElement;
		parent = doc.defaultView;

		// Support: IE>8
		// If iframe document is assigned to "document" variable and if iframe has been reloaded,
		// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
		// IE6-8 do not support the defaultView property so parent will be undefined
		if ( parent && parent !== parent.top ) {
			// IE11 does not have attachEvent, so all must suffer
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Support tests
		---------------------------------------------------------------------- */
		documentIsHTML = !isXML( doc );

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( doc.createComment("") );
			return !div.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
		});

		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					return m && m.parentNode ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];

			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\f]' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = doc.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully does not implement inclusive descendent
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === doc ? -1 :
					b === doc ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return doc;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, outerCache, node, diff, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
								// Seek `elem` from a previously-cached index
								outerCache = parent[ expando ] || (parent[ expando ] = {});
								cache = outerCache[ type ] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = cache[0] === dirruns && cache[2];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										outerCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							// Use previously-cached element index if available
							} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
								diff = cache[1];

							// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
							} else {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
										// Cache the index of each encountered element
										if ( useCache ) {
											(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},

			"disabled": function( elem ) {
				return elem.disabled === true;
			},

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
							if ( (oldCache = outerCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								outerCache[ dir ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context !== document && context;
				}

				// Add elements passing elementMatchers directly to results
				// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context, xml ) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// Apply set filters to unmatched elements
				matchedCount += i;
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is no seed and only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;



	var rneedsContext = jQuery.expr.match.needsContext;

	var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			});

		}

		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			});

		}

		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}

			qualifier = jQuery.filter( qualifier, elements );
		}

		return jQuery.grep( elements, function( elem ) {
			return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
		});
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			}));
	};

	jQuery.fn.extend({
		find: function( selector ) {
			var i,
				ret = [],
				self = this,
				len = self.length;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter(function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				}) );
			}

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow(this, selector || [], false) );
		},
		not: function( selector ) {
			return this.pushStack( winnow(this, selector || [], true) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	});


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// Use the correct document accordingly with window argument (sandbox)
		document = window.document,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

		init = jQuery.fn.init = function( selector, context ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && (match[1] || !context) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[1] ) {
						context = context instanceof jQuery ? context[0] : context;

						// scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[1],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[2] );

						// Check parentNode to catch when Blackberry 4.6 returns
						// nodes that are no longer in the document #6963
						if ( elem && elem.parentNode ) {
							// Handle the case where IE and Opera return items
							// by name instead of ID
							if ( elem.id !== match[2] ) {
								return rootjQuery.find( selector );
							}

							// Otherwise, we inject the element directly into the jQuery object
							this.length = 1;
							this[0] = elem;
						}

						this.context = document;
						this.selector = selector;
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || rootjQuery ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[0] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return typeof rootjQuery.ready !== "undefined" ?
					rootjQuery.ready( selector ) :
					// Execute immediately if ready is not present
					selector( jQuery );
			}

			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
		// methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.extend({
		dir: function( elem, dir, until ) {
			var matched = [],
				cur = elem[ dir ];

			while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
				if ( cur.nodeType === 1 ) {
					matched.push( cur );
				}
				cur = cur[dir];
			}
			return matched;
		},

		sibling: function( n, elem ) {
			var r = [];

			for ( ; n; n = n.nextSibling ) {
				if ( n.nodeType === 1 && n !== elem ) {
					r.push( n );
				}
			}

			return r;
		}
	});

	jQuery.fn.extend({
		has: function( target ) {
			var i,
				targets = jQuery( target, this ),
				len = targets.length;

			return this.filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( this, targets[i] ) ) {
						return true;
					}
				}
			});
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;

			for ( ; i < l; i++ ) {
				for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
					// Always skip document fragments
					if ( cur.nodeType < 11 && (pos ?
						pos.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector(cur, selectors)) ) {

						matched.push( cur );
						break;
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
		},

		// Determine the position of an element within
		// the matched set of elements
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
			}

			// index in selector
			if ( typeof elem === "string" ) {
				return jQuery.inArray( this[0], jQuery( elem ) );
			}

			// Locate the position of the desired element
			return jQuery.inArray(
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[0] : elem, this );
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.unique(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter(selector)
			);
		}
	});

	function sibling( cur, dir ) {
		do {
			cur = cur[ dir ];
		} while ( cur && cur.nodeType !== 1 );

		return cur;
	}

	jQuery.each({
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return jQuery.dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "parentNode", until );
		},
		next:", "base64"));
  res.write(new Buffer(" function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return jQuery.dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return jQuery.dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return jQuery.dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return jQuery.sibling( elem.firstChild );
		},
		contents: function( elem ) {
			return jQuery.nodeName( elem, "iframe" ) ?
				elem.contentDocument || elem.contentWindow.document :
				jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var ret = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				ret = jQuery.filter( selector, ret );
			}

			if ( this.length > 1 ) {
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					ret = jQuery.unique( ret );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					ret = ret.reverse();
				}
			}

			return this.pushStack( ret );
		};
	});
	var rnotwhite = (/\S+/g);



	// String to Object options format cache
	var optionsCache = {};

	// Convert String-formatted options into Object-formatted ones and store in cache
	function createOptions( options ) {
		var object = optionsCache[ options ] = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		});
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			( optionsCache[ options ] || createOptions( options ) ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,
			// Last fire value (for non-forgettable lists)
			memory,
			// Flag to know if list was already fired
			fired,
			// End of the loop when firing
			firingLength,
			// Index of currently firing callback (modified by remove if needed)
			firingIndex,
			// First callback to fire (used internally by add and fireWith)
			firingStart,
			// Actual callback list
			list = [],
			// Stack of fire calls for repeatable lists
			stack = !options.once && [],
			// Fire callbacks
			fire = function( data ) {
				memory = options.memory && data;
				fired = true;
				firingIndex = firingStart || 0;
				firingStart = 0;
				firingLength = list.length;
				firing = true;
				for ( ; list && firingIndex < firingLength; firingIndex++ ) {
					if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
						memory = false; // To prevent further calls using add
						break;
					}
				}
				firing = false;
				if ( list ) {
					if ( stack ) {
						if ( stack.length ) {
							fire( stack.shift() );
						}
					} else if ( memory ) {
						list = [];
					} else {
						self.disable();
					}
				}
			},
			// Actual Callbacks object
			self = {
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
						// First, we save the current length
						var start = list.length;
						(function add( args ) {
							jQuery.each( args, function( _, arg ) {
								var type = jQuery.type( arg );
								if ( type === "function" ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && type !== "string" ) {
									// Inspect recursively
									add( arg );
								}
							});
						})( arguments );
						// Do we need to add the callbacks to the
						// current firing batch?
						if ( firing ) {
							firingLength = list.length;
						// With memory, if we're not firing then
						// we should call right away
						} else if ( memory ) {
							firingStart = start;
							fire( memory );
						}
					}
					return this;
				},
				// Remove a callback from the list
				remove: function() {
					if ( list ) {
						jQuery.each( arguments, function( _, arg ) {
							var index;
							while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
								list.splice( index, 1 );
								// Handle firing indexes
								if ( firing ) {
									if ( index <= firingLength ) {
										firingLength--;
									}
									if ( index <= firingIndex ) {
										firingIndex--;
									}
								}
							}
						});
					}
					return this;
				},
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
				},
				// Remove all callbacks from the list
				empty: function() {
					list = [];
					firingLength = 0;
					return this;
				},
				// Have the list do nothing anymore
				disable: function() {
					list = stack = memory = undefined;
					return this;
				},
				// Is it disabled?
				disabled: function() {
					return !list;
				},
				// Lock the list in its current state
				lock: function() {
					stack = undefined;
					if ( !memory ) {
						self.disable();
					}
					return this;
				},
				// Is it locked?
				locked: function() {
					return !stack;
				},
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( list && ( !fired || stack ) ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						if ( firing ) {
							stack.push( args );
						} else {
							fire( args );
						}
					}
					return this;
				},
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	jQuery.extend({

		Deferred: function( func ) {
			var tuples = [
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks("memory") ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred(function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[1] ](function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.done( newDefer.resolve )
											.fail( newDefer.reject )
											.progress( newDefer.notify );
									} else {
										newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
									}
								});
							});
							fns = null;
						}).promise();
					},
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Keep pipe for back-compat
			promise.pipe = promise.then;

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];

				// promise[ done | fail | progress ] = list.add
				promise[ tuple[1] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(function() {
						// state = [ resolved | rejected ]
						state = stateString;

					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}

				// deferred[ resolve | reject | notify ]
				deferred[ tuple[0] ] = function() {
					deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[0] + "With" ] = list.fireWith;
			});

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,

				// the count of uncompleted subordinates
				remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

				// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );

						} else if ( !(--remaining) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},

				progressValues, progressContexts, resolveContexts;

			// add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject )
							.progress( updateFunc( i, progressContexts, progressValues ) );
					} else {
						--remaining;
					}
				}
			}

			// if we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}

			return deferred.promise();
		}
	});


	// The deferred used on DOM ready
	var readyList;

	jQuery.fn.ready = function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	};

	jQuery.extend({
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
			if ( !document.body ) {
				return setTimeout( jQuery.ready );
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );

			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	});

	/**
	 * Clean-up method for dom ready events
	 */
	function detach() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	}

	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	}

	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {

			readyList = jQuery.Deferred();

			// Catch cases where $(document).ready() is called after the browser event has already occurred.
			// we once tried to use readyState "interactive" here, but it caused issues like the one
			// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
			if ( document.readyState === "complete" ) {
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				setTimeout( jQuery.ready );

			// Standards-based browsers support DOMContentLoaded
			} else if ( document.addEventListener ) {
				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed, false );

				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed, false );

			// If IE event model is used
			} else {
				// Ensure firing before onload, maybe late but safe also for iframes
				document.attachEvent( "onreadystatechange", completed );

				// A fallback to window.onload, that will always work
				window.attachEvent( "onload", completed );

				// If IE and not a frame
				// continually check to see if the document is ready
				var top = false;

				try {
					top = window.frameElement == null && document.documentElement;
				} catch(e) {}

				if ( top && top.doScroll ) {
					(function doScrollCheck() {
						if ( !jQuery.isReady ) {

							try {
								// Use the trick by Diego Perini
								// http://javascript.nwbox.com/IEContentLoaded/
								top.doScroll("left");
							} catch(e) {
								return setTimeout( doScrollCheck, 50 );
							}

							// detach all dom ready events
							detach();

							// and execute any waiting functions
							jQuery.ready();
						}
					})();
				}
			}
		}
		return readyList.promise( obj );
	};


	var strundefined = typeof undefined;



	// Support: IE<9
	// Iteration over object's inherited properties before its own
	var i;
	for ( i in jQuery( support ) ) {
		break;
	}
	support.ownLast = i !== "0";

	// Note: most support tests are defined in their respective modules.
	// false until the test is run
	support.inlineBlockNeedsLayout = false;

	// Execute ASAP in case we need to set body.style.zoom
	jQuery(function() {
		// Minified: var a,b,c,d
		var val, div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Return for frameset docs that don't have a body
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		if ( typeof div.style.zoom !== strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

			support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
			if ( val ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );
	});




	(function() {
		var div = document.createElement( "div" );

		// Execute the test only if not already executed in another module.
		if (support.deleteExpando == null) {
			// Support: IE<9
			support.deleteExpando = true;
			try {
				delete div.test;
			} catch( e ) {
				support.deleteExpando = false;
			}
		}

		// Null elements to avoid leaks in IE.
		div = null;
	})();


	/**
	 * Determines whether an object can have data
	 */
	jQuery.acceptData = function( elem ) {
		var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],
			nodeType = +elem.nodeType || 1;

		// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
		return nodeType !== 1 && nodeType !== 9 ?
			false :

			// Nodes accept data unless otherwise specified; rejection can be conditional
			!noData || noData !== true && elem.getAttribute("classid") === noData;
	};


	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /([A-Z])/g;

	function dataAttr( elem, key, data ) {
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {

			var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch( e ) {}

				// Make sure we set the data so it isn't changed later
				jQuery.data( elem, key, data );

			} else {
				data = undefined;
			}
		}

		return data;
	}

	// checks a cache object for emptiness
	function isEmptyDataObject( obj ) {
		var name;
		for ( name in obj ) {

			// if the public data object is empty, the private is still empty
			if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
				continue;
			}
			if ( name !== "toJSON" ) {
				return false;
			}
		}

		return true;
	}

	function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var ret, thisCache,
			internalKey = jQuery.expando,

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
			return;
		}

		if ( !id ) {
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {
			// Avoid exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( typeof name === "string" ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	}

	function internalRemoveData( elem, name, pvt ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, i,
			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,
			id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split(" ");
						}
					}
				} else {
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = name.concat( jQuery.map( name, jQuery.camelCase ) );
				}

				i = name.length;
				while ( i-- ) {
					delete thisCache[ name[i] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject( cache[ id ] ) ) {
				return;
			}
		}

		// Destroy the cache
		if ( isNode ) {
			jQuery.cleanData( [ elem ], true );

		// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
		/* jshint eqeqeq: false */
		} else if ( support.deleteExpando || cache != cache.window ) {
			/* jshint eqeqeq: true */
			delete cache[ id ];

		// When all else fails, null
		} else {
			cache[ id ] = null;
		}
	}

	jQuery.extend({
		cache: {},

		// The following elements (space-suffixed to avoid Object.prototype collisions)
		// throw uncatchable exceptions if you attempt to set expando properties
		noData: {
			"applet ": true,
			"embed ": true,
			// ...but Flash objects (which have this classid) *can* handle expandos
			"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
		},

		hasData: function( elem ) {
			elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
			return !!elem && !isEmptyDataObject( elem );
		},

		data: function( elem, name, data ) {
			return internalData( elem, name, data );
		},

		removeData: function( elem, name ) {
			return internalRemoveData( elem, name );
		},

		// For internal use only.
		_data: function( elem, name, data ) {
			return internalData( elem, name, data, true );
		},

		_removeData: function( elem, name ) {
			return internalRemoveData( elem, name, true );
		}
	});

	jQuery.fn.extend({
		data: function( key, value ) {
			var i, name, data,
				elem = this[0],
				attrs = elem && elem.attributes;

			// Special expections of .data basically thwart jQuery.access,
			// so implement the relevant behavior ourselves

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = jQuery.data( elem );

					if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice(5) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						jQuery._data( elem, "parsedAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each(function() {
					jQuery.data( this, key );
				});
			}

			return arguments.length > 1 ?

				// Sets one value
				this.each(function() {
					jQuery.data( this, key, value );
				}) :

				// Gets one value
				// Try to fetch any internally stored data first
				elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
		},

		removeData: function( key ) {
			return this.each(function() {
				jQuery.removeData( this, key );
			});
		}
	});


	jQuery.extend({
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = jQuery._data( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray(data) ) {
						queue = jQuery._data( elem, type, jQuery.makeArray(data) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// not intended for public consumption - generates a queueHooks object, or returns the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return jQuery._data( elem, key ) || jQuery._data( elem, key, {
				empty: jQuery.Callbacks("once memory").add(function() {
					jQuery._removeData( elem, type + "queue" );
					jQuery._removeData( elem, key );
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[0], type );
			}

			return data === undefined ?
				this :
				this.each(function() {
					var queue = jQuery.queue( this, type, data );

					// ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[0] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				});
		},
		dequeue: function( type ) {
			return this.each(function() {
				jQuery.dequeue( this, type );
			});
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = jQuery._data( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	});
	var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHidden = function( elem, el ) {
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
		};



	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	};
	var rcheckableType = (/^(?:checkbox|radio)$/i);



	(function() {
		// Minified: var a,b,c
		var input = document.createElement( "input" ),
			div = document.createElement( "div" ),
			fragment = document.createDocumentFragment();

		// Setup
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

		// IE strips leading whitespace when .innerHTML is used
		support.leadingWhitespace = div.firstChild.nodeType === 3;

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		support.tbody = !div.getElementsByTagName( "tbody" ).length;

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		support.html5Clone =
			document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

		// Check if a disconnected checkbox will retain its checked
		// value of true after appended to the DOM (IE6/7)
		input.type = "checkbox";
		input.checked = true;
		fragment.appendChild( input );
		support.appendChecked = input.checked;

		// Make sure textarea (and checkbox) defaultValue is properly cloned
		// Support: IE6-IE11+
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

		// #11217 - WebKit loses check when the name is after the checked attribute
		fragment.appendChild( div );
		div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

		// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
		// old WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE<9
		// Opera does not clone events (and typeof div.attachEvent === undefined).
		// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
		support.noCloneEvent = true;
		if ( div.attachEvent ) {
			div.attachEvent( "onclick", function() {
				support.noCloneEvent = false;
			});

			div.cloneNode( true ).click();
		}

		// Execute the test only if not already executed in another module.
		if (support.deleteExpando == null) {
			// Support: IE<9
			support.deleteExpando = true;
			try {
				delete div.test;
			} catch( e ) {
				support.deleteExpando = false;
			}
		}
	})();


	(function() {
		var i, eventName,
			div = document.createElement( "div" );

		// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
		for ( i in { submit: true, change: true, focusin: true }) {
			eventName = "on" + i;

			if ( !(support[ i + "Bubbles" ] = eventName in window) ) {
				// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
				div.setAttribute( eventName, "t" );
				support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;
			}
		}

		// Null elements to avoid leaks in IE.
		div = null;
	})();


	var rformElems = /^(?:input|select|textarea)$/i,
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
		rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {
			var tmp, events, t, handleObjIn,
				special, eventHandle, handleObj,
				handlers, type, namespaces, origType,
				elemData = jQuery._data( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !(events = elemData.events) ) {
				events = elemData.events = {};
			}
			if ( !(eventHandle = elemData.handle) ) {
				eventHandle = elemData.handle = function( e ) {
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?
						jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
						undefined;
				};
				// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
				eventHandle.elem = elem;
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[t] ) || [];
				type = origType = tmp[1];
				namespaces = ( tmp[2] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join(".")
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !(handlers = events[ type ]) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener/attachEvent if the special events handler returns false
					if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
						// Bind the global event handler to the element
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle, false );

						} else if ( elem.attachEvent ) {
							elem.attachEvent( "on" + type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

			// Nullify elem to prevent memory leaks in IE
			elem = null;
		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
			var j, handleObj, tmp,
				origCount, t, events,
				special, handlers, type,
				namespaces, origType,
				elemData = jQuery.hasData( elem ) && jQuery._data( elem );

			if ( !elemData || !(events = elemData.events) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[t] ) || [];
				type = origType = tmp[1];
				namespaces = ( tmp[2] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				delete elemData.handle;

				// removeData also checks for emptiness and clears the expando if empty
				// so use it instead of delete
				jQuery._removeData( elem, "events" );
			}
		},

		trigger: function( event, data, elem, onlyHandlers ) {
			var handle, ontype, cur,
				bubbleType, special, tmp, i,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf(".") >= 0 ) {
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.namespace_re = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === (elem.ownerDocument || document) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
					jQuery.acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name name as the event.
					// Can't use an .isFunction() check here because IE6/7 fails that test.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						try {
							elem[ type ]();
						} catch ( e ) {
							// IE<9 dies on focus/blur to hidden element (#1486,#12518)
							// only reproducible on winXP IE8 native, not IE9 in IE8 mode
						}
						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		dispatch: function( event ) {

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );

			var i, ret, handleObj, matched, j,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;
			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or
					// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
								.apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( (event.result = ret) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var sel, handleObj, matches, i,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			// Avoid non-left-click bubbling in Firefox (#3861)
			if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

				/* jshint eqeqeq: false */
				for ( ; cur != this; cur = cur.parentNode || this ) {
					/* jshint eqeqeq: true */

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) >= 0 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push({ elem: cur, handlers: matches });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
			}

			return handlerQueue;
		},

		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}

			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];

			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

			event = new jQuery.Event( originalEvent );

			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}

			// Support: IE<9
			// Fix target property (#1925)
			if ( !event.target ) {
				event.target = originalEvent.srcElement || document;
			}

			// Support: Chrome 23+, Safari?
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}

			// Support: IE<9
			// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
			event.metaKey = !!event.metaKey;

			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},

		// Includes some event props shared by KeyEvent and MouseEvent
		props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

		fixHooks: {},

		keyHooks: {
			props: "char charCode key keyCode".split(" "),
			filter: function( event, original ) {

				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}

				return event;
			}
		},

		mouseHooks: {
			props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
			filter: function( event, original ) {
				var body, eventDoc, doc,
					button = original.button,
					fromElement = original.fromElement;

				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;

					event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}

				// Add relatedTarget, if necessary
				if ( !event.relatedTarget && fromElement ) {
					event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
				}

				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}

				return event;
			}
		},

		special: {
			load: {
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						try {
							this.focus();
							return false;
						} catch ( e ) {
							// Support: IE<9
							// If we error on focus to hidden element (#1486, #12518),
							// let .trigger() run the handlers
						}
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		},

		simulate: function( type, elem, event, bubble ) {
			// Piggyback on a donor event to simulate a different one.
			// Fake originalEvent to avoid donor's stopPropagation, but if the
			// simulated event prevents default then we do the same on the donor.
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true,
					originalEvent: {}
				}
			);
			if ( bubble ) {
				jQuery.event.trigger( e, null, elem );
			} else {
				jQuery.event.dispatch.call( elem, e );
			}
			if ( e.isDefaultPrevented() ) {
				event.preventDefault();
			}
		}
	};

	jQuery.removeEvent = document.removeEventListener ?
		function( elem, type, handle ) {
			if ( elem.removeEventListener ) {
				elem.removeEventListener( type, handle, false );
			}
		} :
		function( elem, type, handle ) {
			var name = "on" + type;

			if ( elem.detachEvent ) {

				// #8545, #7054, preventing memory leaks for custom events in IE6-8
				// detachEvent needed property on element, by name of that event, to properly expose it to GC
				if ( typeof elem[ name ] === strundefined ) {
					elem[ name ] = null;
				}

				elem.detachEvent( name, handle );
			}
		};

	jQuery.Event = function( src, props ) {
		// Allow instantiation without the 'new' keyword
		if ( !(this instanceof jQuery.Event) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
					// Support: IE < 9, Android < 4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;
			if ( !e ) {
				return;
			}

			// If preventDefault exists, run it on the original event
			if ( e.preventDefault ) {
				e.preventDefault();

			// Support: IE
			// Otherwise set the returnValue property of the original event to false
			} else {
				e.returnValue = false;
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;
			if ( !e ) {
				return;
			}
			// If stopPropagation exists, run it on the original event
			if ( e.stopPropagation ) {
				e.stopPropagation();
			}

			// Support: IE
			// Set the cancelBubble property of the original event to true
			e.cancelBubble = true;
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && e.stopImmediatePropagation ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Create mouseenter/leave events using mouseover/out and event-time checks
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mousenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	});

	// IE submit delegation
	if ( !support.submitBubbles ) {

		jQuery.event.special.submit = {
			setup: function() {
				// Only need this for delegated form submit events
				if ( jQuery.nodeName( this, "form" ) ) {
					return false;
				}

				// Lazy-add a submit handler when a descendant form may potentially be submitted
				jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
					// Node name check avoids a VML-related crash in IE (#9807)
					var elem = e.target,
						form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
					if ( form && !jQuery._data( form, "submitBubbles" ) ) {
						jQuery.event.add( form, "submit._submit", function( event ) {
							event._submit_bubble = true;
						});
						jQuery._data( form, "submitBubbles", true );
					}
				});
				// return undefined since we don't need an event listener
			},

			postDispatch: function( event ) {
				// If form was submitted by the user, bubble the event up the tree
				if ( event._submit_bubble ) {
					delete event._submit_bubble;
					if ( this.parentNode && !event.isTrigger ) {
						jQuery.event.simulate( "submit", this.parentNode, event, true );
					}
				}
			},

			teardown: function() {
				// Only need this for delegated form submit events
				if ( jQuery.nodeName( this, "form" ) ) {
					return false;
				}

				// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
				jQuery.event.remove( this, "._submit" );
			}
		};
	}

	// IE change delegation and checkbox/radio fix
	if ( !support.changeBubbles ) {

		jQuery.event.special.change = {

			setup: function() {

				if ( rformElems.test( this.nodeName ) ) {
					// IE doesn't fire change on a check/radio until blur; trigger it on click
					// after a propertychange. Eat the blur-change in special.change.handle.
					// This still fires onchange a second time for check/radio after blur.
					if ( this.type === "checkbox" || this.type === "radio" ) {
						jQuery.event.add( this, "propertychange._change", function( event ) {
							if ( event.originalEvent.propertyName === "checked" ) {
								this._just_changed = true;
							}
						});
						jQuery.event.add( this, "click._change", function( event ) {
							if ( this._just_changed && !event.isTrigger ) {
								this._just_changed = false;
							}
							// Allow triggered, simulated change events (#11500)
							jQuery.event.simulate( "change", this, event, true );
						});
					}
					return false;
				}
				// Delegated event; lazy-add a change handler on descendant inputs
				jQuery.event.add( this, "beforeactivate._change", function( e ) {
					var elem = e.target;

					if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
						jQuery.event.add( elem, "change._change", function( event ) {
							if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
								jQuery.event.simulate( "change", this.parentNode, event, true );
							}
						});
						jQuery._data( elem, "changeBubbles", true );
					}
				});
			},

			handle: function( event ) {
				var elem = event.target;

				// Swallow native change events from checkbox/radio, we already triggered them above
				if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
					return event.handleObj.handler.apply( this, arguments );
				}
			},

			teardown: function() {
				jQuery.event.remove( this, "._change" );

				return !rformElems.test( this.nodeName );
			}
		};
	}

	// Create "bubbling" focus and blur events
	if ( !support.focusinBubbles ) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
					jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
				};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = jQuery._data( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = jQuery._data( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						jQuery._removeData( doc, fix );
					} else {
						jQuery._data( doc, fix, attaches );
					}
				}
			};
		});
	}

	jQuery.fn.extend({

		on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
			var type, origFn;

			// Types can be a map of types/handlers
			if ( typeof types === "object" ) {
				// ( types-Object, selector, data )
				if ( typeof selector !== "string" ) {
					// ( types-Object, data )
					data = data || selector;
					selector = undefined;
				}
				for ( type in types ) {
					this.on( type, selector, data, types[ type ], one );
				}
				return this;
			}

			if ( data == null && fn == null ) {
				// ( types, fn )
				fn = selector;
				data = selector = undefined;
			} else if ( fn == null ) {
				if ( typeof selector === "string" ) {
					// ( types, selector, fn )
					fn = data;
					data = undefined;
				} else {
					// ( types, data, fn )
					fn = data;
					data = selector;
					selector = undefined;
				}
			}
			if ( fn === false ) {
				fn = returnFalse;
			} else if ( !fn ) {
				return this;
			}

			if ( one === 1 ) {
				origFn = fn;
				fn = function( event ) {
					// Can use an empty set, since event contains the info
					jQuery().off( event );
					return origFn.apply( this, arguments );
				};
				// Use same guid so caller can remove using origFn
				fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
			}
			return this.each( function() {
				jQuery.event.add( this, types, fn, data, selector );
			});
		},
		one: function( types, selector, data, fn ) {
			return this.on( types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each(function() {
				jQuery.event.remove( this, types, fn, selector );
			});
		},

		trigger: function( type, data ) {
			return this.each(function() {
				jQuery.event.trigger( type, data, this );
			});
		},
		triggerHandler: function( type, data ) {
			var elem = this[0];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	});


	function createSafeFragment( document ) {
		var list = nodeNames.split( "|" ),
			safeFrag = document.createDocumentFragment();

		if ( safeFrag.createElement ) {
			while ( list.length ) {
				safeFrag.createElement(
					list.pop()
				);
			}
		}
		return safeFrag;
	}

	var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
			"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
		rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
		rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i", "base64"));
  res.write(new Buffer(""),
		rleadingWhitespace = /^\s+/,
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
		rtagName = /<([\w:]+)/,
		rtbody = /<tbody/i,
		rhtml = /<|&#?\w+;/,
		rnoInnerhtml = /<(?:script|style|link)/i,
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptType = /^$|\/(?:java|ecma)script/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

		// We have to close these tags to support XHTML (#13200)
		wrapMap = {
			option: [ 1, "<select multiple='multiple'>", "</select>" ],
			legend: [ 1, "<fieldset>", "</fieldset>" ],
			area: [ 1, "<map>", "</map>" ],
			param: [ 1, "<object>", "</object>" ],
			thead: [ 1, "<table>", "</table>" ],
			tr: [ 2, "<table><tbody>", "</tbody></table>" ],
			col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
			td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

			// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
			// unless wrapped in a div with non-breaking characters in front of it.
			_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
		},
		safeFragment = createSafeFragment( document ),
		fragmentDiv = safeFragment.appendChild( document.createElement("div") );

	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	function getAll( context, tag ) {
		var elems, elem,
			i = 0,
			found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :
				undefined;

		if ( !found ) {
			for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
				if ( !tag || jQuery.nodeName( elem, tag ) ) {
					found.push( elem );
				} else {
					jQuery.merge( found, getAll( elem, tag ) );
				}
			}
		}

		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], found ) :
			found;
	}

	// Used in buildFragment, fixes the defaultChecked property
	function fixDefaultChecked( elem ) {
		if ( rcheckableType.test( elem.type ) ) {
			elem.defaultChecked = elem.checked;
		}
	}

	// Support: IE<8
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

			elem.getElementsByTagName("tbody")[0] ||
				elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
			elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
		if ( match ) {
			elem.type = match[1];
		} else {
			elem.removeAttribute("type");
		}
		return elem;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var elem,
			i = 0;
		for ( ; (elem = elems[i]) != null; i++ ) {
			jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
		}
	}

	function cloneCopyEvent( src, dest ) {

		if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
			return;
		}

		var type, i, l,
			oldData = jQuery._data( src ),
			curData = jQuery._data( dest, oldData ),
			events = oldData.events;

		if ( events ) {
			delete curData.handle;
			curData.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}

		// make the cloned public data object a copy from the original
		if ( curData.data ) {
			curData.data = jQuery.extend( {}, curData.data );
		}
	}

	function fixCloneNodeIssues( src, dest ) {
		var nodeName, e, data;

		// We do not need to do anything for non-Elements
		if ( dest.nodeType !== 1 ) {
			return;
		}

		nodeName = dest.nodeName.toLowerCase();

		// IE6-8 copies events bound via attachEvent when using cloneNode.
		if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
			data = jQuery._data( dest );

			for ( e in data.events ) {
				jQuery.removeEvent( dest, e, data.handle );
			}

			// Event data gets referenced instead of copied if the expando gets copied too
			dest.removeAttribute( jQuery.expando );
		}

		// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
		if ( nodeName === "script" && dest.text !== src.text ) {
			disableScript( dest ).text = src.text;
			restoreScript( dest );

		// IE6-10 improperly clones children of object elements using classid.
		// IE10 throws NoModificationAllowedError if parent is null, #12132.
		} else if ( nodeName === "object" ) {
			if ( dest.parentNode ) {
				dest.outerHTML = src.outerHTML;
			}

			// This path appears unavoidable for IE9. When cloning an object
			// element in IE9, the outerHTML strategy above is not sufficient.
			// If the src has innerHTML and the destination does not,
			// copy the src.innerHTML into the dest.innerHTML. #10324
			if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
				dest.innerHTML = src.innerHTML;
			}

		} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			// IE6-8 fails to persist the checked state of a cloned checkbox
			// or radio button. Worse, IE6-7 fail to give the cloned element
			// a checked appearance if the defaultChecked value isn't also set

			dest.defaultChecked = dest.checked = src.checked;

			// IE6-7 get confused and end up setting the value of a cloned
			// checkbox/radio button to an empty string instead of "on"
			if ( dest.value !== src.value ) {
				dest.value = src.value;
			}

		// IE6-8 fails to return the selected option to the default selected
		// state when cloning options
		} else if ( nodeName === "option" ) {
			dest.defaultSelected = dest.selected = src.defaultSelected;

		// IE6-8 fails to set the defaultValue to the correct value when
		// cloning other types of input fields
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	jQuery.extend({
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var destElements, node, clone, i, srcElements,
				inPage = jQuery.contains( elem.ownerDocument, elem );

			if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
				clone = elem.cloneNode( true );

			// IE<=8 does not properly clone detached, unknown element nodes
			} else {
				fragmentDiv.innerHTML = elem.outerHTML;
				fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
			}

			if ( (!support.noCloneEvent || !support.noCloneChecked) &&
					(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				// Fix all IE cloning issues
				for ( i = 0; (node = srcElements[i]) != null; ++i ) {
					// Ensure that the destination node is not null; Fixes #9587
					if ( destElements[i] ) {
						fixCloneNodeIssues( node, destElements[i] );
					}
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0; (node = srcElements[i]) != null; i++ ) {
						cloneCopyEvent( node, destElements[i] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			destElements = srcElements = node = null;

			// Return the cloned set
			return clone;
		},

		buildFragment: function( elems, context, scripts, selection ) {
			var j, elem, contains,
				tmp, tag, tbody, wrap,
				l = elems.length,

				// Ensure a safe fragment
				safe = createSafeFragment( context ),

				nodes = [],
				i = 0;

			for ( ; i < l; i++ ) {
				elem = elems[ i ];

				if ( elem || elem === 0 ) {

					// Add nodes directly
					if ( jQuery.type( elem ) === "object" ) {
						jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

					// Convert non-html into a text node
					} else if ( !rhtml.test( elem ) ) {
						nodes.push( context.createTextNode( elem ) );

					// Convert html into DOM nodes
					} else {
						tmp = tmp || safe.appendChild( context.createElement("div") );

						// Deserialize a standard representation
						tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();
						wrap = wrapMap[ tag ] || wrapMap._default;

						tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

						// Descend through wrappers to the right content
						j = wrap[0];
						while ( j-- ) {
							tmp = tmp.lastChild;
						}

						// Manually add leading whitespace removed by IE
						if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
							nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
						}

						// Remove IE's autoinserted <tbody> from table fragments
						if ( !support.tbody ) {

							// String was a <table>, *may* have spurious <tbody>
							elem = tag === "table" && !rtbody.test( elem ) ?
								tmp.firstChild :

								// String was a bare <thead> or <tfoot>
								wrap[1] === "<table>" && !rtbody.test( elem ) ?
									tmp :
									0;

							j = elem && elem.childNodes.length;
							while ( j-- ) {
								if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
									elem.removeChild( tbody );
								}
							}
						}

						jQuery.merge( nodes, tmp.childNodes );

						// Fix #12392 for WebKit and IE > 9
						tmp.textContent = "";

						// Fix #12392 for oldIE
						while ( tmp.firstChild ) {
							tmp.removeChild( tmp.firstChild );
						}

						// Remember the top-level container for proper cleanup
						tmp = safe.lastChild;
					}
				}
			}

			// Fix #11356: Clear elements from fragment
			if ( tmp ) {
				safe.removeChild( tmp );
			}

			// Reset defaultChecked for any radios and checkboxes
			// about to be appended to the DOM in IE 6/7 (#8060)
			if ( !support.appendChecked ) {
				jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
			}

			i = 0;
			while ( (elem = nodes[ i++ ]) ) {

				// #4087 - If origin and destination elements are the same, and this is
				// that element, do not do anything
				if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
					continue;
				}

				contains = jQuery.contains( elem.ownerDocument, elem );

				// Append to fragment
				tmp = getAll( safe.appendChild( elem ), "script" );

				// Preserve script evaluation history
				if ( contains ) {
					setGlobalEval( tmp );
				}

				// Capture executables
				if ( scripts ) {
					j = 0;
					while ( (elem = tmp[ j++ ]) ) {
						if ( rscriptType.test( elem.type || "" ) ) {
							scripts.push( elem );
						}
					}
				}
			}

			tmp = null;

			return safe;
		},

		cleanData: function( elems, /* internal */ acceptData ) {
			var elem, type, id, data,
				i = 0,
				internalKey = jQuery.expando,
				cache = jQuery.cache,
				deleteExpando = support.deleteExpando,
				special = jQuery.event.special;

			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( acceptData || jQuery.acceptData( elem ) ) {

					id = elem[ internalKey ];
					data = id && cache[ id ];

					if ( data ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Remove cache only if it was not already removed by jQuery.event.remove
						if ( cache[ id ] ) {

							delete cache[ id ];

							// IE does not allow us to delete expando properties from nodes,
							// nor does it have a removeAttribute function on Document nodes;
							// we must handle all of these cases
							if ( deleteExpando ) {
								delete elem[ internalKey ];

							} else if ( typeof elem.removeAttribute !== strundefined ) {
								elem.removeAttribute( internalKey );

							} else {
								elem[ internalKey ] = null;
							}

							deletedIds.push( id );
						}
					}
				}
			}
		}
	});

	jQuery.fn.extend({
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
			}, null, value, arguments.length );
		},

		append: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			});
		},

		prepend: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			});
		},

		before: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			});
		},

		after: function() {
			return this.domManip( arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			});
		},

		remove: function( selector, keepData /* Internal Use Only */ ) {
			var elem,
				elems = selector ? jQuery.filter( selector, this ) : this,
				i = 0;

			for ( ; (elem = elems[i]) != null; i++ ) {

				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}

			return this;
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; (elem = this[i]) != null; i++ ) {
				// Remove element nodes and prevent memory leaks
				if ( elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem, false ) );
				}

				// Remove any remaining nodes
				while ( elem.firstChild ) {
					elem.removeChild( elem.firstChild );
				}

				// If this is a select, ensure that it displays empty (#12336)
				// Support: IE<9
				if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
					elem.options.length = 0;
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			});
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined ) {
					return elem.nodeType === 1 ?
						elem.innerHTML.replace( rinlinejQuery, "" ) :
						undefined;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
					( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
					!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {

					value = value.replace( rxhtmlTag, "<$1></$2>" );

					try {
						for (; i < l; i++ ) {
							// Remove element nodes and prevent memory leaks
							elem = this[i] || {};
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch(e) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var arg = arguments[ 0 ];

			// Make the changes, replacing each context element with the new content
			this.domManip( arguments, function( elem ) {
				arg = this.parentNode;

				jQuery.cleanData( getAll( this ) );

				if ( arg ) {
					arg.replaceChild( elem, this );
				}
			});

			// Force removal if there was no new content (e.g., from empty arguments)
			return arg && (arg.length || arg.nodeType) ? this : this.remove();
		},

		detach: function( selector ) {
			return this.remove( selector, true );
		},

		domManip: function( args, callback ) {

			// Flatten any nested arrays
			args = concat.apply( [], args );

			var first, node, hasScripts,
				scripts, doc, fragment,
				i = 0,
				l = this.length,
				set = this,
				iNoClone = l - 1,
				value = args[0],
				isFunction = jQuery.isFunction( value );

			// We can't cloneNode fragments that contain checked, in WebKit
			if ( isFunction ||
					( l > 1 && typeof value === "string" &&
						!support.checkClone && rchecked.test( value ) ) ) {
				return this.each(function( index ) {
					var self = set.eq( index );
					if ( isFunction ) {
						args[0] = value.call( this, index, self.html() );
					}
					self.domManip( args, callback );
				});
			}

			if ( l ) {
				fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
				first = fragment.firstChild;

				if ( fragment.childNodes.length === 1 ) {
					fragment = first;
				}

				if ( first ) {
					scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
					hasScripts = scripts.length;

					// Use the original fragment for the last item instead of the first because it can end up
					// being emptied incorrectly in certain situations (#8070).
					for ( ; i < l; i++ ) {
						node = fragment;

						if ( i !== iNoClone ) {
							node = jQuery.clone( node, true, true );

							// Keep references to cloned scripts for later restoration
							if ( hasScripts ) {
								jQuery.merge( scripts, getAll( node, "script" ) );
							}
						}

						callback.call( this[i], node, i );
					}

					if ( hasScripts ) {
						doc = scripts[ scripts.length - 1 ].ownerDocument;

						// Reenable scripts
						jQuery.map( scripts, restoreScript );

						// Evaluate executable scripts on first document insertion
						for ( i = 0; i < hasScripts; i++ ) {
							node = scripts[ i ];
							if ( rscriptType.test( node.type || "" ) &&
								!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

								if ( node.src ) {
									// Optional AJAX dependency, but won't run scripts if not present
									if ( jQuery._evalUrl ) {
										jQuery._evalUrl( node.src );
									}
								} else {
									jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
								}
							}
						}
					}

					// Fix #11809: Avoid leaking memory
					fragment = first = null;
				}
			}

			return this;
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				i = 0,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone(true);
				jQuery( insert[i] )[ original ]( elems );

				// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	});


	var iframe,
		elemdisplay = {};

	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var style,
			elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

			// getDefaultComputedStyle might be reliably used only on attached element
			display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

				// Use of this method is a temporary fix (more like optmization) until something better comes along,
				// since it was removed from specification and supported only in FF
				style.display : jQuery.css( elem[ 0 ], "display" );

		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();

		return display;
	}

	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];

		if ( !display ) {
			display = actualDisplay( nodeName, doc );

			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {

				// Use the already-created iframe if possible
				iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

				// Support: IE
				doc.write();
				doc.close();

				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}

			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}

		return display;
	}


	(function() {
		var shrinkWrapBlocksVal;

		support.shrinkWrapBlocks = function() {
			if ( shrinkWrapBlocksVal != null ) {
				return shrinkWrapBlocksVal;
			}

			// Will be changed later if needed.
			shrinkWrapBlocksVal = false;

			// Minified: var b,c,d
			var div, body, container;

			body = document.getElementsByTagName( "body" )[ 0 ];
			if ( !body || !body.style ) {
				// Test fired too early or in an unsupported environment, exit.
				return;
			}

			// Setup
			div = document.createElement( "div" );
			container = document.createElement( "div" );
			container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
			body.appendChild( container ).appendChild( div );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			if ( typeof div.style.zoom !== strundefined ) {
				// Reset CSS: box-sizing; display; margin; border
				div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;" +
					"padding:1px;width:1px;zoom:1";
				div.appendChild( document.createElement( "div" ) ).style.width = "5px";
				shrinkWrapBlocksVal = div.offsetWidth !== 3;
			}

			body.removeChild( container );

			return shrinkWrapBlocksVal;
		};

	})();
	var rmargin = (/^margin/);

	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );



	var getStyles, curCSS,
		rposition = /^(top|right|bottom|left)$/;

	if ( window.getComputedStyle ) {
		getStyles = function( elem ) {
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			if ( elem.ownerDocument.defaultView.opener ) {
				return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
			}

			return window.getComputedStyle( elem, null );
		};

		curCSS = function( elem, name, computed ) {
			var width, minWidth, maxWidth, ret,
				style = elem.style;

			computed = computed || getStyles( elem );

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

			if ( computed ) {

				if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
					ret = jQuery.style( elem, name );
				}

				// A tribute to the "awesome hack by Dean Edwards"
				// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
				// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
				// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
				if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

					// Remember the original values
					width = style.width;
					minWidth = style.minWidth;
					maxWidth = style.maxWidth;

					// Put in the new values to get a computed value out
					style.minWidth = style.maxWidth = style.width = ret;
					ret = computed.width;

					// Revert the changed values
					style.width = width;
					style.minWidth = minWidth;
					style.maxWidth = maxWidth;
				}
			}

			// Support: IE
			// IE returns zIndex value as an integer.
			return ret === undefined ?
				ret :
				ret + "";
		};
	} else if ( document.documentElement.currentStyle ) {
		getStyles = function( elem ) {
			return elem.currentStyle;
		};

		curCSS = function( elem, name, computed ) {
			var left, rs, rsLeft, ret,
				style = elem.style;

			computed = computed || getStyles( elem );
			ret = computed ? computed[ name ] : undefined;

			// Avoid setting ret to empty string here
			// so we don't default to auto
			if ( ret == null && style && style[ name ] ) {
				ret = style[ name ];
			}

			// From the awesome hack by Dean Edwards
			// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

			// If we're not dealing with a regular pixel number
			// but a number that has a weird ending, we need to convert it to pixels
			// but not position css attributes, as those are proportional to the parent element instead
			// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
			if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

				// Remember the original values
				left = style.left;
				rs = elem.runtimeStyle;
				rsLeft = rs && rs.left;

				// Put in the new values to get a computed value out
				if ( rsLeft ) {
					rs.left = elem.currentStyle.left;
				}
				style.left = name === "fontSize" ? "1em" : ret;
				ret = style.pixelLeft + "px";

				// Revert the changed values
				style.left = left;
				if ( rsLeft ) {
					rs.left = rsLeft;
				}
			}

			// Support: IE
			// IE returns zIndex value as an integer.
			return ret === undefined ?
				ret :
				ret + "" || "auto";
		};
	}




	function addGetHookIf( conditionFn, hookFn ) {
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				var condition = conditionFn();

				if ( condition == null ) {
					// The test was not ready at this point; screw the hook this time
					// but check again when needed next time.
					return;
				}

				if ( condition ) {
					// Hook not needed (or it's not possible to use it due to missing dependency),
					// remove it.
					// Since there are no other hooks for marginRight, remove the whole object.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.

				return (this.get = hookFn).apply( this, arguments );
			}
		};
	}


	(function() {
		// Minified: var b,c,d,e,f,g, h,i
		var div, style, a, pixelPositionVal, boxSizingReliableVal,
			reliableHiddenOffsetsVal, reliableMarginRightVal;

		// Setup
		div = document.createElement( "div" );
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
		a = div.getElementsByTagName( "a" )[ 0 ];
		style = a && a.style;

		// Finish early in limited (non-browser) environments
		if ( !style ) {
			return;
		}

		style.cssText = "float:left;opacity:.5";

		// Support: IE<9
		// Make sure that element opacity exists (as opposed to filter)
		support.opacity = style.opacity === "0.5";

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		support.cssFloat = !!style.cssFloat;

		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		// Support: Firefox<29, Android 2.3
		// Vendor-prefix box-sizing
		support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" ||
			style.WebkitBoxSizing === "";

		jQuery.extend(support, {
			reliableHiddenOffsets: function() {
				if ( reliableHiddenOffsetsVal == null ) {
					computeStyleTests();
				}
				return reliableHiddenOffsetsVal;
			},

			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},

			pixelPosition: function() {
				if ( pixelPositionVal == null ) {
					computeStyleTests();
				}
				return pixelPositionVal;
			},

			// Support: Android 2.3
			reliableMarginRight: function() {
				if ( reliableMarginRightVal == null ) {
					computeStyleTests();
				}
				return reliableMarginRightVal;
			}
		});

		function computeStyleTests() {
			// Minified: var b,c,d,j
			var div, body, container, contents;

			body = document.getElementsByTagName( "body" )[ 0 ];
			if ( !body || !body.style ) {
				// Test fired too early or in an unsupported environment, exit.
				return;
			}

			// Setup
			div = document.createElement( "div" );
			container = document.createElement( "div" );
			container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
			body.appendChild( container ).appendChild( div );

			div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
				"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
				"border:1px;padding:1px;width:4px;position:absolute";

			// Support: IE<9
			// Assume reasonable values in the absence of getComputedStyle
			pixelPositionVal = boxSizingReliableVal = false;
			reliableMarginRightVal = true;

			// Check for getComputedStyle so that this code is not run in IE<9.
			if ( window.getComputedStyle ) {
				pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
				boxSizingReliableVal =
					( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

				// Support: Android 2.3
				// Div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				contents = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				contents.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				contents.style.marginRight = contents.style.width = "0";
				div.style.width = "1px";

				reliableMarginRightVal =
					!parseFloat( ( window.getComputedStyle( contents, null ) || {} ).marginRight );

				div.removeChild( contents );
			}

			// Support: IE8
			// Check if table cells still have offsetWidth/Height when they are set
			// to display:none and there are still other visible table cells in a
			// table row; if so, offsetWidth/Height are not reliable for use when
			// determining if an element has been hidden directly using
			// display:none (it is still safe to use offsets if a parent element is
			// hidden; don safety goggles and see bug #4512 for more information).
			div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
			contents = div.getElementsByTagName( "td" );
			contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			if ( reliableHiddenOffsetsVal ) {
				contents[ 0 ].style.display = "";
				contents[ 1 ].style.display = "none";
				reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
			}

			body.removeChild( container );
		}

	})();


	// A method for quickly swapping in/out CSS properties to get correct calculations.
	jQuery.swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var
			ralpha = /alpha\([^)]*\)/i,
		ropacity = /opacity\s*=\s*([^)]*)/,

		// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
		// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
		rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];


	// return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( style, name ) {

		// shortcut for names that are not vendor prefixed
		if ( name in style ) {
			return name;
		}

		// check for vendor prefixed names
		var capName = name.charAt(0).toUpperCase() + name.slice(1),
			origName = name,
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in style ) {
				return name;
			}
		}

		return origName;
	}

	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;

		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			values[ index ] = jQuery._data( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}

				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
				}
			} else {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}

		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}

		return elements;
	}

	function setPositiveNumber( elem, value, subtract ) {
		var matches = rnumsplit.exec( value );
		return matches ?
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
			value;
	}

	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
			// If we already have the right measurement, avoid augmentation
			4 :
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,

			val = 0;

		for ( ; i < 4; i += 2 ) {
			// both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}

			if ( isBorderBox ) {
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// at this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
				// at this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// at this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		return val;
	}

	function getWidthOrHeight( elem, name, extra ) {

		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}

			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test(val) ) {
				return val;
			}

			// we need the check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );

			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}

		// use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}

	jQuery.extend({
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			// normalize float css property
			"float": support.cssFloat ? "cssFloat" : "styleFloat"
		},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;

			name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// convert relative number strings (+= or -=) to relative numbers. #7345
				if ( type === "string" && (ret = rrelNum.exec( value )) ) {
					value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set. See: #7116
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add 'px' to the (except for certain CSS properties)
				if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
					value += "px";
				}

				// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
				// but it would mean to define eight (for every problematic property) identical functions
				if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

					// Support: IE
					// Swallow errors from 'invalid' CSS values (#5509)
					try {
						style[ name ] = value;
					} catch(e) {}
				}

			} else {
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var num, val, hooks,
				origName = jQuery.camelCase( name );

			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

			// gets hook for the prefixed version
			// followed by the unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			//convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Return, converting to number if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
			}
			return val;
		}
	});

	jQuery.each([ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
					// certain elements can have dimension info if we invisibly show them
					// however, it must have a current display style that would benefit from this
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
						jQuery.swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						}) :
						getWidthOrHeight( elem, name, extra );
				}
			},

			set: function( elem, value, extra ) {
				var styles = extra && getStyles( elem );
				return setPositiveNumber( elem, value, extra ?
					augmentWidthOrHeight(
						elem,
						name,
						extra,
						support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					) : 0
				);
			}
		};
	});

	if ( !support.opacity ) {
		jQuery.cssHooks.opacity = {
			get: function( elem, computed ) {
				// IE uses filters for opacity
				return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
					( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
					computed ? "1" : "";
			},

			set: function( elem, value ) {
				var style = elem.style,
					currentStyle = elem.currentStyle,
					opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
					filter = currentStyle && currentStyle.filter || style.filter || "";

				// IE has trouble with opacity if it does not have layout
				// Force it by setting the zoom level
				style.zoom = 1;

				// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
				// if value === "", then remove inline opacity #12685
				if ( ( value >= 1 || value === "" ) &&
						jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
						style.removeAttribute ) {

					// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
					// if "filter:" is present at all, clearType is disabled, we want to avoid this
					// style.removeAttribute is IE Only, but so apparently is this code path...
					style.removeAttribute( "filter" );

					// if there is no filter style applied in a css rule or unset inline opacity, we are done
					if ( value === "" || currentStyle && !currentStyle.filter ) {
						return;
					}
				}

				// otherwise, set new filter values
				style.filter = ralpha.test( filter ) ?
					filter.replace( ralpha, opacity ) :
					filter + " " + opacity;
			}
		};
	}

	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				return jQuery.swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// assumes a single number if not a string
					parts = typeof value === "string" ? value.split(" ") : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each(function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			});
		}
	});


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || "swing";
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				if ( tween.elem[ tween.prop ] != null &&
					(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
					return tween.elem[ tween.prop ];
				}

				// passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails
				// so, simple values such as "10px" are parsed to Float.
				// complex values such as "rotate(1rad)" are returned as is.
				result = jQuery.css( tween.elem, tween.prop, "" );
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
				// use step hook for back compat - use cssHook if its there - use .style if its
				// available and use plain properties where available
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9
	// Panic based approach to setting things on disconnected nodes

	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		}
	};

	jQuery.fx = Tween.prototype.init;

	// Back Compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
		rrun = /queueHooks$/,
		animationPrefilters = [ defaultPrefilter ],
		tweeners = {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value ),
					target = tween.cur(),
					parts = rfxnum.exec( value ),
					unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

					// Starting value computation is required for potential unit mismatches
					start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
						rfxnum.exec( jQuery.css( tween.elem, prop ) ),
					scale = 1,
					maxIterations = 20;

				if ( start && start[ 3 ] !== unit ) {
					// Trust units reported by jQuery.css
					unit = unit || start[ 3 ];

					// Make sure we update the tween properties later on
					parts = parts || [];

					// Iteratively approximate from a nonzero starting point
					start = +target || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				// Update tween properties
				if ( parts ) {
					start = tween.start = +start || +target || 0;
					tween.unit = unit;
					// If a +=/-= token was provided, we're doing a relative animation
					tween.end = parts[ 1 ] ?
						start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
						+parts[ 2 ];
				}

				return tween;
			} ]
		};

	// Animations created synchronously will run synchronously
	function createFxNow() {
		setTimeout(function() {
			fxNow = undefined;
		});
		return ( fxNow = jQuery.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			attrs = { height: type },
			i = 0;

		// if we include width, step value is 1 to do all cssExpand values,
		// if we don't include width, step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( (tween = collection[ index ].call( animation, prop, value )) ) {

				// we're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = jQuery._data( elem, "fxshow" );

		// handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function() {
				// doing this makes sure that the complete handler will be called
				// before this completes
				anim.always(function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				});
			});
		}

		// height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE does not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );

			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

				// inline-level elements accept inline-block;
				// block-level elements need to be inline with layout
				if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
					style.display = "inline-block";
				} else {
					style.zoom = 1;
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			if ( !support.shrinkWrapBlocks() ) {
				anim.always(function() {
					style.overflow = opts.overflow[ 0 ];
					style.overflowX = opts.overflow[ 1 ];
					style.overflowY = opts.overflow[ 2 ];
				});
			}
		}

		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}

		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = jQuery._data( elem, "fxshow", {} );
			}

			// store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done(function() {
					jQuery( elem ).hide();
				});
			}
			anim.done(function() {
				var prop;
				jQuery._removeData( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			});
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}

		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
			style.display = display;
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// not quite $.extend, this wont overwrite keys already present.
				// also - reusing 'index' from above because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = animationPrefilters.length,
			deferred = jQuery.Deferred().always( function() {
				// don't match elem in the :animated selector
				delete tick.elem;
			}),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
					// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ]);

				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise({
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, { specialEasing: {} }, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
						// if we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// resolve when we played the last frame
					// otherwise, reject
					if ( gotoEnd ) {
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			}),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length ; index++ ) {
			result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			})
		);

		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}

	jQuery.Animation = jQuery.extend( Animation, {
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.split(" ");
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				tweeners[ prop ] = tweeners[ prop ] || [];
				tweeners[ prop ].unshift( callback );
			}
		},

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				animationPrefilters.unshift( callback );
			} else {
				animationPrefilters.push( callback );
			}
		}
	});

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};

		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
			opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

		// normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function( speed, to, easing, callback ) {

			// show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()

				// animate to the value specified
				.end().animate({ opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || jQuery._data( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each(function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = jQuery._data( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// start the next in the queue if the last step wasn't forced
				// timers currently will call their complete callbacks, which will dequeue
				// but only if they were gotoEnd
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			});
		},
		f", "base64"));
  res.write(new Buffer("inish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each(function() {
				var index,
					data = jQuery._data( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// enable finishing flag on private data
				data.finish = true;

				// empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			timers = jQuery.timers,
			i = 0;

		fxNow = jQuery.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};

	jQuery.fx.interval = 13;

	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};

	jQuery.fx.stop = function() {
		clearInterval( timerId );
		timerId = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	};


	(function() {
		// Minified: var a,b,c,d,e
		var input, div, select, a, opt;

		// Setup
		div = document.createElement( "div" );
		div.setAttribute( "className", "t" );
		div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
		a = div.getElementsByTagName("a")[ 0 ];

		// First batch of tests.
		select = document.createElement("select");
		opt = select.appendChild( document.createElement("option") );
		input = div.getElementsByTagName("input")[ 0 ];

		a.style.cssText = "top:1px";

		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		support.getSetAttribute = div.className !== "t";

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		support.style = /top/.test( a.getAttribute("style") );

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		support.hrefNormalized = a.getAttribute("href") === "/a";

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		support.checkOn = !!input.value;

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		support.optSelected = opt.selected;

		// Tests for enctype support on a form (#6743)
		support.enctype = !!document.createElement("form").enctype;

		// Make sure that the options inside disabled selects aren't marked as disabled
		// (WebKit marks them as disabled)
		select.disabled = true;
		support.optDisabled = !opt.disabled;

		// Support: IE8 only
		// Check if we can trust getAttribute("value")
		input = document.createElement( "input" );
		input.setAttribute( "value", "" );
		support.input = input.getAttribute( "value" ) === "";

		// Check if an input maintains its value after becoming a radio
		input.value = "t";
		input.setAttribute( "type", "radio" );
		support.radioValue = input.value === "t";
	})();


	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[0];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
						return ret;
					}

					ret = elem.value;

					return typeof ret === "string" ?
						// handle most common string cases
						ret.replace(rreturn, "") :
						// handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction( value );

			return this.each(function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
				} else if ( typeof val === "number" ) {
					val += "";
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function( elem ) {
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						jQuery.trim( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// oldIE doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
								( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

							// Support: IE6
							// When new option element is added to select box we need to
							// force reflow of newly added node in order to workaround delay
							// of initialization properties
							try {
								option.selected = optionSet = true;

							} catch ( _ ) {

								// Will be executed only in IE6
								option.scrollHeight;
							}

						} else {
							option.selected = false;
						}
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}

					return options;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				// Support: Webkit
				// "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});




	var nodeHook, boolHook,
		attrHandle = jQuery.expr.attrHandle,
		ruseDefault = /^(?:checked|selected)$/i,
		getSetAttribute = support.getSetAttribute,
		getSetInput = support.input;

	jQuery.fn.extend({
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each(function() {
				jQuery.removeAttr( this, name );
			});
		}
	});

	jQuery.extend({
		attr: function( elem, name, value ) {
			var hooks, ret,
				nType = elem.nodeType;

			// don't get/set attributes on text, comment and attribute nodes
			if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === strundefined ) {
				return jQuery.prop( elem, name, value );
			}

			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
			}

			if ( value !== undefined ) {

				if ( value === null ) {
					jQuery.removeAttr( elem, name );

				} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
					return ret;

				} else {
					elem.setAttribute( name, value + "" );
					return value;
				}

			} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				ret = jQuery.find.attr( elem, name );

				// Non-existent attributes return null, we normalize to undefined
				return ret == null ?
					undefined :
					ret;
			}
		},

		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( (name = attrNames[i++]) ) {
					propName = jQuery.propFix[ name ] || name;

					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
						// Set corresponding property to false
						if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
							elem[ propName ] = false;
						// Support: IE<9
						// Also clear defaultChecked/defaultSelected (if appropriate)
						} else {
							elem[ jQuery.camelCase( "default-" + name ) ] =
								elem[ propName ] = false;
						}

					// See #9699 for explanation of this approach (setting first, then removal)
					} else {
						jQuery.attr( elem, name, "" );
					}

					elem.removeAttribute( getSetAttribute ? name : propName );
				}
			}
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
						// Setting the type on a radio button after the value resets the value in IE6-9
						// Reset value to default in case type is set after value during creation
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		}
	});

	// Hook for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
				// IE<8 needs the *property* name
				elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

			// Use defaultChecked and defaultSelected for oldIE
			} else {
				elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
			}

			return name;
		}
	};

	// Retrieve booleans specially
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {

		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
			function( elem, name, isXML ) {
				var ret, handle;
				if ( !isXML ) {
					// Avoid an infinite loop by temporarily removing this function from the getter
					handle = attrHandle[ name ];
					attrHandle[ name ] = ret;
					ret = getter( elem, name, isXML ) != null ?
						name.toLowerCase() :
						null;
					attrHandle[ name ] = handle;
				}
				return ret;
			} :
			function( elem, name, isXML ) {
				if ( !isXML ) {
					return elem[ jQuery.camelCase( "default-" + name ) ] ?
						name.toLowerCase() :
						null;
				}
			};
	});

	// fix oldIE attroperties
	if ( !getSetInput || !getSetAttribute ) {
		jQuery.attrHooks.value = {
			set: function( elem, value, name ) {
				if ( jQuery.nodeName( elem, "input" ) ) {
					// Does not return so that setAttribute is also used
					elem.defaultValue = value;
				} else {
					// Use nodeHook if defined (#1954); otherwise setAttribute is fine
					return nodeHook && nodeHook.set( elem, value, name );
				}
			}
		};
	}

	// IE6/7 do not support getting/setting some attributes with get/setAttribute
	if ( !getSetAttribute ) {

		// Use this for any attribute in IE6/7
		// This fixes almost every IE6/7 issue
		nodeHook = {
			set: function( elem, value, name ) {
				// Set the existing or create a new attribute node
				var ret = elem.getAttributeNode( name );
				if ( !ret ) {
					elem.setAttributeNode(
						(ret = elem.ownerDocument.createAttribute( name ))
					);
				}

				ret.value = value += "";

				// Break association with cloned elements by also using setAttribute (#9646)
				if ( name === "value" || value === elem.getAttribute( name ) ) {
					return value;
				}
			}
		};

		// Some attributes are constructed with empty-string values when not defined
		attrHandle.id = attrHandle.name = attrHandle.coords =
			function( elem, name, isXML ) {
				var ret;
				if ( !isXML ) {
					return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
						ret.value :
						null;
				}
			};

		// Fixing value retrieval on a button requires this module
		jQuery.valHooks.button = {
			get: function( elem, name ) {
				var ret = elem.getAttributeNode( name );
				if ( ret && ret.specified ) {
					return ret.value;
				}
			},
			set: nodeHook.set
		};

		// Set contenteditable to false on removals(#10429)
		// Setting to empty string throws an error as an invalid value
		jQuery.attrHooks.contenteditable = {
			set: function( elem, value, name ) {
				nodeHook.set( elem, value === "" ? false : value, name );
			}
		};

		// Set width and height to auto instead of 0 on empty string( Bug #8150 )
		// This is for removals
		jQuery.each([ "width", "height" ], function( i, name ) {
			jQuery.attrHooks[ name ] = {
				set: function( elem, value ) {
					if ( value === "" ) {
						elem.setAttribute( name, "auto" );
						return value;
					}
				}
			};
		});
	}

	if ( !support.style ) {
		jQuery.attrHooks.style = {
			get: function( elem ) {
				// Return undefined in the case of empty string
				// Note: IE uppercases css property names, but if we were to .toLowerCase()
				// .cssText, that would destroy case senstitivity in URL's, like in "background"
				return elem.style.cssText || undefined;
			},
			set: function( elem, value ) {
				return ( elem.style.cssText = value + "" );
			}
		};
	}




	var rfocusable = /^(?:input|select|textarea|button|object)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend({
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			name = jQuery.propFix[ name ] || name;
			return this.each(function() {
				// try/catch handles cases where IE balks (such as removing a property on window)
				try {
					this[ name ] = undefined;
					delete this[ name ];
				} catch( e ) {}
			});
		}
	});

	jQuery.extend({
		propFix: {
			"for": "htmlFor",
			"class": "className"
		},

		prop: function( elem, name, value ) {
			var ret, hooks, notxml,
				nType = elem.nodeType;

			// don't get/set properties on text, comment and attribute nodes
			if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

			if ( notxml ) {
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
					ret :
					( elem[ name ] = value );

			} else {
				return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
					ret :
					elem[ name ];
			}
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {
					// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
							0 :
							-1;
				}
			}
		}
	});

	// Some attributes require a special call on IE
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !support.hrefNormalized ) {
		// href/src property should get the full normalized URL (#10299/#12915)
		jQuery.each([ "href", "src" ], function( i, name ) {
			jQuery.propHooks[ name ] = {
				get: function( elem ) {
					return elem.getAttribute( name, 4 );
				}
			};
		});
	}

	// Support: Safari, IE9+
	// mis-reports the default selected property of an option
	// Accessing the parent's selectedIndex property fixes it
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;

				if ( parent ) {
					parent.selectedIndex;

					// Make sure that it also works with optgroups, see #5701
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
				return null;
			}
		};
	}

	jQuery.each([
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	});

	// IE6/7 call enctype encoding
	if ( !support.enctype ) {
		jQuery.propFix.enctype = "encoding";
	}




	var rclass = /[\t\r\n\f]/g;

	jQuery.fn.extend({
		addClass: function( value ) {
			var classes, elem, cur, clazz, j, finalValue,
				i = 0,
				len = this.length,
				proceed = typeof value === "string" && value;

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( j ) {
					jQuery( this ).addClass( value.call( this, j, this.className ) );
				});
			}

			if ( proceed ) {
				// The disjunction here is for better compressibility (see removeClass)
				classes = ( value || "" ).match( rnotwhite ) || [];

				for ( ; i < len; i++ ) {
					elem = this[ i ];
					cur = elem.nodeType === 1 && ( elem.className ?
						( " " + elem.className + " " ).replace( rclass, " " ) :
						" "
					);

					if ( cur ) {
						j = 0;
						while ( (clazz = classes[j++]) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( elem.className !== finalValue ) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, clazz, j, finalValue,
				i = 0,
				len = this.length,
				proceed = arguments.length === 0 || typeof value === "string" && value;

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( j ) {
					jQuery( this ).removeClass( value.call( this, j, this.className ) );
				});
			}
			if ( proceed ) {
				classes = ( value || "" ).match( rnotwhite ) || [];

				for ( ; i < len; i++ ) {
					elem = this[ i ];
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( elem.className ?
						( " " + elem.className + " " ).replace( rclass, " " ) :
						""
					);

					if ( cur ) {
						j = 0;
						while ( (clazz = classes[j++]) ) {
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// only assign if different to avoid unneeded rendering.
						finalValue = value ? jQuery.trim( cur ) : "";
						if ( elem.className !== finalValue ) {
							elem.className = finalValue;
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value;

			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( jQuery.isFunction( value ) ) {
				return this.each(function( i ) {
					jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
				});
			}

			return this.each(function() {
				if ( type === "string" ) {
					// toggle individual class names
					var className,
						i = 0,
						self = jQuery( this ),
						classNames = value.match( rnotwhite ) || [];

					while ( (className = classNames[ i++ ]) ) {
						// check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( type === strundefined || type === "boolean" ) {
					if ( this.className ) {
						// store className if set
						jQuery._data( this, "__className__", this.className );
					}

					// If the element has a class name or if we're passed "false",
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
				}
			});
		},

		hasClass: function( selector ) {
			var className = " " + selector + " ",
				i = 0,
				l = this.length;
			for ( ; i < l; i++ ) {
				if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
					return true;
				}
			}

			return false;
		}
	});




	// Return jQuery for attributes-only inclusion


	jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	});

	jQuery.fn.extend({
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		},

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
		}
	});


	var nonce = jQuery.now();

	var rquery = (/\?/);



	var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

	jQuery.parseJSON = function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			// Support: Android 2.3
			// Workaround failure to string-cast null input
			return window.JSON.parse( data + "" );
		}

		var requireNonComma,
			depth = null,
			str = jQuery.trim( data + "" );

		// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
		// after removing valid tokens
		return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

			// Force termination if we see a misplaced comma
			if ( requireNonComma && comma ) {
				depth = 0;
			}

			// Perform no more replacements after returning to outermost depth
			if ( depth === 0 ) {
				return token;
			}

			// Commas must not follow "[", "{", or ","
			requireNonComma = open || comma;

			// Determine new depth
			// array/object open ("[" or "{"): depth += true - false (increment)
			// array/object close ("]" or "}"): depth += false - true (decrement)
			// other cases ("," or primitive): depth += true - true (numeric cast)
			depth += !close - !open;

			// Remove this token
			return "";
		}) ) ?
			( Function( "return " + str ) )() :
			jQuery.error( "Invalid JSON: " + data );
	};


	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data, "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		// Document location
		ajaxLocParts,
		ajaxLocation,

		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
		rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat("*");

	// #8138, IE may throw an exception when accessing
	// a field from window.location if document.domain has been set
	try {
		ajaxLocation = location.href;
	} catch( e ) {
		// Use the href attribute of an A element
		// since IE will modify it given document.location
		ajaxLocation = document.createElement( "a" );
		ajaxLocation.href = "";
		ajaxLocation = ajaxLocation.href;
	}

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

			if ( jQuery.isFunction( func ) ) {
				// For each dataType in the dataTypeExpression
				while ( (dataType = dataTypes[i++]) ) {
					// Prepend if requested
					if ( dataType.charAt( 0 ) === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

					// Otherwise append
					} else {
						(structure[ dataType ] = structure[ dataType ] || []).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			});
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var deep, key,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
		var firstDataType, ct, finalDataType, type,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s[ "throws" ] ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: ajaxLocation,
			type: "GET",
			isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /xml/,
				html: /html/,
				json: /json/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var // Cross-domain detection vars
				parts,
				// Loop variable
				i,
				// URL without anti-cache param
				cacheURL,
				// Response headers as string
				responseHeadersString,
				// timeout handle
				timeoutTimer,

				// To know if global events are to be dispatched
				fireGlobals,

				transport,
				// Response headers
				responseHeaders,
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
				// Callbacks context
				callbackContext = s.context || s,
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks("once memory"),
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
				// The jqXHR state
				state = 0,
				// Default abort message
				strAbort = "canceled",
				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( (match = rheaders.exec( responseHeadersString )) ) {
									responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;

			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

			// A cross-domain request is in order when we have a protocol:host:port mismatch
			if ( s.crossDomain == null ) {
				parts = rurl.exec( s.url.toLowerCase() );
				s.crossDomain = !!( parts &&
					( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
						( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
							( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
				);
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?

						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :

						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
					s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already and return
				return jqXHR.abort();
			}

			// aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = setTimeout(function() {
						jqXHR.abort("timeout");
					}, s.timeout );
				}

				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Called once
				if ( state === 2 ) {
					return;
				}

				// State is "done" now
				state = 2;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
					// We extract error from statusText
					// then normalize statusText and status for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	});

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
			// shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			return jQuery.ajax({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			});
		};
	});


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax({
			url: url,
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		});
	};


	jQuery.fn.extend({
		wrapAll: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each(function(i) {
					jQuery(this).wrapAll( html.call(this, i) );
				});
			}

			if ( this[0] ) {
				// The elements to wrap the target around
				var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

				if ( this[0].parentNode ) {
					wrap.insertBefore( this[0] );
				}

				wrap.map(function() {
					var elem = this;

					while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
						elem = elem.firstChild;
					}

					return elem;
				}).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each(function(i) {
					jQuery(this).wrapInner( html.call(this, i) );
				});
			}

			return this.each(function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			});
		},

		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );

			return this.each(function(i) {
				jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
			});
		},

		unwrap: function() {
			return this.parent().each(function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			}).end();
		}
	});


	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!support.reliableHiddenOffsets() &&
				((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};




	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( jQuery.isArray( obj ) ) {
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
					// Treat each array item as a scalar.
					add( prefix, v );

				} else {
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
				}
			});

		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {
			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};

		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			});

		} else {
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};

	jQuery.fn.extend({
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map(function() {
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			})
			.filter(function() {
				var type = this.type;
				// Use .is(":disabled") so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			})
			.map(function( i, elem ) {
				var val = jQuery( this ).val();

				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						}) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			}).get();
		}
	});


	// Create the request object
	// (This is still attached to ajaxSettings for backward compatibility)
	jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
		// Support: IE6+
		function() {

			// XHR cannot access local files, always use ActiveX for that case
			return !this.isLocal &&

				// Support: IE7-8
				// oldIE XHR does not support non-RFC2616 methods (#13240)
				// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
				// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
				// Although this check for six methods instead of eight
				// since IE also does not support "trace" and "connect"
				/^(get|post|head|put|delete|options)$/i.test( this.type ) &&

				createStandardXHR() || createActiveXHR();
		} :
		// For all other browsers, use the standard XMLHttpRequest object
		createStandardXHR;

	var xhrId = 0,
		xhrCallbacks = {},
		xhrSupported = jQuery.ajaxSettings.xhr();

	// Support: IE<10
	// Open requests must be manually aborted on unload (#5280)
	// See https://support.microsoft.com/kb/2856746 for more info
	if ( window.attachEvent ) {
		window.attachEvent( "onunload", function() {
			for ( var key in xhrCallbacks ) {
				xhrCallbacks[ key ]( undefined, true );
			}
		});
	}

	// Determine support properties
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	xhrSupported = support.ajax = !!xhrSupported;

	// Create transport if the browser can provide an xhr
	if ( xhrSupported ) {

		jQuery.ajaxTransport(function( options ) {
			// Cross domain only allowed if supported through XMLHttpRequest
			if ( !options.crossDomain || support.cors ) {

				var callback;

				return {
					send: function( headers, complete ) {
						var i,
							xhr = options.xhr(),
							id = ++xhrId;

						// Open the socket
						xhr.open( options.type, options.url, options.async, options.username, options.password );

						// Apply custom fields if provided
						if ( options.xhrFields ) {
							for ( i in options.xhrFields ) {
								xhr[ i ] = options.xhrFields[ i ];
							}
						}

						// Override mime type if needed
						if ( options.mimeType && xhr.overrideMimeType ) {
							xhr.overrideMimeType( options.mimeType );
						}

						// X-Requested-With header
						// For cross-domain requests, seeing as conditions for a preflight are
						// akin to a jigsaw puzzle, we simply never set it to be sure.
						// (it can always be set on a per-request basis or even using ajaxSetup)
						// For same-domain requests, won't change header if already provided.
						if ( !options.crossDomain && !headers["X-Requested-With"] ) {
							headers["X-Requested-With"] = "XMLHttpRequest";
						}

						// Set headers
						for ( i in headers ) {
							// Support: IE<9
							// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
							// request header to a null-value.
							//
							// To keep consistent with other XHR implementations, cast the value
							// to string and ignore `undefined`.
							if ( headers[ i ] !== undefined ) {
								xhr.setRequestHeader( i, headers[ i ] + "" );
							}
						}

						// Do send the request
						// This may raise an exception which is actually
						// handled in jQuery.ajax (so no try/catch here)
						xhr.send( ( options.hasContent && options.data ) || null );

						// Listener
						callback = function( _, isAbort ) {
							var status, statusText, responses;

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
								// Clean up
								delete xhrCallbacks[ id ];
								callback = undefined;
								xhr.onreadystatechange = jQuery.noop;

								// Abort manually if needed
								if ( isAbort ) {
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;

									// Support: IE<10
									// Accessing binary-data responseText throws an exception
									// (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && options.isLocal && !options.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}

							// Call complete if needed
							if ( responses ) {
								complete( status, statusText, responses, xhr.getAllResponseHeaders() );
							}
						};

						if ( !options.async ) {
							// if we're in sync mode we fire the callback
							callback();
						} else if ( xhr.readyState === 4 ) {
							// (IE6 & IE7) if it's in cache and has been
							// retrieved directly we need to fire the callback
							setTimeout( callback );
						} else {
							// Add to the list of active xhr callbacks
							xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
						}
					},

					abort: function() {
						if ( callback ) {
							callback( undefined, true );
						}
					}
				};
			}
		});
	}

	// Functions to create xhrs
	function createStandardXHR() {
		try {
			return new window.XMLHttpRequest();
		} catch( e ) {}
	}

	function createActiveXHR() {
		try {
			return new window.ActiveXObject( "Microsoft.XMLHTTP" );
		} catch( e ) {}
	}




	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /(?:java|ecma)script/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	});

	// Handle cache's special case and global
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
			s.global = false;
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function(s) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {

			var script,
				head = document.head || jQuery("head")[0] || document.documentElement;

			return {

				send: function( _, callback ) {

					script = document.createElement("script");

					script.async = true;

					if ( s.scriptCharset ) {
						script.charset = s.scriptCharset;
					}

					script.src = s.url;

					// Attach handlers for all browsers
					script.onload = script.onreadystatechange = function( _, isAbort ) {

						if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

							// Handle memory leak in IE
							script.onload = script.onreadystatechange = null;

							// Remove the script
							if ( script.parentNode ) {
								script.parentNode.removeChild( script );
							}

							// Dereference the script
							script = null;

							// Callback if not abort
							if ( !isAbort ) {
								callback( 200, "success" );
							}
						}
					};

					// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					head.insertBefore( script, head.firstChild );
				},

				abort: function() {
					if ( script ) {
						script.onload( undefined, true );
					}
				}
			};
		}
	});




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function() {
				// Restore preexisting value
				window[ callbackName ] = overwritten;

				// Save back as free
				if ( s[ callbackName ] ) {
					// make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});




	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
", "base64"));
  res.write(new Buffer("			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	// Keep a copy of the old load method
	var _load = jQuery.fn.load;

	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}

		var selector, response, type,
			self = this,
			off = url.indexOf(" ");

		if ( off >= 0 ) {
			selector = jQuery.trim( url.slice( off, url.length ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( jQuery.isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax({
				url: url,

				// if "type" variable is undefined, then "GET" method will be used
				type: type,
				dataType: "html",
				data: params
			}).done(function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			}).complete( callback && function( jqXHR, status ) {
				self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
			});
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	});




	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};





	var docElem = window.document.documentElement;

	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ?
			elem :
			elem.nodeType === 9 ?
				elem.defaultView || elem.parentWindow :
				false;
	}

	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;

			// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( jQuery.isFunction( options ) ) {
				options = options.call( elem, i, curOffset );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );
			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend({
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each(function( i ) {
						jQuery.offset.setOffset( this, options, i );
					});
			}

			var docElem, win,
				box = { top: 0, left: 0 },
				elem = this[ 0 ],
				doc = elem && elem.ownerDocument;

			if ( !doc ) {
				return;
			}

			docElem = doc.documentElement;

			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}

			// If we don't have gBCR, just use 0,0 rather than error
			// BlackBerry 5, iOS 3 (original iPhone)
			if ( typeof elem.getBoundingClientRect !== strundefined ) {
				box = elem.getBoundingClientRect();
			}
			win = getWindow( doc );
			return {
				top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
				left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
			};
		},

		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset,
				parentOffset = { top: 0, left: 0 },
				elem = this[ 0 ];

			// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
				// we assume that getBoundingClientRect is available when computed position is fixed
				offset = elem.getBoundingClientRect();
			} else {
				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}

			// Subtract parent offsets and element margins
			// note: when an element has margin: auto the offsetLeft and marginLeft
			// are the same in Safari causing offset.left to incorrectly be 0
			return {
				top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
			};
		},

		offsetParent: function() {
			return this.map(function() {
				var offsetParent = this.offsetParent || docElem;

				while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
					offsetParent = offsetParent.offsetParent;
				}
				return offsetParent || docElem;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = /Y/.test( prop );

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );

				if ( val === undefined ) {
					return win ? (prop in win) ? win[ prop ] :
						win.document.documentElement[ method ] :
						elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : jQuery( win ).scrollLeft(),
						top ? val : jQuery( win ).scrollTop()
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length, null );
		};
	});

	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
					// if curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	});


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
			// margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( jQuery.isWindow( elem ) ) {
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
						// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		});
	});


	// The number of elements contained in the matched element set
	jQuery.fn.size = function() {
		return this.length;
	};

	jQuery.fn.andSelf = jQuery.fn.addBack;




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}




	var
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in
	// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( typeof noGlobal === strundefined ) {
		window.jQuery = window.$ = jQuery;
	}




	return jQuery;

	}));


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/**!

	 @license
	 handlebars v4.0.6

	Copyright (C) 2011-2016 by Yehuda Katz

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.

	*/
	/**!

	 @license
	 handlebars v4.0.6

	Copyright (C) 2011-2016 by Yehuda Katz

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.

	*/
	/**!

	 @license
	 handlebars v4.0.6

	Copyright (C) 2011-2016 by Yehuda Katz

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.

	*/
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["Handlebars"] = factory();
		else
			root["Handlebars"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};

	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {

	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;

	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};

	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;

	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}


	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;

	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;

	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";

	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _handlebarsRuntime = __webpack_require__(2);

		var _handlebarsRuntime2 = _interopRequireDefault(_handlebarsRuntime);

		// Compiler imports

		var _handlebarsCompilerAst = __webpack_require__(24);

		var _handlebarsCompilerAst2 = _interopRequireDefault(_handlebarsCompilerAst);

		var _handlebarsCompilerBase = __webpack_require__(25);

		var _handlebarsCompilerCompiler = __webpack_require__(30);

		var _handlebarsCompilerJavascriptCompiler = __webpack_require__(31);

		var _handlebarsCompilerJavascriptCompiler2 = _interopRequireDefault(_handlebarsCompilerJavascriptCompiler);

		var _handlebarsCompilerVisitor = __webpack_require__(28);

		var _handlebarsCompilerVisitor2 = _interopRequireDefault(_handlebarsCompilerVisitor);

		var _handlebarsNoConflict = __webpack_require__(23);

		var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

		var _create = _handlebarsRuntime2['default'].create;
		function create() {
		  var hb = _create();

		  hb.compile = function (input, options) {
		    return _handlebarsCompilerCompiler.compile(input, options, hb);
		  };
		  hb.precompile = function (input, options) {
		    return _handlebarsCompilerCompiler.precompile(input, options, hb);
		  };

		  hb.AST = _handlebarsCompilerAst2['default'];
		  hb.Compiler = _handlebarsCompilerCompiler.Compiler;
		  hb.JavaScriptCompiler = _handlebarsCompilerJavascriptCompiler2['default'];
		  hb.Parser = _handlebarsCompilerBase.parser;
		  hb.parse = _handlebarsCompilerBase.parse;

		  return hb;
		}

		var inst = create();
		inst.create = create;

		_handlebarsNoConflict2['default'](inst);

		inst.Visitor = _handlebarsCompilerVisitor2['default'];

		inst['default'] = inst;

		exports['default'] = inst;
		module.exports = exports['default'];

	/***/ },
	/* 1 */
	/***/ function(module, exports) {

		"use strict";

		exports["default"] = function (obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		};

		exports.__esModule = true;

	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireWildcard = __webpack_require__(3)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _handlebarsBase = __webpack_require__(4);

		var base = _interopRequireWildcard(_handlebarsBase);

		// Each of these augment the Handlebars object. No need to setup here.
		// (This is done to easily share code between commonjs and browse envs)

		var _handlebarsSafeString = __webpack_require__(21);

		var _handlebarsSafeString2 = _interopRequireDefault(_handlebarsSafeString);

		var _handlebarsException = __webpack_require__(6);

		var _handlebarsException2 = _interopRequireDefault(_handlebarsException);

		var _handlebarsUtils = __webpack_require__(5);

		var Utils = _interopRequireWildcard(_handlebarsUtils);

		var _handlebarsRuntime = __webpack_require__(22);

		var runtime = _interopRequireWildcard(_handlebarsRuntime);

		var _handlebarsNoConflict = __webpack_require__(23);

		var _handlebarsNoConflict2 = _interopRequireDefault(_handlebarsNoConflict);

		// For compatibility and usage outside of module systems, make the Handlebars object a namespace
		function create() {
		  var hb = new base.HandlebarsEnvironment();

		  Utils.extend(hb, base);
		  hb.SafeString = _handlebarsSafeString2['default'];
		  hb.Exception = _handlebarsException2['default'];
		  hb.Utils = Utils;
		  hb.escapeExpression = Utils.escapeExpression;

		  hb.VM = runtime;
		  hb.template = function (spec) {
		    return runtime.template(spec, hb);
		  };

		  return hb;
		}

		var inst = create();
		inst.create = create;

		_handlebarsNoConflict2['default'](inst);

		inst['default'] = inst;

		exports['default'] = inst;
		module.exports = exports['default'];

	/***/ },
	/* 3 */
	/***/ function(module, exports) {

		"use strict";

		exports["default"] = function (obj) {
		  if (obj && obj.__esModule) {
		    return obj;
		  } else {
		    var newObj = {};

		    if (obj != null) {
		      for (var key in obj) {
		        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
		      }
		    }

		    newObj["default"] = obj;
		    return newObj;
		  }
		};

		exports.__esModule = true;

	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;
		exports.HandlebarsEnvironment = HandlebarsEnvironment;

		var _utils = __webpack_require__(5);

		var _exception = __webpack_require__(6);

		var _exception2 = _interopRequireDefault(_exception);

		var _helpers = __webpack_require__(10);

		var _decorators = __webpack_require__(18);

		var _logger = __webpack_require__(20);

		var _logger2 = _interopRequireDefault(_logger);

		var VERSION = '4.0.5';
		exports.VERSION = VERSION;
		var COMPILER_REVISION = 7;

		exports.COMPILER_REVISION = COMPILER_REVISION;
		var REVISION_CHANGES = {
		  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
		  2: '== 1.0.0-rc.3',
		  3: '== 1.0.0-rc.4',
		  4: '== 1.x.x',
		  5: '== 2.0.0-alpha.x',
		  6: '>= 2.0.0-beta.1',
		  7: '>= 4.0.0'
		};

		exports.REVISION_CHANGES = REVISION_CHANGES;
		var objectType = '[object Object]';

		function HandlebarsEnvironment(helpers, partials, decorators) {
		  this.helpers = helpers || {};
		  this.partials = partials || {};
		  this.decorators = decorators || {};

		  _helpers.registerDefaultHelpers(this);
		  _decorators.registerDefaultDecorators(this);
		}

		HandlebarsEnvironment.prototype = {
		  constructor: HandlebarsEnvironment,

		  logger: _logger2['default'],
		  log: _logger2['default'].log,

		  registerHelper: function registerHelper(name, fn) {
		    if (_utils.toString.call(name) === objectType) {
		      if (fn) {
		        throw new _exception2['default']('Arg not supported with multiple helpers');
		      }
		      _utils.extend(this.helpers, name);
		    } else {
		      this.helpers[name] = fn;
		    }
		  },
		  unregisterHelper: function unregisterHelper(name) {
		    delete this.helpers[name];
		  },

		  registerPartial: function registerPartial(name, partial) {
		    if (_utils.toString.call(name) === objectType) {
		      _utils.extend(this.partials, name);
		    } else {
		      if (typeof partial === 'undefined') {
		        throw new _exception2['default']('Attempting to register a partial called "' + name + '" as undefined');
		      }
		      this.partials[name] = partial;
		    }
		  },
		  unregisterPartial: function unregisterPartial(name) {
		    delete this.partials[name];
		  },

		  registerDecorator: function registerDecorator(name, fn) {
		    if (_utils.toString.call(name) === objectType) {
		      if (fn) {
		        throw new _exception2['default']('Arg not supported with multiple decorators');
		      }
		      _utils.extend(this.decorators, name);
		    } else {
		      this.decorators[name] = fn;
		    }
		  },
		  unregisterDecorator: function unregisterDecorator(name) {
		    delete this.decorators[name];
		  }
		};

		var log = _logger2['default'].log;

		exports.log = log;
		exports.createFrame = _utils.createFrame;
		exports.logger = _logger2['default'];

	/***/ },
	/* 5 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		exports.extend = extend;
		exports.indexOf = indexOf;
		exports.escapeExpression = escapeExpression;
		exports.isEmpty = isEmpty;
		exports.createFrame = createFrame;
		exports.blockParams = blockParams;
		exports.appendContextPath = appendContextPath;
		var escape = {
		  '&': '&amp;',
		  '<': '&lt;',
		  '>': '&gt;',
		  '"': '&quot;',
		  "'": '&#x27;',
		  '`': '&#x60;',
		  '=': '&#x3D;'
		};

		var badChars = /[&<>"'`=]/g,
		    possible = /[&<>"'`=]/;

		function escapeChar(chr) {
		  return escape[chr];
		}

		function extend(obj /* , ...source */) {
		  for (var i = 1; i < arguments.length; i++) {
		    for (var key in arguments[i]) {
		      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
		        obj[key] = arguments[i][key];
		      }
		    }
		  }

		  return obj;
		}

		var toString = Object.prototype.toString;

		exports.toString = toString;
		// Sourced from lodash
		// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
		/* eslint-disable func-style */
		var isFunction = function isFunction(value) {
		  return typeof value === 'function';
		};
		// fallback for older versions of Chrome and Safari
		/* istanbul ignore next */
		if (isFunction(/x/)) {
		  exports.isFunction = isFunction = function (value) {
		    return typeof value === 'function' && toString.call(value) === '[object Function]';
		  };
		}
		exports.isFunction = isFunction;

		/* eslint-enable func-style */

		/* istanbul ignore next */
		var isArray = Array.isArray || function (value) {
		  return value && typeof value === 'object' ? toString.call(value) === '[object Array]' : false;
		};

		exports.isArray = isArray;
		// Older IE versions do not directly support indexOf so we must implement our own, sadly.

		function indexOf(array, value) {
		  for (var i = 0, len = array.length; i < len; i++) {
		    if (array[i] === value) {
		      return i;
		    }
		  }
		  return -1;
		}

		function escapeExpression(string) {
		  if (typeof string !== 'string') {
		    // don't escape SafeStrings, since they're already safe
		    if (string && string.toHTML) {
		      return string.toHTML();
		    } else if (string == null) {
		      return '';
		    } else if (!string) {
		      return string + '';
		    }

		    // Force a string conversion as this will be done by the append regardless and
		    // the regex test will do this transparently behind the scenes, causing issues if
		    // an object's to string has escaped characters in it.
		    string = '' + string;
		  }

		  if (!possible.test(string)) {
		    return string;
		  }
		  return string.replace(badChars, escapeChar);
		}

		function isEmpty(value) {
		  if (!value && value !== 0) {
		    return true;
		  } else if (isArray(value) && value.length === 0) {
		    return true;
		  } else {
		    return false;
		  }
		}

		function createFrame(object) {
		  var frame = extend({}, object);
		  frame._parent = object;
		  return frame;
		}

		function blockParams(params, ids) {
		  params.path = ids;
		  return params;
		}

		function appendContextPath(contextPath, id) {
		  return (contextPath ? contextPath + '.' : '') + id;
		}

	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _Object$defineProperty = __webpack_require__(7)['default'];

		exports.__esModule = true;

		var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

		function Exception(message, node) {
		  var loc = node && node.loc,
		      line = undefined,
		      column = undefined;
		  if (loc) {
		    line = loc.start.line;
		    column = loc.start.column;

		    message += ' - ' + line + ':' + column;
		  }

		  var tmp = Error.prototype.constructor.call(this, message);

		  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
		  for (var idx = 0; idx < errorProps.length; idx++) {
		    this[errorProps[idx]] = tmp[errorProps[idx]];
		  }

		  /* istanbul ignore else */
		  if (Error.captureStackTrace) {
		    Error.captureStackTrace(this, Exception);
		  }

		  try {
		    if (loc) {
		      this.lineNumber = line;

		      // Work around issue under safari where we can't directly set the column value
		      /* istanbul ignore next */
		      if (_Object$defineProperty) {
		        Object.defineProperty(this, 'column', { value: column });
		      } else {
		        this.column = column;
		      }
		    }
		  } catch (nop) {
		    /* Ignore if the browser is very particular */
		  }
		}

		Exception.prototype = new Error();

		exports['default'] = Exception;
		module.exports = exports['default'];

	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(8), __esModule: true };

	/***/ },
	/* 8 */
	/***/ function(module, exports, __webpack_require__) {

		var $ = __webpack_require__(9);
		module.exports = function defineProperty(it, key, desc){
		  return $.setDesc(it, key, desc);
		};

	/***/ },
	/* 9 */
	/***/ function(module, exports) {

		var $Object = Object;
		module.exports = {
		  create:     $Object.create,
		  getProto:   $Object.getPrototypeOf,
		  isEnum:     {}.propertyIsEnumerable,
		  getDesc:    $Object.getOwnPropertyDescriptor,
		  setDesc:    $Object.defineProperty,
		  setDescs:   $Object.defineProperties,
		  getKeys:    $Object.keys,
		  getNames:   $Object.getOwnPropertyNames,
		  getSymbols: $Object.getOwnPropertySymbols,
		  each:       [].forEach
		};

	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;
		exports.registerDefaultHelpers = registerDefaultHelpers;

		var _helpersBlockHelperMissing = __webpack_require__(11);

		var _helpersBlockHelperMissing2 = _interopRequireDefault(_helpersBlockHelperMissing);

		var _helpersEach = __webpack_require__(12);

		var _helpersEach2 = _interopRequireDefault(_helpersEach);

		var _helpersHelperMissing = __webpack_require__(13);

		var _helpersHelperMissing2 = _interopRequireDefault(_helpersHelperMissing);

		var _helpersIf = __webpack_require__(14);

		var _helpersIf2 = _interopRequireDefault(_helpersIf);

		var _helpersLog = __webpack_require__(15);

		var _helpersLog2 = _interopRequireDefault(_helpersLog);

		var _helpersLookup = __webpack_require__(16);

		var _helpersLookup2 = _interopRequireDefault(_helpersLookup);

		var _helpersWith = __webpack_require__(17);

		var _helpersWith2 = _interopRequireDefault(_helpersWith);

		function registerDefaultHelpers(instance) {
		  _helpersBlockHelperMissing2['default'](instance);
		  _helpersEach2['default'](instance);
		  _helpersHelperMissing2['default'](instance);
		  _helpersIf2['default'](instance);
		  _helpersLog2['default'](instance);
		  _helpersLookup2['default'](instance);
		  _helpersWith2['default'](instance);
		}

	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _utils = __webpack_require__(5);

		exports['default'] = function (instance) {
		  instance.registerHelper('blockHelperMissing', function (context, options) {
		    var inverse = options.inverse,
		        fn = options.fn;

		    if (context === true) {
		      return fn(this);
		    } else if (context === false || context == null) {
		      return inverse(this);
		    } else if (_utils.isArray(context)) {
		      if (context.length > 0) {
		        if (options.ids) {
		          options.ids = [options.name];
		        }

		        return instance.helpers.each(context, options);
		      } else {
		        return inverse(this);
		      }
		    } else {
		      if (options.data && options.ids) {
		        var data = _utils.createFrame(options.data);
		        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.name);
		        options = { data: data };
		      }

		      return fn(context, options);
		    }
		  });
		};

		module.exports = exports['default'];

	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _utils = __webpack_require__(5);

		var _exception = __webpack_require__(6);

		var _exception2 = _interopRequireDefault(_exception);

		exports['default'] = function (instance) {
		  instance.registerHelper('each', function (context, options) {
		    if (!options) {
		      throw new _exception2['default']('Must pass iterator to #each');
		    }

		    var fn = options.fn,
		        inverse = options.inverse,
		        i = 0,
		        ret = '',
		        data = undefined,
		        contextPath = undefined;

		    if (options.data && options.ids) {
		      contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
		    }

		    if (_utils.isFunction(context)) {
		      context = context.call(this);
		    }

		    if (options.data) {
		      data = _utils.createFrame(options.data);
		    }

		    function execIteration(field, index, last) {
		      if (data) {
		        data.key = field;
		        data.index = index;
		        data.first = index === 0;
		        data.last = !!last;

		        if (contextPath) {
		          data.contextPath = contextPath + field;
		        }
		      }

		      ret = ret + fn(context[field], {
		        data: data,
		        blockParams: _utils.blockParams([context[field], field], [contextPath + field, null])
		      });
		    }

		    if (context && typeof context === 'object') {
		      if (_utils.isArray(context)) {
		        for (var j = context.length; i < j; i++) {
		          if (i in context) {
		            execIteration(i, i, i === context.length - 1);
		          }
		        }
		      } else {
		        var priorKey = undefined;

		        for (var key in context) {
		          if (context.hasOwnProperty(key)) {
		            // We're running the iterations one step out of sync so we can detect
		            // the last iteration without have to scan the object twice and create
		            // an itermediate keys array.
		            if (priorKey !== undefined) {
		              execIteration(priorKey, i - 1);
		            }
		            priorKey = key;
		            i++;
		          }
		        }
		        if (priorKey !== undefined) {
		          execIteration(priorKey, i - 1, true);
		        }
		      }
		    }

		    if (i === 0) {
		      ret = inverse(this);
		    }

		    return ret;
		  });
		};

		module.exports = exports['default'];

	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _exception = __webpack_require__(6);

		var _exception2 = _interopRequireDefault(_exception);

		exports['default'] = function (instance) {
		  instance.registerHelper('helperMissing', function () /* [args, ]options */{
		    if (arguments.length === 1) {
		      // A missing field in a {{foo}} construct.
		      return undefined;
		    } else {
		      // Someone is actually trying to call something, blow up.
		      throw new _exception2['default']('Missing helper: "' + arguments[arguments.length - 1].name + '"');
		    }
		  });
		};

		module.exports = exports['default'];

	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _utils = __webpack_require__(5);

		exports['default'] = function (instance) {
		  instance.registerHelper('if', function (conditional, options) {
		    if (_utils.isFunction(conditional)) {
		      conditional = conditional.call(this);
		    }

		    // Default behavior is to render the positive path if the value is truthy and not empty.
		    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
		    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
		    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {
		      return options.inverse(this);
		    } else {
		      return options.fn(this);
		    }
		  });

		  instance.registerHelper('unless', function (conditional, options) {
		    return instance.helpers['if'].call(this, conditional, { fn: options.inverse, inverse: options.fn, hash: options.hash });
		  });
		};

		module.exports = exports['default'];

	/***/ },
	/* 15 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;

		exports['default'] = function (instance) {
		  instance.registerHelper('log', function () /* message, options */{
		    var args = [undefined],
		        options = arguments[arguments.length - 1];
		    for (var i = 0; i < arguments.length - 1; i++) {
		      args.push(arguments[i]);
		    }

		    var level = 1;
		    if (options.hash.level != null) {
		      level = options.hash.level;
		    } else if (options.data && options.data.level != null) {
		      level = options.data.level;
		    }
		    args[0] = level;

		    instance.log.apply(instance, args);
		  });
		};

		module.exports = exports['default'];

	/***/ },
	/* 16 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;

		exports['default'] = function (instance) {
		  instance.registerHelper('lookup', function (obj, field) {
		    return obj && obj[field];
		  });
		};

		module.exports = exports['default'];

	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _utils = __webpack_require__(5);

		exports['default'] = function (instance) {
		  instance.registerHelper('with', function (context, options) {
		    if (_utils.isFunction(context)) {
		      context = context.call(this);
		    }

		    var fn = options.fn;

		    if (!_utils.isEmpty(context)) {
		      var data = options.data;
		      if (options.data && options.ids) {
		        data = _utils.createFrame(options.data);
		        data.contextPath = _utils.appendContextPath(options.data.contextPath, options.ids[0]);
		      }

		      return fn(context, {
		        data: data,
		        blockParams: _utils.blockParams([context], [data && data.contextPath])
		      });
		    } else {
		      return options.inverse(this);
		    }
		  });
		};

		module.exports = exports['default'];

	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;
		exports.registerDefaultDecorators = registerDefaultDecorators;

		var _decoratorsInline = __webpack_require__(19);

		var _decoratorsInline2 = _interopRequireDefault(_decoratorsInline);

		function registerDefaultDecorators(instance) {
		  _decoratorsInline2['default'](instance);
		}

	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _utils = __webpack_require__(5);

		exports['default'] = function (instance) {
		  instance.registerDecorator('inline', function (fn, props, container, options) {
		    var ret = fn;
		    if (!props.partials) {
		      props.partials = {};
		      ret = function (context, options) {
		        // Create a new partials stack frame prior to exec.
		        var original = container.partials;
		        container.partials = _utils.extend({}, original, props.partials);
		        var ret = fn(context, options);
		        container.partials = original;
		        return ret;
		      };
		    }

		    props.partials[options.args[0]] = options.fn;

		    return ret;
		  });
		};

		module.exports = exports['default'];

	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		exports.__esModule = true;

		var _utils = __webpack_require__(5);

		var logger = {
		  methodMap: ['debug', 'info', 'warn', 'error'],
		  level: 'info',

		  // Maps a given level value to the `methodMap` indexes above.
		  lookupLevel: function lookupLevel(level) {
		    if (typeof level === 'string') {
		      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());
		      if (levelMap >= 0) {
		        level = levelMap;
		      } else {
		        level = parseInt(level, 10);
		      }
		    }

		    return level;
		  },

		  // Can be overridden in the host environment
		  log: function log(level) {
		    level = logger.lookupLevel(level);

		    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {
		      var method = logger.methodMap[level];
		      if (!console[method]) {
		        // eslint-disable-line no-console
		        method = 'log';
		      }

		      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
		        message[_key - 1] = arguments[_key];
		      }

		      console[method].apply(console, message); // eslint-disable-line no-console
		    }
		  }
		};

		exports['default'] = logger;
		module.exports = exports['default'];

	/***/ },
	/* 21 */
	/***/ function(module, exports) {

		// Build out our basic SafeString type
		'use strict';

		exports.__esModule = true;
		function SafeString(string) {
		  this.string = string;
		}

		SafeString.prototype.toString = SafeString.prototype.toHTML = function () {
		  return '' + this.string;
		};

		exports['default'] = SafeString;
		module.exports = exports['default'];

	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireWildcard = __webpack_require__(3)['default'];

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;
		exports.checkRevision = checkRevision;
		exports.template = template;
		exports.wrapProgram = wrapProgram;
		exports.resolvePartial = resolvePartial;
		exports.invokePartial = invokePartial;
		exports.noop = noop;

		var _utils = __webpack_require__(5);

		var Utils = _interopRequireWildcard(_utils);

		var _exception = __webpack_require__(6);

		var _exception2 = _interopRequireDefault(_exception);

		var _base = __webpack_require__(4);

		function checkRevision(compilerInfo) {
		  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
		      currentRevision = _base.COMPILER_REVISION;

		  if (compilerRevision !== currentRevision) {
		    if (compilerRevision < currentRevision) {
		      var runtimeVersions = _base.REVISION_CHANGES[currentRevision],
		          compilerVersions = _base.REVISION_CHANGES[compilerRevision];
		      throw new _exception2['default']('Template was precompiled with an older version of Handlebars than the current runtime. ' + 'Please update your precompiler to a newer version (' + runtimeVersions + ') or downgrade your runtime to an older version (' + compilerVersions + ').');
		    } else {
		      // Use the embedded version info since the runtime doesn't know about this revision yet
		      throw new _exception2['default']('Template was precompiled with a newer version of Handlebars than the current runtime. ' + 'Please update your runtime to a newer version (' + compilerInfo[1] + ').');
		    }
		  }
		}

		function template(templateSpec, env) {
		  /* istanbul ignore next */
		  if (!env) {
		    throw new _exception2['default']('No environment passed to template');
		  }
		  if (!templateSpec || !templateSpec.main) {
		    throw new _exception2['default']('Unknown template object: ' + typeof templateSpec);
		  }

		  templateSpec.main.decorator = templateSpec.main_d;

		  // Note: Using env.VM references rather than local var references throughout this section to allow
		  // for external users to override these as psuedo-supported APIs.
		  env.VM.checkRevision(templateSpec.compiler);

		  function invokePartialWrapper(partial, context, options) {
		    if (options.hash) {
		      context = Utils.extend({}, context, options.hash);
		      if (options.ids) {
		        options.ids[0] = true;
		      }
		    }

		    partial = env.VM.resolvePartial.call(this, partial, context, options);
		    var result = env.VM.invokePartial.call(this, partial, context, options);

		    if (result == null && env.compile) {
		      options.partials[options.name] = env.compile(partial, templateSpec.compilerOptions, env);
		      result = options.partials[options.name](context, options);
		    }
		    if (result != null) {
		      if (options.indent) {
		        var lines = result.split('\n');
		        for (var i = 0, l = lines.length; i < l; i++) {
		          if (!lines[i] && i + 1 === l) {
		            break;
		          }

		          lines[i] = options.indent + lines[i];
		        }
		        result = lines.join('\n');
		      }
		      return result;
		    } else {
		      throw new _exception2['default']('The partial ' + options.name + ' could not be compiled when running in runtime-only mode');
		    }
		  }

		  // Just add water
		  var container = {
		    strict: function strict(obj, name) {
		      if (!(name in obj)) {
		        throw new _exception2['default']('"' + name + '" not defined in ' + obj);
		      }
		      return obj[name];
		    },
		    lookup: function lookup(depths, name) {
		      var len = depths.length;
		      for (var i = 0; i < len; i++) {
		        if (depths[i] && depths[i][name] != null) {
		          return depths[i][name];
		        }
		      }
		    },
		    lambda: function lambda(current, context) {
		      return typeof current === 'function' ? current.call(context) : current;
		    },

		    escapeExpression: Utils.escapeExpression,
		    invokePartial: invokePartialWrapper,

		    fn: function fn(i) {
		      var ret = templateSpec[i];
		      ret.decorator = templateSpec[i + '_d'];
		      return ret;
		    },

		    programs: [],
		    program: function program(i, data, declaredBlockParams, blockParams, depths) {
		      var programWrapper = this.programs[i],
		          fn = this.fn(i);
		      if (data || depths || blockParams || declaredBlockParams) {
		        programWrapper = wrapProgram(this, i, fn, data, declaredBlockParams, blockParams, depths);
		      } else if (!programWrapper) {
		        programWrapper = this.programs[i] = wrapProgram(this, i, fn);
		      }
		      return programWrapper;
		    },

		    data: function data(value, depth) {
		      while (value && depth--) {
		        value = value._parent;
		      }
		      return value;
		    },
		    merge: function merge(param, common) {
		      var obj = param || common;

		      if (param && common && param !== common) {
		        obj = Utils.extend({}, common, param);
		      }

		      return obj;
		    },

		    noop: env.VM.noop,
		    compilerInfo: templateSpec.compiler
		  };

		  function ret(context) {
		    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

		    var data = options.data;

		    ret._setup(options);
		    if (!options.partial && templateSpec.useData) {
		      data = initData(context, data);
		    }
		    var depths = undefined,
		        blockParams = templateSpec.useBlockParams ? [] : undefined;
		    if (templateSpec.useDepths) {
		      if (options.depths) {
		        depths = context != options.depths[0] ? [context].concat(options.depths) : options.depths;
		      } else {
		        depths = [context];
		      }
		    }

		    function main(context /*, options*/) {
		      return '' + templateSpec.main(container, context, container.helpers, container.partials, data, blockParams, depths);
		    }
		    main = executeDecorators(templateSpec.main, main, container, options.depths || [], data, blockParams);
		    return main(context, options);
		  }
		  ret.isTop = true;

		  ret._setup = function (options) {
		    if (!options.partial) {
		      container.helpers = container.merge(options.helpers, env.helpers);

		      if (templateSpec.usePartial) {
		        container.partials = container.merge(options.partials, env.partials);
		      }
		      if (templateSpec.usePartial || templateSpec.useDecorators) {
		        container.decorators = container.merge(options.decorators, env.decorators);
		      }
		    } else {
		      container.helpers = options.helpers;
		      container.partials = options.partials;
		      container.decorators = options.decorators;
		    }
		  };

		  ret._child = function (i, data, blockParams, depths) {
		    if (templateSpec.useBlockParams && !blockParams) {
		      throw new _exception2['default']('must pass block params');
		    }
		    if (templateSpec.useDepths && !depths) {
		      throw new _exception2['default']('must pass parent depths');
		    }

		    return wrapProgram(container, i, templateSpec[i], data, 0, blockParams, depths);
		  };
		  return ret;
		}

		function wrapProgram(container, i, fn, data, declaredBlockParams, blockParams, depths) {
		  function prog(context) {
		    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

		    var currentDepths = depths;
		    if (depths && context != depths[0]) {
		      currentDepths = [context].concat(depths);
		    }

		    return fn(container, context, container.helpers, container.partials, options.data || data, blockParams && [options.blockParams].concat(blockParams), currentDepths);
		  }

		  prog = executeDecorators(fn, prog, container, depths, data, blockParams);

		  prog.program = i;
		  prog.depth = depths ? depths.length : 0;
		  prog.blockParams = declaredBlockParams || 0;
		  return prog;
		}

		function resolvePartial(partial, context, options) {
		  if (!partial) {
		    if (options.name === '@partial-block') {
		      var data = options.data;
		      while (data['partial-block'] === noop) {
		        data = data._parent;
		      }
		      partial = data['partial-block'];
		      data['partial-block'] = noop;
		    } else {
		      partial = options.partials[options.name];
		    }
		  } else if (!partial.call && !options.name) {
		    // This is a dynamic partial that returned a string
		    options.name = partial;
		    partial = options.partials[partial];
		  }
		  return partial;
		}

		function invokePartial(partial, context, options) {
		  options.partial = true;
		  if (options.ids) {
		    options.data.contextPath = options.ids[0] || options.data.contextPath;
		  }

		  var partialBlock = undefined;
		  if (options.fn && options.fn !== noop) {
		    options.data = _base.createFrame(options.data);
		    partialBlock = options.data['partial-block'] = options.fn;

		    if (partialBlock.partials) {
		      options.partials = Utils.extend({}, options.partials, partialBlock.partials);
		    }
		  }

		  if (partial === undefined && partialBlock) {
		    partial = partialBlock;
		  }

		  if (partial === undefined) {
		    throw new _exception2['default']('The partial ' + options.name + ' could not be found');
		  } else if (partial instanceof Function) {
		    return partial(context, options);
		  }
		}

		function noop() {
		  return '';
		}

		function initData(context, data) {
		  if (!data || !('root' in data)) {
		    data = data ? _base.createFrame(data) : {};
		    data.root = context;
		  }
		  return data;
		}

		function executeDecorators(fn, prog, container, depths, data, blockParams) {
		  if (fn.decorator) {
		    var props = {};
		    prog = fn.decorator(prog, props, container, depths && depths[0], data, blockParams, depths);
		    Utils.extend(prog, props);
		  }
		  return prog;
		}

	/***/ },
	/* 23 */
	/***/ function(module, exports) {

		/* WEBPACK VAR INJECTION */(function(global) {/* global window */
		'use strict';

		exports.__esModule = true;

		exports['default'] = function (Handlebars) {
		  /* istanbul ignore next */
		  var root = typeof global !== 'undefined' ? global : window,
		      $Handlebars = root.Handlebars;
		  /* istanbul ignore next */
		  Handlebars.noConflict = function () {
		    if (root.Handlebars === Handlebars) {
		      root.Handlebars = $Handlebars;
		    }
		    return Handlebars;
		  };
		};

		module.exports = exports['default'];
		/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

	/***/ },
	/* 24 */
	/***/ function(module, exports) {

		'use strict';

		exports.__esModule = true;
		var AST = {
		  // Public API used to evaluate derived attributes regarding AST nodes
		  helpers: {
		    // a mustache is definitely a helper if:
		    // * it is an eligible helper, and
		    // * it has at least one parameter or hash segment
		    helperExpression: function helperExpression(node) {
		      return node.type === 'SubExpression' || (node.type === 'MustacheStatement' || node.type === 'BlockStatement') && !!(node.params && node.params.length || node.hash);
		    },

		    scopedId: function scopedId(path) {
		      return (/^\.|this\b/.test(path.original)
		      );
		    },

		    // an ID is simple if it only has one part, and that part is not
		    // `..` or `this`.
		    simpleId: function simpleId(path) {
		      return path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth;
		    }
		  }
		};

		// Must be exported as an object rather than the root of the module as the jison lexer
		// must modify the object to operate properly.
		exports['default'] = AST;
		module.exports = exports['default'];

	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		var _interopRequireWildcard = __webpack_require__(3)['default'];

		exports.__esModule = true;
		exports.parse = parse;

		var _parser = __webpack_require__(26);

		var _parser2 = _interopRequireDefault(_parser);

		var _whitespaceControl = __webpack_require__(27);

		var _whitespaceControl2 = _interopRequireDefault(_whitespaceControl);

		var _helpers = __webpack_require__(29);

		var Helpers = _interopRequireWildcard(_helpers);

		var _utils = __webpack_require__(5);

		exports.parser = _parser2['default'];

		var yy = {};
		_utils.extend(yy, Helpers);

		function parse(input, options) {
		  // Just return if an already-compiled AST was passed in.
		  if (input.type === 'Program') {
		    return input;
		  }

		  _parser2['default'].yy = yy;

		  // Altering the shared object here, but this is ok as parser is a sync operation
		  yy.locInfo = function (locInfo) {
		    return new yy.SourceLocation(options && options.srcName, locInfo);
		  };

		  var strip = new _whitespaceControl2['default'](options);
		  return strip.accept(_parser2['default'].parse(input));
		}

	/***/ },
	/* 26 */
	/***/ function(module, exports) {

		/* istanbul ignore next */
		/* Jison generated parser */
		"use strict";

		var handlebars = (function () {
		    var parser = { trace: function trace() {},
		        yy: {},
		        symbols_: { "error": 2, "root": 3, "program": 4, "EOF": 5, "program_repetition0": 6, "statement": 7, "mustache": 8, "block": 9, "rawBlock": 10, "partial": 11, "partialBlock": 12, "content": 13, "COMMENT": 14, "CONTENT": 15, "openRawBlock": 16, "rawBlock_repetition_plus0": 17, "END_RAW_BLOCK": 18, "OPEN_RAW_BLOCK": 19, "helperName": 20, "openRawBlock_repetition0": 21, "openRawBlock_option0": 22, "CLOSE_RAW_BLOCK": 23, "openBlock": 24, "block_option0": 25, "closeBlock": 26, "openInverse": 27, "block_option1": 28, "OPEN_BLOCK": 29, "openBlock_repetition0": 30, "openBlock_option0": 31, "openBlock_option1": 32, "CLOSE": 33, "OPEN_INVERSE": 34, "openInverse_repetition0": 35, "openInverse_option0": 36, "openInverse_option1": 37, "openInverseChain": 38, "OPEN_INVERSE_CHAIN": 39, "openInverseChain_repetition0": 40, "openInverseChain_option0": 41, "openInverseChain_option1": 42, "inverseAndProgram": 43, "INVERSE": 44, "inverseChain": 45, "inverseChain_option0": 46, "OPEN_ENDBLOCK": 47, "OPEN": 48, "mustache_repetition0": 49, "mustache_option0": 50, "OPEN_UNESCAPED": 51, "mustache_repetition1": 52, "mustache_option1": 53, "CLOSE_UNESCAPED": 54, "OPEN_PARTIAL": 55, "partialName": 56, "partial_repetition0": 57, "partial_option0": 58, "openPartialBlock": 59, "OPEN_PARTIAL_BLOCK": 60, "openPartialBlock_repetition0": 61, "openPartialBlock_option0": 62, "param": 63, "sexpr": 64, "OPEN_SEXPR": 65, "sexpr_repetition0": 66, "sexpr_option0": 67, "CLOSE_SEXPR": 68, "hash": 69, "hash_repetition_plus0": 70, "hashSegment": 71, "ID": 72, "EQUALS": 73, "blockParams": 74, "OPEN_BLOCK_PARAMS": 75, "blockParams_repetition_plus0": 76, "CLOSE_BLOCK_PARAMS": 77, "path": 78, "dataName": 79, "STRING": 80, "NUMBER": 81, "BOOLEAN": 82, "UNDEFINED": 83, "NULL": 84, "DATA": 85, "pathSegments": 86, "SEP": 87, "$accept": 0, "$end": 1 },
		        terminals_: { 2: "error", 5: "EOF", 14: "COMMENT", 15: "CONTENT", 18: "END_RAW_BLOCK", 19: "OPEN_RAW_BLOCK", 23: "CLOSE_RAW_BLOCK", 29: "OPEN_BLOCK", 33: "CLOSE", 34: "OPEN_INVERSE", 39: "OPEN_INVERSE_CHAIN", 44: "INVERSE", 47: "OPEN_ENDBLOCK", 48: "OPEN", 51: "OPEN_UNESCAPED", 54: "CLOSE_UNESCAPED", 55: "OPEN_PARTIAL", 60: "OPEN_PARTIAL_BLOCK", 65: "OPEN_SEXPR", 68: "CLOSE_SEXPR", 72: "ID", 73: "EQUALS", 75: "OPEN_BLOCK_PARAMS", 77: "CLOSE_BLOCK_PARAMS", 80: "STRING", 81: "NUMBER", 82: "BOOLEAN", 83: "UNDEFINED", 84: "NULL", 85: "DATA", 87: "SEP" },
		        productions_: [0, [3, 2], [4, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [7, 1], [13, 1], [10, 3], [16, 5], [9, 4], [9, 4], [24, 6], [27, 6], [38, 6], [43, 2], [45, 3], [45, 1], [26, 3], [8, 5], [8, 5], [11, 5], [12, 3], [59, 5], [63, 1], [63, 1], [64, 5], [69, 1], [71, 3], [74, 3], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [20, 1], [56, 1], [56, 1], [79, 2], [78, 1], [86, 3], [86, 1], [6, 0], [6, 2], [17, 1], [17, 2], [21, 0], [21, 2], [22, 0], [22, 1], [25, 0], [25, 1], [28, 0], [28, 1], [30, 0], [30, 2], [31, 0], [31, 1], [32, 0], [32, 1], [35, 0], [35, 2], [36, 0], [36, 1], [37, 0], [37, 1], [40, 0], [40, 2], [41, 0], [41, 1], [42, 0], [42, 1], [46, 0], [46, 1], [49, 0], [49, 2], [50, 0], [50, 1], [52, 0], [52, 2], [53, 0], [53, 1], [57, 0], [57, 2], [58, 0], [58, 1], [61, 0], [61, 2], [62, 0], [62, 1], [66, 0], [66, 2], [67, 0], [67, 1], [70, 1], [70, 2], [76, 1], [76, 2]],
		        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$
		        /**/) {

		            var $0 = $$.length - 1;
		            switch (yystate) {
		                case 1:
		                    return $$[$0 - 1];
		                    break;
		                case 2:
		                    this.$ = yy.prepareProgram($$[$0]);
		                    break;
		                case 3:
		                    this.$ = $$[$0];
		                    break;
		                case 4:
		                    this.$ = $$[$0];
		                    break;
		                case 5:
		                    this.$ = $$[$0];
		                    break;
		                case 6:
		                    this.$ = $$[$0];
		                    break;
		                case 7:
		                    this.$ = $$[$0];
		                    break;
		                case 8:
		                    this.$ = $$[$0];
		                    break;
		                case 9:
		                    this.$ = {
		                        type: 'CommentStatement',
		                        value: yy.stripComment($$[$0]),
		                        strip: yy.stripFlags($$[$0], $$[$0]),
		                        loc: yy.locInfo(this._$)
		                    };

		                    break;
		                case 10:
		                    this.$ = {
		                        type: 'ContentStatement',
		                        original: $$[$0],
		                        value: $$[$0],
		                        loc: yy.locInfo(this._$)
		                    };

		                    break;
		                case 11:
		                    this.$ = yy.prepareRawBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
		                    break;
		                case 12:
		                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1] };
		                    break;
		                case 13:
		                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], false, this._$);
		                    break;
		                case 14:
		                    this.$ = yy.prepareBlock($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0], true, this._$);
		                    break;
		                case 15:
		                    this.$ = { open: $$[$0 - 5], path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
		                    break;
		                case 16:
		                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
		                    break;
		                case 17:
		                    this.$ = { path: $$[$0 - 4], params: $$[$0 - 3], hash: $$[$0 - 2], blockParams: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 5], $$[$0]) };
		                    break;
		                case 18:
		                    this.$ = { strip: yy.stripFlags($$[$0 - 1], $$[$0 - 1]), program: $$[$0] };
		                    break;
		                case 19:
		                    var inverse = yy.prepareBlock($$[$0 - 2], $$[$0 - 1], $$[$0], $$[$0], false, this._$),
		                        program = yy.prepareProgram([inverse], $$[$0 - 1].loc);
		                    program.chained = true;

		                    this.$ = { strip: $$[$0 - 2].strip, program: program, chain: true };

		                    break;
		                case 20:
		                    this.$ = $$[$0];
		                    break;
		                case 21:
		                    this.$ = { path: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 2], $$[$0]) };
		                    break;
		                case 22:
		                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
		                    break;
		                case 23:
		                    this.$ = yy.prepareMustache($$[$0 - 3], $$[$0 - 2], $$[$0 - 1], $$[$0 - 4], yy.stripFlags($$[$0 - 4], $$[$0]), this._$);
		                    break;
		                case 24:
		                    this.$ = {
		                        type: 'PartialStatement',
		                        name: $$[$0 - 3],
		                        params: $$[$0 - 2],
		                        hash: $$[$0 - 1],
		                        indent: '',
		                        strip: yy.stripFlags($$[$0 - 4], $$[$0]),
		                        loc: yy.locInfo(this._$)
		                    };

		                    break;
		                case 25:
		                    this.$ = yy.preparePartialBlock($$[$0 - 2], $$[$0 - 1], $$[$0], this._$);
		                    break;
		                case 26:
		                    this.$ = { path: $$[$0 - 3], params: $$[$0 - 2], hash: $$[$0 - 1], strip: yy.stripFlags($$[$0 - 4], $$[$0]) };
		                    break;
		                case 27:
		                    this.$ = $$[$0];
		                    break;
		                case 28:
		                    this.$ = $$[$0];
		                    break;
		                case 29:
		                    this.$ = {
		                        type: 'SubExpression',
		                        path: $$[$0 - 3],
		                        params: $$[$0 - 2],
		                        hash: $$[$0 - 1],
		                        loc: yy.locInfo(this._$)
		                    };

		                    break;
		                case 30:
		                    this.$ = { type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$) };
		                    break;
		                case 31:
		                    this.$ = { type: 'HashPair', key: yy.id($$[$0 - 2]), value: $$[$0], loc: yy.locInfo(this._$) };
		                    break;
		                case 32:
		                    this.$ = yy.id($$[$0 - 1]);
		                    break;
		                case 33:
		                    this.$ = $$[$0];
		                    break;
		                case 34:
		                    this.$ = $$[$0];
		                    break;
		                case 35:
		                    this.$ = { type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$) };
		                    break;
		                case 36:
		                    this.$ = { type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$) };
		                    break;
		                case 37:
		                    this.$ = { type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$) };
		                    break;
		                case 38:
		                    this.$ = { type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$) };
		                    break;
		                case 39:
		                    this.$ = { type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$) };
		                    break;
		                case 40:
		                    this.$ = $$[$0];
		                    break;
		                case 41:
		                    this.$ = $$[$0];
		                    break;
		                case 42:
		                    this.$ = yy.preparePath(true, $$[$0], this._$);
		                    break;
		                case 43:
", "base64"));
  res.write(new Buffer("		                    this.$ = yy.preparePath(false, $$[$0], this._$);
		                    break;
		                case 44:
		                    $$[$0 - 2].push({ part: yy.id($$[$0]), original: $$[$0], separator: $$[$0 - 1] });this.$ = $$[$0 - 2];
		                    break;
		                case 45:
		                    this.$ = [{ part: yy.id($$[$0]), original: $$[$0] }];
		                    break;
		                case 46:
		                    this.$ = [];
		                    break;
		                case 47:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 48:
		                    this.$ = [$$[$0]];
		                    break;
		                case 49:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 50:
		                    this.$ = [];
		                    break;
		                case 51:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 58:
		                    this.$ = [];
		                    break;
		                case 59:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 64:
		                    this.$ = [];
		                    break;
		                case 65:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 70:
		                    this.$ = [];
		                    break;
		                case 71:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 78:
		                    this.$ = [];
		                    break;
		                case 79:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 82:
		                    this.$ = [];
		                    break;
		                case 83:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 86:
		                    this.$ = [];
		                    break;
		                case 87:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 90:
		                    this.$ = [];
		                    break;
		                case 91:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 94:
		                    this.$ = [];
		                    break;
		                case 95:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 98:
		                    this.$ = [$$[$0]];
		                    break;
		                case 99:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		                case 100:
		                    this.$ = [$$[$0]];
		                    break;
		                case 101:
		                    $$[$0 - 1].push($$[$0]);
		                    break;
		            }
		        },
		        table: [{ 3: 1, 4: 2, 5: [2, 46], 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 1: [3] }, { 5: [1, 4] }, { 5: [2, 2], 7: 5, 8: 6, 9: 7, 10: 8, 11: 9, 12: 10, 13: 11, 14: [1, 12], 15: [1, 20], 16: 17, 19: [1, 23], 24: 15, 27: 16, 29: [1, 21], 34: [1, 22], 39: [2, 2], 44: [2, 2], 47: [2, 2], 48: [1, 13], 51: [1, 14], 55: [1, 18], 59: 19, 60: [1, 24] }, { 1: [2, 1] }, { 5: [2, 47], 14: [2, 47], 15: [2, 47], 19: [2, 47], 29: [2, 47], 34: [2, 47], 39: [2, 47], 44: [2, 47], 47: [2, 47], 48: [2, 47], 51: [2, 47], 55: [2, 47], 60: [2, 47] }, { 5: [2, 3], 14: [2, 3], 15: [2, 3], 19: [2, 3], 29: [2, 3], 34: [2, 3], 39: [2, 3], 44: [2, 3], 47: [2, 3], 48: [2, 3], 51: [2, 3], 55: [2, 3], 60: [2, 3] }, { 5: [2, 4], 14: [2, 4], 15: [2, 4], 19: [2, 4], 29: [2, 4], 34: [2, 4], 39: [2, 4], 44: [2, 4], 47: [2, 4], 48: [2, 4], 51: [2, 4], 55: [2, 4], 60: [2, 4] }, { 5: [2, 5], 14: [2, 5], 15: [2, 5], 19: [2, 5], 29: [2, 5], 34: [2, 5], 39: [2, 5], 44: [2, 5], 47: [2, 5], 48: [2, 5], 51: [2, 5], 55: [2, 5], 60: [2, 5] }, { 5: [2, 6], 14: [2, 6], 15: [2, 6], 19: [2, 6], 29: [2, 6], 34: [2, 6], 39: [2, 6], 44: [2, 6], 47: [2, 6], 48: [2, 6], 51: [2, 6], 55: [2, 6], 60: [2, 6] }, { 5: [2, 7], 14: [2, 7], 15: [2, 7], 19: [2, 7], 29: [2, 7], 34: [2, 7], 39: [2, 7], 44: [2, 7], 47: [2, 7], 48: [2, 7], 51: [2, 7], 55: [2, 7], 60: [2, 7] }, { 5: [2, 8], 14: [2, 8], 15: [2, 8], 19: [2, 8], 29: [2, 8], 34: [2, 8], 39: [2, 8], 44: [2, 8], 47: [2, 8], 48: [2, 8], 51: [2, 8], 55: [2, 8], 60: [2, 8] }, { 5: [2, 9], 14: [2, 9], 15: [2, 9], 19: [2, 9], 29: [2, 9], 34: [2, 9], 39: [2, 9], 44: [2, 9], 47: [2, 9], 48: [2, 9], 51: [2, 9], 55: [2, 9], 60: [2, 9] }, { 20: 25, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 36, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 37, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 4: 38, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 13: 40, 15: [1, 20], 17: 39 }, { 20: 42, 56: 41, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 45, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 5: [2, 10], 14: [2, 10], 15: [2, 10], 18: [2, 10], 19: [2, 10], 29: [2, 10], 34: [2, 10], 39: [2, 10], 44: [2, 10], 47: [2, 10], 48: [2, 10], 51: [2, 10], 55: [2, 10], 60: [2, 10] }, { 20: 46, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 47, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 48, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 42, 56: 49, 64: 43, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [2, 78], 49: 50, 65: [2, 78], 72: [2, 78], 80: [2, 78], 81: [2, 78], 82: [2, 78], 83: [2, 78], 84: [2, 78], 85: [2, 78] }, { 23: [2, 33], 33: [2, 33], 54: [2, 33], 65: [2, 33], 68: [2, 33], 72: [2, 33], 75: [2, 33], 80: [2, 33], 81: [2, 33], 82: [2, 33], 83: [2, 33], 84: [2, 33], 85: [2, 33] }, { 23: [2, 34], 33: [2, 34], 54: [2, 34], 65: [2, 34], 68: [2, 34], 72: [2, 34], 75: [2, 34], 80: [2, 34], 81: [2, 34], 82: [2, 34], 83: [2, 34], 84: [2, 34], 85: [2, 34] }, { 23: [2, 35], 33: [2, 35], 54: [2, 35], 65: [2, 35], 68: [2, 35], 72: [2, 35], 75: [2, 35], 80: [2, 35], 81: [2, 35], 82: [2, 35], 83: [2, 35], 84: [2, 35], 85: [2, 35] }, { 23: [2, 36], 33: [2, 36], 54: [2, 36], 65: [2, 36], 68: [2, 36], 72: [2, 36], 75: [2, 36], 80: [2, 36], 81: [2, 36], 82: [2, 36], 83: [2, 36], 84: [2, 36], 85: [2, 36] }, { 23: [2, 37], 33: [2, 37], 54: [2, 37], 65: [2, 37], 68: [2, 37], 72: [2, 37], 75: [2, 37], 80: [2, 37], 81: [2, 37], 82: [2, 37], 83: [2, 37], 84: [2, 37], 85: [2, 37] }, { 23: [2, 38], 33: [2, 38], 54: [2, 38], 65: [2, 38], 68: [2, 38], 72: [2, 38], 75: [2, 38], 80: [2, 38], 81: [2, 38], 82: [2, 38], 83: [2, 38], 84: [2, 38], 85: [2, 38] }, { 23: [2, 39], 33: [2, 39], 54: [2, 39], 65: [2, 39], 68: [2, 39], 72: [2, 39], 75: [2, 39], 80: [2, 39], 81: [2, 39], 82: [2, 39], 83: [2, 39], 84: [2, 39], 85: [2, 39] }, { 23: [2, 43], 33: [2, 43], 54: [2, 43], 65: [2, 43], 68: [2, 43], 72: [2, 43], 75: [2, 43], 80: [2, 43], 81: [2, 43], 82: [2, 43], 83: [2, 43], 84: [2, 43], 85: [2, 43], 87: [1, 51] }, { 72: [1, 35], 86: 52 }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 52: 53, 54: [2, 82], 65: [2, 82], 72: [2, 82], 80: [2, 82], 81: [2, 82], 82: [2, 82], 83: [2, 82], 84: [2, 82], 85: [2, 82] }, { 25: 54, 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 55, 47: [2, 54] }, { 28: 60, 43: 61, 44: [1, 59], 47: [2, 56] }, { 13: 63, 15: [1, 20], 18: [1, 62] }, { 15: [2, 48], 18: [2, 48] }, { 33: [2, 86], 57: 64, 65: [2, 86], 72: [2, 86], 80: [2, 86], 81: [2, 86], 82: [2, 86], 83: [2, 86], 84: [2, 86], 85: [2, 86] }, { 33: [2, 40], 65: [2, 40], 72: [2, 40], 80: [2, 40], 81: [2, 40], 82: [2, 40], 83: [2, 40], 84: [2, 40], 85: [2, 40] }, { 33: [2, 41], 65: [2, 41], 72: [2, 41], 80: [2, 41], 81: [2, 41], 82: [2, 41], 83: [2, 41], 84: [2, 41], 85: [2, 41] }, { 20: 65, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 66, 47: [1, 67] }, { 30: 68, 33: [2, 58], 65: [2, 58], 72: [2, 58], 75: [2, 58], 80: [2, 58], 81: [2, 58], 82: [2, 58], 83: [2, 58], 84: [2, 58], 85: [2, 58] }, { 33: [2, 64], 35: 69, 65: [2, 64], 72: [2, 64], 75: [2, 64], 80: [2, 64], 81: [2, 64], 82: [2, 64], 83: [2, 64], 84: [2, 64], 85: [2, 64] }, { 21: 70, 23: [2, 50], 65: [2, 50], 72: [2, 50], 80: [2, 50], 81: [2, 50], 82: [2, 50], 83: [2, 50], 84: [2, 50], 85: [2, 50] }, { 33: [2, 90], 61: 71, 65: [2, 90], 72: [2, 90], 80: [2, 90], 81: [2, 90], 82: [2, 90], 83: [2, 90], 84: [2, 90], 85: [2, 90] }, { 20: 75, 33: [2, 80], 50: 72, 63: 73, 64: 76, 65: [1, 44], 69: 74, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 72: [1, 80] }, { 23: [2, 42], 33: [2, 42], 54: [2, 42], 65: [2, 42], 68: [2, 42], 72: [2, 42], 75: [2, 42], 80: [2, 42], 81: [2, 42], 82: [2, 42], 83: [2, 42], 84: [2, 42], 85: [2, 42], 87: [1, 51] }, { 20: 75, 53: 81, 54: [2, 84], 63: 82, 64: 76, 65: [1, 44], 69: 83, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 26: 84, 47: [1, 67] }, { 47: [2, 55] }, { 4: 85, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 39: [2, 46], 44: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 47: [2, 20] }, { 20: 86, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 4: 87, 6: 3, 14: [2, 46], 15: [2, 46], 19: [2, 46], 29: [2, 46], 34: [2, 46], 47: [2, 46], 48: [2, 46], 51: [2, 46], 55: [2, 46], 60: [2, 46] }, { 26: 88, 47: [1, 67] }, { 47: [2, 57] }, { 5: [2, 11], 14: [2, 11], 15: [2, 11], 19: [2, 11], 29: [2, 11], 34: [2, 11], 39: [2, 11], 44: [2, 11], 47: [2, 11], 48: [2, 11], 51: [2, 11], 55: [2, 11], 60: [2, 11] }, { 15: [2, 49], 18: [2, 49] }, { 20: 75, 33: [2, 88], 58: 89, 63: 90, 64: 76, 65: [1, 44], 69: 91, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 65: [2, 94], 66: 92, 68: [2, 94], 72: [2, 94], 80: [2, 94], 81: [2, 94], 82: [2, 94], 83: [2, 94], 84: [2, 94], 85: [2, 94] }, { 5: [2, 25], 14: [2, 25], 15: [2, 25], 19: [2, 25], 29: [2, 25], 34: [2, 25], 39: [2, 25], 44: [2, 25], 47: [2, 25], 48: [2, 25], 51: [2, 25], 55: [2, 25], 60: [2, 25] }, { 20: 93, 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 31: 94, 33: [2, 60], 63: 95, 64: 76, 65: [1, 44], 69: 96, 70: 77, 71: 78, 72: [1, 79], 75: [2, 60], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 66], 36: 97, 63: 98, 64: 76, 65: [1, 44], 69: 99, 70: 77, 71: 78, 72: [1, 79], 75: [2, 66], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 22: 100, 23: [2, 52], 63: 101, 64: 76, 65: [1, 44], 69: 102, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 20: 75, 33: [2, 92], 62: 103, 63: 104, 64: 76, 65: [1, 44], 69: 105, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 106] }, { 33: [2, 79], 65: [2, 79], 72: [2, 79], 80: [2, 79], 81: [2, 79], 82: [2, 79], 83: [2, 79], 84: [2, 79], 85: [2, 79] }, { 33: [2, 81] }, { 23: [2, 27], 33: [2, 27], 54: [2, 27], 65: [2, 27], 68: [2, 27], 72: [2, 27], 75: [2, 27], 80: [2, 27], 81: [2, 27], 82: [2, 27], 83: [2, 27], 84: [2, 27], 85: [2, 27] }, { 23: [2, 28], 33: [2, 28], 54: [2, 28], 65: [2, 28], 68: [2, 28], 72: [2, 28], 75: [2, 28], 80: [2, 28], 81: [2, 28], 82: [2, 28], 83: [2, 28], 84: [2, 28], 85: [2, 28] }, { 23: [2, 30], 33: [2, 30], 54: [2, 30], 68: [2, 30], 71: 107, 72: [1, 108], 75: [2, 30] }, { 23: [2, 98], 33: [2, 98], 54: [2, 98], 68: [2, 98], 72: [2, 98], 75: [2, 98] }, { 23: [2, 45], 33: [2, 45], 54: [2, 45], 65: [2, 45], 68: [2, 45], 72: [2, 45], 73: [1, 109], 75: [2, 45], 80: [2, 45], 81: [2, 45], 82: [2, 45], 83: [2, 45], 84: [2, 45], 85: [2, 45], 87: [2, 45] }, { 23: [2, 44], 33: [2, 44], 54: [2, 44], 65: [2, 44], 68: [2, 44], 72: [2, 44], 75: [2, 44], 80: [2, 44], 81: [2, 44], 82: [2, 44], 83: [2, 44], 84: [2, 44], 85: [2, 44], 87: [2, 44] }, { 54: [1, 110] }, { 54: [2, 83], 65: [2, 83], 72: [2, 83], 80: [2, 83], 81: [2, 83], 82: [2, 83], 83: [2, 83], 84: [2, 83], 85: [2, 83] }, { 54: [2, 85] }, { 5: [2, 13], 14: [2, 13], 15: [2, 13], 19: [2, 13], 29: [2, 13], 34: [2, 13], 39: [2, 13], 44: [2, 13], 47: [2, 13], 48: [2, 13], 51: [2, 13], 55: [2, 13], 60: [2, 13] }, { 38: 56, 39: [1, 58], 43: 57, 44: [1, 59], 45: 112, 46: 111, 47: [2, 76] }, { 33: [2, 70], 40: 113, 65: [2, 70], 72: [2, 70], 75: [2, 70], 80: [2, 70], 81: [2, 70], 82: [2, 70], 83: [2, 70], 84: [2, 70], 85: [2, 70] }, { 47: [2, 18] }, { 5: [2, 14], 14: [2, 14], 15: [2, 14], 19: [2, 14], 29: [2, 14], 34: [2, 14], 39: [2, 14], 44: [2, 14], 47: [2, 14], 48: [2, 14], 51: [2, 14], 55: [2, 14], 60: [2, 14] }, { 33: [1, 114] }, { 33: [2, 87], 65: [2, 87], 72: [2, 87], 80: [2, 87], 81: [2, 87], 82: [2, 87], 83: [2, 87], 84: [2, 87], 85: [2, 87] }, { 33: [2, 89] }, { 20: 75, 63: 116, 64: 76, 65: [1, 44], 67: 115, 68: [2, 96], 69: 117, 70: 77, 71: 78, 72: [1, 79], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 33: [1, 118] }, { 32: 119, 33: [2, 62], 74: 120, 75: [1, 121] }, { 33: [2, 59], 65: [2, 59], 72: [2, 59], 75: [2, 59], 80: [2, 59], 81: [2, 59], 82: [2, 59], 83: [2, 59], 84: [2, 59], 85: [2, 59] }, { 33: [2, 61], 75: [2, 61] }, { 33: [2, 68], 37: 122, 74: 123, 75: [1, 121] }, { 33: [2, 65], 65: [2, 65], 72: [2, 65], 75: [2, 65], 80: [2, 65], 81: [2, 65], 82: [2, 65], 83: [2, 65], 84: [2, 65], 85: [2, 65] }, { 33: [2, 67], 75: [2, 67] }, { 23: [1, 124] }, { 23: [2, 51], 65: [2, 51], 72: [2, 51], 80: [2, 51], 81: [2, 51], 82: [2, 51], 83: [2, 51], 84: [2, 51], 85: [2, 51] }, { 23: [2, 53] }, { 33: [1, 125] }, { 33: [2, 91], 65: [2, 91], 72: [2, 91], 80: [2, 91], 81: [2, 91], 82: [2, 91], 83: [2, 91], 84: [2, 91], 85: [2, 91] }, { 33: [2, 93] }, { 5: [2, 22], 14: [2, 22], 15: [2, 22], 19: [2, 22], 29: [2, 22], 34: [2, 22], 39: [2, 22], 44: [2, 22], 47: [2, 22], 48: [2, 22], 51: [2, 22], 55: [2, 22], 60: [2, 22] }, { 23: [2, 99], 33: [2, 99], 54: [2, 99], 68: [2, 99], 72: [2, 99], 75: [2, 99] }, { 73: [1, 109] }, { 20: 75, 63: 126, 64: 76, 65: [1, 44], 72: [1, 35], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 23], 14: [2, 23], 15: [2, 23], 19: [2, 23], 29: [2, 23], 34: [2, 23], 39: [2, 23], 44: [2, 23], 47: [2, 23], 48: [2, 23], 51: [2, 23], 55: [2, 23], 60: [2, 23] }, { 47: [2, 19] }, { 47: [2, 77] }, { 20: 75, 33: [2, 72], 41: 127, 63: 128, 64: 76, 65: [1, 44], 69: 129, 70: 77, 71: 78, 72: [1, 79], 75: [2, 72], 78: 26, 79: 27, 80: [1, 28], 81: [1, 29], 82: [1, 30], 83: [1, 31], 84: [1, 32], 85: [1, 34], 86: 33 }, { 5: [2, 24], 14: [2, 24], 15: [2, 24], 19: [2, 24], 29: [2, 24], 34: [2, 24], 39: [2, 24], 44: [2, 24], 47: [2, 24], 48: [2, 24], 51: [2, 24], 55: [2, 24], 60: [2, 24] }, { 68: [1, 130] }, { 65: [2, 95], 68: [2, 95], 72: [2, 95], 80: [2, 95], 81: [2, 95], 82: [2, 95], 83: [2, 95], 84: [2, 95], 85: [2, 95] }, { 68: [2, 97] }, { 5: [2, 21], 14: [2, 21], 15: [2, 21], 19: [2, 21], 29: [2, 21], 34: [2, 21], 39: [2, 21], 44: [2, 21], 47: [2, 21], 48: [2, 21], 51: [2, 21], 55: [2, 21], 60: [2, 21] }, { 33: [1, 131] }, { 33: [2, 63] }, { 72: [1, 133], 76: 132 }, { 33: [1, 134] }, { 33: [2, 69] }, { 15: [2, 12] }, { 14: [2, 26], 15: [2, 26], 19: [2, 26], 29: [2, 26], 34: [2, 26], 47: [2, 26], 48: [2, 26], 51: [2, 26], 55: [2, 26], 60: [2, 26] }, { 23: [2, 31], 33: [2, 31], 54: [2, 31], 68: [2, 31], 72: [2, 31], 75: [2, 31] }, { 33: [2, 74], 42: 135, 74: 136, 75: [1, 121] }, { 33: [2, 71], 65: [2, 71], 72: [2, 71], 75: [2, 71], 80: [2, 71], 81: [2, 71], 82: [2, 71], 83: [2, 71], 84: [2, 71], 85: [2, 71] }, { 33: [2, 73], 75: [2, 73] }, { 23: [2, 29], 33: [2, 29], 54: [2, 29], 65: [2, 29], 68: [2, 29], 72: [2, 29], 75: [2, 29], 80: [2, 29], 81: [2, 29], 82: [2, 29], 83: [2, 29], 84: [2, 29], 85: [2, 29] }, { 14: [2, 15], 15: [2, 15], 19: [2, 15], 29: [2, 15], 34: [2, 15], 39: [2, 15], 44: [2, 15], 47: [2, 15], 48: [2, 15], 51: [2, 15], 55: [2, 15], 60: [2, 15] }, { 72: [1, 138], 77: [1, 137] }, { 72: [2, 100], 77: [2, 100] }, { 14: [2, 16], 15: [2, 16], 19: [2, 16], 29: [2, 16], 34: [2, 16], 44: [2, 16], 47: [2, 16], 48: [2, 16], 51: [2, 16], 55: [2, 16], 60: [2, 16] }, { 33: [1, 139] }, { 33: [2, 75] }, { 33: [2, 32] }, { 72: [2, 101], 77: [2, 101] }, { 14: [2, 17], 15: [2, 17], 19: [2, 17], 29: [2, 17], 34: [2, 17], 39: [2, 17], 44: [2, 17], 47: [2, 17], 48: [2, 17], 51: [2, 17], 55: [2, 17], 60: [2, 17] }],
		        defaultActions: { 4: [2, 1], 55: [2, 55], 57: [2, 20], 61: [2, 57], 74: [2, 81], 83: [2, 85], 87: [2, 18], 91: [2, 89], 102: [2, 53], 105: [2, 93], 111: [2, 19], 112: [2, 77], 117: [2, 97], 120: [2, 63], 123: [2, 69], 124: [2, 12], 136: [2, 75], 137: [2, 32] },
		        parseError: function parseError(str, hash) {
		            throw new Error(str);
		        },
		        parse: function parse(input) {
		            var self = this,
		                stack = [0],
		                vstack = [null],
		                lstack = [],
		                table = this.table,
		                yytext = "",
		                yylineno = 0,
		                yyleng = 0,
		                recovering = 0,
		                TERROR = 2,
		                EOF = 1;
		            this.lexer.setInput(input);
		            this.lexer.yy = this.yy;
		            this.yy.lexer = this.lexer;
		            this.yy.parser = this;
		            if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
		            var yyloc = this.lexer.yylloc;
		            lstack.push(yyloc);
		            var ranges = this.lexer.options && this.lexer.options.ranges;
		            if (typeof this.yy.parseError === "function") this.parseError = this.yy.parseError;
		            function popStack(n) {
		                stack.length = stack.length - 2 * n;
		                vstack.length = vstack.length - n;
		                lstack.length = lstack.length - n;
		            }
		            function lex() {
		                var token;
		                token = self.lexer.lex() || 1;
		                if (typeof token !== "number") {
		                    token = self.symbols_[token] || token;
		                }
		                return token;
		            }
		            var symbol,
		                preErrorSymbol,
		                state,
		                action,
		                a,
		                r,
		                yyval = {},
		                p,
		                len,
		                newState,
		                expected;
		            while (true) {
		                state = stack[stack.length - 1];
		                if (this.defaultActions[state]) {
		                    action = this.defaultActions[state];
		                } else {
		                    if (symbol === null || typeof symbol == "undefined") {
		                        symbol = lex();
		                    }
		                    action = table[state] && table[state][symbol];
		                }
		                if (typeof action === "undefined" || !action.length || !action[0]) {
		                    var errStr = "";
		                    if (!recovering) {
		                        expected = [];
		                        for (p in table[state]) if (this.terminals_[p] && p > 2) {
		                            expected.push("'" + this.terminals_[p] + "'");
		                        }
		                        if (this.lexer.showPosition) {
		                            errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
		                        } else {
		                            errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
		                        }
		                        this.parseError(errStr, { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected });
		                    }
		                }
		                if (action[0] instanceof Array && action.length > 1) {
		                    throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
		                }
		                switch (action[0]) {
		                    case 1:
		                        stack.push(symbol);
		                        vstack.push(this.lexer.yytext);
		                        lstack.push(this.lexer.yylloc);
		                        stack.push(action[1]);
		                        symbol = null;
		                        if (!preErrorSymbol) {
		                            yyleng = this.lexer.yyleng;
		                            yytext = this.lexer.yytext;
		                            yylineno = this.lexer.yylineno;
		                            yyloc = this.lexer.yylloc;
		                            if (recovering > 0) recovering--;
		                        } else {
		                            symbol = preErrorSymbol;
		                            preErrorSymbol = null;
		                        }
		                        break;
		                    case 2:
		                        len = this.productions_[action[1]][1];
		                        yyval.$ = vstack[vstack.length - len];
		                        yyval._$ = { first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column };
		                        if (ranges) {
		                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
		                        }
		                        r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
		                        if (typeof r !== "undefined") {
		                            return r;
		                        }
		                        if (len) {
		                            stack = stack.slice(0, -1 * len * 2);
		                            vstack = vstack.slice(0, -1 * len);
		                            lstack = lstack.slice(0, -1 * len);
		                        }
		                        stack.push(this.productions_[action[1]][0]);
		                        vstack.push(yyval.$);
		                        lstack.push(yyval._$);
		                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
		                        stack.push(newState);
		                        break;
		                    case 3:
		                        return true;
		                }
		            }
		            return true;
		        }
		    };
		    /* Jison generated lexer */
		    var lexer = (function () {
		        var lexer = { EOF: 1,
		            parseError: function parseError(str, hash) {
		                if (this.yy.parser) {
		                    this.yy.parser.parseError(str, hash);
		                } else {
		                    throw new Error(str);
		                }
		            },
		            setInput: function setInput(input) {
		                this._input = input;
		                this._more = this._less = this.done = false;
		                this.yylineno = this.yyleng = 0;
		                this.yytext = this.matched = this.match = '';
		                this.conditionStack = ['INITIAL'];
		                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
		                if (this.options.ranges) this.yylloc.range = [0, 0];
		                this.offset = 0;
		                return this;
		            },
		            input: function input() {
		                var ch = this._input[0];
		                this.yytext += ch;
		                this.yyleng++;
		                this.offset++;
		                this.match += ch;
		                this.matched += ch;
		                var lines = ch.match(/(?:\r\n?|\n).*/g);
		                if (lines) {
		                    this.yylineno++;
		                    this.yylloc.last_line++;
		                } else {
		                    this.yylloc.last_column++;
		                }
		                if (this.options.ranges) this.yylloc.range[1]++;

		                this._input = this._input.slice(1);
		                return ch;
		            },
		            unput: function unput(ch) {
		                var len = ch.length;
		                var lines = ch.split(/(?:\r\n?|\n)/g);

		                this._input = ch + this._input;
		                this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
		                //this.yyleng -= len;
		                this.offset -= len;
		                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
		                this.match = this.match.substr(0, this.match.length - 1);
		                this.matched = this.matched.substr(0, this.matched.length - 1);

		                if (lines.length - 1) this.yylineno -= lines.length - 1;
		                var r = this.yylloc.range;

		                this.yylloc = { first_line: this.yylloc.first_line,
		                    last_line: this.yylineno + 1,
		                    first_column: this.yylloc.first_column,
		                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
		                };

		                if (this.options.ranges) {
		                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
		                }
		                return this;
		            },
		            more: function more() {
		                this._more = true;
		                return this;
		            },
		            less: function less(n) {
		                this.unput(this.match.slice(n));
		            },
		            pastInput: function pastInput() {
		                var past = this.matched.substr(0, this.matched.length - this.match.length);
		                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
		            },
		            upcomingInput: function upcomingInput() {
		                var next = this.match;
		                if (next.length < 20) {
		                    next += this._input.substr(0, 20 - next.length);
		                }
		                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
		            },
		            showPosition: function showPosition() {
		                var pre = this.pastInput();
		                var c = new Array(pre.length + 1).join("-");
		                return pre + this.upcomingInput() + "\n" + c + "^";
		            },
		            next: function next() {
		                if (this.done) {
		                    return this.EOF;
		                }
		                if (!this._input) this.done = true;

		                var token, match, tempMatch, index, col, lines;
		                if (!this._more) {
		                    this.yytext = '';
		                    this.match = '';
		                }
		                var rules = this._currentRules();
		                for (var i = 0; i < rules.length; i++) {
		                    tempMatch = this._input.match(this.rules[rules[i]]);
		                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
		                        match = tempMatch;
		                        index = i;
		                        if (!this.options.flex) break;
		                    }
		                }
		                if (match) {
		                    lines = match[0].match(/(?:\r\n?|\n).*/g);
		                    if (lines) this.yylineno += lines.length;
		                    this.yylloc = { first_line: this.yylloc.last_line,
		                        last_line: this.yylineno + 1,
		                        first_column: this.yylloc.last_column,
		                        last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length };
		                    this.yytext += match[0];
		                    this.match += match[0];
		                    this.matches = match;
		                    this.yyleng = this.yytext.length;
		                    if (this.options.ranges) {
		                        this.yylloc.range = [this.offset, this.offset += this.yyleng];
		                    }
		                    this._more = false;
		                    this._input = this._input.slice(match[0].length);
		                    this.matched += match[0];
		                    token = this.performAction.call(this, this.yy, this, rules[index], this.conditionStack[this.conditionStack.length - 1]);
		                    if (this.done && this._input) this.done = false;
		                    if (token) return token;else return;
		                }
		                if (this._input === "") {
		                    return this.EOF;
		                } else {
		                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), { text: "", token: null, line: this.yylineno });
		                }
		            },
		            lex: function lex() {
		                var r = this.next();
		                if (typeof r !== 'undefined') {
		                    return r;
		                } else {
		                    return this.lex();
		                }
		            },
		            begin: function begin(condition) {
		                this.conditionStack.push(condition);
		            },
		            popState: function popState() {
		                return this.conditionStack.pop();
		            },
		            _currentRules: function _currentRules() {
		                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
		            },
		            topState: function topState() {
		                return this.conditionStack[this.conditionStack.length - 2];
		            },
		            pushState: function begin(condition) {
		                this.begin(condition);
		            } };
		        lexer.options = {};
		        lexer.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START
		        /**/) {

		            function strip(start, end) {
		                return yy_.yytext = yy_.yytext.substr(start, yy_.yyleng - end);
		            }

		            var YYSTATE = YY_START;
		            switch ($avoiding_name_collisions) {
		                case 0:
		                    if (yy_.yytext.slice(-2) === "\\\\") {
		                        strip(0, 1);
		                        this.begin("mu");
		                    } else if (yy_.yytext.slice(-1) === "\\") {
		                        strip(0, 1);
		                        this.begin("emu");
		                    } else {
		                        this.begin("mu");
		                    }
		                    if (yy_.yytext) return 15;

		                    break;
		                case 1:
		                    return 15;
		                    break;
		                case 2:
		                    this.popState();
		                    return 15;

		                    break;
		                case 3:
		                    this.begin('raw');return 15;
		                    break;
		                case 4:
		                    this.popState();
		                    // Should be using `this.topState()` below, but it currently
		                    // returns the second top instead of the first top. Opened an
		                    // issue about it at https://github.com/zaach/jison/issues/291
		                    if (this.conditionStack[this.conditionStack.length - 1] === 'raw') {
		                        return 15;
		                    } else {
		                        yy_.yytext = yy_.yytext.substr(5, yy_.yyleng - 9);
		                        return 'END_RAW_BLOCK';
		                    }

		                    break;
		                case 5:
		                    return 15;
		                    break;
		                case 6:
		                    this.popState();
		                    return 14;

		                    break;
		                case 7:
		                    return 65;
		                    break;
		                case 8:
		                    return 68;
		                    break;
		                case 9:
		                    return 19;
		                    break;
		                case 10:
		                    this.popState();
		                    this.begin('raw');
		                    return 23;

		                    break;
		                case 11:
		                    return 55;
		                    break;
		                case 12:
		                    return 60;
		                    break;
		                case 13:
		                    return 29;
		                    break;
		                case 14:
		                    return 47;
		                    break;
		                case 15:
		                    this.popState();return 44;
		                    break;
		                case 16:
		                    this.popState();return 44;
		                    break;
		                case 17:
		                    return 34;
		                    break;
		                case 18:
		                    return 39;
		                    break;
		                case 19:
		                    return 51;
		                    break;
		                case 20:
		                    return 48;
		                    break;
		                case 21:
		                    this.unput(yy_.yytext);
		                    this.popState();
		                    this.begin('com');

		                    break;
		                case 22:
		                    this.popState();
		                    return 14;

		                    break;
		                case 23:
		                    return 48;
		                    break;
		                case 24:
		                    return 73;
		                    break;
		                case 25:
		                    return 72;
		                    break;
		                case 26:
		                    return 72;
		                    break;
		                case 27:
		                    return 87;
		                    break;
		                case 28:
		                    // ignore whitespace
		                    break;
		                case 29:
		                    this.popState();return 54;
		                    break;
		                case 30:
		                    this.popState();return 33;
		                    break;
		                case 31:
		                    yy_.yytext = strip(1, 2).replace(/\\"/g, '"');return 80;
		                    break;
		                case 32:
		                    yy_.yytext = strip(1, 2).replace(/\\'/g, "'");return 80;
		                    break;
		                case 33:
		                    return 85;
		                    break;
		                case 34:
		                    return 82;
		                    break;
		                case 35:
		                    return 82;
		                    break;
		                case 36:
		                    return 83;
		                    break;
		                case 37:
		                    return 84;
		                    break;
		                case 38:
		                    return 81;
		                    break;
		                case 39:
		                    return 75;
		                    break;
		                case 40:
		                    return 77;
		                    break;
		                case 41:
		                    return 72;
		                    break;
		                case 42:
		                    yy_.yytext = yy_.yytext.replace(/\\([\\\]])/g, '$1');return 72;
		                    break;
		                case 43:
		                    return 'INVALID';
		                    break;
		                case 44:
		                    return 5;
		                    break;
		            }
		        };
		        lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/, /^(?:[^\x00]+)/, /^(?:[^\x00]{2,}?(?=(\{\{|\\\{\{|\\\\\{\{|$)))/, /^(?:\{\{\{\{(?=[^\/]))/, /^(?:\{\{\{\{\/[^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=[=}\s\/.])\}\}\}\})/, /^(?:[^\x00]*?(?=(\{\{\{\{)))/, /^(?:[\s\S]*?--(~)?\}\})/, /^(?:\()/, /^(?:\))/, /^(?:\{\{\{\{)/, /^(?:\}\}\}\})/, /^(?:\{\{(~)?>)/, /^(?:\{\{(~)?#>)/, /^(?:\{\{(~)?#\*?)/, /^(?:\{\{(~)?\/)/, /^(?:\{\{(~)?\^\s*(~)?\}\})/, /^(?:\{\{(~)?\s*else\s*(~)?\}\})/, /^(?:\{\{(~)?\^)/, /^(?:\{\{(~)?\s*else\b)/, /^(?:\{\{(~)?\{)/, /^(?:\{\{(~)?&)/, /^(?:\{\{(~)?!--)/, /^(?:\{\{(~)?![\s\S]*?\}\})/, /^(?:\{\{(~)?\*?)/, /^(?:=)/, /^(?:\.\.)/, /^(?:\.(?=([=~}\s\/.)|])))/, /^(?:[\/.])/, /^(?:\s+)/, /^(?:\}(~)?\}\})/, /^(?:(~)?\}\})/, /^(?:"(\\["]|[^"])*")/, /^(?:'(\\[']|[^'])*')/, /^(?:@)/, /^(?:true(?=([~}\s)])))/, /^(?:false(?=([~}\s)])))/, /^(?:undefined(?=([~}\s)])))/, /^(?:null(?=([~}\s)])))/, /^(?:-?[0-9]+(?:\.[0-9]+)?(?=([~}\s)])))/, /^(?:as\s+\|)/, /^(?:\|)/, /^(?:([^\s!"#%-,\.\/;->@\[-\^`\{-~]+(?=([=~}\s\/.)|]))))/, /^(?:\[(\\\]|[^\]])*\])/, /^(?:.)/, /^(?:$)/];
		        lexer.conditions = { "mu": { "rules": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44], "inclusive": false }, "emu": { "rules": [2], "inclusive": false }, "com": { "rules": [6], "inclusive": false }, "raw": { "rules": [3, 4, 5], "inclusive": false }, "INITIAL": { "rules": [0, 1, 44], "inclusive": true } };
		        return lexer;
		    })();
		    parser.lexer = lexer;
		    function Parser() {
		        this.yy = {};
		    }Parser.prototype = parser;parser.Parser = Parser;
		    return new Parser();
		})();exports.__esModule = true;
		exports['default'] = handlebars;

	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _visitor = __webpack_require__(28);

		var _visitor2 = _interopRequireDefault(_visitor);

		function WhitespaceControl() {
		  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

		  this.options = options;
		}
		WhitespaceControl.prototype = new _visitor2['default']();

		WhitespaceControl.prototype.Program = function (program) {
		  var doStandalone = !this.options.ignoreStandalone;

		  var isRoot = !this.isRootSeen;
		  this.isRootSeen = true;

		  var body = program.body;
		  for (var i = 0, l = body.length; i < l; i++) {
		    var current = body[i],
		        strip = this.accept(current);

		    if (!strip) {
		      continue;
		    }

		    var _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),
		        _isNextWhitespace = isNextWhitespace(body, i, isRoot),
		        openStandalone = strip.openStandalone && _isPrevWhitespace,
		        closeStandalone = strip.closeStandalone && _isNextWhitespace,
		        inlineStandalone = strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;

		    if (strip.close) {
		      omitRight(body, i, true);
		    }
		    if (strip.open) {
		      omitLeft(body, i, true);
		    }

		    if (doStandalone && inlineStandalone) {
		      omitRight(body, i);

		      if (omitLeft(body, i)) {
		        // If we are on a standalone node, save the indent info for partials
		        if (current.type === 'PartialStatement') {
		          // Pull out the whitespace from the final line
		          current.indent = /([ \t]+$)/.exec(body[i - 1].original)[1];
		        }
		      }
		    }
		    if (doStandalone && openStandalone) {
		      omitRight((current.program || current.inverse).body);

		      // Strip out the previous content node if it's whitespace only
		      omitLeft(body, i);
		    }
		    if (doStandalone && closeStandalone) {
		      // Always strip the next node
		      omitRight(body, i);

		      omitLeft((current.inverse || current.program).body);
		    }
		  }

		  return program;
		};

		WhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function (block) {
		  this.accept(block.program);
		  this.accept(block.inverse);

		  // Find the inverse program that is involed with whitespace stripping.
		  var program = block.program || block.inverse,
		      inverse = block.program && block.inverse,
		      firstInverse = inverse,
		      lastInverse = inverse;

		  if (inverse && inverse.chained) {
		    firstInverse = inverse.body[0].program;

		    // Walk the inverse chain to find the last inverse that is actually in the chain.
		    while (lastInverse.chained) {
		      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;
		    }
		  }

		  var strip = {
		    open: block.openStrip.open,
		    close: block.closeStrip.close,

		    // Determine the standalone candiacy. Basically flag our content as being possibly standalone
		    // so our parent can determine if we actually are standalone
		    openStandalone: isNextWhitespace(program.body),
		    closeStandalone: isPrevWhitespace((firstInverse || program).body)
		  };

		  if (block.openStrip.close) {
		    omitRight(program.body, null, true);
		  }

		  if (inverse) {
		    var inverseStrip = block.inverseStrip;

		    if (inverseStrip.open) {
		      omitLeft(program.body, null, true);
		    }

		    if (inverseStrip.close) {
		      omitRight(firstInverse.body, null, true);
		    }
		    if (block.closeStrip.open) {
		      omitLeft(lastInverse.body, null, true);
		    }

		    // Find standalone else statments
		    if (!this.options.ignoreStandalone && isPrevWhitespace(program.body) && isNextWhitespace(firstInverse.body)) {
		      omitLeft(program.body);
		      omitRight(firstInverse.body);
		    }
		  } else if (block.closeStrip.open) {
		    omitLeft(program.body, null, true);
		  }

		  return strip;
		};

		WhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function (mustache) {
		  return mustache.strip;
		};

		WhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function (node) {
		  /* istanbul ignore next */
		  var strip = node.strip || {};
		  return {
		    inlineStandalone: true,
		    open: strip.open,
		    close: strip.close
		  };
		};

		function isPrevWhitespace(body, i, isRoot) {
		  if (i === undefined) {
		    i = body.length;
		  }

		  // Nodes that end with newlines are considered whitespace (but are special
		  // cased for strip operations)
		  var prev = body[i - 1],
		      sibling = body[i - 2];
		  if (!prev) {
		    return isRoot;
		  }

		  if (prev.type === 'ContentStatement') {
		    return (sibling || !isRoot ? /\r?\n\s*?$/ : /(^|\r?\n)\s*?$/).test(prev.original);
		  }
		}
		function isNextWhitespace(body, i, isRoot) {
		  if (i === undefined) {
		    i = -1;
		  }

		  var next = body[i + 1],
		      sibling = body[i + 2];
		  if (!next) {
		    return isRoot;
		  }

		  if (next.type === 'ContentStatement') {
		    return (sibling || !isRoot ? /^\s*?\r?\n/ : /^\s*?(\r?\n|$)/).test(next.original);
		  }
		}

		// Marks the node to the right of the position as omitted.
		// I.e. {{foo}}' ' will mark the ' ' node as omitted.
		//
		// If i is undefined, then the first child will be marked as such.
		//
		// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
		// content is met.
		function omitRight(body, i, multiple) {
		  var current = body[i == null ? 0 : i + 1];
		  if (!current || current.type !== 'ContentStatement' || !multiple && current.rightStripped) {
		    return;
		  }

		  var original = current.value;
		  current.value = current.value.replace(multiple ? /^\s+/ : /^[ \t]*\r?\n?/, '');
		  current.rightStripped = current.value !== original;
		}

		// Marks the node to the left of the position as omitted.
		// I.e. ' '{{foo}} will mark the ' ' node as omitted.
		//
		// If i is undefined then the last child will be marked as such.
		//
		// If mulitple is truthy then all whitespace will be stripped out until non-whitespace
		// content is met.
		function omitLeft(body, i, multiple) {
		  var current = body[i == null ? body.length - 1 : i - 1];
		  if (!current || current.type !== 'ContentStatement' || !multiple && current.leftStripped) {
		    return;
		  }

		  // We omit the last node if it's whitespace only and not preceeded by a non-content node.
		  var original = current.value;
		  current.value = current.value.replace(multiple ? /\s+$/ : /[ \t]+$/, '');
		  current.leftStripped = current.value !== original;
		  return current.leftStripped;
		}

		exports['default'] = WhitespaceControl;
		module.exports = exports['default'];

	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _exception = __webpack_require__(6);

		var _exception2 = _interopRequireDefault(_exception);

		function Visitor() {
		  this.parents = [];
		}

		Visitor.prototype = {
		  constructor: Visitor,
		  mutating: false,

		  // Visits a given value. If mutating, will replace the value if necessary.
		  acceptKey: function acceptKey(node, name) {
		    var value = this.accept(node[name]);
		    if (this.mutating) {
		      // Hacky sanity check: This may have a few false positives for type for the helper
		      // methods but will generally do the right thing without a lot of overhead.
		      if (value && !Visitor.prototype[value.type]) {
		        throw new _exception2['default']('Unexpected node type "' + value.type + '" found when accepting ' + name + ' on ' + node.type);
		      }
		      node[name] = value;
		    }
		  },

		  // Performs an accept operation with added sanity check to ensure
		  // required keys are not removed.
		  acceptRequired: function acceptRequired(node, name) {
		    this.acceptKey(node, name);

		    if (!node[name]) {
		      throw new _exception2['default'](node.type + ' requires ' + name);
		    }
		  },

		  // Traverses a given array. If mutating, empty respnses will be removed
		  // for child elements.
		  acceptArray: function acceptArray(array) {
		    for (var i = 0, l = array.length; i < l; i++) {
		      this.acceptKey(array, i);

		      if (!array[i]) {
		        array.splice(i, 1);
		        i--;
		        l--;
		      }
		    }
		  },

		  accept: function accept(object) {
		    if (!object) {
		      return;
		    }

		    /* istanbul ignore next: Sanity code */
		    if (!this[object.type]) {
		      throw new _exception2['default']('Unknown type: ' + object.type, object);
		    }

		    if (this.current) {
		      this.parents.unshift(this.current);
		    }
		    this.current = object;

		    var ret = this[object.type](object);

		    this.current = this.parents.shift();

		    if (!this.mutating || ret) {
		      return ret;
		    } else if (ret !== false) {
		      return object;
		    }
		  },

		  Program: function Program(program) {
		    this.acceptArray(program.body);
		  },

		  MustacheStatement: visitSubExpression,
		  Decorator: visitSubExpression,

		  BlockStatement: visitBlock,
		  DecoratorBlock: visitBlock,

		  PartialStatement: visitPartial,
		  PartialBlockStatement: function PartialBlockStatement(partial) {
		    visitPartial.call(this, partial);

		    this.acceptKey(partial, 'program');
		  },

		  ContentStatement: function ContentStatement() /* content */{},
		  CommentStatement: function CommentStatement() /* comment */{},

		  SubExpression: visitSubExpression,

		  PathExpression: function PathExpression() /* path */{},

		  StringLiteral: function StringLiteral() /* string */{},
		  NumberLiteral: function NumberLiteral() /* number */{},
		  BooleanLiteral: function BooleanLiteral() /* bool */{},
		  UndefinedLiteral: function UndefinedLiteral() /* literal */{},
		  NullLiteral: function NullLiteral() /* literal */{},

		  Hash: function Hash(hash) {
		    this.acceptArray(hash.pairs);
		  },
		  HashPair: function HashPair(pair) {
		    this.acceptRequired(pair, 'value');
		  }
		};

		function visitSubExpression(mustache) {
		  this.acceptRequired(mustache, 'path');
		  this.acceptArray(mustache.params);
		  this.acceptKey(mustache, 'hash');
		}
		function visitBlock(block) {
		  visitSubExpression.call(this, block);

		  this.acceptKey(block, 'program');
		  this.acceptKey(block, 'inverse');
		}
		function visitPartial(partial) {
		  this.acceptRequired(partial, 'name');
		  this.acceptArray(partial.params);
		  this.acceptKey(partial, 'hash');
		}

		exports['default'] = Visitor;
		module.exports = exports['default'];

	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;
		exports.SourceLocation = SourceLocation;
		exports.id = id;
		exports.stripFlags = stripFlags;
		exports.stripComment = stripComment;
		exports.preparePath = preparePath;
		exports.prepareMustache = prepareMustache;
		exports.prepareRawBlock = prepareRawBlock;
		exports.prepareBlock = prepareBlock;
		exports.prepareProgram = prepareProgram;
		exports.preparePartialBlock = preparePartialBlock;

		var _exception = __webpack_require__(6);

		var _exception2 = _interopRequireDefault(_exception);

		function validateClose(open, close) {
		  close = close.path ? close.path.original : close;

		  if (open.path.original !== close) {
		    var errorNode = { loc: open.path.loc };

		    throw new _exception2['default'](open.path.original + " doesn't match " + close, errorNode);
		  }
		}

		function SourceLocation(source, locInfo) {
		  this.source = source;
		  this.start = {
		    line: locInfo.first_line,
		    column: locInfo.first_column
		  };
		  this.end = {
		    line: locInfo.last_line,
		    column: locInfo.last_column
		  };
		}

		function id(token) {
		  if (/^\[.*\]$/.test(token)) {
		    return token.substr(1, token.length - 2);
		  } else {
		    return token;
		  }
		}

		function stripFlags(open, close) {
		  return {
		    open: open.charAt(2) === '~',
		    close: close.charAt(close.length - 3) === '~'
		  };
		}

		function stripComment(comment) {
		  return comment.replace(/^\{\{~?\!-?-?/, '').replace(/-?-?~?\}\}$/, '');
		}

		function preparePath(data, parts, loc) {
		  loc = this.locInfo(loc);

		  var original = data ? '@' : '',
		      dig = [],
		      depth = 0,
		      depthString = '';

		  for (var i = 0, l = parts.length; i < l; i++) {
		    var part = parts[i].part,

		    // If we have [] syntax then we do not treat path references as operators,
		    // i.e. foo.[this] resolves to approximately context.foo['this']
		    isLiteral = parts[i].original !== part;
		    original += (parts[i].separator || '') + part;

		    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {
		      if (dig.length > 0) {
		        throw new _exception2['default']('Invalid path: ' + original, { loc: loc });
		      } else if (part === '..') {
		        depth++;
		        depthString += '../';
		      }
		    } else {
		      dig.push(part);
		    }
		  }

		  return {
		    type: 'PathExpression',
		    data: data,
		    depth: depth,
		    parts: dig,
		    original: original,
		    loc: loc
		  };
		}

		function prepareMustache(path, params, hash, open, strip, locInfo) {
		  // Must use charAt to support IE pre-10
		  var escapeFlag = open.charAt(3) || open.charAt(2),
		      escaped = escapeFlag !== '{' && escapeFlag !== '&';

		  var decorator = /\*/.test(open);
		  return {
		    type: decorator ? 'Decorator' : 'MustacheStatement',
		    path: path,
		    params: params,
		    hash: hash,
		    escaped: escaped,
		    strip: strip,
		    loc: this.locInfo(locInfo)
		  };
		}

		function prepareRawBlock(openRawBlock, contents, close, locInfo) {
		  validateClose(openRawBlock, close);

		  locInfo = this.locInfo(locInfo);
		  var program = {
		    type: 'Program',
		    body: contents,
		    strip: {},
		    loc: locInfo
		  };

		  return {
		    type: 'BlockStatement',
		    path: openRawBlock.path,
		    params: openRawBlock.params,
		    hash: openRawBlock.hash,
		    program: program,
		    openStrip: {},
		    inverseStrip: {},
		    closeStrip: {},
		    loc: locInfo
		  };
		}

		function prepareBlock(openBlock, program, inverseAndProgram, close, inverted, locInfo) {
		  if (close && close.path) {
		    validateClose(openBlock, close);
		  }

		  var decorator = /\*/.test(openBlock.open);

		  program.blockParams = openBlock.blockParams;

		  var inverse = undefined,
		      inverseStrip = undefined;

		  if (inverseAndProgram) {
		    if (decorator) {
		      throw new _exception2['default']('Unexpected inverse block on decorator', inverseAndProgram);
		    }

		    if (inverseAndProgram.chain) {
		      inverseAndProgram.program.body[0].closeStrip = close.strip;
		    }

		    inverseStrip = inverseAndProgram.strip;
		    inverse = inverseAndProgram.program;
		  }

		  if (inverted) {
		    inverted = inverse;
		    inverse = program;
		    program = inverted;
		  }

		  return {
		    type: decorator ? 'DecoratorBlock' : 'BlockStatement',
		    path: openBlock.path,
		    params: openBlock.params,
		    hash: openBlock.hash,
		    program: program,
		    inverse: inverse,
		    openStrip: openBlock.strip,
		    inverseStrip: inverseStrip,
		    closeStrip: close && close.strip,
		    loc: this.locInfo(locInfo)
		  };
		}

		function prepareProgram(statements, loc) {
		  if (!loc && statements.length) {
		    var firstLoc = statements[0].loc,
		        lastLoc = statements[statements.length - 1].loc;

		    /* istanbul ignore else */
		    if (firstLoc && lastLoc) {
		      loc = {
		        source: firstLoc.source,
		        start: {
		          line: firstLoc.start.line,
		          column: firstLoc.start.column
		        },
		        end: {
		          line: lastLoc.end.line,
		          column: lastLoc.end.column
		        }
		      };
		    }
		  }

		  return {
		    type: 'Program',
		    body: statements,
		    strip: {},
		    loc: loc
		  };
		}

		function preparePartialBlock(open, program, close, locInfo) {
		  validateClose(open, close);

		  return {
		    type: 'PartialBlockStatement',
		    name: open.path,
		    params: open.params,
		    hash: open.hash,
		    program: program,
		    openStrip: open.strip,
		    closeStrip: close && close.strip,
		    loc: this.locInfo(locInfo)
		  };
		}

	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {

		/* eslint-disable new-cap */

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;
		exports.Compiler = Compiler;
		exports.precompile = precompile;
		exports.compile = compile;

		var _exception = __webpack_require__(6);

		var _exception2 = _interopRequireDefault(_exception);

		var _utils = __webpack_require__(5);

		var _ast = __webpack_require__(24);

		var _ast2 = _interopRequireDefault(_ast);

		var slice = [].slice;

		function Compiler() {}

		// the foundHelper register will disambiguate helper lookup from finding a
		// function in a context. This is necessary for mustache compatibility, which
		// requires that context functions in blocks are evaluated by blockHelperMissing,
		// and then proceed as if the resulting value was provided to blockHelperMissing.

		Compiler.prototype = {
		  compiler: Compiler,

		  equals: function equals(other) {
		    var len = this.opcodes.length;
		    if (other.opcodes.length !== len) {
		      return false;
		    }

		    for (var i = 0; i < len; i++) {
		      var opcode = this.opcodes[i],
		          otherOpcode = other.opcodes[i];
		      if (opcode.opcode !== otherOpcode.opcode || !argEquals(opcode.args, otherOpcode.args)) {
		        return false;
		      }
		    }

		    // We know that length is the same between the two arrays because they are directly tied
		    // to the opcode behavior above.
		    len = this.children.length;
		    for (var i = 0; i < len; i++) {
		      if (!this.children[i].equals(other.children[i])) {
		        return false;
		      }
		    }

		    return true;
		  },

		  guid: 0,

		  compile: function compile(program, options) {
		    this.sourceNode = [];
		    this.opcodes = [];
		    this.children = [];
		    this.options = options;
		    this.stringParams = options.stringParams;
		    this.trackIds = options.trackIds;

		    options.blockParams = options.blockParams || [];

		    // These changes will propagate to the other compiler components
		    var knownHelpers = options.knownHelpers;
		    options.knownHelpers = {
		      'helperMissing': true,
		      'blockHelperMissing': true,
		      'each': true,
		      'if': true,
		      'unless': true,
		      'with': true,
		      'log': true,
		      'lookup': true
		    };
		    if (knownHelpers) {
		      for (var _name in knownHelpers) {
		        /* istanbul ignore else */
		        if (_name in knownHelpers) {
		          options.knownHelpers[_name] = knownHelpers[_name];
		        }
		      }
		    }

		    return this.accept(program);
		  },

		  compileProgram: function compileProgram(program) {
		    var childCompiler = new this.compiler(),
		        // eslint-disable-line new-cap
		    result = childCompiler.compile(program, this.options),
		        guid = this.guid++;

		    this.usePartial = this.usePartial || result.usePartial;

		    this.children[guid] = result;
		    this.useDepths = this.useDepths || result.useDepths;

		    return guid;
		  },

		  accept: function accept(node) {
		    /* istanbul ignore next: Sanity code */
		    if (!this[node.type]) {
		      throw new _exception2['default']('Unknown type: ' + node.type, node);
		    }

		    this.sourceNode.unshift(node);
		    var ret = this[node.type](node);
		    this.sourceNode.shift();
		    return ret;
		  },

		  Program: function Program(program) {
		    this.options.blockParams.unshift(program.blockParams);

		    var body = program.body,
		        bodyLength = body.length;
		    for (var i = 0; i < bodyLength; i++) {
		      this.accept(body[i]);
		    }

		    this.options.blockParams.shift();

		    this.isSimple = bodyLength === 1;
		    this.blockParams = program.blockParams ? program.blockParams.length : 0;

		    return this;
		  },

		  BlockStatement: function BlockStatement(block) {
		    transformLiteralToPath(block);

		    var program = block.program,
		        inverse = block.inverse;

		    program = program && this.compileProgram(program);
		    inverse = inverse && this.compileProgram(inverse);

		    var type = this.classifySexpr(block);

		    if (type === 'helper') {
		      this.helperSexpr(block, program, inverse);
		    } else if (type === 'simple') {
		      this.simpleSexpr(block);

		      // now that the simple mustache is resolved, we need to
		      // evaluate it by executing `blockHelperMissing`
		      this.opcode('pushProgram', program);
		      this.opcode('pushProgram', inverse);
		      this.opcode('emptyHash');
		      this.opcode('blockValue', block.path.original);
		    } else {
		      this.ambiguousSexpr(block, program, inverse);

		      // now that the simple mustache is resolved, we need to
		      // evaluate it by executing `blockHelperMissing`
		      this.opcode('pushProgram', program);
		      this.opcode('pushProgram', inverse);
		      this.opcode('emptyHash');
		      this.opcode('ambiguousBlockValue');
		    }

		    this.opcode('append');
		  },

		  DecoratorBlock: function DecoratorBlock(decorator) {
		    var program = decorator.program && this.compileProgram(decorator.program);
		    var params = this.setupFullMustacheParams(decorator, program, undefined),
		        path = decorator.path;

		    this.useDecorators = true;
		    this.opcode('registerDecorator', params.length, path.original);
		  },

		  PartialStatement: function PartialStatement(partial) {
		    this.usePartial = true;

		    var program = partial.program;
		    if (program) {
		      program = this.compileProgram(partial.program);
		    }

		    var params = partial.params;
		    if (params.length > 1) {
		      throw new _exception2['default']('Unsupported number of partial arguments: ' + params.length, partial);
		    } else if (!params.length) {
		      if (this.options.explicitPartialContext) {
		        this.opcode('pushLiteral', 'undefined');
		      } else {
		        params.push({ type: 'PathExpression', parts: [], depth: 0 });
		      }
		    }

		    var partialName = partial.name.original,
		        isDynamic = partial.name.type === 'SubExpression';
		    if (isDynamic) {
		      this.accept(partial.name);
		    }

		    this.setupFullMustacheParams(partial, program, undefined, true);

		    var indent = partial.indent || '';
		    if (this.options.preventIndent && indent) {
		      this.opcode('appendContent', indent);
		      indent = '';
		    }

		    this.opcode('invokePartial', isDynamic, partialName, indent);
		    this.opcode('append');
		  },
		  PartialBlockStatement: function PartialBlockStatement(partialBlock) {
		    this.PartialStatement(partialBlock);
		  },

		  MustacheStatement: function MustacheStatement(mustache) {
		    this.SubExpression(mustache);

		    if (mustache.escaped && !this.options.noEscape) {
		      this.opcode('appendEscaped');
		    } else {
		      this.opcode('append');
		    }
		  },
		  Decorator: function Decorator(decorator) {
		    this.DecoratorBlock(decorator);
		  },

		  ContentStatement: function ContentStatement(content) {
		    if (content.value) {
		      this.opcode('appendContent', content.value);
		    }
		  },

		  CommentStatement: function CommentStatement() {},

		  SubExpression: function SubExpression(sexpr) {
		    transformLiteralToPath(sexpr);
		    var type = this.classifySexpr(sexpr);

		    if (type === 'simple') {
		      this.simpleSexpr(sexpr);
		    } else if (type === 'helper') {
		      this.helperSexpr(sexpr);
		    } else {
		      this.ambiguousSexpr(sexpr);
		    }
		  },
		  ambiguousSexpr: function ambiguousSexpr(sexpr, program, inverse) {
		    var path = sexpr.path,
		        name = path.parts[0],
		        isBlock = program != null || inverse != null;

		    this.opcode('getContext', path.depth);

		    this.opcode('pushProgram', program);
		    this.opcode('pushProgram', inverse);

		    path.strict = true;
		    this.accept(path);

		    this.opcode('invokeAmbiguous', name, isBlock);
		  },

		  simpleSexpr: function simpleSexpr(sexpr) {
		    var path = sexpr.path;
		    path.strict = true;
		    this.accept(path);
		    this.opcode('resolvePossibleLambda');
		  },

		  helperSexpr: function helperSexpr(sexpr, program, inverse) {
		    var params = this.setupFullMustacheParams(sexpr, program, inverse),
		        path = sexpr.path,
		        name = path.parts[0];

		    if (this.options.knownHelpers[name]) {
		      this.opcode('invokeKnownHelper', params.length, name);
		    } else if (this.options.knownHelpersOnly) {
		      throw new _exception2['default']('You specified knownHelpersOnly, but used the unknown helper ' + name, sexpr);
		    } else {
		      path.strict = true;
		      path.falsy = true;

		      this.accept(path);
		      this.opcode('invokeHelper', params.length, path.original, _ast2['default'].helpers.simpleId(path));
		    }
		  },

		  PathExpression: function PathExpression(path) {
		    this.addDepth(path.depth);
		    this.opcode('getContext', path.depth);

		    var name = path.parts[0],
		        scoped = _ast2['default'].helpers.scopedId(path),
		        blockParamId = !path.depth && !scoped && this.blockParamIndex(name);

		    if (blockParamId) {
		      this.opcode('lookupBlockParam', blockParamId, path.parts);
		    } else if (!name) {
		      // Conte", "base64"));
  res.write(new Buffer("xt reference, i.e. `{{foo .}}` or `{{foo ..}}`
		      this.opcode('pushContext');
		    } else if (path.data) {
		      this.options.data = true;
		      this.opcode('lookupData', path.depth, path.parts, path.strict);
		    } else {
		      this.opcode('lookupOnContext', path.parts, path.falsy, path.strict, scoped);
		    }
		  },

		  StringLiteral: function StringLiteral(string) {
		    this.opcode('pushString', string.value);
		  },

		  NumberLiteral: function NumberLiteral(number) {
		    this.opcode('pushLiteral', number.value);
		  },

		  BooleanLiteral: function BooleanLiteral(bool) {
		    this.opcode('pushLiteral', bool.value);
		  },

		  UndefinedLiteral: function UndefinedLiteral() {
		    this.opcode('pushLiteral', 'undefined');
		  },

		  NullLiteral: function NullLiteral() {
		    this.opcode('pushLiteral', 'null');
		  },

		  Hash: function Hash(hash) {
		    var pairs = hash.pairs,
		        i = 0,
		        l = pairs.length;

		    this.opcode('pushHash');

		    for (; i < l; i++) {
		      this.pushParam(pairs[i].value);
		    }
		    while (i--) {
		      this.opcode('assignToHash', pairs[i].key);
		    }
		    this.opcode('popHash');
		  },

		  // HELPERS
		  opcode: function opcode(name) {
		    this.opcodes.push({ opcode: name, args: slice.call(arguments, 1), loc: this.sourceNode[0].loc });
		  },

		  addDepth: function addDepth(depth) {
		    if (!depth) {
		      return;
		    }

		    this.useDepths = true;
		  },

		  classifySexpr: function classifySexpr(sexpr) {
		    var isSimple = _ast2['default'].helpers.simpleId(sexpr.path);

		    var isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);

		    // a mustache is an eligible helper if:
		    // * its id is simple (a single part, not `this` or `..`)
		    var isHelper = !isBlockParam && _ast2['default'].helpers.helperExpression(sexpr);

		    // if a mustache is an eligible helper but not a definite
		    // helper, it is ambiguous, and will be resolved in a later
		    // pass or at runtime.
		    var isEligible = !isBlockParam && (isHelper || isSimple);

		    // if ambiguous, we can possibly resolve the ambiguity now
		    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.
		    if (isEligible && !isHelper) {
		      var _name2 = sexpr.path.parts[0],
		          options = this.options;

		      if (options.knownHelpers[_name2]) {
		        isHelper = true;
		      } else if (options.knownHelpersOnly) {
		        isEligible = false;
		      }
		    }

		    if (isHelper) {
		      return 'helper';
		    } else if (isEligible) {
		      return 'ambiguous';
		    } else {
		      return 'simple';
		    }
		  },

		  pushParams: function pushParams(params) {
		    for (var i = 0, l = params.length; i < l; i++) {
		      this.pushParam(params[i]);
		    }
		  },

		  pushParam: function pushParam(val) {
		    var value = val.value != null ? val.value : val.original || '';

		    if (this.stringParams) {
		      if (value.replace) {
		        value = value.replace(/^(\.?\.\/)*/g, '').replace(/\//g, '.');
		      }

		      if (val.depth) {
		        this.addDepth(val.depth);
		      }
		      this.opcode('getContext', val.depth || 0);
		      this.opcode('pushStringParam', value, val.type);

		      if (val.type === 'SubExpression') {
		        // SubExpressions get evaluated and passed in
		        // in string params mode.
		        this.accept(val);
		      }
		    } else {
		      if (this.trackIds) {
		        var blockParamIndex = undefined;
		        if (val.parts && !_ast2['default'].helpers.scopedId(val) && !val.depth) {
		          blockParamIndex = this.blockParamIndex(val.parts[0]);
		        }
		        if (blockParamIndex) {
		          var blockParamChild = val.parts.slice(1).join('.');
		          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);
		        } else {
		          value = val.original || value;
		          if (value.replace) {
		            value = value.replace(/^this(?:\.|$)/, '').replace(/^\.\//, '').replace(/^\.$/, '');
		          }

		          this.opcode('pushId', val.type, value);
		        }
		      }
		      this.accept(val);
		    }
		  },

		  setupFullMustacheParams: function setupFullMustacheParams(sexpr, program, inverse, omitEmpty) {
		    var params = sexpr.params;
		    this.pushParams(params);

		    this.opcode('pushProgram', program);
		    this.opcode('pushProgram', inverse);

		    if (sexpr.hash) {
		      this.accept(sexpr.hash);
		    } else {
		      this.opcode('emptyHash', omitEmpty);
		    }

		    return params;
		  },

		  blockParamIndex: function blockParamIndex(name) {
		    for (var depth = 0, len = this.options.blockParams.length; depth < len; depth++) {
		      var blockParams = this.options.blockParams[depth],
		          param = blockParams && _utils.indexOf(blockParams, name);
		      if (blockParams && param >= 0) {
		        return [depth, param];
		      }
		    }
		  }
		};

		function precompile(input, options, env) {
		  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
		    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' + input);
		  }

		  options = options || {};
		  if (!('data' in options)) {
		    options.data = true;
		  }
		  if (options.compat) {
		    options.useDepths = true;
		  }

		  var ast = env.parse(input, options),
		      environment = new env.Compiler().compile(ast, options);
		  return new env.JavaScriptCompiler().compile(environment, options);
		}

		function compile(input, options, env) {
		  if (options === undefined) options = {};

		  if (input == null || typeof input !== 'string' && input.type !== 'Program') {
		    throw new _exception2['default']('You must pass a string or Handlebars AST to Handlebars.compile. You passed ' + input);
		  }

		  if (!('data' in options)) {
		    options.data = true;
		  }
		  if (options.compat) {
		    options.useDepths = true;
		  }

		  var compiled = undefined;

		  function compileInput() {
		    var ast = env.parse(input, options),
		        environment = new env.Compiler().compile(ast, options),
		        templateSpec = new env.JavaScriptCompiler().compile(environment, options, undefined, true);
		    return env.template(templateSpec);
		  }

		  // Template is only compiled on first use and cached after that point.
		  function ret(context, execOptions) {
		    if (!compiled) {
		      compiled = compileInput();
		    }
		    return compiled.call(this, context, execOptions);
		  }
		  ret._setup = function (setupOptions) {
		    if (!compiled) {
		      compiled = compileInput();
		    }
		    return compiled._setup(setupOptions);
		  };
		  ret._child = function (i, data, blockParams, depths) {
		    if (!compiled) {
		      compiled = compileInput();
		    }
		    return compiled._child(i, data, blockParams, depths);
		  };
		  return ret;
		}

		function argEquals(a, b) {
		  if (a === b) {
		    return true;
		  }

		  if (_utils.isArray(a) && _utils.isArray(b) && a.length === b.length) {
		    for (var i = 0; i < a.length; i++) {
		      if (!argEquals(a[i], b[i])) {
		        return false;
		      }
		    }
		    return true;
		  }
		}

		function transformLiteralToPath(sexpr) {
		  if (!sexpr.path.parts) {
		    var literal = sexpr.path;
		    // Casting to string here to make false and 0 literal values play nicely with the rest
		    // of the system.
		    sexpr.path = {
		      type: 'PathExpression',
		      data: false,
		      depth: 0,
		      parts: [literal.original + ''],
		      original: literal.original + '',
		      loc: literal.loc
		    };
		  }
		}

	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {

		'use strict';

		var _interopRequireDefault = __webpack_require__(1)['default'];

		exports.__esModule = true;

		var _base = __webpack_require__(4);

		var _exception = __webpack_require__(6);

		var _exception2 = _interopRequireDefault(_exception);

		var _utils = __webpack_require__(5);

		var _codeGen = __webpack_require__(32);

		var _codeGen2 = _interopRequireDefault(_codeGen);

		function Literal(value) {
		  this.value = value;
		}

		function JavaScriptCompiler() {}

		JavaScriptCompiler.prototype = {
		  // PUBLIC API: You can override these methods in a subclass to provide
		  // alternative compiled forms for name lookup and buffering semantics
		  nameLookup: function nameLookup(parent, name /* , type*/) {
		    if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
		      return [parent, '.', name];
		    } else {
		      return [parent, '[', JSON.stringify(name), ']'];
		    }
		  },
		  depthedLookup: function depthedLookup(name) {
		    return [this.aliasable('container.lookup'), '(depths, "', name, '")'];
		  },

		  compilerInfo: function compilerInfo() {
		    var revision = _base.COMPILER_REVISION,
		        versions = _base.REVISION_CHANGES[revision];
		    return [revision, versions];
		  },

		  appendToBuffer: function appendToBuffer(source, location, explicit) {
		    // Force a source as this simplifies the merge logic.
		    if (!_utils.isArray(source)) {
		      source = [source];
		    }
		    source = this.source.wrap(source, location);

		    if (this.environment.isSimple) {
		      return ['return ', source, ';'];
		    } else if (explicit) {
		      // This is a case where the buffer operation occurs as a child of another
		      // construct, generally braces. We have to explicitly output these buffer
		      // operations to ensure that the emitted code goes in the correct location.
		      return ['buffer += ', source, ';'];
		    } else {
		      source.appendToBuffer = true;
		      return source;
		    }
		  },

		  initializeBuffer: function initializeBuffer() {
		    return this.quotedString('');
		  },
		  // END PUBLIC API

		  compile: function compile(environment, options, context, asObject) {
		    this.environment = environment;
		    this.options = options;
		    this.stringParams = this.options.stringParams;
		    this.trackIds = this.options.trackIds;
		    this.precompile = !asObject;

		    this.name = this.environment.name;
		    this.isChild = !!context;
		    this.context = context || {
		      decorators: [],
		      programs: [],
		      environments: []
		    };

		    this.preamble();

		    this.stackSlot = 0;
		    this.stackVars = [];
		    this.aliases = {};
		    this.registers = { list: [] };
		    this.hashes = [];
		    this.compileStack = [];
		    this.inlineStack = [];
		    this.blockParams = [];

		    this.compileChildren(environment, options);

		    this.useDepths = this.useDepths || environment.useDepths || environment.useDecorators || this.options.compat;
		    this.useBlockParams = this.useBlockParams || environment.useBlockParams;

		    var opcodes = environment.opcodes,
		        opcode = undefined,
		        firstLoc = undefined,
		        i = undefined,
		        l = undefined;

		    for (i = 0, l = opcodes.length; i < l; i++) {
		      opcode = opcodes[i];

		      this.source.currentLocation = opcode.loc;
		      firstLoc = firstLoc || opcode.loc;
		      this[opcode.opcode].apply(this, opcode.args);
		    }

		    // Flush any trailing content that might be pending.
		    this.source.currentLocation = firstLoc;
		    this.pushSource('');

		    /* istanbul ignore next */
		    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {
		      throw new _exception2['default']('Compile completed with content left on stack');
		    }

		    if (!this.decorators.isEmpty()) {
		      this.useDecorators = true;

		      this.decorators.prepend('var decorators = container.decorators;\n');
		      this.decorators.push('return fn;');

		      if (asObject) {
		        this.decorators = Function.apply(this, ['fn', 'props', 'container', 'depth0', 'data', 'blockParams', 'depths', this.decorators.merge()]);
		      } else {
		        this.decorators.prepend('function(fn, props, container, depth0, data, blockParams, depths) {\n');
		        this.decorators.push('}\n');
		        this.decorators = this.decorators.merge();
		      }
		    } else {
		      this.decorators = undefined;
		    }

		    var fn = this.createFunctionContext(asObject);
		    if (!this.isChild) {
		      var ret = {
		        compiler: this.compilerInfo(),
		        main: fn
		      };

		      if (this.decorators) {
		        ret.main_d = this.decorators; // eslint-disable-line camelcase
		        ret.useDecorators = true;
		      }

		      var _context = this.context;
		      var programs = _context.programs;
		      var decorators = _context.decorators;

		      for (i = 0, l = programs.length; i < l; i++) {
		        if (programs[i]) {
		          ret[i] = programs[i];
		          if (decorators[i]) {
		            ret[i + '_d'] = decorators[i];
		            ret.useDecorators = true;
		          }
		        }
		      }

		      if (this.environment.usePartial) {
		        ret.usePartial = true;
		      }
		      if (this.options.data) {
		        ret.useData = true;
		      }
		      if (this.useDepths) {
		        ret.useDepths = true;
		      }
		      if (this.useBlockParams) {
		        ret.useBlockParams = true;
		      }
		      if (this.options.compat) {
		        ret.compat = true;
		      }

		      if (!asObject) {
		        ret.compiler = JSON.stringify(ret.compiler);

		        this.source.currentLocation = { start: { line: 1, column: 0 } };
		        ret = this.objectLiteral(ret);

		        if (options.srcName) {
		          ret = ret.toStringWithSourceMap({ file: options.destName });
		          ret.map = ret.map && ret.map.toString();
		        } else {
		          ret = ret.toString();
		        }
		      } else {
		        ret.compilerOptions = this.options;
		      }

		      return ret;
		    } else {
		      return fn;
		    }
		  },

		  preamble: function preamble() {
		    // track the last context pushed into place to allow skipping the
		    // getContext opcode when it would be a noop
		    this.lastContext = 0;
		    this.source = new _codeGen2['default'](this.options.srcName);
		    this.decorators = new _codeGen2['default'](this.options.srcName);
		  },

		  createFunctionContext: function createFunctionContext(asObject) {
		    var varDeclarations = '';

		    var locals = this.stackVars.concat(this.registers.list);
		    if (locals.length > 0) {
		      varDeclarations += ', ' + locals.join(', ');
		    }

		    // Generate minimizer alias mappings
		    //
		    // When using true SourceNodes, this will update all references to the given alias
		    // as the source nodes are reused in situ. For the non-source node compilation mode,
		    // aliases will not be used, but this case is already being run on the client and
		    // we aren't concern about minimizing the template size.
		    var aliasCount = 0;
		    for (var alias in this.aliases) {
		      // eslint-disable-line guard-for-in
		      var node = this.aliases[alias];

		      if (this.aliases.hasOwnProperty(alias) && node.children && node.referenceCount > 1) {
		        varDeclarations += ', alias' + ++aliasCount + '=' + alias;
		        node.children[0] = 'alias' + aliasCount;
		      }
		    }

		    var params = ['container', 'depth0', 'helpers', 'partials', 'data'];

		    if (this.useBlockParams || this.useDepths) {
		      params.push('blockParams');
		    }
		    if (this.useDepths) {
		      params.push('depths');
		    }

		    // Perform a second pass over the output to merge content when possible
		    var source = this.mergeSource(varDeclarations);

		    if (asObject) {
		      params.push(source);

		      return Function.apply(this, params);
		    } else {
		      return this.source.wrap(['function(', params.join(','), ') {\n  ', source, '}']);
		    }
		  },
		  mergeSource: function mergeSource(varDeclarations) {
		    var isSimple = this.environment.isSimple,
		        appendOnly = !this.forceBuffer,
		        appendFirst = undefined,
		        sourceSeen = undefined,
		        bufferStart = undefined,
		        bufferEnd = undefined;
		    this.source.each(function (line) {
		      if (line.appendToBuffer) {
		        if (bufferStart) {
		          line.prepend('  + ');
		        } else {
		          bufferStart = line;
		        }
		        bufferEnd = line;
		      } else {
		        if (bufferStart) {
		          if (!sourceSeen) {
		            appendFirst = true;
		          } else {
		            bufferStart.prepend('buffer += ');
		          }
		          bufferEnd.add(';');
		          bufferStart = bufferEnd = undefined;
		        }

		        sourceSeen = true;
		        if (!isSimple) {
		          appendOnly = false;
		        }
		      }
		    });

		    if (appendOnly) {
		      if (bufferStart) {
		        bufferStart.prepend('return ');
		        bufferEnd.add(';');
		      } else if (!sourceSeen) {
		        this.source.push('return "";');
		      }
		    } else {
		      varDeclarations += ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());

		      if (bufferStart) {
		        bufferStart.prepend('return buffer + ');
		        bufferEnd.add(';');
		      } else {
		        this.source.push('return buffer;');
		      }
		    }

		    if (varDeclarations) {
		      this.source.prepend('var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\n'));
		    }

		    return this.source.merge();
		  },

		  // [blockValue]
		  //
		  // On stack, before: hash, inverse, program, value
		  // On stack, after: return value of blockHelperMissing
		  //
		  // The purpose of this opcode is to take a block of the form
		  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and
		  // replace it on the stack with the result of properly
		  // invoking blockHelperMissing.
		  blockValue: function blockValue(name) {
		    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
		        params = [this.contextName(0)];
		    this.setupHelperArgs(name, 0, params);

		    var blockName = this.popStack();
		    params.splice(1, 0, blockName);

		    this.push(this.source.functionCall(blockHelperMissing, 'call', params));
		  },

		  // [ambiguousBlockValue]
		  //
		  // On stack, before: hash, inverse, program, value
		  // Compiler value, before: lastHelper=value of last found helper, if any
		  // On stack, after, if no lastHelper: same as [blockValue]
		  // On stack, after, if lastHelper: value
		  ambiguousBlockValue: function ambiguousBlockValue() {
		    // We're being a bit cheeky and reusing the options value from the prior exec
		    var blockHelperMissing = this.aliasable('helpers.blockHelperMissing'),
		        params = [this.contextName(0)];
		    this.setupHelperArgs('', 0, params, true);

		    this.flushInline();

		    var current = this.topStack();
		    params.splice(1, 0, current);

		    this.pushSource(['if (!', this.lastHelper, ') { ', current, ' = ', this.source.functionCall(blockHelperMissing, 'call', params), '}']);
		  },

		  // [appendContent]
		  //
		  // On stack, before: ...
		  // On stack, after: ...
		  //
		  // Appends the string value of `content` to the current buffer
		  appendContent: function appendContent(content) {
		    if (this.pendingContent) {
		      content = this.pendingContent + content;
		    } else {
		      this.pendingLocation = this.source.currentLocation;
		    }

		    this.pendingContent = content;
		  },

		  // [append]
		  //
		  // On stack, before: value, ...
		  // On stack, after: ...
		  //
		  // Coerces `value` to a String and appends it to the current buffer.
		  //
		  // If `value` is truthy, or 0, it is coerced into a string and appended
		  // Otherwise, the empty string is appended
		  append: function append() {
		    if (this.isInline()) {
		      this.replaceStack(function (current) {
		        return [' != null ? ', current, ' : ""'];
		      });

		      this.pushSource(this.appendToBuffer(this.popStack()));
		    } else {
		      var local = this.popStack();
		      this.pushSource(['if (', local, ' != null) { ', this.appendToBuffer(local, undefined, true), ' }']);
		      if (this.environment.isSimple) {
		        this.pushSource(['else { ', this.appendToBuffer("''", undefined, true), ' }']);
		      }
		    }
		  },

		  // [appendEscaped]
		  //
		  // On stack, before: value, ...
		  // On stack, after: ...
		  //
		  // Escape `value` and append it to the buffer
		  appendEscaped: function appendEscaped() {
		    this.pushSource(this.appendToBuffer([this.aliasable('container.escapeExpression'), '(', this.popStack(), ')']));
		  },

		  // [getContext]
		  //
		  // On stack, before: ...
		  // On stack, after: ...
		  // Compiler value, after: lastContext=depth
		  //
		  // Set the value of the `lastContext` compiler value to the depth
		  getContext: function getContext(depth) {
		    this.lastContext = depth;
		  },

		  // [pushContext]
		  //
		  // On stack, before: ...
		  // On stack, after: currentContext, ...
		  //
		  // Pushes the value of the current context onto the stack.
		  pushContext: function pushContext() {
		    this.pushStackLiteral(this.contextName(this.lastContext));
		  },

		  // [lookupOnContext]
		  //
		  // On stack, before: ...
		  // On stack, after: currentContext[name], ...
		  //
		  // Looks up the value of `name` on the current context and pushes
		  // it onto the stack.
		  lookupOnContext: function lookupOnContext(parts, falsy, strict, scoped) {
		    var i = 0;

		    if (!scoped && this.options.compat && !this.lastContext) {
		      // The depthed query is expected to handle the undefined logic for the root level that
		      // is implemented below, so we evaluate that directly in compat mode
		      this.push(this.depthedLookup(parts[i++]));
		    } else {
		      this.pushContext();
		    }

		    this.resolvePath('context', parts, i, falsy, strict);
		  },

		  // [lookupBlockParam]
		  //
		  // On stack, before: ...
		  // On stack, after: blockParam[name], ...
		  //
		  // Looks up the value of `parts` on the given block param and pushes
		  // it onto the stack.
		  lookupBlockParam: function lookupBlockParam(blockParamId, parts) {
		    this.useBlockParams = true;

		    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);
		    this.resolvePath('context', parts, 1);
		  },

		  // [lookupData]
		  //
		  // On stack, before: ...
		  // On stack, after: data, ...
		  //
		  // Push the data lookup operator
		  lookupData: function lookupData(depth, parts, strict) {
		    if (!depth) {
		      this.pushStackLiteral('data');
		    } else {
		      this.pushStackLiteral('container.data(data, ' + depth + ')');
		    }

		    this.resolvePath('data', parts, 0, true, strict);
		  },

		  resolvePath: function resolvePath(type, parts, i, falsy, strict) {
		    // istanbul ignore next

		    var _this = this;

		    if (this.options.strict || this.options.assumeObjects) {
		      this.push(strictLookup(this.options.strict && strict, this, parts, type));
		      return;
		    }

		    var len = parts.length;
		    for (; i < len; i++) {
		      /* eslint-disable no-loop-func */
		      this.replaceStack(function (current) {
		        var lookup = _this.nameLookup(current, parts[i], type);
		        // We want to ensure that zero and false are handled properly if the context (falsy flag)
		        // needs to have the special handling for these values.
		        if (!falsy) {
		          return [' != null ? ', lookup, ' : ', current];
		        } else {
		          // Otherwise we can use generic falsy handling
		          return [' && ', lookup];
		        }
		      });
		      /* eslint-enable no-loop-func */
		    }
		  },

		  // [resolvePossibleLambda]
		  //
		  // On stack, before: value, ...
		  // On stack, after: resolved value, ...
		  //
		  // If the `value` is a lambda, replace it on the stack by
		  // the return value of the lambda
		  resolvePossibleLambda: function resolvePossibleLambda() {
		    this.push([this.aliasable('container.lambda'), '(', this.popStack(), ', ', this.contextName(0), ')']);
		  },

		  // [pushStringParam]
		  //
		  // On stack, before: ...
		  // On stack, after: string, currentContext, ...
		  //
		  // This opcode is designed for use in string mode, which
		  // provides the string value of a parameter along with its
		  // depth rather than resolving it immediately.
		  pushStringParam: function pushStringParam(string, type) {
		    this.pushContext();
		    this.pushString(type);

		    // If it's a subexpression, the string result
		    // will be pushed after this opcode.
		    if (type !== 'SubExpression') {
		      if (typeof string === 'string') {
		        this.pushString(string);
		      } else {
		        this.pushStackLiteral(string);
		      }
		    }
		  },

		  emptyHash: function emptyHash(omitEmpty) {
		    if (this.trackIds) {
		      this.push('{}'); // hashIds
		    }
		    if (this.stringParams) {
		      this.push('{}'); // hashContexts
		      this.push('{}'); // hashTypes
		    }
		    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');
		  },
		  pushHash: function pushHash() {
		    if (this.hash) {
		      this.hashes.push(this.hash);
		    }
		    this.hash = { values: [], types: [], contexts: [], ids: [] };
		  },
		  popHash: function popHash() {
		    var hash = this.hash;
		    this.hash = this.hashes.pop();

		    if (this.trackIds) {
		      this.push(this.objectLiteral(hash.ids));
		    }
		    if (this.stringParams) {
		      this.push(this.objectLiteral(hash.contexts));
		      this.push(this.objectLiteral(hash.types));
		    }

		    this.push(this.objectLiteral(hash.values));
		  },

		  // [pushString]
		  //
		  // On stack, before: ...
		  // On stack, after: quotedString(string), ...
		  //
		  // Push a quoted version of `string` onto the stack
		  pushString: function pushString(string) {
		    this.pushStackLiteral(this.quotedString(string));
		  },

		  // [pushLiteral]
		  //
		  // On stack, before: ...
		  // On stack, after: value, ...
		  //
		  // Pushes a value onto the stack. This operation prevents
		  // the compiler from creating a temporary variable to hold
		  // it.
		  pushLiteral: function pushLiteral(value) {
		    this.pushStackLiteral(value);
		  },

		  // [pushProgram]
		  //
		  // On stack, before: ...
		  // On stack, after: program(guid), ...
		  //
		  // Push a program expression onto the stack. This takes
		  // a compile-time guid and converts it into a runtime-accessible
		  // expression.
		  pushProgram: function pushProgram(guid) {
		    if (guid != null) {
		      this.pushStackLiteral(this.programExpression(guid));
		    } else {
		      this.pushStackLiteral(null);
		    }
		  },

		  // [registerDecorator]
		  //
		  // On stack, before: hash, program, params..., ...
		  // On stack, after: ...
		  //
		  // Pops off the decorator's parameters, invokes the decorator,
		  // and inserts the decorator into the decorators list.
		  registerDecorator: function registerDecorator(paramSize, name) {
		    var foundDecorator = this.nameLookup('decorators', name, 'decorator'),
		        options = this.setupHelperArgs(name, paramSize);

		    this.decorators.push(['fn = ', this.decorators.functionCall(foundDecorator, '', ['fn', 'props', 'container', options]), ' || fn;']);
		  },

		  // [invokeHelper]
		  //
		  // On stack, before: hash, inverse, program, params..., ...
		  // On stack, after: result of helper invocation
		  //
		  // Pops off the helper's parameters, invokes the helper,
		  // and pushes the helper's return value onto the stack.
		  //
		  // If the helper is not found, `helperMissing` is called.
		  invokeHelper: function invokeHelper(paramSize, name, isSimple) {
		    var nonHelper = this.popStack(),
		        helper = this.setupHelper(paramSize, name),
		        simple = isSimple ? [helper.name, ' || '] : '';

		    var lookup = ['('].concat(simple, nonHelper);
		    if (!this.options.strict) {
		      lookup.push(' || ', this.aliasable('helpers.helperMissing'));
		    }
		    lookup.push(')');

		    this.push(this.source.functionCall(lookup, 'call', helper.callParams));
		  },

		  // [invokeKnownHelper]
		  //
		  // On stack, before: hash, inverse, program, params..., ...
		  // On stack, after: result of helper invocation
		  //
		  // This operation is used when the helper is known to exist,
		  // so a `helperMissing` fallback is not required.
		  invokeKnownHelper: function invokeKnownHelper(paramSize, name) {
		    var helper = this.setupHelper(paramSize, name);
		    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));
		  },

		  // [invokeAmbiguous]
		  //
		  // On stack, before: hash, inverse, program, params..., ...
		  // On stack, after: result of disambiguation
		  //
		  // This operation is used when an expression like `{{foo}}`
		  // is provided, but we don't know at compile-time whether it
		  // is a helper or a path.
		  //
		  // This operation emits more code than the other options,
		  // and can be avoided by passing the `knownHelpers` and
		  // `knownHelpersOnly` flags at compile-time.
		  invokeAmbiguous: function invokeAmbiguous(name, helperCall) {
		    this.useRegister('helper');

		    var nonHelper = this.popStack();

		    this.emptyHash();
		    var helper = this.setupHelper(0, name, helperCall);

		    var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

		    var lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];
		    if (!this.options.strict) {
		      lookup[0] = '(helper = ';
		      lookup.push(' != null ? helper : ', this.aliasable('helpers.helperMissing'));
		    }

		    this.push(['(', lookup, helper.paramsInit ? ['),(', helper.paramsInit] : [], '),', '(typeof helper === ', this.aliasable('"function"'), ' ? ', this.source.functionCall('helper', 'call', helper.callParams), ' : helper))']);
		  },

		  // [invokePartial]
		  //
		  // On stack, before: context, ...
		  // On stack after: result of partial invocation
		  //
		  // This operation pops off a context, invokes a partial with that context,
		  // and pushes the result of the invocation back.
		  invokePartial: function invokePartial(isDynamic, name, indent) {
		    var params = [],
		        options = this.setupParams(name, 1, params);

		    if (isDynamic) {
		      name = this.popStack();
		      delete options.name;
		    }

		    if (indent) {
		      options.indent = JSON.stringify(indent);
		    }
		    options.helpers = 'helpers';
		    options.partials = 'partials';
		    options.decorators = 'container.decorators';

		    if (!isDynamic) {
		      params.unshift(this.nameLookup('partials', name, 'partial'));
		    } else {
		      params.unshift(name);
		    }

		    if (this.options.compat) {
		      options.depths = 'depths';
		    }
		    options = this.objectLiteral(options);
		    params.push(options);

		    this.push(this.source.functionCall('container.invokePartial', '', params));
		  },

		  // [assignToHash]
		  //
		  // On stack, before: value, ..., hash, ...
		  // On stack, after: ..., hash, ...
		  //
		  // Pops a value off the stack and assigns it to the current hash
		  assignToHash: function assignToHash(key) {
		    var value = this.popStack(),
		        context = undefined,
		        type = undefined,
		        id = undefined;

		    if (this.trackIds) {
		      id = this.popStack();
		    }
		    if (this.stringParams) {
		      type = this.popStack();
		      context = this.popStack();
		    }

		    var hash = this.hash;
		    if (context) {
		      hash.contexts[key] = context;
		    }
		    if (type) {
		      hash.types[key] = type;
		    }
		    if (id) {
		      hash.ids[key] = id;
		    }
		    hash.values[key] = value;
		  },

		  pushId: function pushId(type, name, child) {
		    if (type === 'BlockParam') {
		      this.pushStackLiteral('blockParams[' + name[0] + '].path[' + name[1] + ']' + (child ? ' + ' + JSON.stringify('.' + child) : ''));
		    } else if (type === 'PathExpression') {
		      this.pushString(name);
		    } else if (type === 'SubExpression') {
		      this.pushStackLiteral('true');
		    } else {
		      this.pushStackLiteral('null');
		    }
		  },

		  // HELPERS

		  compiler: JavaScriptCompiler,

		  compileChildren: function compileChildren(environment, options) {
		    var children = environment.children,
		        child = undefined,
		        compiler = undefined;

		    for (var i = 0, l = children.length; i < l; i++) {
		      child = children[i];
		      compiler = new this.compiler(); // eslint-disable-line new-cap

		      var existing = this.matchExistingProgram(child);

		      if (existing == null) {
		        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children
		        var index = this.context.programs.length;
		        child.index = index;
		        child.name = 'program' + index;
		        this.context.programs[index] = compiler.compile(child, options, this.context, !this.precompile);
		        this.context.decorators[index] = compiler.decorators;
		        this.context.environments[index] = child;

		        this.useDepths = this.useDepths || compiler.useDepths;
		        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;
		        child.useDepths = this.useDepths;
		        child.useBlockParams = this.useBlockParams;
		      } else {
		        child.index = existing.index;
		        child.name = 'program' + existing.index;

		        this.useDepths = this.useDepths || existing.useDepths;
		        this.useBlockParams = this.useBlockParams || existing.useBlockParams;
		      }
		    }
		  },
		  matchExistingProgram: function matchExistingProgram(child) {
		    for (var i = 0, len = this.context.environments.length; i < len; i++) {
		      var environment = this.context.environments[i];
		      if (environment && environment.equals(child)) {
		        return environment;
		      }
		    }
		  },

		  programExpression: function programExpression(guid) {
		    var child = this.environment.children[guid],
		        programParams = [child.index, 'data', child.blockParams];

		    if (this.useBlockParams || this.useDepths) {
		      programParams.push('blockParams');
		    }
		    if (this.useDepths) {
		      programParams.push('depths');
		    }

		    return 'container.program(' + programParams.join(', ') + ')';
		  },

		  useRegister: function useRegister(name) {
		    if (!this.registers[name]) {
		      this.registers[name] = true;
		      this.registers.list.push(name);
		    }
		  },

		  push: function push(expr) {
		    if (!(expr instanceof Literal)) {
		      expr = this.source.wrap(expr);
		    }

		    this.inlineStack.push(expr);
		    return expr;
		  },

		  pushStackLiteral: function pushStackLiteral(item) {
		    this.push(new Literal(item));
		  },

		  pushSource: function pushSource(source) {
		    if (this.pendingContent) {
		      this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent), this.pendingLocation));
		      this.pendingContent = undefined;
		    }

		    if (source) {
		      this.source.push(source);
		    }
		  },

		  replaceStack: function replaceStack(callback) {
		    var prefix = ['('],
		        stack = undefined,
		        createdStack = undefined,
		        usedLiteral = undefined;

		    /* istanbul ignore next */
		    if (!this.isInline()) {
		      throw new _exception2['default']('replaceStack on non-inline');
		    }

		    // We want to merge the inline statement into the replacement statement via ','
		    var top = this.popStack(true);

		    if (top instanceof Literal) {
		      // Literals do not need to be inlined
		      stack = [top.value];
		      prefix = ['(', stack];
		      usedLiteral = true;
		    } else {
		      // Get or create the current stack name for use by the inline
		      createdStack = true;
		      var _name = this.incrStack();

		      prefix = ['((', this.push(_name), ' = ', top, ')'];
		      stack = this.topStack();
		    }

		    var item = callback.call(this, stack);

		    if (!usedLiteral) {
		      this.popStack();
		    }
		    if (createdStack) {
		      this.stackSlot--;
		    }
		    this.push(prefix.concat(item, ')'));
		  },

		  incrStack: function incrStack() {
		    this.stackSlot++;
		    if (this.stackSlot > this.stackVars.length) {
		      this.stackVars.push('stack' + this.stackSlot);
		    }
		    return this.topStackName();
		  },
		  topStackName: function topStackName() {
		    return 'stack' + this.stackSlot;
		  },
		  flushInline: function flushInline() {
		    var inlineStack = this.inlineStack;
		    this.inlineStack = [];
		    for (var i = 0, len = inlineStack.length; i < len; i++) {
		      var entry = inlineStack[i];
		      /* istanbul ignore if */
		      if (entry instanceof Literal) {
		        this.compileStack.push(entry);
		      } else {
		        var stack = this.incrStack();
		        this.pushSource([stack, ' = ', entry, ';']);
		        this.compileStack.push(stack);
		      }
		    }
		  },
		  isInline: function isInline() {
		    return this.inlineStack.length;
		  },

		  popStack: function popStack(wrapped) {
		    var inline = this.isInline(),
		        item = (inline ? this.inlineStack : this.compileStack).pop();

		    if (!wrapped && item instanceof Literal) {
		      return item.value;
		    } else {
		      if (!inline) {
		        /* istanbul ignore next */
		        if (!this.stackSlot) {
		          throw new _exception2['default']('Invalid stack pop');
		        }
		        this.stackSlot--;
		      }
		      return item;
		    }
		  },

		  topStack: function topStack() {
		    var stack = this.isInline() ? this.inlineStack : this.compileStack,
		        item = stack[stack.length - 1];

		    /* istanbul ignore if */
		    if (item instanceof Literal) {
		      return item.value;
		    } else {
		      return item;
		    }
		  },

		  contextName: function contextName(context) {
		    if (this.useDepths && context) {
		      return 'depths[' + context + ']';
		    } else {
		      return 'depth' + context;
		    }
		  },

		  quotedString: function quotedString(str) {
		    return this.source.quotedString(str);
		  },

		  objectLiteral: function objectLiteral(obj) {
		    return this.source.objectLiteral(obj);
		  },

		  aliasable: function aliasable(name) {
		    var ret = this.aliases[name];
		    if (ret) {
		      ret.referenceCount++;
		      return ret;
		    }

		    ret = this.aliases[name] = this.source.wrap(name);
		    ret.aliasable = true;
		    ret.referenceCount = 1;

		    return ret;
		  },

		  setupHelper: function setupHelper(paramSize, name, blockHelper) {
		    var params = [],
		        paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);
		    var foundHelper = this.nameLookup('helpers', name, 'helper'),
		        callContext = this.aliasable(this.contextName(0) + ' != null ? ' + this.contextName(0) + ' : {}');

		    return {
		      params: params,
		      paramsInit: paramsInit,
		      name: foundHelper,
		      callParams: [callContext].concat(params)
		    };
		  },

		  setupParams: function setupParams(helper, paramSize, params) {
		    var options = {},
		        contexts = [],
		        types = [],
		        ids = [],
		        objectArgs = !params,
		        param = undefined;

		    if (objectArgs) {
		      params = [];
		    }

		    options.name = this.quotedString(helper);
		    options.hash = this.popStack();

		    if (this.trackIds) {
		      options.hashIds = this.popStack();
		    }
		    if (this.stringParams) {
		      options.hashTypes = this.popStack();
		      options.hashContexts = this.popStack();
		    }

		    var inverse = this.popStack(),
		        program = this.popStack();

		    // Avoid setting fn and inverse if neither are set. This allows
		    // helpers to do a check for `if (options.fn)`
		    if (program || inverse) {
		      options.fn = program || 'container.noop';
		      options.inverse = inverse || 'container.noop';
		    }

		    // The parameters go on to the stack in order (making sure that they are evaluated in order)
		    // so we need to pop them off the stack in reverse order
		    var i = paramSize;
		    while (i--) {
		      param = this.popStack();
		      params[i] = param;

		      if (this.trackIds) {
		        ids[i] = this.popStack();
		      }
		      if (this.stringParams) {
		        types[i] = this.popStack();
		        contexts[i] = this.popStack();
		      }
		    }

		    if (objectArgs) {
		      options.args = this.source.generateArray(params);
		    }

		    if (this.trackIds) {
		      options.ids = this.source.generateArray(ids);
		    }
		    if (this.stringParams) {
		      options.types = this.source.generateArray(types);
		      options.contexts = this.source.generateArray(contexts);
		    }

		    if (this.options.data) {
		      options.data = 'data';
		    }
		    if (this.useBlockParams) {
		      options.blockParams = 'blockParams';
		    }
		    return options;
		  },

		  setupHelperArgs: function setupHelperArgs(helper, paramSize, params, useRegister) {
		    var options = this.setupParams(helper, paramSize, params);
		    options = this.objectLiteral(options);
		    if (useRegister) {
		      this.useRegister('options');
		      params.push('options');
		      return ['options=', options];
		    } else if (params) {
		      params.push(options);
		      return '';
		    } else {
		      return options;
		    }
		  }
		};

		(function () {
		  var reservedWords = ('break else new var' + ' case finally return void' + ' catch for switch while' + ' continue function this with' + ' default if throw' + ' delete in try' + ' do instanceof typeof' + ' abstract enum int short' + ' boolean export interface static' + ' byte extends long super' + ' char final native synchronized' + ' class float package throws' + ' const goto private transient' + ' debugger implements protected volatile' + ' double import public let yield await' + ' null true false').split(' ');

		  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

		  for (var i = 0, l = reservedWords.length; i < l; i++) {
		    compilerWords[reservedWords[i]] = true;
		  }
		})();

		JavaScriptCompiler.isValidJavaScriptVariableName = function (name) {
		  return !JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name);
		};

		function strictLookup(requireTerminal, compiler, parts, type) {
		  var stack = compiler.popStack(),
		      i = 0,
		      len = parts.length;
		  if (requireTerminal) {
		    len--;
		  }

		  for (; i < len; i++) {
		    stack = compiler.nameLookup(stack, parts[i], type);
		  }

		  if (requireTerminal) {
		    return [compiler.aliasable('container.strict'), '(', stack, ', ', compiler.quotedString(parts[i]), ')'];
		  } else {
		    return stack;
		  }
		}

		exports['default'] = JavaScriptCompiler;
		module.exports = exports['default'];

	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {

		/* global define */
		'use strict';

		exports.__esModule = true;

		var _utils = __webpack_require__(5);

		var SourceNode = undefined;

		try {
		  /* istanbul ignore next */
		  if (false) {
		    // We don't support this in AMD environments. For these environments, we asusme that
		    // they are running on the browser and thus have no need for the source-map library.
		    var SourceMap = require('source-map');
		    SourceNode = SourceMap.SourceNode;
		  }
		} catch (err) {}
		/* NOP */

		/* istanbul ignore if: tested but not covered in istanbul due to dist build  */
		if (!SourceNode) {
		  SourceNode = function (line, column, srcFile, chunks) {
		    this.src = '';
		    if (chunks) {
		      this.add(chunks);
		    }
		  };
		  /* istanbul ignore next */
		  SourceNode.prototype = {
		    add: function add(chunks) {
		      if (_utils.isArray(chunks)) {
		        chunks = chunks.join('');
		      }
		      this.src += chunks;
		    },
		    prepend: function prepend(chunks) {
		      if (_utils.isArray(chunks)) {
		        chunks = chunks.join('');
		      }
		      this.src = chunks + this.src;
		    },
		    toStringWithSourceMap: function toStringWithSourceMap() {
		      return { code: this.toString() };
		    },
		    toString: function toString() {
		      return this.src;
		    }
		  };
		}

		function castChunk(chunk, codeGen, loc) {
		  if (_utils.isArray(chunk)) {
		    var ret = [];

		    for (var i = 0, len = chunk.length; i < len; i++) {
		      ret.push(codeGen.wrap(chunk[i], loc));
		    }
		    return ret;
		  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {
		    // Handle primitives that the SourceNode will throw up on
		    return chunk + '';
		  }
		  return chunk;
		}

		function CodeGen(srcFile) {
		  this.srcFile = srcFile;
		  this.source = [];
		}

		CodeGen.prototype = {
		  isEmpty: function isEmpty() {
		    return !this.source.length;
		  },
		  prepend: function prepend(source, loc) {
		    this.source.unshift(this.wrap(source, loc));
		  },
		  push: function push(source, loc) {
		    this.source.push(this.wrap(source, loc));
		  },

		  merge: function merge() {
		    var source = this.empty();
		    this.each(function (line) {
		      source.add(['  ', line, '\n']);
		    });
		    return source;
		  },

		  each: function each(iter) {
		    for (var i = 0, len = this.source.length; i < len; i++) {
		      iter(this.source[i]);
		    }
		  },

		  empty: function empty() {
		    var loc = this.currentLocation || { start: {} };
		    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);
		  },
		  wrap: function wrap(chunk) {
		    var loc = arguments.length <= 1 || arguments[1] === undefined ? this.currentLocation || { start: {} } : arguments[1];

		    if (chunk instanceof SourceNode) {
		      return chunk;
		    }

		    chunk = castChunk(chunk, this, loc);

		    return new SourceNode(loc.start.line, loc.start.column, this.srcFile, chunk);
		  },

		  functionCall: function functionCall(fn, type, params) {
		    params = this.generateList(params);
		    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);
		  },

		  quotedString: function quotedString(str) {
		    return '"' + (str + '').replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\u2028/g, '\\u2028') // Per Ecma-262 7.3 + 7.8.4
		    .replace(/\u2029/g, '\\u2029') + '"';
		  },

		  objectLiteral: function objectLiteral(obj) {
		    var pairs = [];

		    for (var key in obj) {
		      if (obj.hasOwnProperty(key)) {
		        var value = castChunk(obj[key], this);
		        if (value !== 'undefined') {
		          pairs.push([this.quotedString(key), ':', value]);
		        }
		      }
		    }

		    var ret = this.generateList(pairs);
		    ret.prepend('{');
		    ret.add('}');
		    return ret;
		  },

		  generateList: function generateList(entries) {
		    var ret = this.empty();

		    for (var i = 0, len = entries.length; i < len; i++) {
		      if (i) {
		        ret.add(',');
		      }

		      ret.add(castChunk(entries[i], this));
		    }

		    return ret;
		  },

		  generateArray: function generateArray(entries) {
		    var ret = this.generateList(entries);
		    ret.prepend('[');
		    ret.add(']');

		    return ret;
		  }
		};

		exports['default'] = CodeGen;
		module.exports = exports['default'];

	/***/ }
	/******/ ])
	});
	;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(7), __webpack_require__(9)], __WEBPACK_AMD_DEFINE_RESULT__ = function (_, Cookie) {

	  var SECURED_COOKIE = /^https/.test(window.location.href);

	  return {
	    setCookie: function setCookie(name, value, options) {
	      Cookie.set(name, value, _.defaults(options || {}, {
	        secure: SECURED_COOKIE,
	        path: '/'
	      }));
	    },

	    getCookie: function getCookie() {
	      return Cookie.get.apply(Cookie, arguments);
	    },

	    removeCookie: function removeCookie() {
	      return Cookie.remove.apply(Cookie, arguments);
	    }
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	/* eslint okta/enforce-requirejs-names: 0, okta/no-specific-methods: 0, okta/no-specific-modules: 0 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(8), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (underscore, Handlebars) {

	  var _ = underscore.noConflict();

	  _.mixin({

	    resultCtx: function resultCtx(object, property, context, defaultValue) {
	      var value = _.isObject(object) ? object[property] : void 0;
	      if (_.isFunction(value)) {
	        value = value.call(context || object);
	      }
	      if (value) {
	        return value;
	      } else {
	        return !_.isUndefined(defaultValue) ? defaultValue : value;
	      }
	    },

	    isInteger: function isInteger(x) {
	      return _.isNumber(x) && x % 1 === 0;
	    },

	    template: function template(source, data) {
	      var template = Handlebars.compile(source);
	      return data ? template(data) : function (data) {
	        return template(data);
	      };
	    }

	  });

	  return _;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.8.3
	//     http://underscorejs.org
	//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind,
	    nativeCreate       = Object.create;

	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.8.3';

	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };

	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value)) return _.matcher(value);
	    return _.property(value);
	  };
	  _.iteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };

	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, undefinedOnly) {
	    return function(obj) {
	      var length = arguments.length;
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };

	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };

	  var property = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };

	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = property('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };

	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Optimized iterator function as using arguments.length
	    // in the main function will deoptimize the, see #1991.
	    function iterator(obj, iteratee, memo, keys, index, length) {
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    }

	    return function(obj, iteratee, memo, context) {
	      iteratee = optimizeCb(iteratee, context, 4);
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      // Determine the initial value if none is provided.
	      if (arguments.length < 3) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      return iterator(obj, iteratee, memo, keys, index, length);
	    };
	  }

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);

	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var key;
	    if (isArrayLike(obj)) {
	      key = _.findIndex(obj, predicate, context);
	    } else {
	      key = _.findKey(obj, predicate, context);
	    }
	    if (key !== void 0 && key !== -1) return obj[key];
	  };

	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };

	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      var func = isFunc ? method : value[method];
	      return func == null ? func : func.apply(value, args);
	    });
	  };

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };

	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = isArrayLike(obj) ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };

	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };

	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });

	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };

	  // Split a collection into two arrays: one whose elements all satisfy the give", "base64"));
  res.write(new Buffer("n
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, startIndex) {
	    var output = [], idx = 0;
	    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        //flatten current level of array or arguments object
	        if (!shallow) value = flatten(value, shallow, strict);
	        var j = 0, len = value.length;
	        output.length += len;
	        while (j < len) {
	          output[idx++] = value[j++];
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };

	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true));
	  };

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(arguments, true, true, 1);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function() {
	    return _.unzip(arguments);
	  };

	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);

	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // Generator function to create the findIndex and findLastIndex functions
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }

	  // Returns the first index on an array-like that passes a predicate test
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };

	  // Generator function to create the indexOf and lastIndexOf functions
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	            i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }

	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);

	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }

	    return range;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var args = slice.call(arguments, 2);
	    var bound = function() {
	      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
	    };
	    return bound;
	  };

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  };

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;

	    var later = function() {
	      var last = _.now() - timestamp;

	      if (last < wait && last >= 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };

	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }

	      return result;
	    };
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };

	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };

	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);

	  // Object Functions
	  // ----------------

	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	  function collectNonEnumProps(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  }

	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };

	  // Returns the results of applying the iteratee to each element of the object
	  // In contrast to _.map it returns an object
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys =  _.keys(obj),
	          length = keys.length,
	          results = {},
	          currentKey;
	      for (var index = 0; index < length; index++) {
	        currentKey = keys[index];
	        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	      }
	      return results;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);

	  // Assigns a given object with all the own properties in the passed-in object(s)
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);

	  // Returns the first key on an object that passes a predicate test
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(object, oiteratee, context) {
	    var result = {}, obj = object, iteratee, keys;
	    if (obj == null) return result;
	    if (_.isFunction(oiteratee)) {
	      keys = _.allKeys(obj);
	      iteratee = optimizeCb(oiteratee, context);
	    } else {
	      keys = flatten(arguments, false, false, 1);
	      iteratee = function(value, key, obj) { return key in obj; };
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  };

	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(flatten(arguments, false, false, 1), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };

	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);

	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };


	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }

	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;

	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }

	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);

	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }

	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), and in Safari 8 (#1929).
	  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };

	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };

	  _.noop = function(){};

	  _.property = property;

	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    return obj == null ? function(){} : function(key) {
	      return obj[key];
	    };
	  };

	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };

	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };

	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);

	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property, fallback) {
	    var value = object == null ? void 0 : object[property];
	    if (value === void 0) {
	      value = fallback;
	    }
	    return _.isFunction(value) ? value.call(object) : value;
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }

	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';

	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var result = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result(this, func.apply(_, args));
	      };
	    });
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };

	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

	  _.prototype.toString = function() {
	    return '' + this._wrapped;
	  };

	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * JavaScript Cookie v2.1.0
	 * https://github.com/js-cookie/js-cookie
	 *
	 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
	 * Released under the MIT license
	 */
	(function (factory) {
		if (true) {
			!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof exports === 'object') {
			module.exports = factory();
		} else {
			var _OldCookies = window.Cookies;
			var api = window.Cookies = factory();
			api.noConflict = function () {
				window.Cookies = _OldCookies;
				return api;
			};
		}
	}(function () {
		function extend () {
			var i = 0;
			var result = {};
			for (; i < arguments.length; i++) {
				var attributes = arguments[ i ];
				for (var key in attributes) {
					result[key] = attributes[key];
				}
			}
			return result;
		}

		function init (converter) {
			function api (key, value, attributes) {
				var result;

				// Write

				if (arguments.length > 1) {
					attributes = extend({
						path: '/'
					}, api.defaults, attributes);

					if (typeof attributes.expires === 'number') {
						var expires = new Date();
						expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);
						attributes.expires = expires;
					}

					try {
						result = JSON.stringify(value);
						if (/^[\{\[]/.test(result)) {
							value = result;
						}
					} catch (e) {}

					if (!converter.write) {
						value = encodeURIComponent(String(value))
							.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
					} else {
						value = converter.write(value, key);
					}

					key = encodeURIComponent(String(key));
					key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
					key = key.replace(/[\(\)]/g, escape);

					return (document.cookie = [
						key, '=', value,
						attributes.expires && '; expires=' + attributes.expires.toUTCString(), // use expires attribute, max-age is not supported by IE
						attributes.path    && '; path=' + attributes.path,
						attributes.domain  && '; domain=' + attributes.domain,
						attributes.secure ? '; secure' : ''
					].join(''));
				}

				// Read

				if (!key) {
					result = {};
				}

				// To prevent the for loop in the first place assign an empty array
				// in case there are no cookies at all. Also prevents odd result when
				// calling "get()"
				var cookies = document.cookie ? document.cookie.split('; ') : [];
				var rdecode = /(%[0-9A-Z]{2})+/g;
				var i = 0;

				for (; i < cookies.length; i++) {
					var parts = cookies[i].split('=');
					var name = parts[0].replace(rdecode, decodeURIComponent);
					var cookie = parts.slice(1).join('=');

					if (cookie.charAt(0) === '"') {
						cookie = cookie.slice(1, -1);
					}

					try {
						cookie = converter.read ?
							converter.read(cookie, name) : converter(cookie, name) ||
							cookie.replace(rdecode, decodeURIComponent);

						if (this.json) {
							try {
								cookie = JSON.parse(cookie);
							} catch (e) {}
						}

						if (key === name) {
							result = cookie;
							break;
						}

						if (!key) {
							result[name] = cookie;
						}
					} catch (e) {}
				}

				return result;
			}

			api.get = api.set = api;
			api.getJSON = function () {
				return api.apply({
					json: true
				}, [].slice.call(arguments));
			};
			api.defaults = {};

			api.remove = function (key, attributes) {
				api(key, '', extend(attributes, {
					expires: -1
				}));
			};

			api.withConverter = init;

			return api;
		}

		return init(function () {});
	}));


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	!(module.exports = {
	  "country": "country.d553e4daed9d0c4c378a30d77d9f7e3c",
	  "country_cs": "country_cs.86a6e794814978550fe3d00b2e02a1cb",
	  "country_da": "country_da.1398e9a9a36a8881c92f44bbd274625f",
	  "country_de": "country_de.3623ea860bb982f35be88d733f85034a",
	  "country_es": "country_es.3207169b0c5307c414ff9a0e07613d32",
	  "country_fi": "country_fi.38b3bcf05a42a6c44085aa55c7357299",
	  "country_fr": "country_fr.9606e8260eb094475f5d3ecca8def14b",
	  "country_hu": "country_hu.75f4214df5141ced300d64fee0c9111e",
	  "country_id": "country_id.0193913212f1fb70b9d234a29794238c",
	  "country_in": "country_in.0193913212f1fb70b9d234a29794238c",
	  "country_it": "country_it.27a757f13fe0fcdb84bfbbbcb4a4c465",
	  "country_ja": "country_ja.ea9e114dcc70b228cbdaef5f4e6c085d",
	  "country_ko": "country_ko.ec8f39020ac9477e2f800b8657ff68e6",
	  "country_ms": "country_ms.4d492a39ddbe610a8222df32c341d514",
	  "country_nl_NL": "country_nl_NL.3ef15b9abc1d370f7758bdfd0d6a736a",
	  "country_pl": "country_pl.38f071ca9724689034fa014b153b6387",
	  "country_pt_BR": "country_pt_BR.46d1c5a2fd0ca884ea5993695bd52d72",
	  "country_ro": "country_ro.a33d7a4760506a5d02ff084819bb6110",
	  "country_ru": "country_ru.cab70b13a87f9d274bbee8c5ad79411c",
	  "country_sv": "country_sv.b2869a992cf4660d0000f3180f1b7e21",
	  "country_th": "country_th.c67aeee98da0519b4e051ea030903322",
	  "country_uk": "country_uk.89eea56d197ee3693b4f65dd0d8d3a6a",
	  "country_zh_CN": "country_zh_CN.06fc5ae13a49e24ce0c6bf763a967016",
	  "country_zh_TW": "country_zh_TW.bf63fd762c1fe1e25f5a8f4c493529e5",
	  "login": "login.1ea81d079e36882816c59926853ac742",
	  "login_cs": "login_cs.412e6f2d175372d033d5adcc10a34352",
	  "login_da": "login_da.96a082342eefd073429f7991efacd0dd",
	  "login_de": "login_de.b87374c7076e611fe44ddb31f749fbe1",
	  "login_es": "login_es.347dea41fcfadfc7cb974267927644f6",
	  "login_fi": "login_fi.043d397fe2ca718a8ccd5c9cd9e3b794",
	  "login_fr": "login_fr.a4663d951e60e7118a1597b2e0e37690",
	  "login_hu": "login_hu.1aa2b3da6000a7b85637a424ea5b8b6c",
	  "login_id": "login_id.35c20f0f9dcf06b5c485cd8a9611e6be",
	  "login_in": "login_in.35c20f0f9dcf06b5c485cd8a9611e6be",
	  "login_it": "login_it.392a2d37a5674dbd489da9fd7366c166",
	  "login_ja": "login_ja.4e29db783c6850eb086069be454bc7c6",
	  "login_ko": "login_ko.7e04bb78ab72ab8a3507ae921207117a",
	  "login_ms": "login_ms.0d1ce38b13b0b1e6b9fa674d4c1e1627",
	  "login_nl_NL": "login_nl_NL.236a3d55f35a9b41d21cf643860f9890",
	  "login_pl": "login_pl.1d4fb75e2f649647d92aedc385e67aa3",
	  "login_pt_BR": "login_pt_BR.3b1bdd72900d143c40154679f801cfb4",
	  "login_ro": "login_ro.83d59ae9231a79f6fb0ee016bbb649c4",
	  "login_ru": "login_ru.0dbb5aa33a7401d1c48e9caf66249c7b",
	  "login_sv": "login_sv.dcca388a5768843062a1a1f0c0820e97",
	  "login_th": "login_th.15fbffadf64574fdbfbbd31ec006f226",
	  "login_uk": "login_uk.a36dbeb0136fc985f947130af53a11e1",
	  "login_zh_CN": "login_zh_CN.c569c95c3a34a172b9a239278c069b07",
	  "login_zh_TW": "login_zh_TW.cdbf4cc4efa9e08d04a02e2a13a2ebf5"
	});

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery Browser Plugin 0.1.0
	 * https://github.com/gabceb/jquery-browser-plugin
	 *
	 * Original jquery-browser code Copyright 2005, 2015 jQuery Foundation, Inc. and other contributors
	 * http://jquery.org/license
	 *
	 * Modifications Copyright 2015 Gabriel Cebrian
	 * https://github.com/gabceb
	 *
	 * Released under the MIT license
	 *
	 * Date: 05-07-2015
	 */
	/*global window: false */

	(function (factory) {
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($) {
	      return factory($);
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof module === 'object' && typeof module.exports === 'object') {
	    // Node-like environment
	    module.exports = factory(require('jquery'));
	  } else {
	    // Browser globals
	    factory(window.jQuery);
	  }
	}(function(jQuery) {
	  "use strict";

	  function uaMatch( ua ) {
	    // If an UA is not provided, default to the current browser UA.
	    if ( ua === undefined ) {
	      ua = window.navigator.userAgent;
	    }
	    ua = ua.toLowerCase();

	    var match = /(edge)\/([\w.]+)/.exec( ua ) ||
	        /(opr)[\/]([\w.]+)/.exec( ua ) ||
	        /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
	        /(iemobile)[\/]([\w.]+)/.exec( ua ) ||
	        /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec( ua ) ||
	        /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec( ua ) ||
	        /(webkit)[ \/]([\w.]+)/.exec( ua ) ||
	        /(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
	        /(msie) ([\w.]+)/.exec( ua ) ||
	        ua.indexOf("trident") >= 0 && /(rv)(?::| )([\w.]+)/.exec( ua ) ||
	        ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
	        [];

	    var platform_match = /(ipad)/.exec( ua ) ||
	        /(ipod)/.exec( ua ) ||
	        /(windows phone)/.exec( ua ) ||
	        /(iphone)/.exec( ua ) ||
	        /(kindle)/.exec( ua ) ||
	        /(silk)/.exec( ua ) ||
	        /(android)/.exec( ua ) ||
	        /(win)/.exec( ua ) ||
	        /(mac)/.exec( ua ) ||
	        /(linux)/.exec( ua ) ||
	        /(cros)/.exec( ua ) ||
	        /(playbook)/.exec( ua ) ||
	        /(bb)/.exec( ua ) ||
	        /(blackberry)/.exec( ua ) ||
	        [];

	    var browser = {},
	        matched = {
	          browser: match[ 5 ] || match[ 3 ] || match[ 1 ] || "",
	          version: match[ 2 ] || match[ 4 ] || "0",
	          versionNumber: match[ 4 ] || match[ 2 ] || "0",
	          platform: platform_match[ 0 ] || ""
	        };

	    if ( matched.browser ) {
	      browser[ matched.browser ] = true;
	      browser.version = matched.version;
	      browser.versionNumber = parseInt(matched.versionNumber, 10);
	    }

	    if ( matched.platform ) {
	      browser[ matched.platform ] = true;
	    }

	    // These are all considered mobile platforms, meaning they run a mobile browser
	    if ( browser.android || browser.bb || browser.blackberry || browser.ipad || browser.iphone ||
	      browser.ipod || browser.kindle || browser.playbook || browser.silk || browser[ "windows phone" ]) {
	      browser.mobile = true;
	    }

	    // These are all considered desktop platforms, meaning they run a desktop browser
	    if ( browser.cros || browser.mac || browser.linux || browser.win ) {
	      browser.desktop = true;
	    }

	    // Chrome, Opera 15+ and Safari are webkit based browsers
	    if ( browser.chrome || browser.opr || browser.safari ) {
	      browser.webkit = true;
	    }

	    // IE11 has a new token so we will assign it msie to avoid breaking changes
	    if ( browser.rv || browser.iemobile) {
	      var ie = "msie";

	      matched.browser = ie;
	      browser[ie] = true;
	    }

	    // Edge is officially known as Microsoft Edge, so rewrite the key to match
	    if ( browser.edge ) {
	      delete browser.edge;
	      var msedge = "msedge";

	      matched.browser = msedge;
	      browser[msedge] = true;
	    }

	    // Blackberry browsers are marked as Safari on BlackBerry
	    if ( browser.safari && browser.blackberry ) {
	      var blackberry = "blackberry";

	      matched.browser = blackberry;
	      browser[blackberry] = true;
	    }

	    // Playbook browsers are marked as Safari on Playbook
	    if ( browser.safari && browser.playbook ) {
	      var playbook = "playbook";

	      matched.browser = playbook;
	      browser[playbook] = true;
	    }

	    // BB10 is a newer OS version of BlackBerry
	    if ( browser.bb ) {
	      var bb = "blackberry";

	      matched.browser = bb;
	      browser[bb] = true;
	    }

	    // Opera 15+ are identified as opr
	    if ( browser.opr ) {
	      var opera = "opera";

	      matched.browser = opera;
	      browser[opera] = true;
	    }

	    // Stock Android browsers are marked as Safari on Android.
	    if ( browser.safari && browser.android ) {
	      var android = "android";

	      matched.browser = android;
	      browser[android] = true;
	    }

	    // Kindle browsers are marked as Safari on Kindle
	    if ( browser.safari && browser.kindle ) {
	      var kindle = "kindle";

	      matched.browser = kindle;
	      browser[kindle] = true;
	    }

	     // Kindle Silk browsers are marked as Safari on Kindle
	    if ( browser.safari && browser.silk ) {
	      var silk = "silk";

	      matched.browser = silk;
	      browser[silk] = true;
	    }

	    // Assign the name and platform variable
	    browser.name = matched.browser;
	    browser.platform = matched.platform;
	    return browser;
	  }

	  // Run the matching process, also assign the function to the returned object
	  // for manual, jQuery-free use if desired
	  window.jQBrowser = uaMatch( window.navigator.userAgent );
	  window.jQBrowser.uaMatch = uaMatch;

	  // Only assign to jQuery.browser if jQuery is loaded
	  if ( jQuery ) {
	    jQuery.browser = window.jQBrowser;
	  }

	  return window.jQBrowser;
	}));


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	// Simple class that posts login data to the account chooser discovery url on
	// successful logins. This url is a cross origin okta domain that can be
	// accessed by any okta origin interested in seeing which accounts the current
	// user has signed into.
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Handlebars) {

	  // Max time to wait for a response from account chooser iframe after
	  // login message is sent.
	  var MAX_WAIT = 1000;

	  var iframeTpl = Handlebars.compile('\
	    <iframe data-se="account-chooser" src="{{src}}" style="display:none"></iframe>\
	  ');

	  function AccountChooser(options) {
	    var iframe = $(iframeTpl({ src: options.discoveryUrl }));
	    this.discoveryUrl = options.discoveryUrl;
	    this.iframe = iframe.get(0);
	    $(function () {
	      $('body').append(iframe);
	    });
	  }

	  // Posts login message to account chooser iframe. The account chooser
	  // will store this data in localStorage for future cross origin access.
	  AccountChooser.prototype.login = function (userProfile, cb) {
	    var msg, matches, targetOrigin, maxTimeout;

	    msg = {
	      messageType: 'login',
	      displayName: userProfile.firstName + ' ' + userProfile.lastName,
	      login: userProfile.login
	    };

	    // Automatically redirect after MAX_WAIT ms in the event that the account
	    // chooser domain is too slow to respond.
	    maxTimeout = setTimeout(cb, MAX_WAIT);

	    matches = new RegExp('^https?://[^/]+').exec(this.discoveryUrl);
	    targetOrigin = matches ? matches[0] : null;

	    if (targetOrigin) {
	      // 1. Setup the response message handler
	      $(window).on('message.accountChooser', function (e) {
	        // Only listen to messages from the discovery domain
	        if (e.originalEvent.origin !== targetOrigin) {
	          return;
	        }
	        if (e.originalEvent.data.messageType === 'processed_login') {
	          $(window).off('message.accountChooser');
	          clearTimeout(maxTimeout);
	          cb();
	        }
	      });

	      // 2. Send the user profile data to the account chooser origin
	      this.iframe.contentWindow.postMessage(msg, targetOrigin);
	    }
	  };

	  return AccountChooser;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	// Ported over from the original implementation:
	// /js/sections/mobile-sso-login.js
	/* eslint camelcase: 0 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function ($, Util, Handlebars) {

	  var tpl = Handlebars.compile,
	      tokenTpl = tpl('/oauth2/token?client_id={{clientId}}&grant_type=session&code={{clientCode}}'),
	      codeTpl = tpl('/oauth2/code?client_id={{clientId}}'),
	      oktaSSOTpl = tpl('oktasso://v1/oauth/validate/{{userCode}}'),
	      oktaUniversalLinkTpl = tpl('{{domain}}/auth/oktamobile/?siteName={{siteName}}&org={{org}}' + '&userName={{userName}}&appName={{appName}}&appExternalKey={{appExternalKey}}' + '&appLinkId={{appLinkId}}&userCode={{userCode}}&redirectUrl={{redirectUrl}}' + '&timeoutInterval={{timeoutInterval}}'),
	      mobileLink = 'https://itunes.apple.com/us/app/okta-mobile/id580709251?mt=8';

	  /* eslint max-params: [2, 6], max-statements: [2, 29] */
	  return function initMobileSSO(fromUri, params) {
	    var linkParams = params;
	    var oktaMobile = {
	      clientCode: undefined,
	      userCode: undefined,
	      pollInterval: 5000,
	      // 10 mintues -- Okta OAuth code expiration time; see OktaOAuth20Service.OAUTH_CODE_EXPIRATION_MINUTES
	      timeoutInterval: 600000,
	      clientId: 'caphxcQKPOVOIJUGAXIC',
	      requireUserTrigger: true,
	      manualLogin: false
	    };

	    var timeoutTimeMs;

	    var screens = {
	      accessScreenId: 'mobileSSO_access',
	      openingScreenId: 'mobileSSO_opening',
	      loadingScreenId: 'mobileSSO_loading',
	      traditionalLoginScreenId: 'mobileSSO_traditionalLogin',
	      errorScreenId: 'mobileSSO_error'
	    };

	    function showScreen(screenId) {
	      $.each(screens, function (key, val) {
	        $('#' + val).toggle(val === screenId);
	      });
	    }

	    function userCodeSuccessCallback(userCode) {
	      window.location.href = oktaSSOTpl({ userCode: userCode });
	    }

	    function userCodeSuccessCallbackForUinversalLink(linkParams) {
	      var link = oktaUniversalLinkTpl({ domain: linkParams.domain,
	        siteName: linkParams.siteName,
	        org: linkParams.org,
	        userName: linkParams.userName,
	        appName: linkParams.appName,
	        appExternalKey: linkParams.appExternalKey,
	        appLinkId: linkParams.appLinkId,
	        userCode: linkParams.userCode,
	        redirectUrl: linkParams.redirectUrl,
	        timeoutInterval: oktaMobile.timeoutInterval
	      });
	      window.location.href = link;
	    }

	    function pollOnOAuthCode() {
	      if (oktaMobile.manualLogin) {
	        return;
	      }

	      var currentTimeMs = Date.now();
	      if (timeoutTimeMs !== undefined && currentTimeMs > timeoutTimeMs) {
	        showScreen(screens.errorScreenId);
	      }

	      if (oktaMobile.timeoutTimeMs === undefined || currentTimeMs <= timeoutTimeMs + oktaMobile.timeoutInterval * 10) {
	        $.ajax({
	          type: 'POST',
	          url: tokenTpl({ clientId: oktaMobile.clientId, clientCode: oktaMobile.clientCode }),
	          dataType: 'json',
	          success: function success(data) {
	            if (data.session && data.session.length > 0) {
	              Util.postToUrl(fromUri, $('body'));
	            } else {
	              setTimeout(pollOnOAuthCode, oktaMobile.pollInterval);
	            }
	          },
	          error: function error() {
	            setTimeout(pollOnOAuthCode, oktaMobile.pollInterval);
	          }
	        });
	      }
	    }

	    function requestOAuthCode() {
	      timeoutTimeMs = Date.now() + oktaMobile.timeoutInterval;
	      $.ajax({
	        type: 'POST',
	        url: codeTpl({ clientId: oktaMobile.clientId }),
	        dataType: 'json',
	        success: function success(data) {
	          oktaMobile.clientCode = data.client_code;
	          oktaMobile.userCode = data.user_code;

	          showScreen(screens.openingScreenId);
	          setTimeout(pollOnOAuthCode, oktaMobile.pollInterval);
	          userCodeSuccessCallback(data.user_code);
	        },
	        error: function error() {
	          showScreen(screens.errorScreenId);
	        }
	      });
	    }

	    function requestOAuthCodeForUinversalLink() {
	      timeoutTimeMs = Date.now() + oktaMobile.timeoutInterval;
	      $.ajax({
	        type: 'POST',
	        url: codeTpl({ clientId: oktaMobile.clientId }),
	        dataType: 'json',
	        success: function success(data) {
	          oktaMobile.clientCode = data.client_code;
	          oktaMobile.userCode = data.user_code;
	          linkParams.userCode = data.user_code;

	          setTimeout(pollOnOAuthCode, oktaMobile.pollInterval);
	          $('#mobileDeviceTrustLoginButton').click(launchOktaMobileForUniversalLink);
	          $('#mobileDeviceTrustExpiredLoginButton').click(pureLaunchOktaMobileForUniversalLink);
	        },
	        error: function error() {
	          showScreen(screens.errorScreenId);
	        }
	      });
	    }

	    function launchOktaMobileForUniversalLink() {
	      showScreen(screens.loadingScreenId);
	      userCodeSuccessCallbackForUinversalLink(linkParams);
	    }

	    function pureLaunchOktaMobileForUniversalLink() {
	      userCodeSuccessCallbackForUinversalLink(linkParams);
	    }

	    function showTraditionalLogin() {
	      // Note: This differs from the original implementation in that it just
	      // toggles to the new login flow
	      // 1. Remove all screens
	      showScreen();
	      oktaMobile.manualLogin = true;
	      // 2. Display new login flow, minus footer
	      $('#signin-container').show();
	      $('#mobileSSO_overlay').hide();
	    }

	    function init() {
	      if (oktaMobile.requireUserTrigger === false) {
	        oktaMobile.showScreen(screens.openingScreenId);
	        requestOAuthCode();
	      } else {
	        if (linkParams && linkParams.domain) {
	          requestOAuthCodeForUinversalLink();
	        } else {
	          $('#mobileSSOLoginButton').click(requestOAuthCode);
	        }
	      }

	      $('#getOktaMobileButton').click(function () {
	        window.location.href = mobileLink;
	      });

	      $('#traditionalLoginButton, #returnToLoginButton').click(showTraditionalLogin);
	    }

	    $(init);
	  };
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery Smart Banner
	 * Copyright (c) 2012 Arnold Daniels <arnold@jasny.net>
	 * Based on 'jQuery Smart Web App Banner' by Kurt Zenisek @ kzeni.com
	 */
	(function (root, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else {
	    factory(root.jQuery);
	  }
	})(this, function ($) {
	    var SmartBanner = function (options) {
	        this.origHtmlMargin = parseFloat($('html').css('margin-top')); // Get the original margin-top of the HTML element so we can take that into account
	        this.options = $.extend({}, $.smartbanner.defaults, options);

	        var standalone = navigator.standalone; // Check if it's already a standalone web app or running within a webui view of an app (not mobile safari)
	        var UA = navigator.userAgent;

	        // Detect banner type (iOS or Android)
	        if (this.options.force) {
	            this.type = this.options.force;
	        } else if (UA.match(/Windows Phone/i) !== null && UA.match(/Edge|Touch/i) !== null) {
	            this.type = 'windows';
	        } else if (UA.match(/iPhone|iPod/i) !== null || (UA.match(/iPad/) && this.options.iOSUniversalApp)) {
	            if (UA.match(/Safari/i) !== null &&
	               (UA.match(/CriOS/i) !== null ||
	               window.Number(UA.substr(UA.indexOf('OS ') + 3, 3).replace('_', '.')) < 6)) this.type = 'ios'; // Check webview and native smart banner support (iOS 6+)
	        } else if (UA.match(/\bSilk\/(.*\bMobile Safari\b)?/) || UA.match(/\bKF\w/) || UA.match('Kindle Fire')) {
	            this.type = 'kindle';
	        } else if (UA.match(/Android/i) !== null) {
	            this.type = 'android';
	        }

	        // Don't show banner if device isn't iOS or Android, website is loaded in app or user dismissed banner
	        if (!this.type || standalone || this.getCookie('sb-closed') || this.getCookie('sb-installed')) {
	            return;
	        }

	        // Calculate scale
	        this.scale = this.options.scale == 'auto' ? $(window).width() / window.screen.width : this.options.scale;
	        if (this.scale < 1) this.scale = 1;

	        // Get info from meta data
	        var meta = $(this.type == 'android' ? 'meta[name="google-play-app"]' :
	            this.type == 'ios' ? 'meta[name="apple-itunes-app"]' :
	            this.type == 'kindle' ? 'meta[name="kindle-fire-app"]' : 'meta[name="msApplication-ID"]');
	        if (meta.length === 0) return;

	        // For Windows Store apps, get the PackageFamilyName for protocol launch
	        if (this.type == 'windows') {
	            this.appId = $('meta[name="msApplication-PackageFamilyName"]').attr('content');
	        } else {
	            // Try to pull the appId out of the meta tag and store the result
	            var parsedMetaContent = /app-id=([^\s,]+)/.exec(meta.attr('content'));

	            if(parsedMetaContent) {
	              this.appId = parsedMetaContent[1];
	            } else {
	              return;
	            }
	        }

	        this.title = this.options.title ? this.options.title : meta.data('title') || $('title').text().replace(/\s*[|\-·].*$/, '');
	        this.author = this.options.author ? this.options.author : meta.data('author') || ($('meta[name="author"]').length ? $('meta[name="author"]').attr('content') : window.location.hostname);
	        this.iconUrl = meta.data('icon-url');
	        this.price = meta.data('price');

	        // Set default onInstall callback if not set in options
	        if (typeof this.options.onInstall === 'function') {
	            this.options.onInstall = this.options.onInst", "base64"));
  res.write(new Buffer("all;
	        } else {
	            this.options.onInstall = function () {};
	        }

	        // Set default onClose callback if not set in options
	        if (typeof this.options.onClose === 'function') {
	            this.options.onClose = this.options.onClose;
	        } else {
	            this.options.onClose = function () {};
	        }

	        // Create banner
	        this.create();
	        this.show();
	        this.listen();
	    };

	    SmartBanner.prototype = {

	        constructor: SmartBanner

	      , create: function () {
	            var iconURL;
	            var link = (this.options.url ? this.options.url : (this.type == 'windows' ? 'ms-windows-store:navigate?appid=' : (this.type == 'android' ? 'market://details?id=' : (this.type == 'kindle' ? 'amzn://apps/android?asin=' : 'https://itunes.apple.com/' + this.options.appStoreLanguage + '/app/id'))) + this.appId);
	            var price = this.price || this.options.price;
	            var inStore = price ? price + ' - ' + (this.type == 'android' ? this.options.inGooglePlay : this.type == 'kindle' ? this.options.inAmazonAppStore : this.type == 'ios' ? this.options.inAppStore : this.options.inWindowsStore) : '';
	            var gloss = this.options.iconGloss === null ? (this.type=='ios') : this.options.iconGloss;

	            if (this.type == 'android' && this.options.GooglePlayParams) {
	              link = link + '&referrer=' + this.options.GooglePlayParams;
	            }

	            var banner = '<div id="smartbanner" class="' + this.type + '"><div class="sb-container"><a href="#" class="sb-close">&times;</a><span class="sb-icon"></span><div class="sb-info"><strong>' + this.title + '</strong><span>' + this.author + '</span><span>' + inStore + '</span></div><a href="' + link + '" class="sb-button"><span>' + this.options.button + '</span></a></div></div>';
	            (this.options.layer) ? $(this.options.appendToSelector).append(banner) : $(this.options.appendToSelector).prepend(banner);

	            if (this.options.icon) {
	                iconURL = this.options.icon;
	            } else if(this.iconUrl) {
	                iconURL = this.iconUrl;
	            } else if ($('link[rel="apple-touch-icon-precomposed"]').length > 0) {
	                iconURL = $('link[rel="apple-touch-icon-precomposed"]').attr('href');
	                if (this.options.iconGloss === null) gloss = false;
	            } else if ($('link[rel="apple-touch-icon"]').length > 0) {
	                iconURL = $('link[rel="apple-touch-icon"]').attr('href');
	            } else if ($('meta[name="msApplication-TileImage"]').length > 0) {
	              iconURL = $('meta[name="msApplication-TileImage"]').attr('content');
	            } else if ($('meta[name="msapplication-TileImage"]').length > 0) { /* redundant because ms docs show two case usages */
	              iconURL = $('meta[name="msapplication-TileImage"]').attr('content');
	            }

	            if (iconURL) {
	                $('#smartbanner .sb-icon').css('background-image','url(' + iconURL + ')');
	                if (gloss) $('#smartbanner .sb-icon').addClass('gloss');
	            } else{
	                $('#smartbanner').addClass('no-icon');
	            }

	            this.bannerHeight = $('#smartbanner').outerHeight() + 2;

	            if (this.scale > 1) {
	                $('#smartbanner')
	                    .css('top', parseFloat($('#smartbanner').css('top')) * this.scale)
	                    .css('height', parseFloat($('#smartbanner').css('height')) * this.scale)
	                    .hide();
	                $('#smartbanner .sb-container')
	                    .css('-webkit-transform', 'scale(' + this.scale + ')')
	                    .css('-msie-transform', 'scale(' + this.scale + ')')
	                    .css('-moz-transform', 'scale(' + this.scale + ')')
	                    .css('width', $(window).width() / this.scale);
	            }
	            $('#smartbanner').css('position', (this.options.layer) ? 'absolute' : 'static');
	        }

	      , listen: function () {
	            $('#smartbanner .sb-close').on('click',$.proxy(this.close, this));
	            $('#smartbanner .sb-button').on('click',$.proxy(this.install, this));
	        }

	      , show: function (callback) {
	            var banner = $('#smartbanner');
	            banner.stop();

	            if (this.options.layer) {
	                banner.animate({top: 0, display: 'block'}, this.options.speedIn).addClass('shown').show();
	                $(this.pushSelector).animate({paddingTop: this.origHtmlMargin + (this.bannerHeight * this.scale)}, this.options.speedIn, 'swing', callback);
	            } else {
	                if ($.support.transition) {
	                    banner.animate({top:0},this.options.speedIn).addClass('shown');
	                    var transitionCallback = function () {
	                        $('html').removeClass('sb-animation');
	                        if (callback) {
	                            callback();
	                        }
	                    };
	                    $(this.pushSelector).addClass('sb-animation').one($.support.transition.end, transitionCallback).emulateTransitionEnd(this.options.speedIn).css('margin-top', this.origHtmlMargin + (this.bannerHeight * this.scale));
	                } else {
	                    banner.slideDown(this.options.speedIn).addClass('shown');
	                }
	            }
	        }

	      , hide: function (callback) {
	            var banner = $('#smartbanner');
	            banner.stop();

	            if (this.options.layer) {
	                banner.animate({top: -1 * this.bannerHeight * this.scale, display: 'block'}, this.options.speedIn).removeClass('shown');
	                $(this.pushSelector).animate({paddingTop: this.origHtmlMargin}, this.options.speedIn, 'swing', callback);
	            } else {
	                if ($.support.transition) {
	                    if ( this.type !== 'android' )
	                      banner.css('top', -1 * this.bannerHeight * this.scale).removeClass('shown');
	                    else
	                      banner.css({display:'none'}).removeClass('shown');
	                    var transitionCallback = function () {
	                        $('html').removeClass('sb-animation');
	                        if (callback) {
	                            callback();
	                        }
	                    };
	                    $(this.pushSelector).addClass('sb-animation').one($.support.transition.end, transitionCallback).emulateTransitionEnd(this.options.speedOut).css('margin-top', this.origHtmlMargin);
	                } else {
	                    banner.slideUp(this.options.speedOut).removeClass('shown');
	                }
	            }
	        }

	      , close: function (e) {
	            e.preventDefault();
	            this.hide();
	            this.setCookie('sb-closed','true',this.options.daysHidden);
	            this.options.onClose(e);
	        }

	      , install: function (e) {
	            if (this.options.hideOnInstall) {
	                this.hide();
	            }
	            this.setCookie('sb-installed','true',this.options.daysReminder);
	            this.options.onInstall(e);
	        }

	      , setCookie: function (name, value, exdays) {
	            var exdate = new Date();
	            exdate.setDate(exdate.getDate() + exdays);
	            value = encodeURI(value) + ((exdays === null) ? '' : '; expires=' + exdate.toUTCString());
	            document.cookie = name + '=' + value + '; path=/;';
	        }

	      , getCookie: function (name) {
	            var i,x,y,ARRcookies = document.cookie.split(";");
	            for (i = 0; i < ARRcookies.length; i++) {
	                x = ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));
	                y = ARRcookies[i].substr(ARRcookies[i].indexOf("=") + 1);
	                x = x.replace(/^\s+|\s+$/g,"");
	                if (x == name) {
	                    return decodeURI(y);
	                }
	            }
	            return null;
	        }

	      // Demo only
	      , switchType: function () {
	          var that = this;

	          this.hide(function () {
	              that.type = that.type == 'android' ? 'ios' : 'android';
	              var meta = $(that.type == 'android' ? 'meta[name="google-play-app"]' : 'meta[name="apple-itunes-app"]').attr('content');
	              that.appId = /app-id=([^\s,]+)/.exec(meta)[1];

	              $('#smartbanner').detach();
	              that.create();
	              that.show();
	          });
	      }
	    };

	    $.smartbanner = function (option) {
	        var $window = $(window);
	        var data = $window.data('smartbanner');
	        var options = typeof option == 'object' && option;
	        if (!data) $window.data('smartbanner', (data = new SmartBanner(options)));
	        if (typeof option == 'string') data[option]();
	    };

	    // override these globally if you like (they are all optional)
	    $.smartbanner.defaults = {
	        title: null, // What the title of the app should be in the banner (defaults to <title>)
	        author: null, // What the author of the app should be in the banner (defaults to <meta name="author"> or hostname)
	        price: 'FREE', // Price of the app
	        appStoreLanguage: 'us', // Language code for App Store
	        inAppStore: 'On the App Store', // Text of price for iOS
	        inGooglePlay: 'In Google Play', // Text of price for Android
	        inAmazonAppStore: 'In the Amazon Appstore',
	        inWindowsStore: 'In the Windows Store', //Text of price for Windows
	        GooglePlayParams: null, // Aditional parameters for the market
	        icon: null, // The URL of the icon (defaults to <meta name="apple-touch-icon">)
	        iconGloss: null, // Force gloss effect for iOS even for precomposed
	        button: 'VIEW', // Text for the install button
	        url: null, // The URL for the button. Keep null if you want the button to link to the app store.
	        scale: 'auto', // Scale based on viewport size (set to 1 to disable)
	        speedIn: 300, // Show animation speed of the banner
	        speedOut: 400, // Close animation speed of the banner
	        daysHidden: 15, // Duration to hide the banner after being closed (0 = always show banner)
	        daysReminder: 90, // Duration to hide the banner after "VIEW" is clicked *separate from when the close button is clicked* (0 = always show banner)
	        force: null, // Choose 'ios', 'android' or 'windows'. Don't do a browser check, just always show this banner
	        hideOnInstall: true, // Hide the banner after "VIEW" is clicked.
	        layer: false, // Display as overlay layer or slide down the page
	        iOSUniversalApp: true, // If the iOS App is a universal app for both iPad and iPhone, display Smart Banner to iPad users, too.
	        appendToSelector: 'body', //Append the banner to a specific selector
	        pushSelector: 'html' // What element is going to push the site content down; this is where the banner append animation will start.
	    };

	    $.smartbanner.Constructor = SmartBanner;


	    // ============================================================
	    // Bootstrap transition
	    // Copyright 2011-2014 Twitter, Inc.
	    // Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)

	    function transitionEnd () {
	        var el = document.createElement('smartbanner');

	        var transEndEventNames = {
	            WebkitTransition: 'webkitTransitionEnd',
	            MozTransition: 'transitionend',
	            OTransition: 'oTransitionEnd otransitionend',
	            transition: 'transitionend'
	        };

	        for (var name in transEndEventNames) {
	            if (el.style[name] !== undefined) {
	                return {end: transEndEventNames[name]};
	            }
	        }

	        return false; // explicit for ie8 (  ._.)
	    }

	    if ($.support.transition !== undefined)
	        return; // Prevent conflict with Twitter Bootstrap

	    // http://blog.alexmaccaw.com/css-transitions
	    $.fn.emulateTransitionEnd = function (duration) {
	        var called = false, $el = this;
	        $(this).one($.support.transition.end, function () {
	            called = true;
	        });
	        var callback = function () {
	            if (!called) $($el).trigger($.support.transition.end);
	        };
	        setTimeout(callback, duration);
	        return this;
	    };

	    $(function () {
	        $.support.transition = transitionEnd();
	    });
	    // ============================================================

	});


/***/ }
/******/ ]);
//# sourceMappingURL=main-loginpage.pack.js.map", "base64"));
  res.end();

  return __filename;
};
